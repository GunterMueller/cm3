%
% $Id: m3makefile,v 1.47 2008-04-18 10:06:05 jkrell Exp $
%
% Copyright (C) 1994, Digital Equipment Corporation
% All rights reserved.
% See the file COPYRIGHT for a full description.
%
% Last modified on Fri Feb 10 13:16:06 PST 1995 by kalsow
%

readonly Platform_info = {
  "AIX386"    : "i486-ibm-aix",
  "ALPHA_OSF" : "alpha-dec-osf1",
  "AMD64_DARWIN" : "i686-apple-darwin8.7.1",
  "AMD64_LINUX" : "amd64-pc-linux-gnu",
  "AP3000"    : "apollo68-bsd",
  "ARM"       : "arm--riscos",
  "BSDI4"     : "i386-unknown-freebsdelf",
  "DS3100"    : "decstation",
  "FBSD_ALPHA": "alpha-unknown-freebsd",
  "FreeBSD"   : "i486-unknown-bsd",
  "FreeBSD2"  : "i486-unknown-freebsd",
  "FreeBSD3"  : "i386-unknown-freebsd3",
  "FreeBSD4"  : "i386-unknown-freebsd4",
  "HP300"     : "m68k-hp-hpux",
  "HPPA"      : "hppa1.1-hp-hpux",
  "IBMR2"     : "rs6000-ibm-aix3.2",
  "IBMRT"     : "romp-ibm-aos",
  "IRIX5"     : "mips-sgi-irix5",
  "LINUX"     : "i686-pc-linux-gnuaout",
  "LINUXELF"  : "i686-pc-linux-gnu",
  "LINUXLIBC6": "i686-pc-linux-gnu",
  "NEXT"      : "next-bsd",
  "NT386"     : "i686-pc-mingw32",
  "NT386GNU"  : "i686-pc-cygwin",
  "OKI"       : "i860--sysv4.0",
  "SEQUENT"   : "i386-sequent-bsd",
  "SOLgnu"    : "sparc-sun-solaris2",
  "SOLsun"    : "sparc-sun-solaris2",
  "SPARC"     : "sparc-sun-sunos4.1",
  "SUN3"      : "m68k-sun-sunos4.1",
  "SUN386"    : "i386-sun-sunos4.1",
  "Tru64v5"   : "alpha-dec-osf1",
  "UMAX"      : "encore-bsd",
  "VAX"       : "vax-dec-ultrix",
  "I386_DARWIN" : "i686-apple-darwin8.7.1",
  "PPC_DARWIN"  : "powerpc-apple-darwin6.3",
  "PPC_LINUX"   : "powerpc-apple-linuxelf",
  "NetBSD2_i386" : "i386-unknown-netbsdelf"
}

readonly proc TargetWordSize (Target) is
  if {"ALPHA_OSF":1,"AMD64_DARWIN":1,"AMD64_LINUX":1,"AMD64_NT":1,
      "AMD64_FREEBSD":1,"AMD64_NETBSD":1,"AMD64_OPENBSD":1,"AMD64_SOLARIS":1,
      "IA64_NT":1,"FBSD_ALPHA":1,"Tru64v5":1} contains Target
    return "64"
  end
  return "32"
end

readonly proc TargetExeExtension (Target) is
  if {"NT386":1,"NT386GNU":1,"AMD64_NT":1,"IA64_NT":1,"ARM_CE":1} contains Target
    return ".exe"
  else
    return ""
  end
end

readonly proc HostIsNT () is
  return equal ($OS, "Windows_NT")
end

proc exists (x) is
  return not stale (x, x)
end

readonly proc GNU_platform (x) is
  if Platform_info contains x
    return Platform_info{x}
  else
    error ("GNU platform is not known for \"" & x & "\"")
    return "unknown-unknown-unknown"
  end
end

readonly m3cc_config = {

  "HPPA"  : "--with-gnu-as",
  % The HP assembler doesn't understand inline debugger info.

  "IRIX5" : "--with-stabs --with-gnu-as"
  % mips-sgi-irix5 does not support debugging using the native
  % assembler.  If you don't have gas, delete the config options above.
  % You will need the latest version of gas (binutils-2.5 or better).
  % --with-stabs is necessary because Modula-3 v3.3 generates funny
  % symbol names that can't be parsed by the ECOFF debugging
  % directives.  [Modula-3 v3.4 and later don't generate funny
  % symbol names. -- Bill Kalsow 1/13/94]

} % m3cc_config

readonly proc get_config (target) is
  if m3cc_config contains target
    return m3cc_config {target}
  else
    return ""
  end
end

readonly proc get_overrides (nm, ov) is
  if equal (ov, "*")
    return ""
  else
    return format ("%s=\"%s\" ", nm, ov)
  end
end

%
% star means default
% These are meant to come from the config file, but it can omit them
%
if not defined("GNU_CC")     GNU_CC     = "*"    end
if not defined("GNU_CFLAGS") GNU_CFLAGS = "*"    end
if not defined("GNU_MAKE")   GNU_MAKE   = "make" end

% check for overrides, otherwise use the defaults from the configuration file
if not defined ("M3CC_HOST")    M3CC_HOST   = TARGET     end
if not defined ("M3CC_TARGET")  M3CC_TARGET = TARGET     end
if not defined ("M3CC_CC")      M3CC_CC     = GNU_CC     end
if not defined ("M3CC_CFLAGS")  M3CC_CFLAGS = GNU_CFLAGS end
if not defined ("M3CC_MAKE")    M3CC_MAKE   = GNU_MAKE   end
if not defined ("M3CC_CONFIG")  M3CC_CONFIG = get_config (M3CC_TARGET) end

% figure out where we're going to build the beast
local build_dir = "."  % let m3build set the build directory
if not equal (M3CC_HOST, M3CC_TARGET)
  build_dir = "../" & BUILD_DIR & "-" & M3CC_TARGET
end

%
% fs_canonical_pn is not yet implemented, so use getwd instead
% getwd isn't in current bootstrap tools, so fallback further
% Older tools don't implement path (). In which case, you don't get
% our configuration of gmp and mpfr (see ConfigureLib).
%
if defined ("xxxfs_canonical_pn")
  build_dir = fs_canonical_pn (build_dir)
else if defined ("xxxgetwd")
  build_dir =  (getwd () & "/" & build_dir)
else if defined ("path")
  build_dir =  (path () & "/../" & BUILD_DIR & "/" & build_dir)
end end end
write("# build_dir = " & build_dir & "\n")

%
% make sure the derived directory exists
%
if not exists (build_dir)
  exec ("mkdir", build_dir)
end

m3cc_ResponseFileCounter = "0"

readonly proc m3cc_Run (x) is
  if HostIsNT ()
    local readonly Temp = "_m3sh" & m3cc_ResponseFileCounter & ".sh"
    > Temp in
      write(x)
    end
    %
    % Quake can't do math, or generate unique temp files.
    % Uniqueness is not critical here, it is merely useful
    % while debugging to go back and see the temp files.
    %
    Counter =
        { "0":"1","1":"2","2":"3","3":"4","4":"5",
          "5":"6","6":"7","7":"8","8":"9","9":"0", }{m3cc_ResponseFileCounter}

    write("sh ./" & Temp & " (" & x & ")" & CR)
    exec("sh ./" & Temp)
  else
    exec(x)
  end
end

done  = ".configure-done"
donep = build_dir & "/" & done
if defined ("FORCE")
  m3cc_Run("-cd " & build_dir & " && test -f Makefile && " & M3CC_MAKE & " distclean")
  m3cc_Run("-cd " & build_dir & " && rm -f cm3cg.exe cm3cg")
  m3cc_Run("-rm -f " & donep)
end

readonly proc ConfigureLib (x) is
%
% Some of these comments are speculation.
%
% gcc has relatively recently become dependent on libmpfr and libgmp.
%
% gmp is the GNU Multiple Precision library.
% mpfr is the Multiple Precision Floatingpoint/Rounding library.
% gcc uses these to accurately portable simulate target integer
% and floating point arithmetic, such as to propagate constant expressions, etc.,
% presumably. This is a relatively new dependency for gcc, introduced around 4.2 or 4.3.
%
% One or both of these are commonly not preinstalled on systems, or
% if they are installed on a system that needs to build cm3cg, they
% might not be in the standard locations.
%
% Here we do two things:
%  Probe non-standard locations for their install.
%  Conspire to have them be statically linked.
%
% The parameter a is "gmp" or "mpfr" which leads to strings such as:
%  /usr/lib/libgmp.a
%  /usr/lib/libmpfr.a
%  /usr/include/gmp.h
%  /usr/include/mpfr.h
%
% NOTE that we know/assume the "key" files x.h and libx.a.
% We know/assume that there are multiple headers and therefore do not engage in attempting
% to copy them, since we don't need to. We know/assume that libx.a and libx.so are colocated
% and that copying just libx.a into an "isolated" location will yield static linking.
% This is perhaps sleazy and perhaps there is a better way. However it also seems pretty
% darn ok. Whether this for for Unixish NT systems remains to be seen, does not matter
% much, and can be fixed easily enough (e.g. x.lib instead of libx.a).
% This approach does not necessarily apply to arbitrary libraries, of course.
%
    %
    % Older tools can't form the full path; punt.
    %
    if not defined ("path")
      return ""
    end

    local Lib = ""
    local Include = ""
    %
    % Probing the user's home directory is probably reasonable.
    % Importing the source for these into cm3 is probably reasonable.
    %
    foreach Bits in [TargetWordSize(M3CC_TARGET), ""]
      if not Lib
        foreach Candidate in ["/usr/contrib", "/usr/local", "/usr" ]
          if not Lib
            local CandidateLib = Candidate & "/lib" & Bits
            local CandidateInclude = Candidate & "/include"
            if exists (CandidateLib & "/lib" & x & ".a") and exists (CandidateInclude & "/" & x & ".h")
              Lib = CandidateLib
              Include = CandidateInclude
              % break out of loops
            end
          end
        end
      end
    end
    if not Lib
        error("lib" & x & ".a and " & x & ".h not found, having looked in /usr/{,local,contrib}/{lib{,32,64},include}")
    end

    %
    % cm3 -commands does not print the copy as it ought to.
    %
    fs_cp(Lib & "/lib" & x & ".a", build_dir & "/lib" & x & ".a")
    write("copy " & Lib & "/lib" & x & ".a " & build_dir & "/lib" & x & ".a\n")

    local Config = " --with-" & x & "-include=" & Include & " --with-" & x & "-lib=" & build_dir
    write (x & ": " & Config & "\n")
    return Config
end

if not defined ("no_config")
  % configure the sources
  if not exists (donep)
    local Configure = ""
    if equal (M3CC_TARGET, "xxxLINUXLIBC6") or equal (M3CC_TARGET, "xxxAMD64_LINUX")
        Configure = Configure & " --enable-targets=" & GNU_platform ("LINUXLIBC6") & "," & GNU_platform ("AMD64_LINUX")
    else
      if equal (M3CC_TARGET, "xxxI386_DARWIN") or equal (M3CC_TARGET, "xxxAMD64_DARWIN")
        Configure = Configure & " --enable-targets=" & GNU_platform ("I386_DARWIN") & "," & GNU_platform ("AMD64_DARWIN")
      else
        if not equal (M3CC_HOST, M3CC_TARGET)
          Configure = Configure & " --target=" & GNU_platform (M3CC_TARGET)
        end
      end
    end
    Configure = Configure & " --srcdir=../gcc"
    Configure = Configure & " --disable-bootstrap"
    %Configure = Configure & " --disable-libgcc"
    %Configure = Configure & " --disable-libgomp"
    %Configure = Configure & " --disable-libmudflap"
    %Configure = Configure & " --disable-libssp"
    Configure = Configure & " --disable-multilib"
    Configure = Configure & " --disable-nls"
    %Configure = Configure & " --disable-shared"
    Configure = Configure & " --enable-languages=m3cg"
    Configure = Configure & ConfigureLib("mpfr")
    Configure = Configure & ConfigureLib("gmp")
    m3cc_Run (["cd", build_dir, "; ../gcc/configure", M3CC_CONFIG, Configure, "&& echo \"done\" > " & done])
  end
end

% check for non-default flags
ARG0 = get_overrides ("CC", M3CC_CC)
ARG1 = get_overrides ("CFLAGS", M3CC_CFLAGS)

% build commands
cmds = "cd " & build_dir & "; " & M3CC_MAKE & " " & ARG0 & " " & ARG1

EXE = TargetExeExtension (M3CC_TARGET)

readonly proc postcp() is
  pSrc  = build_dir & "/gcc/m3cgc1" & EXE
  pDest = build_dir & "/cm3cg" & EXE
  if stale(pDest, pSrc)
    cp_if(pSrc, pDest)
  end
  if equal (M3CC_HOST, "DS3100") or equal (M3CC_HOST, "ALPHA_OSF")
    pSrc = build_dir & "/gcc/mips-tfile"
    pDest = build_dir & "/mips-tfile"
    if stale(pDest, pSrc)
      cp_if(pSrc, pDest)
    end
  end
end

if equal (M3CC_HOST, M3CC_TARGET)
  BindExport ("cm3cg" & EXE)
  if equal (M3CC_HOST, "DS3100") or equal (M3CC_HOST, "ALPHA_OSF")
    BindExport ("mips-tfile")
  end
end

% finally, compile it
m3cc_Run (cmds)
%write (cmds & EOL)
if defined("postcp")
  postcp()
end
