%
% Copyright (C) 1994, Digital Equipment Corporation
% All rights reserved.
% See the file COPYRIGHT for a full description.
%

readonly Platform_info = {
  "AIX386"    : "i486-ibm-aix",
  "ALPHA_OSF" : "alpha-dec-osf1",
  "AMD64_DARWIN" : "i686-apple-darwin8.7.1",
  "AMD64_LINUX" : "amd64-pc-linux-gnu",
  "AMD64_NT"  : "amd64-pc-mingw32",
  "AP3000"    : "apollo68-bsd",
  "ARM"       : "arm-riscos",
  "BSDI4"     : "i386-unknown-freebsdelf",
  "DS3100"    : "decstation",
  "FBSD_ALPHA": "alpha-unknown-freebsd",
  "FreeBSD"   : "i486-unknown-bsd",
  "FreeBSD2"  : "i486-unknown-freebsd",
  "FreeBSD3"  : "i386-unknown-freebsd3",
  "FreeBSD4"  : "i386-unknown-freebsd4",
  "HP300"     : "m68k-hp-hpux",
  "HPPA"      : "hppa1.1-hp-hpux",
  "IBMR2"     : "rs6000-ibm-aix3.2",
  "IBMRT"     : "romp-ibm-aos",
  "IRIX5"     : "mips-sgi-irix5",
  "LINUX"     : "i686-pc-linux-gnuaout",
  "LINUXELF"  : "i686-pc-linux-gnu",
  "LINUXLIBC6": "i686-pc-linux-gnu",
  "NEXT"      : "next-bsd",
  "NT386"     : "i686-pc-mingw32",
  "OKI"       : "i860-sysv4.0",
  "SEQUENT"   : "i386-sequent-bsd",
  "SOLgnu"    : "sparc-sun-solaris2",
  "SOLsun"    : "sparc-sun-solaris2",
  "SPARC"     : "sparc-sun-sunos4.1",
  "SPARC32_LINUX" : "sparc-linux-gnu",
  "SPARC64_LINUX" : "sparc64-linux-gnu",
  "SPARC32_OPENBSD" : "sparc-openbsd",
  "SPARC64_OPENBSD" : "sparc64-openbsd",
  "SUN3"      : "m68k-sun-sunos4.1",
  "SUN386"    : "i386-sun-sunos4.1",
  "Tru64v5"   : "alpha-dec-osf1",
  "UMAX"      : "encore-bsd",
  "VAX"       : "vax-dec-ultrix",
  "I386_DARWIN" : "i686-apple-darwin8.7.1",
  "PPC_DARWIN"  : "powerpc-apple-darwin6.3",
  "PPC_LINUX"   : "powerpc-apple-linuxelf",
  "PPC32_OPENBSD" : "powerpc-openbsd",
  "NetBSD2_i386" : "i386-unknown-netbsdelf"
}

%
% not currently used
%
readonly proc Platform_WordSize (Platform) is
  if {"ALPHA_OSF":1,"AMD64_DARWIN":1,"AMD64_LINUX":1,"AMD64_NT":1,
      "AMD64_FREEBSD":1,"AMD64_NETBSD":1,"AMD64_OPENBSD":1,"AMD64_SOLARIS":1,
      "IA64_NT":1,"FBSD_ALPHA":1,"Tru64v5":1,"SPARC64_LINUX":1,"SPARC64_OPENBSD":1} contains Platform
    return "64"
  end
  return "32"
end

readonly proc Platform_IsOpenBSD (Platform) is
  return {"PPC32_OPENBSD":1,"SPARC64_OPENBSD":1} contains Platform
end

readonly proc ApplyPatches (Platform) is
  if not Platform_IsOpenBSD (Platform)
    return
  end
  pushd ("../gcc")
  foreach a in fs_lsfiles ("../src/patches/openbsd", FALSE)
    if not tcontains(a, ".done")
      if not fs_exists (a & ".done")
        if not tcontains(a, "readme.txt")
          exec("patch -z .orig -p0 < " & a)
          > a & ".done" in
            write("")
          end
        end
      end
    end
  end
  popd ()
end

readonly proc HostIsNT () is
  return equal ($OS, "Windows_NT")
end

local DevNull1 = "1>/dev/null"
local DevNull2 = "2>/dev/null"
if HostIsNT ()
  DevNull1 = "1>nul:"
  DevNull2 = "2>nul:"
end

proc exists (x) is
  return not stale (x, x)
end

readonly proc GNU_platform (x) is
  if Platform_info contains x
    return Platform_info{x}
  else
    error ("GNU platform is not known for \"" & x & "\"")
    return "unknown-unknown-unknown"
  end
end

readonly m3cc_config = {

  %
  % The NT386GNU hosted tools work.
  % The native ones do not.
  % -disable-tls consistently to reduce noise
  % when comparing them.
  %
  "SPARC64_OPENBSD" : "-disable-tls",

  "HPPA"  : "-with-gnu-as",
  % The HP assembler doesn't understand inline debugger info.

  "IRIX5" : "-with-stabs -with-gnu-as"
  % mips-sgi-irix5 does not support debugging using the native
  % assembler.  If you don't have gas, delete the config options above.
  % You will need the latest version of gas (binutils-2.5 or better).
  % -with-stabs is necessary because Modula-3 v3.3 generates funny
  % symbol names that can't be parsed by the ECOFF debugging
  % directives.  [Modula-3 v3.4 and later don't generate funny
  % symbol names. -- Bill Kalsow 1/13/94]

} % m3cc_config

readonly proc get_config (target) is
  if m3cc_config contains target
    return m3cc_config {target}
  else
    return ""
  end
end

readonly proc get_overrides (nm, ov) is
  if equal (ov, "*")
    return ""
  else
    return format ("%s=\"%s\" ", nm, ov)
  end
end

%
% star means default
% These are meant to come from the config file, but it can omit them
%
if not defined("GNU_CC")     GNU_CC     = "*"    end
if not defined("GNU_CFLAGS") GNU_CFLAGS = "*"    end
if not defined("GNU_MAKE")   GNU_MAKE   = "make" end

if defined("HOST_GNU_MAKE")
  GNU_MAKE = HOST_GNU_MAKE
end

% check for overrides, otherwise use the defaults from the configuration file
if not defined ("M3CC_HOST")    M3CC_HOST   = TARGET     end
if not defined ("M3CC_TARGET")  M3CC_TARGET = TARGET     end
if not defined ("M3CC_CC")      M3CC_CC     = GNU_CC     end
if not defined ("M3CC_CFLAGS")  M3CC_CFLAGS = GNU_CFLAGS end
if not defined ("M3CC_MAKE")    M3CC_MAKE   = GNU_MAKE   end
if not defined ("M3CC_CONFIG")  M3CC_CONFIG = get_config (M3CC_TARGET) end

% figure out where we're going to build gcc
local build_dir = "."  % let m3build set the build directory
if not equal (M3CC_HOST, M3CC_TARGET)
  build_dir = "../" & BUILD_DIR & "-" & M3CC_TARGET
end

%
% make sure the derived directory exists
%
if not exists (build_dir)
  exec ("sh -c \"mkdir", build_dir, "\"")
end

m3cc_ResponseFileCounter = "0"

readonly proc m3cc_Run (x) is
  write(x & CR)
  %>> "_m3.log" in
  %  write(x & CR)
  %end
  if HostIsNT ()
    local readonly Temp = "_m3sh" & m3cc_ResponseFileCounter & ".sh"
    > Temp in
      write(x)
    end
    %
    % Quake can't do math, or generate uniquely named temp files.
    % Uniqueness is not critical here, it is merely useful
    % while debugging to go back and see the temp files.
    %
    Counter =
        { "0":"1","1":"2","2":"3","3":"4","4":"5",
          "5":"6","6":"7","7":"8","8":"9","9":"0", }{m3cc_ResponseFileCounter}

    exec("sh ./" & Temp)
  else
    exec(x)
  end
end

done  = ".configure-done"
donep = build_dir & "/" & done
if defined ("FORCE")
  % Why not just rm -rf build_dir/*?
  m3cc_Run("-cd " & build_dir & " && test -f Makefile && " & M3CC_MAKE & " distclean")
  delete_file(build_dir & "/cm3cg.exe")
  delete_file(build_dir & "/cm3cg")
  delete_file(build_dir & "/_m3.log")
  delete_file(donep)
end

%
% Configure does not seem to ferry environment variables from itself to make,
% so these must be specified on both the configure command and the make command.
%
local env = get_overrides ("CC", M3CC_CC) & get_overrides ("CFLAGS", M3CC_CFLAGS)
%
% Problems building gmp/mpfr:
%   Documentation is built into the source tree, leading cvs diff
%   to output a LOT of extra content, not good, avoid that.
%   Automake and autoconf are causing problems building on NT, even when they are installed.
%   We don't need their results usually. Libtool is also a problem, possibly a cascade.
%
env = env & " CC='gcc -g'"
env = env & " CFLAGS="
env = env & " AUTOCONF=echo"
env = env & " AUTOMAKE=echo"
env = env & " LEX='touch lex.yy.c'"
env = env & " MAKEINFO=echo"
M3CC_MAKE = M3CC_MAKE & " " & env
M3CC_CONFIG = M3CC_CONFIG & " " & env

ApplyPatches (M3CC_TARGET)

local Cross = not equal (M3CC_HOST, M3CC_TARGET)
local Native = not Cross

% check for non-default flags

if not defined ("no_config")
  % configure the sources
  if not exists (donep)
    local Configure = ""
    if Cross
      Configure = " -target=" & GNU_platform (M3CC_TARGET)
    end
    Configure = Configure & " -srcdir=../gcc"
    Configure = Configure & " -disable-bootstrap"
    Configure = Configure & " -disable-doc"
    Configure = Configure & " -disable-fixincludes"
    Configure = Configure & " -disable-intl"
    Configure = Configure & " -disable-libgcc"
    Configure = Configure & " -disable-libgomp"
    Configure = Configure & " -disable-libmudflap"
    Configure = Configure & " -disable-libssp"
    Configure = Configure & " -disable-multilib"
    Configure = Configure & " -disable-nls"
    Configure = Configure & " -disable-shared"
    Configure = Configure & " -enable-languages=m3cg"
    Configure = Configure & " -enable-targets=all"
    m3cc_Run (["cd", build_dir, "; ../gcc/configure", M3CC_CONFIG, Configure, " | tee -a _m3.log"])
    m3cc_Run (["cd", build_dir, "; echo \"done\" > " & done])
  end
end

readonly proc ProbeExeExtension (a) is
  return equal (TARGET, "NT386") or exists (a & ".exe")
end

readonly proc AppendExeExtension (a) is
  if ProbeExeExtension (a)
    return a & ".exe"
  end
  return a
end

local DoMipsTfile = (equal (M3CC_HOST, "DS3100") or equal (M3CC_HOST, "ALPHA_OSF"))

readonly proc postcp() is
  pSrc  = build_dir & "/gcc/m3cgc1"
  pDest = build_dir & "/cm3cg"
  if ProbeExeExtension (pSrc)
    pSrc = pSrc & ".exe"
	pDest = pDest & ".exe"
  end
  if stale(pDest, pSrc)
    cp_if(pSrc, pDest)
  end
  if DoMipsTfile
    pSrc = build_dir & "/gcc/mips-tfile"
    pDest = build_dir & "/mips-tfile"
    if stale(pDest, pSrc)
      cp_if(pSrc, pDest)
    end
  end
end

if Native
  BindExport (AppendExeExtension ("cm3cg"))
  if DoMipsTfile
    BindExport ("mips-tfile")
  end
end

%
% configure
%

cmds = "cd " & build_dir & "; " & M3CC_MAKE & " configure-host | tee -a _m3.log"
m3cc_Run (cmds)

proc Sed (file0, find, replace) is
  if not stale (file0, file0)
    local file1 = file0 & ".1"
    exec ("sed -e \"s/" & find & "/" & replace & "/\" < " & file0 & " > " & file1)
    if stale (file1, file0)
      cp_if (file0, file1)
    end
  end
end

%
% remove libiconv dependency
% It isn't needed, and stock Solaris install lacks it.
%
foreach dir in ["gcc", "libcpp", "libdecnumber", "mpfr", "mpfr/tests"]
  foreach file in ["Makefile", "auto-host.h", "config.h"]
    local file = dir & "/" & file
    if not stale (file, file)
      Sed (file, "^LIBICONV =.+$", "LIBICONV =")
      Sed (file, "^LIBICONV_DEP =.+$", "LIBICONV_DEP =")
      Sed (file, "^#define HAVE_ICONV 1$", "")
      Sed (file, "^#define HAVE_ICONV_H 1$", "")
      %
      % Configure is for some reason unable to find Cygwin /usr/bin/libtool.
      %
      if HostIsNT ()
        Sed (file, "@LIBTOOL@", "libtool")
      end
    end
  end
end

%
% Build only what is needed to build m3 backend, e.g. not the C frontend.
%
cmds = M3CC_MAKE & " all-gmp all-mpfr all-libcpp all-libdecnumber all-build-libiberty all-libiberty | tee -a _m3.log"
m3cc_Run (cmds)
cmds = "cd gcc ; " & M3CC_MAKE & " s-modes insn-config.h m3cg | tee -a _m3.log"
m3cc_Run (cmds)

postcp ()
