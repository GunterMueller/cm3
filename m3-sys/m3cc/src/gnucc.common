%
% Copyright (C) 1994, Digital Equipment Corporation
% All rights reserved.
% See the file COPYRIGHT for a full description.
%

%------------------------------------------------------------------------------

%
% This should be called gnucc.quake or gcc.quake, but I am assuming that code copies *.common
%
% This helps configure the compiler to use for building m3gdb and m3cc, which
% perhaps should be gcc, even if the C compiler is otherwise not gcc.
%
% For example on SOLsun.
%
% This also assists other configuration for the m3cc and m3gdb directories -- specifically ar.
%
%
% This is not general purpose code.
% It is specifically for use in the m3cc and m3gdb directories.
%

%------------------------------------------------------------------------------

% Check that env is defined.

env = env

%------------------------------------------------------------------------------

if not defined("HOST")
    HOST = TARGET
end

% check for overrides, otherwise use the defaults
% user can say cm3 -DM3CC_TARGET=FreeBSD4, for example.
%
% m3cc and m3gdb settings are presumed to be the same for any one
% invocation of cm3
%

if defined ("M3GDB_HOST")
    M3CC_HOST = M3GDB_HOST
else if defined ("M3CC_HOST")
    M3GDB_HOST = M3CC_HOST
else
    M3GDB_HOST = HOST
    M3CC_HOST = HOST
end end

if defined ("M3GDB_TARGET")
    M3CC_TARGET = M3GDB_TARGET
else if defined ("M3CC_TARGET")
    M3GDB_TARGET = M3CC_TARGET
else
    M3GDB_TARGET = TARGET
    M3CC_TARGET = TARGET
end end

if not defined ("M3CC_BUILD")   M3CC_BUILD  = TARGET     end

local Native = equal (M3CC_HOST, M3CC_TARGET) and equal (M3CC_HOST, M3CC_BUILD)

if Native and (equal(TARGET, "SOLgnu") or equal(TARGET, "SOLsun") or equal(TARGET, "SPARC32_SOLARIS")
        or equal(TARGET, "SPARC64_SOLARIS") or equal(TARGET, "I386_SOLARIS") or equal(TARGET, "AMD64_SOLARIS"))

    if equal($CC, "")
            and equal($CFLAGS, "")
            and not defined("GNU_CC")
            and not defined("GNU_CFLAGS")
            and not defined("M3CC_CC")
            and not defined("M3GDB_CC")
            and not defined("M3CC_CFLAGS")
            and not defined("M3GDB_CFLAGS")
            and not equal(try_exec("type gcc > /dev/null"), 0)

        % if gcc not in path and cc is, use cc
        % if cc -O2 gives expected error, use cc -O

        if equal(try_exec("type cc > /dev/null"), 0)
                and equal(try_exec("cc -O2 2>&1 | grep \"Warning: option -2 passed to ld\" > /dev/null"), 0)

            % Sun cc doesn't like -O2 and it causes configuring gcc to fail.
            % If /usr/sfw/bin/gcc exists, we should probably use that here.

            % Probably when we upgrade gcc we can remove a lot of this -- newer gcc can be
            % built with Sun cc.

            GNU_CC = "cc"
            GNU_CFLAGS = "-g -O"

            % M3CC_CC  = GNU_CC
            % M3GDB_CC = GNU_CC
            % M3CC_CFLAGS  = GNU_CFLAGS
            % M3GDB_CFLAGS = GNU_CFLAGS

            % libcpp/configure runs make to test its result and that fails if /usr/ccs/bin
            % isn't in $PATH, so just tell it the answer

            if equal($MAKE, "") and not equal(try_exec("type make > /dev/null"), 0)
                env = env & " am_cv_CC_dependencies_compiler_type=dashXmstdout "
            end
        else
            % if no gcc in path and no cc in path, try /usr/sfw/bin/gcc, which
            % is where Sun installs it
            %
            % TODO: try /usr/ccs/bin/cc or /usr/ucb/cc
            % Currently my /usr/ucb/cc prints "language optional software package not installed"
            % and I think if you do install a working cc, you get /usr/bin/cc anyway, which is in $PATH

            if equal(try_exec("file /usr/sfw/bin/gcc > /dev/null"), 0)
                GNU_CC = "/usr/sfw/bin/gcc"
                % M3CC_CC = GNU_CC
                % M3GDB_CC = GNU_CC

                % As above, libcpp/configure runs make to probe for dependency style
                % but there might not be any make so give it the answer.

                if equal($MAKE, "") and not equal(try_exec("type make > /dev/null"), 0)
                    env = env & " am_cv_CC_dependencies_compiler_type=gcc3 "
                end
            end
        end
    end

    % in a minimal environment, such as with an empty .profile, ar is not in the path
    % and building gcc fails as a result; gcc's build doesn't know to look in /usr/ccs/bin/ar

    if equal($AR, "") and not equal(try_exec("type ar > /dev/null"), 0)
        % SYSTEM_AR doesn't necessarily work
        if not equal(SYSTEM_AR, "ar") and equal(try_exec("type " & SYSTEM_AR & " > /dev/null"), 0)
            env = env & " AR=" & SYSTEM_AR & " "
        end
        if equal(SYSTEM_AR, "ar") and equal(try_exec("type /usr/ccs/bin/ar > /dev/null"), 0)
            env = env & " AR=/usr/ccs/bin/ar "
        end
    end
end

%------------------------------------------------------------------------------

%
% star means default
% These historically came from the config file.
%

if not defined("GNU_CC")     GNU_CC     = "*"    end
% consider changing this to "*"
% esp. once gcc/gdb in tree updated -- if they build ok with Sun cc
if not defined("GNU_CFLAGS") GNU_CFLAGS = "-g -O2"    end

%------------------------------------------------------------------------------
