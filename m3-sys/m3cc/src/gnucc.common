%
% Copyright (C) 1994, Digital Equipment Corporation
% All rights reserved.
% See the file COPYRIGHT for a full description.
%

%------------------------------------------------------------------------------

%
% This should be called gnucc.quake or gcc.quake, but I am assuming that code copies *.common
%
% This helps configure the compiler to use for building m3gdb and m3cc, which
% perhaps should be gcc, even if the C compiler is otherwise not gcc.
%
% For example on SOLsun.
%
% This also assists other configuration for the m3cc and m3gdb directories -- specifically ar.
%
%
% This is not general purpose code.
% It is specifically for use in the m3cc and m3gdb directories.
%

%------------------------------------------------------------------------------

% Check that env is defined.

env = env

%------------------------------------------------------------------------------

if not defined("HOST")
    HOST = TARGET
end

% check for overrides, otherwise use the defaults
% user can say cm3 -DM3CC_TARGET=FreeBSD4, for example.
%
% m3cc and m3gdb settings are presumed to be the same for any one
% invocation of cm3
%

M3CC_HOST = HOST

if not defined ("M3CC_TARGET")
    M3CC_TARGET = TARGET
end

M3CC_BUILD = HOST

proc NormalizePlatform(a) is
  local b = { "SOLgnu"      : "SPARC32_SOLARIS",
              "SOLsun"      : "SPARC32_SOLARIS",
              "LINUXLIB6"   : "I386_LINUX",
              "FreeBSD4"    : "I386_FREEBSD",
              "NT386"       : "I386_NT",
              "NT386GNU"    : "I386_CYGWIN",
              "NT386MINGNU" : "I386_MINGW"
            }
  if b contains a
    a = b{a}
  end
  return a
end

nHOST = NormalizePlatform(HOST)
nTARGET = NormalizePlatform(M3CC_TARGET)

Native = equal(nHOST, nTARGET)

proc FileExists (a) is
    return not stale (a, a)
end

if Native and (equal(nTARGET, "SPARC32_SOLARIS") or equal(TARGET, "SPARC64_SOLARIS")
       or equal(TARGET, "I386_SOLARIS") or equal(TARGET, "AMD64_SOLARIS"))

    local ccs = ""
    local gcc = ""

    if (   (not equal(try_exec("type ar   > /dev/null"), 0) and FileExists("/usr/ccs/bin/ar"))
        or (not equal(try_exec("type make > /dev/null"), 0) and FileExists("/usr/ccs/bin/make")))

        ccs = "/usr/ccs/bin:"

    end

    if equal($CC, "") and not equal(try_exec("type gcc > /dev/null"), 0)
        if FileExists("/usr/sfw/bin/gcc")
            gcc = "/usr/sfw/bin:"
        else if FileExists("/opt/csw/gcc4/bin/gcc")
            gcc = "/opt/csw/gcc4/bin:"
        end end
    end

    if ccs or gcc
        env = "PATH=\"" & gcc & ccs & "$PATH\""
    end
end

%------------------------------------------------------------------------------
