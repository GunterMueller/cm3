(* This program endeavors to exercise the backend a lot,
 * though not the optimizer.
 *)
 
MODULE Main;
IMPORT Cstdint, Word, Long;

TYPE INT = INTEGER;
TYPE INT8 =  Cstdint.int8_t;
TYPE INT16 = Cstdint.int16_t;
TYPE INT32 =  Cstdint.int32_t;
TYPE INT64 = Cstdint.int64_t;
TYPE UINT8 = Cstdint.uint8_t;
TYPE UINT16 = Cstdint.uint16_t;
TYPE UINT32 =  Cstdint.uint32_t;
TYPE UINT64 = Cstdint.uint64_t;
<*NOWARN*>CONST ki8:INT8 = 1;
<*NOWARN*>CONST ki16:INT16 = 2;
<*NOWARN*>CONST ki32:INT32 = 3;
<*NOWARN*>CONST ki64:INT64 = 4L;
<*NOWARN*>CONST ku8:UINT8 = 9;
<*NOWARN*>CONST ku16:UINT16 = 10;
<*NOWARN*>CONST ku32:UINT32 = 11;
<*NOWARN*>CONST ku64:UINT64 = 12L;

<*NOWARN*>VAR vi8:INT8 := 1;
<*NOWARN*>VAR vi16:INT16 := 2;
<*NOWARN*>VAR vi32:INT32 := 3;
<*NOWARN*>VAR vi64:INT64 := 4L;
<*NOWARN*>VAR vu8:UINT8 := 9;
<*NOWARN*>VAR vu16:UINT16 := 10;
<*NOWARN*>VAR vu32:UINT32 := 11;
<*NOWARN*>VAR vu64:UINT64 := 12L;

<*NOWARN*>PROCEDURE ret_ki8():INT8=BEGIN RETURN 1; END ret_ki8;
<*NOWARN*>PROCEDURE ret_ki16():INT16=BEGIN RETURN 2; END ret_ki16;
<*NOWARN*>PROCEDURE ret_ki32():INT32=BEGIN RETURN 3; END ret_ki32;
<*NOWARN*>PROCEDURE ret_ki64():INT64=BEGIN RETURN 4L; END ret_ki64;

<*NOWARN*>PROCEDURE ret_ku8():UINT8=BEGIN RETURN 5; END ret_ku8;
<*NOWARN*>PROCEDURE ret_ku16():UINT16=BEGIN RETURN 6; END ret_ku16;
<*NOWARN*>PROCEDURE ret_ku32():UINT32=BEGIN RETURN 7; END ret_ku32;
<*NOWARN*>PROCEDURE ret_ku64():UINT64=BEGIN RETURN 8L; END ret_ku64;




<*NOWARN*>PROCEDURE ret_pi8_i8(a:INT8):INT8=BEGIN RETURN a; END ret_pi8_i8;
<*NOWARN*>PROCEDURE ret_pi8_i16(a:INT8):INT16=BEGIN RETURN a; END ret_pi8_i16;
<*NOWARN*>PROCEDURE ret_pi8_i32(a:INT8):INT32=BEGIN RETURN a; END ret_pi8_i32;
<*NOWARN*>PROCEDURE ret_pi8_i64(a:INT8):INT64=BEGIN RETURN VAL(a, INT64); END ret_pi8_i64;
<*NOWARN*>PROCEDURE ret_pi8_u8(a:UINT8):UINT8=BEGIN RETURN a; END ret_pi8_u8;
<*NOWARN*>PROCEDURE ret_pi8_u16(a:INT8):UINT16=BEGIN RETURN a; END ret_pi8_u16;
<*NOWARN*>PROCEDURE ret_pi8_u32(a:INT8):UINT32=BEGIN RETURN a; END ret_pi8_u32;
<*NOWARN*>PROCEDURE ret_pi8_u64(a:INT8):UINT64=BEGIN RETURN VAL(a, UINT64); END ret_pi8_u64;

<*NOWARN*>PROCEDURE ret_pi16_i8(a:INT16):INT8=BEGIN RETURN a; END ret_pi16_i8;
<*NOWARN*>PROCEDURE ret_pi16_i16(a:INT16):INT16=BEGIN RETURN a; END ret_pi16_i16;
<*NOWARN*>PROCEDURE ret_pi16_i32(a:INT16):INT32=BEGIN RETURN a; END ret_pi16_i32;
<*NOWARN*>PROCEDURE ret_pi16_i64(a:INT16):INT64=BEGIN RETURN VAL(a, INT64); END ret_pi16_i64;
<*NOWARN*>PROCEDURE ret_pi16_u8(a:UINT16):UINT8=BEGIN RETURN a; END ret_pi16_u8;
<*NOWARN*>PROCEDURE ret_pi16_u16(a:INT16):UINT16=BEGIN RETURN a; END ret_pi16_u16;
<*NOWARN*>PROCEDURE ret_pi16_u32(a:INT16):UINT32=BEGIN RETURN a; END ret_pi16_u32;
<*NOWARN*>PROCEDURE ret_pi16_u64(a:INT16):UINT64=BEGIN RETURN VAL(a, UINT64); END ret_pi16_u64;


<*NOWARN*>PROCEDURE ret_pi32_i8(a:INT32):INT8=BEGIN RETURN a; END ret_pi32_i8;
<*NOWARN*>PROCEDURE ret_pi32_i16(a:INT32):INT16=BEGIN RETURN a; END ret_pi32_i16;
<*NOWARN*>PROCEDURE ret_pi32_i32(a:INT32):INT32=BEGIN RETURN a; END ret_pi32_i32;
<*NOWARN*>PROCEDURE ret_pi32_i64(a:INT32):INT64=BEGIN RETURN VAL(a, INT64); END ret_pi32_i64;
<*NOWARN*>PROCEDURE ret_pi32_u8(a:UINT32):UINT8=BEGIN RETURN a; END ret_pi32_u8;
<*NOWARN*>PROCEDURE ret_pi32_u16(a:INT32):UINT16=BEGIN RETURN a; END ret_pi32_u16;
<*NOWARN*>PROCEDURE ret_pi32_u32(a:INT32):UINT32=BEGIN RETURN a; END ret_pi32_u32;
<*NOWARN*>PROCEDURE ret_pi32_u64(a:INT32):UINT64=BEGIN RETURN VAL(a, UINT64); END ret_pi32_u64;


<*NOWARN*>PROCEDURE ret_pi64_i8(a:INT64):INT8=BEGIN RETURN VAL(a, INT8); END ret_pi64_i8;
<*NOWARN*>PROCEDURE ret_pi64_i16(a:INT64):INT16=BEGIN RETURN VAL(a, INT16); END ret_pi64_i16;
<*NOWARN*>PROCEDURE ret_pi64_i32(a:INT64):INT32=BEGIN RETURN VAL(a, INT32); END ret_pi64_i32;
<*NOWARN*>PROCEDURE ret_pi64_i64(a:INT64):INT64=BEGIN RETURN VAL(a, INT64); END ret_pi64_i64;
<*NOWARN*>PROCEDURE ret_pi64_u8(a:UINT64):UINT8=BEGIN RETURN VAL(a, UINT8); END ret_pi64_u8;
<*NOWARN*>PROCEDURE ret_pi64_u16(a:INT64):UINT16=BEGIN RETURN VAL(a, UINT16); END ret_pi64_u16;
<*NOWARN*>PROCEDURE ret_pi64_u32(a:INT64):UINT32=BEGIN RETURN VAL(a, UINT32); END ret_pi64_u32;
<*NOWARN*>PROCEDURE ret_pi64_u64(a:INT64):UINT64=BEGIN RETURN VAL(a, UINT64); END ret_pi64_u64;


<*NOWARN*>PROCEDURE add_vi8_vi8():INT=BEGIN RETURN vi8 + vi8; END add_vi8_vi8;
<*NOWARN*>PROCEDURE add_vi8_vi16():INT=BEGIN RETURN vi8 + vi16; END add_vi8_vi16;
<*NOWARN*>PROCEDURE add_vi8_vi32():INT=BEGIN RETURN vi8 + vi32; END add_vi8_vi32;
<*NOWARN*>PROCEDURE add_vi8_vi64():INT64=BEGIN RETURN VAL(vi8, INT64) + vi64; END add_vi8_vi64;

<*NOWARN*>PROCEDURE add_vi16_vi8():INT=BEGIN RETURN vi16 + vi8; END add_vi16_vi8;
<*NOWARN*>PROCEDURE add_vi16_vi16():INT=BEGIN RETURN vi16 + vi16; END add_vi16_vi16;
<*NOWARN*>PROCEDURE add_vi16_vi32():INT=BEGIN RETURN vi16 + vi32; END add_vi16_vi32;
<*NOWARN*>PROCEDURE add_vi16_vi64():INT64=BEGIN RETURN VAL(vi16, INT64) + vi64; END add_vi16_vi64;

<*NOWARN*>PROCEDURE add_vi32_vi8():INT=BEGIN RETURN vi32 + vi8; END add_vi32_vi8;
<*NOWARN*>PROCEDURE add_vi32_vi16():INT=BEGIN RETURN vi32 + vi16; END add_vi32_vi16;
<*NOWARN*>PROCEDURE add_vi32_vi32():INT=BEGIN RETURN vi32 + vi32; END add_vi32_vi32;
<*NOWARN*>PROCEDURE add_vi32_vi64():INT64=BEGIN RETURN VAL(vi32, INT64) + vi64; END add_vi32_vi64;

<*NOWARN*>PROCEDURE add_vi64_vi8():INT64=BEGIN RETURN vi64 + VAL(vi8, INT64); END add_vi64_vi8;
<*NOWARN*>PROCEDURE add_vi64_vi16():INT64=BEGIN RETURN vi64 + VAL(vi16, INT64); END add_vi64_vi16;
<*NOWARN*>PROCEDURE add_vi64_vi32():INT64=BEGIN RETURN vi64 + VAL(vi32, INT64); END add_vi64_vi32;
<*NOWARN*>PROCEDURE add_vi64_vi64():INT64=BEGIN RETURN vi64 + vi64; END add_vi64_vi64;


<*NOWARN*>PROCEDURE and_vi8_vi8():INT=BEGIN RETURN Word.And(vi8, vi8); END and_vi8_vi8;
<*NOWARN*>PROCEDURE and_vi8_vi16():INT=BEGIN RETURN Word.And(vi8, vi16); END and_vi8_vi16;
<*NOWARN*>PROCEDURE and_vi8_vi32():INT=BEGIN RETURN Word.And(vi8, vi32); END and_vi8_vi32;
<*NOWARN*>PROCEDURE and_vi8_vi64():INT64=BEGIN RETURN Long.And(VAL(vi8, INT64), vi64); END and_vi8_vi64;

<*NOWARN*>PROCEDURE and_vi16_vi8():INT=BEGIN RETURN Word.And(vi16, vi8); END and_vi16_vi8;
<*NOWARN*>PROCEDURE and_vi16_vi16():INT=BEGIN RETURN Word.And(vi16, vi16); END and_vi16_vi16;
<*NOWARN*>PROCEDURE and_vi16_vi32():INT=BEGIN RETURN Word.And(vi16, vi32); END and_vi16_vi32;
<*NOWARN*>PROCEDURE and_vi16_vi64():INT64=BEGIN RETURN Long.And(VAL(vi16, INT64), vi64); END and_vi16_vi64;

<*NOWARN*>PROCEDURE and_vi32_vi8():INT=BEGIN RETURN Word.And(vi32, vi8); END and_vi32_vi8;
<*NOWARN*>PROCEDURE and_vi32_vi16():INT=BEGIN RETURN Word.And(vi32, vi16); END and_vi32_vi16;
<*NOWARN*>PROCEDURE and_vi32_vi32():INT=BEGIN RETURN Word.And(vi32, vi32); END and_vi32_vi32;
<*NOWARN*>PROCEDURE and_vi32_vi64():INT64=BEGIN RETURN Long.And(VAL(vi32, INT64), vi64); END and_vi32_vi64;

<*NOWARN*>PROCEDURE and_vi64_vi8():INT64=BEGIN RETURN Long.And(vi64, VAL(vi8, INT64)); END and_vi64_vi8;
<*NOWARN*>PROCEDURE and_vi64_vi16():INT64=BEGIN RETURN Long.And(vi64, VAL(vi16, INT64)); END and_vi64_vi16;
<*NOWARN*>PROCEDURE and_vi64_vi32():INT64=BEGIN RETURN Long.And(vi64, VAL(vi32, INT64)); END and_vi64_vi32;
<*NOWARN*>PROCEDURE and_vi64_vi64():INT64=BEGIN RETURN Long.And(vi64, vi64); END and_vi64_vi64;

BEGIN
END Main.
