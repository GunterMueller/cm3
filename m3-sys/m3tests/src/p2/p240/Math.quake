local Add1 = { }
local Sub1 = { }
local Negate = { }
local IsNegative = { }
local IsPositive = { }

local counter0 = "0"
local counter1 = "0"
local counter2 = "0"
local counter3 = "0"

local proc Increment() is
  local inc = { "0":"1","1":"2","2":"3","3":"4","4":"5",
                "5":"6","6":"7","7":"8","8":"9","9":"0" }
  counter0 = inc{counter0}
  if equal(counter0, "0")
    counter1 = inc{counter1}
    if equal(counter1, "0")
      counter2 = inc{counter2}
      if equal(counter2, "0")
        counter3 = inc{counter3}
      end
    end
  end
  local c = ""
  foreach d in [counter3, counter2, counter1, counter0]
    if not equal(d, "0") or not equal(c, "")
      c = c & d
    end
  end
  return c
end

proc InitMath() is
  if equal(M3_MODE, "clean")
  end
  if Sub1 contains "9999"
    return
  end
  counter0 = "0"
  counter1 = "0"
  counter2 = "0"
  counter3 = "0"
  local proc Helper(f, a, b) is
    if equal(a, "9999")
      return
    end
    local neg_a = "-" & a
    local neg_b = "-" & b
    Add1{a} = b
    Sub1{b} = a
    Add1{neg_b} = neg_a
    Sub1{neg_a} = neg_b
    Negate{a} = neg_a
    Negate{neg_a} = a
    IsNegative{neg_a} = TRUE
    IsNegative{b} = FALSE
    IsPositive{neg_a} = FALSE
    IsPositive{a} = TRUE
    f(f, b, Increment())
  end
  Helper(Helper, "0", Increment())
  Negate{"0"} = "0"
  Sub1{"0"} = "-1"
  IsPositive{"0"} = TRUE
  IsNegative{"0"} = FALSE
end
InitMath()

VerboseMath = FALSE

proc Abs(a) is
  a = a & ""
  if IsNegative{a}
    return Negate{a}
  end
  return a
end

proc Sign(a) is
  a = a & ""
  if IsNegative{a}
    return "-1"
  end
  return a
end

proc Add(a, b) is
  local proc Helper(f, a, b) is
    if equal(a, "0") return b end
    if equal(b, "0") return a end
    return Add1{Add1{f(f, Sub1{a}, Sub1{b})}}
  end
  a = a & ""
  b = b & ""
  if VerboseMath write("Add ", a, " ", b, CR) end
  if IsNegative{a} and IsNegative{b}
    return Negate{Helper(Helper, Negate{a}, Negate{b})}
  end
  if IsPositive{a} and IsPositive{b}
    return Helper(Helper, a, b)
  end
  if IsPositive{a} and IsNegative{b}
    return Sub(a, Negate{b})
  end
  if IsNegative{a} and IsPositive{b}
    return Sub(b, Negate{a})
  end
  return Helper(Helper, a, b)
end

proc Sub(a, b) is
  local proc Helper(f, a, b) is
    if equal(a, "0") return Negate{b} end
    if equal(b, "0") return a end
    return Sub1{f(f, a, Sub1{b})}
  end
  a = a & ""
  b = b & ""
  if VerboseMath write("Sub ", a, " ", b, CR) end
  if IsNegative{a} and IsNegative{b}
    return Add(a, Negate{b})
  end
  if IsPositive{a} and IsPositive{b}
    return Helper(Helper, a, b)
  end
  if IsPositive{a} and IsNegative{b}
    return Add(a, Negate{b})
  end
  if IsNegative{a} and IsPositive{b}
    return Negate{Add(Negate{a}, b)}
  end
end

proc Less(a, b) is
  local proc Helper(f, a, b) is
    if equal(a, "0") return TRUE end
    if equal(b, "0") return FALSE end
    return f(f, Sub1{a}, Sub1{b})
  end
  a = a & ""
  b = b & ""
  if VerboseMath write("Less ", a, " ", b, CR) end
  if equal(a, b)
    return FALSE
  end
  if IsPositive{a} and IsNegative{b}
    return FALSE
  end
  if IsNegative{a} and IsPositive{b}
    return TRUE
  end
  local c = ""
  if IsNegative{a} and IsNegative{b}
    return Helper(Helper, Negate{b}, Negate{a})
  end
  return Helper(Helper, a, b)
end

proc LessOrEqual(a, b) is
  return equal(a, b) or Less(a, b)
end

proc Greater(a, b) is
  return Less(b, a)
end

proc GreaterOrEqual(a, b) is
  return LessOrEqual(b, a)
end

proc Max(a, b) is
  if Less(a, b)
    return b
  end
  return a
end

proc Min(a, b) is
  if Less(a, b)
    return a
  end
  return b
end

proc Mult(a, b) is
  local proc Helper(f, a, b) is
    if equal(a, "1") return b end
    return Add(b, f(f, Sub1{a}, b))
  end
  a = a & ""
  b = b & ""
  if VerboseMath write("Mult ", a, " ", b, CR) end
  if equal(a, "0") return "0" end
  if equal(b, "0") return "0" end
  if equal(a, "1") return b end
  if equal(b, "1") return a end
  if equal(a, "-1") return Negate{b} end
  if equal(b, "-1") return Negate{a} end
  local c = Abs(a)
  local d = Abs(b)
  if Less(d, c)
    c = d
    d = Abs(a)
  end
  c = Helper(Helper, c, d)
  if not equal(IsNegative{a}, IsNegative{b})
    return Negate{c}
  end
  return c
end

proc Div(a, b) is
  local proc Helper(f, a, b) is
    %if VerboseMath write("Div.Helper ", a, " ", b, CR) end
    if Less(a, b) return "0" end
    return Add1{f(f, Sub(a, b), b)}
  end
  a = a & ""
  b = b & ""
  if VerboseMath write("Div ", a, " ", b, CR) end
  if equal(a, "0") and equal(b, "0") return "undefined?" end
  if equal(a, "0") return "0" end
  if equal(b, "0") return "INFINITY" end
  if equal(a, b) return "1" end
  if equal(a, Negate{b}) return "-1" end
  if equal(b, "1") return a end
  if equal(b, "-1") return Negate{a} end
  local e = Helper(Helper, Abs(a), Abs(b))
  if not equal(IsNegative{a}, IsNegative{b})
    return Negate{e}
  end
  return e
end

proc Mod(a, b) is
  return Sub(a, Mult(Div(a, b), b))
end

proc PowerOf2(a) is
 local proc Helper(f, a) is
   if equal(a, "0") return "1" end
   return Mult(2, f(f, Sub1{a}))
 end
 a = a & ""
 if Less(a, "0")
   error("only positive numbers supported in PowerOf2 but " & a & " given\n")
 end
 return Helper(Helper, a)
end

proc Hex(a) is
 local proc Helper(f, a) is
   local digits = ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"]
   if equal(a, "0") return "" end
   return f(f, Div(a, 16)) & digits[Mod(a, 16)]
 end
 a = a & ""
 if Less(a, "0")
   error("only positive numbers supported in Hex but " & a & " given\n")
 end
 if equal(a, "0") return "0" end
 return Helper(Helper, a)
end

proc HexPowerOf2(a) is
 local proc Helper(f, a) is
   if equal(a, "0") return "1" end
   if Greater(a, 8)
     return HexPowerOf2(Sub(a, 8)) & "00"
   end
   return Hex(PowerOf2(a))
 end
 a = a & ""
 if Less(a, "0")
   error("only positive numbers supported in HexPowerOf2 but " & a & " given\n")
 end
 return Helper(Helper, a)
end

%VerboseMath = TRUE

proc ExclusiveRange(start, endd) is
  local proc Helper(f, result, start, endd) is
    if equal(start, endd)
      return result
    end
    result += start
    return f(f, result, Add(start, "1"), endd)
  end
  start = start & ""
  endd = endd & ""
  return Helper(Helper, [ ], start, endd)
end

proc InclusiveRange(start, endd) is
  return ExclusiveRange(start, Add(endd, "1"))
end

%write("99 - 40 is " & Sub(40, 99), CR)
%write("99 - 40 is " & Sub(99, 40), CR)
%write("11 - 42 is " & Sub(11, 42), CR)
%write("6 - 4 is " & Sub(6, 4), CR)
%write("2 + 3 is " & Add(2, 3), CR)
%error(Div(32, 16))

if FALSE
  local proc S(a) is
    if equal(a, FALSE)
      return "FALSE"
    end
    return a
  end
  foreach op in ["+", "-", "<", "<=", ">", ">=", "min", "max", "*", "/", "%"]
    local f = {"+":Add,"-":Sub,"<":Less,">":Greater,"<=":LessOrEqual,
               ">=":GreaterOrEqual,"min":Min,"max":Max,"*":Mult,"/":Div,
               "%":Mod}{op}
    write(CR)
    write(" 33 ", op, " 2 is ", S(f(  33,    2)), CR)
    write(" 33 ", op, " -2 is ", S(f(  33,  "-2")), CR)
    write("-33 ", op, "  2 is ", S(f("-33",   2)), CR)
    write("-33 ", op, " -2 is ", S(f("-33", "-2")), CR)
    write(CR)
    write(" 22 ", op, "  3 is ", S(f(  22,    3)), CR)
    write(" 22 ", op, " -3 is ", S(f(  22,  "-3")), CR)
    write("-22 ", op, "  3 is ", S(f("-22",   3)), CR)
    write("-22 ", op, " -3 is ", S(f("-22", "-3")), CR)
    write(CR)
    write(" 5 ", op, "  5 is ", S(f(5, 5)), CR)
    write(" 5 ", op, "  4 is ", S(f(5, 4)), CR)
    write(" 4 ", op, "  5 is ", S(f(4, 5)), CR)
    write(" 15 ", op, "  5 is ", S(f(15, 5)), CR)
    write(" 14 ", op, "  5 is ", S(f(14, 5)), CR)
    write(" 13 ", op, "  5 is ", S(f(13, 5)), CR)
    write(" 15 ", op, "  3 is ", S(f(15, 3)), CR)
    write(" 32 ", op, "  16 is ", S(f(32, 16)), CR)
    write(CR)
  end
  write(Hex(128), CR)
  write(Hex(255), CR)
  write(Hex(100), CR)
  write(PowerOf2(0), CR)
  write(PowerOf2(1), CR)
  write(PowerOf2(2), CR)
  write(PowerOf2(3), CR)
  write(PowerOf2(4), CR)
  write(PowerOf2(5), CR)
  write(PowerOf2(6), CR)
  write(Hex(PowerOf2(0)), CR)
  write(Hex(PowerOf2(1)), CR)
  write(Hex(PowerOf2(2)), CR)
  write(Hex(PowerOf2(3)), CR)
  write(Hex(PowerOf2(4)), CR)
  write(Hex(PowerOf2(5)), CR)
  write(Hex(PowerOf2(6)), CR)
end
