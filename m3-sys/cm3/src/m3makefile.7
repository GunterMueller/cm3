.TH m3makefile 7 28-Jun-2009 "CRITICAL MASS" "MODULA-3 PROGRAMMERS MANUAL"
./ =============== NAME ===============
.SH NAME
m3makefile\- The Modula-3 build file written in the quake extension language.
.br
m3overrides\- Overrides elements of the m3makefile when building "local".
.SH SYNOPSIS
.B m3makefile

./ =============== DESCRIPTION ===============
.SH DESCRIPTION
When building moderately or very complex software packages,
the compiler needs help identifying all that needs to happen.
This is where the 
.B m3makefile
and
.B m3overrides
file come into play.

The exporting of packages into the
.B modula-3
system wide (or global) repository is managed from these files.

Both the
.B m3makefile
and 
.B m3override
files are scripts used in the building of 
.BR Modula-3 ,
programs and libraries, and identifying items to be exported
as global entities.

A package may be build as either a "local" or "global" entity.
The 
.B m3overrides
file is only used when building a "local" or non-exported
entity rather than a "global" or exported package.
The compiler switch 
.B -override
is used to inform the 
.B cm3
compiler to read the
.B m3overrides
file before it reads the 
.BR m3makefile .
Some packages may indicate in their 
.B m3makefiles that they are only "local", and are not
exported to the global repository.
The main procedure called by the
.B m3overrides
file is 
.BR override() ,
as described below.

Both the
.B m3makefile
and
.B m3overrides
files are written in the 
.BR quake (7)
extension language and are interpreted
by the modula-3 compiler (the interpreter is built into the
.BR cm3 (1)
compiler).  

For both these files, 
.B cm3
first defines an additional set of functions/procedures 
beyond the built-in functions and procedures of the
.B quake
language.  These are specific to the tasks of building
software.  These tasks are not only building both programs
and libraries, but also documentation and other miscellaneous
tasks.

Both these files are located in the "
.B src
" directory of your project, and any nested subdirectory
that gets included via
.B include_dir
(see include_dir() below).


./ =============== PACKAGING ===============
.SH PACKAGING
Modula-3 is distributed as a set of packages. Each package is contained
in a single directory which conforms to a standard structure. The top
level directory should contain a README file (or index.html), and a src
subdirectory containing Modula-3 source files, and a derived directory
for each platform on which the package has been built.

The location of public packages, as well as any other variable is
specified in the cm3.cfg configuration file which is located in the same
directory as cm3 executable program. You can move the compiler or the
public packages around, as long as the configuration file stays at the
same directory as the compiler.

The 
.BR m3makefile ,
that describes the package, resides in the 
.B src
subdirectory of the package. Although it is common for all the Modula-3
sources to also reside in the src directory, they may be distributed in
a more complex directory structure rooted at 
.BR src .

There are three primary types of packages: source, program, and library.
A source package contains a collection of sources, like html files; it
builds nothing. A program package constructs a single executable program
by compiling and linking the contents of a set of source packages.
Similarly, a library package constructs a single library from a set of
source packages.

.TP
.B Source Packages
The m3makefile for a source package simply lists the pieces of source
that are to be included in programs or libraries that include the source
package.

.TP
.B Program Packages
The m3makefile for a program package names the sources needed to build
the program, and the packages that it uses to satisfy its imports. It
ends with a single 
.B program()
or
.B Program()
 invocation. See the example.

.TP
.B Library Packages
The m3makefile for a library package names the sources to be included in
the library, and the packages that it uses to satisfy its imports. It
ends with a single library() or Library() invocation.

Note that as in a program, all the imports of a package must be
satisfied. If a package A builds a library and any of the objects in
that library import interfaces from another library package B, then
import(B) must be specified in A's m3makefile.

Use cm3 -ship command to install a private package in the public
repository. Note that on some systems, you must have special privileges
to install public packages.

./ =============== PROCEDURES ===============
.SH PROCEDURES
.SS SOURCES
The most primitive declarations in an m3makefile are those that identify
source files. They can be Modula-3, C or assembler files. A source file
has three attributes: a package, the subdirectory within the package
where the declaration occurs, and a visibility. The visibility has
two values, visible and hidden. When a package A imports a package B,
only the visible sources in B are available to compilations that occur
in A. By default all sources are visible. However, it is possible to
explicitly control the visibility of Modula-3 interfaces.

Source files are named relative to the 
.B m3makefile 
that mentions them. 

.TP
.BI interface( X )
declares that the file 
.I X.i3
contains an interface.
.TP
.BI implementation( X )
declares that the file 
.I X.m3 
contains a module.
.TP
.BI module( X )
declares both the interface 
.I X.i3 
and the module 
.IR X.m3 .
.TP
.BI generic_interface( X )
declares that the file 
.I X.ig 
contains a generic interface.
.TP
.BI generic_implementation( X )
declares that the file 
.I X.mg
contains a generic module.
.TP
.BI generic_module( X )
declares both a generic interface and module.
.TP
.BI h_source( X )
declares that the file 
.I X.h
contains a C include file.
.TP
.BI c_source( X )
declares that the file 
.I X.c
contains a C module.
.TP
.BI s_source( X )
declares that the file 
.I X.s
contains an assembly module. 
.TP
.BI pgm_source( X )
declares that the file 
.I X
contains compilable source (e.g. .ic, .mc, .is or .ms files).

With the exception of 
.IR h_source ,
each of the procedures above defines a hidden source file. 
There are capitalized variants 
.BR Interface ", " Module ", " Generic_interface ", " 
.BR Generic_implementation ", and " Generic_module 
that identify their sources as visible. 
Remember, only those interfaces that are marked as visible
will be available to importers of your library or package.
.TP
.BI template( X )
declares that the file 
.I X.tmpl
contains quake code that is to be included in this build, 
and in all builds that import this package.

The template call is used to extend the set of available procedures.
For example, the table package includes a template that defines the
table procedure which instantiates the generic table module. 

.SS IMPORT
Import reflects the fact that programs are built from separately compiled pieces, rather than being compiled as a whole. If we always compiled from source, include would suffice. 
.TP
.BI import( P )
The library and visible sources of package P are available to satisfy
IMPORT requests in the current compilation. 
The imported sources are not recompiled.
.TP
.BI import_version( P , BuildDir )
Like import(P), but the library and visible sources of package 
.I P
are selected from building directory 
.I BuildDir
rather than the default building directory for the current platform.
.TP
.BI include_dir( D )
Recursively include the sources named in the m3makefile
in subdirectory 
.I D
of the current directory.
.TP
.BI include_pkg( P )
Include the sources named in package 
.IR  P 's
src/m3makefile. The location of 
.I P
may be overridden.


.SS BUILDING
.TP
.BI library( X )
compile the sources accumulated so far and build a library, 
.IR X ,
from the resulting compiled object files. 
The visibility of the library is hidden.
.BI Library( X )
The same as library.
.TP
.BI program( X )
constructs an executable program named 
.I X
from the given sources.
.TP
.BI Program( X )
like program, but 
.I X
is exported to /bin.
.TP
.BI build_standalone()
ensures that the program being built does not depend on dynamic
linking and shared libraries. 
To have an effect, this procedure must be called before program
or Program is called. 

.SS COMPILER OPTIONS
.BI m3_option( x )
 adds option 
.I x
to the set of arguments passed to the compiler.

Specifically, 
.B m3_option 
adds 
.I x 
to the M3OPTIONS variable. 
.I x 
should be a single string preceded with a hyphen, 
e.g. 
.BR m3_option( "-O" ) .

Some of the more useful compiler options include:

  -why        Explain why each compilation is needed (default).
  -commands   Print the compilation commands as they are started.
  -verbose    Print what happens to each file.
  -times      Print a breakdown of elapsed time.
  -g          Generate debugging symbols (default).
  -O          Optimize code.
  -keep       Preserve intermediate files.
  -once       Don't recompile modules with new opaque info.

Any compiler option may be specified here.
See 
.BR cm3 (1).

.SS OVERRIDE
.TP
.BI override( P , D )
 Use the version of package 
.I P 
in directory 
.I D/P
 instead of the one in /pkg/
.IR P .

.B override
alters the behaviour of the 
.B include_pkg 
and 
.B import_pkg 
procedures, and must be executed prior to any such calls to have an effect.

To help ensure that the public repositories are consistent, 
"cm3 -ship", and the older "m3ship" will refuse to install any
package built using overrides.

When the -override option is specified, cm3 looks for a file named
m3overrides in the src directory and, if one exists, executes it
immediately prior to executing m3makefile. By keeping all override calls
in an m3overrides file and not in an m3makefile, you can build both
private and public versions of packages without editting any files.

The overrides in effect when a package was built are automatically
carried forward into importers of the package, so there is no need to
restate the complete set of overrides at every level, only of those
packages that are directly imported into a given package.

There is a pre-declared variable, 
.BR WDROOT ,
that defines the conventional location of a user's private
package repository. (see \\ref{VAR-sec}).

.SS FOREIGN OBJECTS AND LIBRARIES
These procedures allow foreign objects and/or libraries to be
included in a Modula-3 program.  Here foreign means not written
in Modula-3.
.TP
.BI import_lib( X , P )
If 
.I P/libX.a
is a library, includes 
.B -LP -lX 
in the final link command. 
Otherwise, includes 
.B -lX
in the final link command.
.TP
.BI import_obj( X )
Include 
.I X 
in the final link command. 

.SS EXPORTING FILES
These functions should be used to export files to the public directories.
These public directories are bound to actual directories via a set of
logical assignments specific to your installation.
.TP
.BI BinExport( X )
exports source file 
.I X
to /bin.
.TP
.BI BindExport( X )
exports derived file 
.I X 
to /bin.
.TP
.BI DocExport( X )
exports source file 
.I X
 to /doc.
.TP
.BI DocdExport( X )
exports derived file 
.I X to /doc.
.TP
.BI EmacsExport( X )
exports source file 
.I X
to /emacs.
.BI EmacsdExport( X )
exports derived file 
.I X
to /emacs.
.BI HtmlExport( X )
exports source file 
.I X
to /html.
.TP
.BI LibExport( X )
exports source file 
.I X
to /lib.
.TP
.BI LibdExport( X )
exports derived file 
.I X
to /lib.
.TP
.BI ManExport( X , sec )
exports source file 
.I X.sec
to section sec of /man.
.TP
.BI MandExport( X , sec )
exports derived file 
.I X.sec
to section sec of /man. 

.SS HIDING AND EXPORTING
The following procedures can be used in two ways. 
First to provide a clearer indication of visibility than is given by the
capitalization convention
(which exists partly to support old style m3makefiles). 
Second, to change the visibility of imported components. 
Generally, it's much better to convince the owners of the exporting
package to give their sources the correct visibility rather than
overriding their initial decision.

Hidden programs are not copied to the /bin directory, exported ones are.
 
.TP
.BI hide_interface( X )
sets the visibility of interface 
.I X.i3
to hidden.
.TP
.BI export_interface( X )
sets the visibility of interface 
.I X.i3 
to visible.
.P
There are also variants that hide or export programs and generics,
.BR hide_program ", " hide_generic_interface ", " 
.BR hide_generic_implementation ", " export_program ", "
.BR export_generic_interface ", and "
.BR export_generic_implementation .

.SS INSTALLATION DEPENDENCIES
The builder contains some built-in support for machine and operating
system dependencies. The package structure makes provision for
separate build directories for different machine and operating
system combinations. The default behaviour of cm3 is to generate the
compiled object files, libraries and programs in the build directory
corresponding to the machine and operating system on which cm3 is
executing.

The following set of variables exist to allow m3makefiles to be
parameterised by machine and operating system.

.SS INSTALLATION DEPENDENCIES
The builder contains some built-in support for machine and operating
system dependencies. The package structure makes provision for
separate build directories for different machine and operating
system combinations. The default behaviour of cm3 is to generate the
compiled object files, libraries and programs in the build directory
corresponding to the machine and operating system on which cm3 is
executing.

The following set of variables exist to allow m3makefiles to be
parameterised by machine and operating system.

.TP
.B TARGET  
This variable defines the machine type on which the library or
program being built will execute. It is chosen from the standard
set of machine types on which Modula-3 runs. Check the runtime
or cm3 packages for the complete set.
.TP
.B OS_TYPE  
This variable defines the operating system under which the library
or program being built will execute. Currently, Modula-3 supports
two operating system variants, POSIX and WIN32. The former breaks
down further into specific variants, but this variation is not made
available to clients. [There is a way if you absolutely need it,
see the unix package.]
.TP
.B BUILD_DIR  
This names the package sub-directory in which object files,
libraries and programs will be built. It is usually, but not
always, the same as TARGET.

The net effect of the above allows a single package to build a family
of architectural variants, in different build sub-directories, where
each variant uses the same set of m3makefiles, parameterized by the
above variables. If this degree of flexibility is insufficient, then the
extra variation must be specified in a separate package, which can use
include_pkg to access the shared sources.

.TP
.B PKG_USE  
This defines the location of the public package repository, e.g.
/proj/m3/pkg or /usr/local/lib/m3/pkg.
.TP
.B WDROOT  
This defines the standard location for a user's private package
repository, typically $HOME/m3/pkg. This is typically used in
override calls.


.TP
.B TARGET  
This variable defines the machine type on which the library or
program being built will execute. It is chosen from the standard
set of machine types on which Modula-3 runs. Check the runtime
or cm3 packages for the complete set.
.TP
.B OS_TYPE  
This variable defines the operating system under which the library
or program being built will execute. Currently, Modula-3 supports
two operating system variants, POSIX and WIN32. The former breaks
down further into specific variants, but this variation is not made
available to clients. [There is a way if you absolutely need it,
see the unix package.]
.TP
.B BUILD_DIR  
This names the package sub-directory in which object files,
libraries and programs will be built. It is usually, but not
always, the same as TARGET.

The net effect of the above allows a single package to build a family
of architectural variants, in different build sub-directories, where
each variant uses the same set of m3makefiles, parameterized by the
above variables. If this degree of flexibility is insufficient, then the
extra variation must be specified in a separate package, which can use
include_pkg to access the shared sources.

.TP
.B PKG_USE  
This defines the location of the public package repository, e.g.
/proj/m3/pkg or /usr/local/lib/m3/pkg.
.TP
.B WDROOT  
This defines the standard location for a user's private package
repository, typically $HOME/m3/pkg. This is typically used in
override calls.

.SS MISCELLANEOUS
The declarations in this section are typically only needed by
specialised applications, for example the Modula-3 compiler or other
quake templates.
.TP
.BI source( X )
declares that 
.I X
contains non-compilable source.
.TP
.BI derived_interface( X , V )
adds the derived interface 
.I X.i3
to the list of files to be compiled. 
.I V
 must be either VISIBLE or HIDDEN to indicate whether the 
interface should be available to importers outside this package.
.TP
.BI derived_implementation( X )
adds the derived module 
.I X.m3
to the list of files to be compiled.

.TP
.BI derived_c( X )
adds the derived C code 
.I X.c
to the list of files to be compiled.
.TP
.BI derived_h( X )
adds the derived include file 
.I X.h
to the list of include files available to the compiler. 

.SS EMACS SUPPORT
The following functions support building and installing GNU emacs lisp code.
.TP
.BI Gnuemacs( X )
exports source file 
.I X.el
to /emacs.
.TP
.BI CompiledGnuemacs( X )
exports the source file 
.I X.el
and compiles and exports the derived file 
.I X.elc
to /emacs. 

.SS GENERICS SUPPORT
Many of the packages that export generic interfaces and modules
also define m3makefile procedures that will instantiate the generic
source and add it to the list of Modula-3 sources to be compiled.
The instantiated interfaces and modules are created in the derived
directory, so they won't clutter up your source directory.
.TP
.BI array_sort( nm , elt )
instantiates the ArraySort generics to produce 
.IR nm ArraySort.i3
and 
.IR nm ArraySort.m3 
which implement a sort for arrays of 
.IR elt .T
values.
.TP
.BI Array_sort( nm , elt )
like array_sort, but also makes the interface available to 
importers outside the current package.
.TP
.BI list( nm , elt ) 
instantiates the List generics to produce 
.IR nm List.i3
and 
.IR nm List.m3
which implement linked lists of 
.IR elt .T
values.
.TP
.BI List( nm , elt ) 
like list, but also makes the interface available to importers
outside the current package.
.TP
.BI list_sort( nm , elt )
instantiates the ListSort generics to produce 
.IR nm ListSort.i3
and 
.IR nm ListSort.m3
which implement a sorting procedure for lists of 
.IR elt .T
 values. This procedure assumes that 
.BR list( nm , elt )
has been called.
.TP
.BI List_sort( nm , elt )
like list_sort, but also makes the interface available to importers
outside the current package.
.TP
.BI pqueue( nm , elt )
instantiates the PQueue generics to produce 
.IR nm PQ.i3
and 
.IR nm PQ.m3
which implement a priority queue of 
.IR elt .T
values.
.TP
.BI Pqueue( nm , elt )
like pqueue, but also makes the interface available to importers
outside the current package.
.TP
.BI sequence( nm , elt )
instantiates the Sequence generics to produce 
.IR nm Seq.i3,
.IR nm SeqRep.i3
and
.IR nm Seq.m3
which implement a sequence of 
.IR elt .T
values.
.TP
.BI Sequence( nm , elt )
like sequence, but also makes the interfaces available to importers
outside the current package.
.TP
.BI sorted_table( nm , key , value )
instantiates the SortedTable generics to produce 
.IR nm SortedTbl.i3
and 
.IR nm SortedTbl.m3
 which implement a sorted table mapping from type 
.IR key .T
to 
.IR value .T.
.TP
.BI Sorted_table( nm , key , value )
like sorted_table, but also makes the interface available to importers 
outside the current package.
.TP
.BI table( nm , key , value )
instantiates the Table generics to produce 
.IR nm Tbl.i3
and 
.IR nm Tbl.m3
which implement a table mapping from type 
.IR key .T
to
.IR value .T.
.TP
.BI Table( nm , key , value )
like table, but also makes the interface available to importers
outside the current package. 

.SS MANUAL PAGES SUPPORT
The following calls format and install man pages.
.TP
.BI manPage( name , sec )
formats man page name.sec.
.TP
.BI ManPage( name , sec )
is like manPage, but also exports the man page to section 
.I sec
of /man.
.TP
.BI ManExport( X , s )
exports source file 
.I X.s
to section 
.I s
 of /man without further formatting.
.TP
.BI MandExport( X , s )
export derived file 
.I X.s
to section 
.I s
of /man without further formatting. 

.SS NETWORK OBJECTS SUPPORT
The following procedures are used to build programs using network objects.
.TP
.BI netobj( X , T )
runs the network objects stub generator on the interface
.I X.i3
to produce the network object glue needed to manipulate objects
of type 
.IR X.T .
The resulting source files are included in the current build.
.TP
.BI Netobj( X , T )
Like netobj, but also exports the resulting interface. 

.SS RESOURCES
The following procedures support the inclusion of arbitrary data,
known as a resource, in a program.  For example an image as a PNG file.
.TP
.BI resource( file )
is shorthand for 
.BI resource_named( file , file ).
.TP
.BI resource_named( rd , file )
declares that 
.I file
is a resource file. It will be accessible via the reader 
.I rd
if a bundle is built.
.TP
.BI bundle( m ) 
declares that the module 
.I m 
is to be built as a bundle of the files specified by the prior
calls to resource and resource_named.


./ ============ EXAMPLE =========
.SH EXAMPLE
For example, here's a simple program composed of a main module, an
imported interface and its implementation.

To begin, create a fresh directory for the package and within that
directory, a directory for the source files:

    > mkdir hello
    > cd hello
    > mkdir src

Create the following source files in the src directory:

In the file src/Main.m3:

    MODULE Main;
    IMPORT A;
    BEGIN
      A.DoIt ();
    END Main.

In the file src/A.i3:

    INTERFACE A;
    PROCEDURE DoIt ();
    END A.

In the file src/A.m3:

    MODULE A;
    IMPORT Wr, Stdio;

    PROCEDURE DoIt () =
      <*FATAL ANY*>
      BEGIN
        Wr.PutText (Stdio.stdout, "Hello world.\n");
        Wr.Close (Stdio.stdout);
      END DoIt;

    BEGIN
    END A.

In the file src/m3makefile:

    import ("libm3")
    implementation ("Main")
    module ("A")
    program ("foo")

Finally, from the package directory, hello, run 
.BR cm3 .
This should/will compile the three source files and link them with
the standard libraries. The derived files will be placed in a directory
that names the architecture. On an Alpha/AXP machine running OSF, the
directory is called ALPHA_OSF. The executable program will be named
foo in the derived directory.

./ ============ NOTES =========
.SH NOTES
The older style of m3makefiles using the capitalization convention
is depreciated, and its use is highly discouraged.

The quake interpreter is built into the CM3 Modula-3 compiler, 
whereas it was a separate executable for earlier ones, such as PM3.

./ ============ SEE ALSO =========
.SH SEE ALSO
The Critical Mass Modula-3 compiler 
.BR cm3 (1),
and the man pages for 
.BR quake (7).

For a full list of compiler options, please see 
.BR cm3 (1).

For creating network objects see the manpage for 
.BR stubgen (1).

For a description of how to access resources from your running program,
see the Bundle and Rsrc interfaces, along with the developer tool program
.BR m3bundle (1).

./ ============ AUTHOR =========
.SH AUTHOR
(man page) Peter Eiserloh (eiserlohpp -at- yahoo.com)
