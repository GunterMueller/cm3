readonly SYSTEM_LD = "/usr/ccs/bin/ld -B direct -z ignore -z combreloc -z defs -z text"
readonly SYSTEM_AR = "ar"

if equal (WORD_SIZE, "32BITS")
    GccMBits = "32"
    GccPlatformBits = ""
    SunXArch = "v8plus"
    M3_USE_STACK_WALKER = TRUE
else
    GccMBits = "64"
    GccPlatformBits = "64"
    SunXArch = "v9"
end

readonly m3back_flags = "-quiet -gstabs+ -fPIC -m" & GccMBits
readonly SYSTEM_ASM = "as -s -K PIC -xarch=" & SunXArch

if equal (C_COMPILER, "SUN")
    readonly LIBGCC = ""
    readonly SYSTEM_CC = "cc -g -mt -xarch=" & SunXArch & " -xcode=pic32 -xldscope=symbolic"
end

if equal (C_COMPILER, "GNU")
    if not defined("SOLARIS_VERSION")
        SOLARIS_VERSION = "2.10"
    end
    if not defined("GCC_VERSION")
        GCC_VERSION = "4.3.1"
    end
    if not defined("GCC_PREFIX")
        GCC_PREFIX = "/usr/local"
    end
    readonly GNU_PLATFORM = "sparc" & GccPlatformBits & "-sun-solaris" & SOLARIS_VERSION
    if not defined("SYSTEM_CC")
        % This can suffice.
        %   readonly SYSTEM_CC = "gcc -fPIC"
        % or this:
        %   readonly SYSTEM_CC = "gcc -fPIC -m" & GccMBits
        readonly SYSTEM_CC = GCC_PREFIX & "/bin/" & GNU_PLATFORM & "-gcc -g -fPIC -m" & GccMBits
    end
    if not defined("LIBGCC")
        %
        % TBD get invoking gcc to work instead.
        % In particular, gcc -fPIC -m32 or -m64 is nice.
        % i.e. if we link with gcc and have multilib-enabled gcc, then
        % we can dispense with knowing: LIBGCC, GNU_PLATFORM, GCC_PREFIX, SOLARIS_VERSION
        %
        readonly LIBGCC = GCC_PREFIX & "/lib/gcc/" & GNU_PLATFORM & "/" & GCC_VERSION & "/libgcc.a"
    end
end


SYSTEM_LIBS = {
    "LIBC"      : [ "-lsocket", "-lnsl",
                    "-lpthread",
                    "-lrt", % semaphores
                    "-lm", "-lc" ],
    "LEX-YACC"   : [ "-ll" ],
    "FLEX-BISON" : [ ],
    % "POSTGRES95" : [ ],
    "OPENGL"     : [ "-lGLU", "-lGL", "-lXext" ],
    % "ODBC"     : [ ],
    "MOTIF"      : [ "-lXm" ],
    "X11"        : [ "-lXaw", "-lXmu", "-lXext", "-lXt", "-lX11" ],
    "TCP"        : [ ]
}

SYSTEM_LIBORDER = [
    "OPENGL",
    % "DECPEX",
    "MOTIF",
    "X11",
    "TCP",
    % "ODBC",
    % "POSTGRES95",
    % "FLEX-BISON",
    "LEX-YACC",
    "LIBC"
]

proc make_lib (lib, options, objects, imported_libs, shared) is
    local ret_code = 0
    local lib_a    = format ("lib%s.a", lib)
    local lib_so   = format ("lib%s.so", lib)
    local lib_sox  = format ("lib%s.so.5", lib)

    % first, build the non-shared library
    ret_code = try_exec ("@" & SYSTEM_AR, "cru", lib_a, objects)
    if not equal (ret_code, 0)
        return ret_code
    end

    if shared
        % then, build the shared library
        ret_code = try_exec ("@" & SYSTEM_LD, "-G", "-o",
                             lib_sox, "-h", lib_sox, objects,
                             imported_libs)
        if not equal (ret_code, 0)
            return ret_code
        end

        % create the version aliases
        link_file(lib_sox, lib_so)

        % finally, make sure the shared library stuff gets installed properly
        install_derived (lib_sox)
        install_derived_link (lib_sox, lib_so)
        install_link_to_derived (lib_sox, LIB_INSTALL)
        install_link_to_derived (lib_so, LIB_INSTALL)
    else
        delete_file (lib_so)
        delete_file (lib_sox)
    end

    return 0
end

%------------------------------------------------------------------- linker ---
% "m3_link" is called to produce a final executable.

proc m3_link (prog, options, objects, imported_libs, shared) is
    local linker = [ "@" & SYSTEM_LD, "-pthreads", "-pie" ]
    local args = []
    if M3_PROFILING
        args += "-pg"
    end
    args += [ "-o", prog, options, objects, imported_libs ]
    if not defined("LIBGCC")
        args += [ LIBGCC ]
    end
    if shared
        return try_exec (linker, args)
    else
        return try_exec (linker, "-dy -Bstatic", args)
    end
end

include ("Unix.common")

M3_SHARED_LIB_ARG = "-R"
% --- pass "-R" flags to the linker too.

M3_MAIN_IN_C = TRUE
