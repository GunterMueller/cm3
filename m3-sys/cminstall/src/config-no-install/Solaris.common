%-------------------------------------------------------------------
% defined by cm3, but not the other MxConfig users
if not defined("CR") CR = "\n" end
if not defined("EOL") EOL = "\n" end
if not defined("M3_PROFILING") M3_PROFILING = FALSE end
if not defined("SL") SL = "/" end
%-------------------------------------------------------------------

readonly TARGET_OS = "SOLARIS"
readonly SYSTEM_AR = "/usr/ccs/bin/ar"
readonly GccMBits = {"32BITS" : "32", "64BITS" : "64"}{WORD_SIZE}
if equal(TARGET, "I386_SOLARIS") or equal(TARGET, "AMD64_SOLARIS")
  proc configure_assembler() is
    %
    % Favor GNU as, see:
    %   http://gcc.gnu.org/ml/gcc/2010-05/msg00155.html
    %   http://gcc.gnu.org/install/specific.html#ix86-x-solaris210
    %
    if defined("SYSTEM_ASM")
      return
    end
    proc FileExists (a) is
      return not stale (a, a)
    end
    foreach a in [ "/opt/csw/bin/gas",
                   "/opt/csw/gnu/as",
                   "/usr/sfw/bin/gas" ]
      if FileExists(a)
        readonly SYSTEM_ASM = a + " --noexecstack -s -" + GccMBits
        return
      end
    end
    %
    % Fallback to Sun assember.
    %
    if equal(TARGET, "I386_SOLARIS")
      readonly SYSTEM_ASM = "/usr/ccs/bin/as -s"
    else
      readonly SYSTEM_ASM = "/usr/ccs/bin/as -s -xarch=" & SunXArch
    end
  end
else
  %
  % Sun assembler seems always ok for Sparc.
  % -s means to put symbols where linker will not automatically strip them
  %
  readonly SYSTEM_ASM = "/usr/ccs/bin/as -s -K PIC -xarch=" & SunXArch
end

proc configure_c_compiler() is
end

if equal (C_COMPILER, "SUN")

  proc configure_c_compiler() is
    if defined("SYSTEM_CC")
      return
    end

    % newer compiler says:
    % cc: Warning: -xarch=v8plus is deprecated, use -m32 -xarch=sparc instead
    % cc: Warning: -xarch=generic64 is deprecated, use -m64 to create 64-bit programs

    local cc = "/usr/bin/cc -g -mt -xldscope=symbolic "
    local old = "-xarch=" & SunXArch
    local new = "-m" & GccMBits
    if equal(WORD_SIZE, "32BITS") and not equal(TARGET, "I386_SOLARIS")
      new = new & " -xarch=sparc"
    end
    if equal(try_exec("@" & cc & old & " 2>&1 | grep \" " & new & " \" > /dev/null"), 0)
      cc = cc & new
    else
      cc = cc & old
    end
    if equal(TARGET, "I386_SOLARIS") or equal(TARGET, "AMD64_SOLARIS")
      SYSTEM_CC = cc & " -Kpic"
    else
      SYSTEM_CC = cc & " -xcode=pic32"
    end
  end

  % SYSTEM_LD = "/usr/ccs/bin/ld"
end

if equal (C_COMPILER, "GNU")
    if not defined("SYSTEM_CC")
        SYSTEM_CC = "/usr/sfw/bin/gcc -gstabs+ -fPIC -pthreads -m" & GccMBits
    end
end

proc configure_linker() is
  if defined("SYSTEM_LD")
    return
  end
  configure_c_compiler()
  SYSTEM_LD = SYSTEM_CC & " -B direct -z ignore -z combreloc -z defs -z text"
    & " -i -z now -z origin "
    & " -R \\$ORIGIN"
    & " -R \\$ORIGIN/../lib"
end

SYSTEM_LIBS = {
    "LIBC"      : [ "-lsocket", "-lnsl",
                    "-lpthread",
                    "-lrt", % semaphores
                    "-lm", "-lc" ],
    "LEX-YACC"   : [ "-ll" ],
    "FLEX-BISON" : [ ],
    % "POSTGRES95" : [ ],
    "OPENGL"     : [ "-lGLU", "-lGL", "-lXext" ],
    % "ODBC"     : [ ],
    "MOTIF"      : [ "-lXm" ],
    "X11"        : [ "-lXaw", "-lXmu", "-lXext", "-lXt", "-lX11" ],
    "Z"          : [ "-lz" ],
    "TCP"        : [ ]
}

SYSTEM_LIBORDER = [
    "OPENGL",
    % "DECPEX",
    "MOTIF",
    "X11",
    "TCP",
    % "ODBC",
    % "POSTGRES95",
    % "FLEX-BISON",
    "LEX-YACC",
    "LIBC"
]

proc make_lib (lib, options, objects, imported_libs, shared) is
    local ret_code = 0
    local lib_a    = format ("lib%s.a", lib)
    local lib_so   = format ("lib%s.so", lib)
    local lib_sox  = format ("lib%s.so.5", lib)

    % first, build the non-shared library
    ret_code = try_exec ("@" & SYSTEM_AR, "cru", lib_a, objects)
    if not equal (ret_code, 0)
        return ret_code
    end

    local shared_option = ""
    if shared and equal(C_COMPILER, "GNU")
        shared_option = "-shared"
    end

    if shared
        % then, build the shared library
        configure_linker()
        ret_code = try_exec ("@" & SYSTEM_LD, shared_option, "-G", "-o",
                             lib_sox, "-h", lib_sox, objects,
                             imported_libs)
        if not equal (ret_code, 0)
            return ret_code
        end
    end

    local a = skip_lib(lib, shared)

    return 0
end

%------------------------------------------------------------------- linker ---
% "m3_link" is called to produce a final executable.

proc m3_link (prog, options, objects, imported_libs, shared) is
    configure_linker()
    local linker = [ "@" & SYSTEM_LD ]
    local args = []
    if M3_PROFILING
        args += "-pg"
    end
    args += [ "-o", prog, options, objects, imported_libs ]
    if shared or equal (C_COMPILER, "SUN")
        return try_exec (linker, args)
    else
        return try_exec (linker, "-pie -dy -Bstatic", args)
    end
end

% don't build up large RPATH
M3_SHARED_LIB_ARG = ""

include ("Unix.common")

M3_MAIN_IN_C = TRUE
