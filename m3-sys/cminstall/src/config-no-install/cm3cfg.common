% Copyright 1996 Critical Mass, Inc. All rights reserved.
% 
% common configuration file for various platforms
%

%------------------------------------------------------------------------------

%M3_PROFILING = TRUE  % set by cm3 since 5.1.2 (option -profile)
%M3_PROFILING = FALSE

if not defined("PROFILING_P")
    if M3_PROFILING
        readonly PROFILING_P = "p"
    else
        readonly PROFILING_P = ""
    end
end

if not defined("BUILD_DIR")
    readonly BUILD_DIR    = TARGET & PROFILING_P % directory for results
end

%------------------------------------------------------------------------------

proc CM3SetInstallRoot() is
    if defined("INSTALL_ROOT")
        return
    end
    if not equal($CM3_INSTALL, "")
        INSTALL_ROOT = $CM3_INSTALL
        return
    end
    INSTALL_ROOT = (path() & SL & "..")
end

CM3SetInstallRoot()

%------------------------------------------------------------------------------

readonly BIN_INSTALL    = INSTALL_ROOT & SL & "bin"     % executables
readonly LIB_INSTALL    = INSTALL_ROOT & SL & "lib" & PROFILING_P   % libraries
readonly PKG_INSTALL    = INSTALL_ROOT & SL & "pkg"     % packages
readonly DOC_INSTALL    = INSTALL_ROOT & SL & "doc"     % documents
readonly EMACS_INSTALL  = INSTALL_ROOT & SL & "elisp"   % emacs lisp code
readonly MAN_INSTALL    = INSTALL_ROOT & SL & "man"     % man pages
readonly HTML_INSTALL   = INSTALL_ROOT & SL & "www"     % public hypertext

% On some systems (e.g. AFS) you must install public files in a different
% place from where you use them.  If that is the case for your system,
% specify the "use" location here, otherwise leave them alone.
%
USE_ROOT  = INSTALL_ROOT
BIN_USE   = BIN_INSTALL     % executables
LIB_USE   = LIB_INSTALL     % libraries
PKG_USE   = PKG_INSTALL     % packages

%------------------------------------------------------------------------------

readonly INSTALL_IMPLS = FALSE
% TRUE
%    => save all source files during the install
%    => makes debugging easier and browsing more fruitful
% FALSE
%    => save only the exported interfaces and templates 
%    => makes the installed system slightly smaller.

%-------------------------------------------------------------------

proc exists(x) is
    return not stale(x, x)
end

proc FileExists(x) is
    return not stale(x, x)
end

proc DeleteFile(a) is
    delete_file(a)
end

readonly OS = $OS

proc MoveFile(a, b) is
    local ret = 0
    if defined("fs_cp")
        fs_cp(a, b)
        DeleteFile(a)
    else
        %
        % The check of OS_TYPE confuses host and target.
        %
        if equal(OS, "Windows_NT") and not equal (OS_TYPE, "POSIX")
            ret = q_exec(["cmd", "/c", "move", "\"" & a & "\"", "\"" & b & "\""])
        else
            ret = q_exec(["mv", a, b])
        end
    end
end

proc DeleteFiles(a) is
    foreach b in a
        DeleteFile(b)
    end
end

%------------------------------------------------------------------------------

if not defined("subst_chars")
    %
    % Ok, some cross builds will fail with older tools, but
    % native builds do not need this.
    %
    proc subst_chars(a, b, c) is
        return a
    end
end

%------------------------------------------------------------------------------

readonly proc GetPackageDirectory() is
    %
    % older builds, such as 5.1.3, do not define PACKAGE_DIR
    % This is only used to point the user at a file to
    % help diagnose build errors, so ok to downgrade to
    % an empty string.
    %
    if defined("PACKAGE_DIR")
        return PACKAGE_DIR & SL
    end
    return ""
end

%------------------------------------------------------------------------------

proc GetM3Back() is
    if defined("m3back")
        % write("using " & m3back & "\n")
        return m3back
    end
    % probe all of these?
    % rationale:
    %  probe the built one ahead of the installed on
    %  probe host/target ahead of just target
    %  probe slash ahead of dash
    %  I favor slash; gcc precedent is dash.
    %  (because dash fits in less modified $PATH, slash not?)
    %  Dash is also goodness in the directory name for how m3cc builds,
    %  but again, I prefer slash.
    % ROOT/m3-sys/m3cc/HOST/TARGET/gcc/m3cgc1.exe
    % ROOT/m3-sys/m3cc/HOST/TARGET/gcc/m3cgc1
    % ROOT/m3-sys/m3cc/HOST-TARGET/gcc/m3cgc1.exe
    % ROOT/m3-sys/m3cc/HOST-TARGET/gcc/m3cgc1
    % INSTALL_ROOT/bin/HOST/TARGET/cm3cg.exe
    % INSTALL_ROOT/bin/HOST/TARGET/cm3cg
    % INSTALL_ROOT/bin/HOST/TARGET-cm3cg.exe
    % INSTALL_ROOT/bin/HOST/TARGET-cm3cg
    % ROOT/m3-sys/m3cc/TARGET/gcc/m3cgc1.exe
    % ROOT/m3-sys/m3cc/TARGET/gcc/m3cgc1
    % ROOT/m3-sys/m3cc/TARGET/cm3cg.exe
    % ROOT/m3-sys/m3cc/TARGET/cm3cg
    % INSTALL_ROOT/bin/TARGET/cm3cg.exe
    % INSTALL_ROOT/bin/TARGET/cm3cg
    % INSTALL_ROOT/bin/TARGET-cm3cg.exe
    % INSTALL_ROOT/bin/TARGET-cm3cg
    % INSTALL_ROOT/bin/cm3cg.exe
    % INSTALL_ROOT/bin/cm3cg

    local bin = INSTALL_ROOT & SL & "bin" & SL
    local m3cc = ROOT & SL & "m3-sys" & SL & "m3cc" & SL
    local Cache = { }

    %
    % Not all these combinations are meant to be used,
    % and the order isn't always right.
    %
    % We do not intend to look at, for example:
    %   /home/jay/dev2/cm3/m3-sys/m3cc/AMD64_LINUX/AMD64_LINUX-gcc/m3cgc1.exe
    % Target- is only a prefix on file names, not directories.
    %
    %   /cm3/bin/AMD64_LINUX/AMD64_LINUX-gcc/m3cgc1.exe
    % The installed file is always renamed to cm3cg.
    %
    % Work on this more later.
    %
    if not defined("HOST")
        HOST = TARGET
    end
    local ALT1 = ""
    if equal (HOST, "NT386")
      ALT1 = "NT386GNU"
    end
    foreach host in [ HOST & SL, HOST & "-", ALT1 & SL, ""]
        foreach target in [ TARGET & SL, TARGET & "-", ""]
            foreach root in [ m3cc, bin ]
                foreach gcc in ["gcc" & SL & "m3cgc1", "cm3cg"]
                    foreach exe in [".exe", ""]
                        local a = root & host & target & gcc & exe
                        if not Cache contains a
                            % write("probing " & a & "\n")
                            if FileExists(a)
                                % write("using " & a & "\n")
                                m3back = "@" & a & " " & m3back_flags
                                return m3back
                            else
                                Cache{a} = 1
                            end
                        end
                    end
                end
            end
        end
    end
    % write("using m3cg in PATH (if there is one)\n")
    m3back = "@m3cg " & m3back_flags
    return m3back
end

%-------------------------------------------------- default compile options ---
% "set_config_options" is called before starting the compilation. It should
% be used to provide system-wide default options.

proc set_config_options() is
    m3_option("-why")   %-- produce a listing that explains what's happening and why
    m3_debug(TRUE)      %-- produce object code with debugging symbols
    M3_OPTIONS += "-w1"  %-- produce "level 1" warnings
end

%------------------------------------------------------------------------------

if not defined("q_exec")

readonly proc q_exec(a) is
    return try_exec(a)
end

end

%-------------------------------------------------------------------- emacs ---
% If you have emacs and want to compile ".el" files to ".elc" files,
% fill in the function below. Otherwise, comment out or delete the
% entire function. Note, the distributed code assumes gnuemacs version 19
% or later.

readonly proc emacs_compile(el) is
    return q_exec("emacs -batch -f batch-byte-compile", el)
end

%------------------------------------------------------------------------------

GNU_CC     = "gcc"
GNU_CFLAGS = "-g"
if not defined ("GNU_MAKE")
    GNU_MAKE   = "make"
end

%------------------------------------------------------------------------------

X11_WITH_SHARED_MEM = TRUE
% --- X11 libraries include the shared memory extensions (XShm...)

%------------------------------------------------------------ misc. options ---
% Note, most of these options can be set from the command line. Otherwise,
% they can be set "permanently" here in the config file or in as needed
% in user's m3makefiles.

if not defined ("M3_BACKEND_MODE")
    M3_BACKEND_MODE = "3"
    % -- defines how the frontend, backend, and assembler interact
    %  "0"  -- don't call m3_backend, M3CG produces object code
    %  "1"  -- don't call m3_backend, M3CG produces assembly code
    %  "2"  -- call m3_backend, it produces object code
    %  "3"  -- call m3_backend, it produces assembly code
end

if equal(M3_BACKEND_MODE, "0") or equal(M3_BACKEND_MODE, "1")
        or equal(M3_BACKEND_MODE, "IntegratedObject") or equal(M3_BACKEND_MODE, "IntegratedAssembly")
    M3_FRONT_FLAGS = ["-unfold_nested_procs", "-check_procs"]
% --- internal configuration options passed directly to the Modula-3 front-end
else
    M3_FRONT_FLAGS = [ ]
end

M3_OPTIONS = [ ]
% --- user options passed directly to the Modula-3 front-end

% -keep on the command line
% M3_KEEP_FILES = TRUE
% --- keep intermediate and temporary files

% -boot on the command line
% M3_BOOTSTRAP = TRUE
% --- generate bootstrap code (assembly) instead of finaly object code

% M3_COMPILE_ONCE = TRUE
% --- don't recompile code to improve opaque object references

% SYS_HAS_LOADER = TRUE
% --- generate a loader info file with objects, libraries and timestamps

% M3_SKIP_LINK = TRUE
% --- skip the final link for programs, presumably to use the loader instead

M3_NEED_STANDALONE_LINKS = FALSE
% --- linker is broken and we need to build a directory of symbolic
%     links pointing to the non-shared libraries.

%------------------------------------------------------------------------------
