% Copyright 1996 Critical Mass, Inc. All rights reserved.
% 
% Standard configuration file for LINUX with ELF object files
%

%-------------------------------------------------- compilation environment ---

%M3_PROFILING = TRUE  % set by cm3 since 5.1.2 (option -profile)
%M3_PROFILING = FALSE

if M3_PROFILING
    readonly PROFILING_P = "p"
else
    readonly PROFILING_P = ""
end

readonly TARGET       = "LINUXLIBC6"      % code generation target
readonly BUILD_DIR    = TARGET & PROFILING_P % directory for results
readonly OS_TYPE      = "POSIX"           % { "WIN32" or "POSIX" }
readonly WORD_SIZE    = "32BITS"          % { "32BITS" or "64BITS" }
readonly GNU_PLATFORM = "i686-pc-linux-gnu"  % "cpu-vendor-os" string for GNU

readonly NAMING_CONVENTIONS = "0"
%                                        object files       libraries
%  0=Unix                          =>  .o   .io    .mo       libXX.a
%  1=Unix with a grumpy C compiler =>  .o   _i.o   _m.o      libXX.a
%  2=Windows NT or Windows 95      =>  .obj .io    .mo       XX.lib
%

%-------------------------------------------------- default compile options ---
% "set_config_options" is called before starting the compilation.  It should
% be used to provide system-wide default options.

proc set_config_options() is
  m3_option("-why")   %-- produce a listing that explains what's happening and why
  m3_debug(TRUE)      %-- produce object code with debugging symbols
  M3_OPTIONS += "-w1"  %-- produce "level 1" warnings
end

%------------------------------------------------------------- export paths ---
% During the installation, destination directories that do not exist 
% will be created. You need the necessary permissions to do so; otherwise,
% the installation will fail, but can be restarted after you have 
% fixed the permissions.

readonly
proc
CM3SetInstallRoot(
    )
is
    if defined("INSTALL_ROOT")
        return
    end
    if not equal($CM3_INSTALL, "")
        INSTALL_ROOT = $CM3_INSTALL
        return
    end
    INSTALL_ROOT = (path() & SL & "..")
end

CM3SetInstallRoot()

readonly BIN_INSTALL    = INSTALL_ROOT & SL & "bin"     % executables
readonly LIB_INSTALL    = INSTALL_ROOT & SL & "lib" & PROFILING_P   % libraries
readonly PKG_INSTALL    = INSTALL_ROOT & SL & "pkg"     % packages
readonly DOC_INSTALL    = INSTALL_ROOT & SL & "doc"     % documents
readonly EMACS_INSTALL  = INSTALL_ROOT & SL & "elisp"   % emacs lisp code
readonly MAN_INSTALL    = INSTALL_ROOT & SL & "man"     % man pages
readonly HTML_INSTALL   = INSTALL_ROOT & SL & "www"     % public hypertext

% On some systems (e.g. AFS) you must install public files in a different
% place from where you use them.  If that is the case for your system,
% specify the "use" location here, otherwise leave them alone.
%
USE_ROOT  = INSTALL_ROOT
BIN_USE   = BIN_INSTALL     % executables
LIB_USE   = LIB_INSTALL     % libraries
PKG_USE   = PKG_INSTALL     % packages

% write("path() is " & path() & CR)
% write("INSTALL_ROOT is " & INSTALL_ROOT & CR)
% write("PKG_USE is " & PKG_USE & CR)

readonly INSTALL_IMPLS = TRUE
% TRUE
%    => save all source files during the install
%    => makes debugging easier and browsing more fruitful
% FALSE
%    => save only the exported interfaces and templates 
%    => makes the installed system slightly smaller.

%------------------------------------------------ external system libraries ---
% SYSTEM_LIBS provides a mapping from Modula-3 names for the common
% external libraries to site-dependent information about how they
% are accessed.  If SYSTEM_LIBS{x} is defined it should be a list
% of linker arguments that are used when linking against that library.
% If SYSTEM_LIBS{x} is not defined, the Modula-3 system will assume
% that the library is not available.

proc exists(x) is
  return not stale(x, x)
end

%
% This is what Ubuntu 8.4 Hardy Heron beta KDE4 uses
%
if exists("/usr/lib32")
  proc Xlib(name, version) is
    return "/usr/lib32/lib" & name & ".so." & version
  end
else
  proc Xlib(name, version) is
    return "-l" & name
  end
end

SYSTEM_LIBS =
{
    "LIBC"       : [ "-Xlinker", "-Bdynamic", "-lm", "-lpthread" ],
    "LEX-YACC"   : [ "-Xlinker", "-Bdynamic", "-ll" ],
    "FLEX-BISON" : [ "-Xlinker", "-Bdynamic", "-lfl" ],
    "POSTGRES95" : [ "-Xlinker", "-Bdynamic", "-L/usr/local/pgsql/lib", "-lpq" ],
    "OPENGL"     : [ "-Xlinker", "-Bdynamic", "-lGLU", "-lGL", "-lXext" ],
    "ODBC"       : [ "-Xlinker", "-Bdynamic", "-lodbc" ],
    "MOTIF"      : [ "-Xlinker", "-Bdynamic", "-lXm" ],
    "TCP"        : [ ],
    "X11" :      [ "-Xlinker",
                   "-Bdynamic",
                    Xlib("Xaw", 7),
                    Xlib("Xmu", 6),
                    Xlib("Xext", 6),
                    Xlib("Xt", 6),
                    Xlib("SM", 6),
                    Xlib("ICE", 6),
                    Xlib("X11", 6) ]
}

% SYSTEM_LIBORDER defines the order in which SYSTEM_LIBS should be
% scanned by the linker.

SYSTEM_LIBORDER =
[
    "OPENGL",
    "DECPEX",
    "MOTIF",
    "X11",
    "TCP",
    "ODBC",
    "POSTGRES95",
    "FLEX-BISON",
    "LEX-YACC",
    "LIBC",
]

%---------------------------------------------------------- system programs ---

readonly SYSTEM_CC  = "cc" % C compiler
readonly SYSTEM_AR  = "ar" % Archiver
readonly SYSTEM_ASM = "as" % Assembler

%--------------------------------------------------------- Modula-3 backend ---
% For platforms without an integrated backend, "m3_backend" is called to
% translate Modula-3 intermediate code to object code.

readonly m3back = "@" & BIN_USE & "/cm3cg"

proc m3_backend(source, object, optimize, debug) is
  local args = [ "-quiet", source, "-o", object, "-fPIC", GetM3BackFlag ("-m32"), GetM3BackFlag ("-fno-reorder-blocks") ]
  if optimize  args += "-O3"  end
  if debug     args += "-gstabs+"  end
  if M3_PROFILING args += "-p" end
  return try_exec (m3back, args)
end

M3_BACKEND_MODE = "3"
% -- defines how the frontend, backend, and assembler interact
%  "0"  -- don't call m3_backend, M3CG produces object code
%  "1"  -- don't call m3_backend, M3CG produces assembly code
%  "2"  -- call m3_backend, it produces object code
%  "3"  -- call m3_backend, it produces assembly code

%--------------------------------------------------------------- C compiler ---
% "compile_c" is called to compile C source files.  Note that this function
% is only called if your program or library explicitly includes C source
% code, the system distributed by Critical Mass does not.

proc compile_c(source, object, options, optimize, debug) is
  % should probe for if -m32 switch is accepted
  local args = [ "-m32", "-fPIC", options ]
  if optimize  args += "-O"  end
  if debug     args += "-gstabs+"  end
  if M3_PROFILING args += "-pg" end
  return try_exec (SYSTEM_CC, args, "-c", source)
end

%---------------------------------------------------------------- assembler ---
% "assemble" is called to assemble .s or .asm files.  Note that this function
% is only called if your program or library explicitly includes assembly source
% code, the system distributed by Critical Mass does not.

proc assemble(source, object) is
  % should probe for if --32 switch is accepted
  return try_exec("@" & SYSTEM_ASM, "--32", source, "-o", object)
end

%------------------------------------------------------------------------------

%
% GcWrapFlags is needed for older toolsets and this config file
% strives to work with old and new automatically.
% This should go in some "Linux-common" file.
%

GcWrapFlags = ""

readonly proc GetGcWrapFlags() is
    if not GcWrapFlags
        % write("checking for GcWrapFlags" & CR)
        GcWrapFlags = " "
        local ExitCode = try_exec("@grep -F m3gcdefs " & PKG_USE & "/m3core/" & TARGET & "/.M3EXPORTS > /dev/null")
        if equal(ExitCode, 0)
            GcWrapFlags = "-Wl,--wrap,adjtime,--wrap,getdirentries,--wrap,readv,--wrap,utimes,--wrap,wait3"

            % find libm3gcdefs here
            % GcWrapFlags = GcWrapFlags & " -L" & LIB_USE & " -lm3gcdefs"
            % GcWrapFlags = GcWrapFlags & " " & LIB_USE & "/libm3gcdefs.a"
        end
    end
    return GcWrapFlags
end

% write("exists(/) is " & exists("/") & CR)
% write("exists(/pub/lang/m3/cm3-dist/cm3/lib) is " & exists("/pub/lang/m3/cm3-dist/cm3/lib") & CR)
% write("exists(/bin/sh) is " & exists("/bin/sh") & CR)
% write("exists(/bin/shx) is " & exists("/bin/shx") & CR)
% error("")

%
% The 5.1.8 distribution seems to look for libm3gcdefs
% in a hard-coded place unlikely to be correct. Fix it.
%
% Also old distributions reference errno directly.
% That is bad in multithreaded programs but should be
% ok for bootstrapping. This code should probably
% be gated by if defined("BOOT") or defined("OLD_BOOT")
% or such.
%
% GcWrapFlags does not necessarily coincide with references to errno.
%
readonly proc FixM3GcDefs(Args) is
    local GcWrapFlags = GetGcWrapFlags()
    if equal(GcWrapFlags, " ")
        return Args
    end
    % if equal(LIB_USE, "/pub/lang/m3/cm3-dist/cm3/lib")
    %     return Args
    % end
    % if equal(LIB_USE, "/pub/lang/m3/cm3-dist/cm3/bin/..lib")
    %     return Args
    % end
    % local Result = [ ]
    % Result += "-L" & LIB_USE
    % foreach Arg in Args
    %    write("Arg is " & Arg & CR)
    %    if equal(Arg, "-L/pub/lang/m3/cm3-dist/cm3/lib")
    %        write("changing arg" & CR)
    %        Result += "-L" & LIB_USE
    %    else
    %        Result += Arg
    %    end
    %end
    %Result += "/usr/lib/libc.a"
    %return Result
    %Args += "-L" & LIB_USE
    %Args += "/usr/lib/libc.a"
    return Args
end

%
% Hash of command line option to TRUE or FALSE,
% to avoid probing more than once. 
%
local IsM3BackFlagSupported_Cache = { }

readonly proc IsM3BackFlagSupported(x) is
    local Result = 0
    if IsM3BackFlagSupported_Cache contains x
        Result = IsM3BackFlagSupported_Cache{x}
    else
        % write("probing " & m3back & " for " & x & CR)
        Result = not equal(try_exec(
            m3back & " " & x & " /dev/null 2>&1 "
            & "| grep -F -e \"Invalid option\" -e \"unrecognized command line option\" > /dev/null"), 0)
        IsM3BackFlagSupported_Cache{x} = Result
    end
    return Result
end

readonly proc GetM3BackFlag(x) is
    if not IsM3BackFlagSupported(x)
        x = ""
    end
    return x
end

% write("GetGcWrapFlags is " & GetGcWrapFlags() & CR)
% write("GetGcWrapFlags is " & GetGcWrapFlags() & CR)
% write("GetM3BackFlag(-foo) is " & GetM3BackFlag("-foo") & CR)
% write("GetM3BackFlag(-fno-reorder-blocks) is " & GetM3BackFlag("-fno-reorder-blocks") & CR)
% write("GetM3BackFlag(-fno-reorder-blocks) is " & GetM3BackFlag("-fno-reorder-blocks") & CR)
% write("GetM3BackFlag(-g) is " & GetM3BackFlag("-g") & CR)
% write("GetM3BackFlag(-g) is " & GetM3BackFlag("-g") & CR)
% write("GetM3BackFlag(-m32) is " & GetM3BackFlag("-m32") & CR)
% write("GetM3BackFlag(-m32) is " & GetM3BackFlag("-m32") & CR)
% error("")

%--------------------------------------------------------- library creation ---
% "make_lib" is called to combine a collection of object modules into
% a library.

proc make_lib(lib, options, objects, imported_libs, shared) is
    local ret_code = 0
    local lib_a    = format("lib%s.a", lib)
    local lib_so   = format("lib%s.so", lib)
    local lib_sox  = format("lib%s.so.5", lib)

    % build the non-shared library
    ret_code = try_exec("@" & SYSTEM_AR, "crus", lib_a, objects)
    if not equal(ret_code, 0)
        return ret_code
    end

    if not shared
        delete_file(lib_so)
        delete_file(lib_sox)
        return 0
    end

    % build the shared library
    local pg = ""
    if M3_PROFILING
        pg = "-pg"
    end
    ret_code =
        try_exec(
            SYSTEM_CC,
            GetGcWrapFlags(),
            pg,
            "-shared",
            % should probe for if -m32 switch is accepted
            "-m32",
            "-Wl,-soname," & lib_sox,
            "-o", lib_sox,
            objects,
            )
    if not equal(ret_code, 0)
        return ret_code
    end

    % create the version aliases
    link_file(lib_sox, lib_so)

    % make sure the shared library stuff gets installed properly
    install_derived(lib_sox)
    install_derived_link(lib_sox, lib_so)
    install_link_to_derived(lib_sox, LIB_INSTALL)
    install_link_to_derived(lib_so, LIB_INSTALL)

    return 0
end

%-------------------------------------------------------------------
% "skip_lib" is called when the compiler decides it doesn't need to
% call "make_lib", but it wants to discover the names of the derived
% files that should be deleted or shipped.

proc skip_lib(lib, shared) is
    local lib_so   = format("lib%s.so", lib)
    local lib_sox  = format("lib%s.so.5", lib)
    
    if shared
        % make sure the shared library stuff gets installed properly
        install_derived(lib_sox)
        install_derived(lib_so)
        install_link_to_derived(lib_sox, LIB_INSTALL)
        install_link_to_derived(lib_so, LIB_INSTALL)
    else
        delete_file(lib_so)
        delete_file(lib_sox)
    end
    
    return 0
end

%------------------------------------------------------------------- linker ---
% "m3_link" is called to produce a final executable.

proc m3_link(prog, options, objects, imported_libs, shared) is
    % The parameter order here is not faithful to the original.
    % Does it matter?
    local args = [ ]
    if not shared
        args +=  [ "-Xlinker", "-Bstatic" ]
    end
    args +=
    [
        GetGcWrapFlags(),
        % should probe for if -m32 switch is accepted
        "-m32",
        "-o", prog,
        "-fPIC",
        options,
        objects,
        FixM3GcDefs(imported_libs),
    ]
    if M3_PROFILING
        args += "-pg"
    end
    return try_exec(SYSTEM_CC, args)
end

%-------------------------------------------------------------------
% "skip_link" is called when the compiler decides it doesn't need to
% call "m3_link", but it wants to discover the names of the derived
% files that should be deleted or shipped.

proc skip_link(prog, shared) is
    return 0
end

%------------------------------------------------------------ misc. options ---
% Note, most of these options can be set from the command line.  Otherwise,
% they can be set "permanently" here in the config file or in as needed
% in user's m3makefiles.

M3_FRONT_FLAGS = [ ]
% --- internal configuration options passed directly to the Modula-3 front-end

M3_OPTIONS = [ ]
% --- user options passed directly to the Modula-3 front-end

% M3_KEEP_FILES = TRUE
% --- keep intermediate and temporary files

% M3_WINDOWS_GUI = TRUE
% --- generate a Windows GUI subsystem program instead of a console one.

% M3_COVERAGE = TRUE
% --- compile & link with coverage options

M3_COVERAGE_LIB = LIB_USE & "/report_coverage.o"
% --- library linked in programs compiled with "-Z" coverage option

M3_SPLIT_LIBNAMES = TRUE
% --- split library names and pass -L/-l arguments to the linker

M3_SHARED_LIB_ARG = "-Wl,-R"
% --- pass "-R" flags to the linker too...

% M3_BOOTSTRAP = TRUE
% --- generate bootstrap code (assembly) instead of finaly object code

% M3_COMPILE_ONCE = TRUE
% --- don't recompile code to improve opaque object references

% SYS_HAS_LOADER = TRUE
% --- generate a loader info file with objects, libraries and timestamps

% M3_SKIP_LINK = TRUE
% --- skip the final link for programs, presumably to use the loader instead

% M3_MAIN_IN_C = TRUE
% --- generate the Modula-3 main program as C code

X11_WITH_SHARED_MEM = TRUE
% --- X11 libraries include the shared memory extensions (XShm...)

%M3_NEED_STANDALONE_LINKS = TRUE
% --- linker is broken and we need to build a directory of symbolic
%     links pointing to the non-shared libraries.

%-------------------------------------------------------------------- emacs ---
% If you have emacs and want to compile ".el" files to ".elc" files,
% fill in the function below.  Otherwise, comment out or delete the
% entire function.  Note, the distributed code assumes gnuemacs version 19
% or later.

readonly proc emacs_compile(el) is
  exec("emacs -batch -f batch-byte-compile", el)
end

%------------------------------------------------------------- GNU variants ---
% The two large pieces of GNU software used by the Modula-3 system
% gcc(=m3cc) and gdb(=m3gdb) often require slightly different C compilers
% or flags.  They are specified here.  Note that they may be overridden
% from the m3build command line.
%
% To use the GNU defaults for CC and CFLAGS, specify "*".
%

GNU_CC     = "gcc"
GNU_CFLAGS = "-g -O"
GNU_MAKE   = "make"
