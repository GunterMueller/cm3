% Copyright 1996-2000 Critical Mass, Inc. All rights reserved.
% See file COPYRIGHT-CMASS for details.
% 
% Standard configuration file for SOLsun (Solaris 2.x w/Sun C)
%


readonly TARGET       = "SOLsun"
readonly WORD_SIZE    = "32BITS"
readonly GNU_PLATFORM = "sparc-sun-solaris2"
readonly m3back = "cm3cg -quiet -gstabs+ -fPIC -m32"

SYSTEM_LIBS = {
  "LIBC"       : [ "-lsocket", "-lnsl",
                   "-lpthread",
                   "-lrt", % semaphores
                   "-lsunmath", "-lm", "-lc"
                 ],
  "LEX-YACC"   : [ "-ll" ],
  "FLEX-BISON" : [ ],
  "POSTGRES95" : [ ],
  "OPENGL"     : [ "-lGLU", "-lGL", "-lXext" ],
  "ODBC"       : [  ],
  "MOTIF"      : [ "-lXm" ],
  "X11"        : [ "-lXaw", "-lXmu", "-lXext", "-lXt", "-lX11" ],
  "TCP"        : [ ]
}


SYSTEM_LIBORDER = [
  "OPENGL",
  % "DECPEX",
  "MOTIF",
  "X11",
  "TCP",
  % "ODBC",
  % "POSTGRES95",
  % "FLEX-BISON",
  "LEX-YACC",
  "LIBC"
]

readonly SYSTEM_CC = "cc -g -mt -xcode=pic13 -xldscope=symbolic"
readonly SYSTEM_LD = SYSTEM_CC % "ld"
readonly SYSTEM_AR = "ar"
readonly SYSTEM_ASM = "as"


M3_USE_STACK_WALKER = TRUE


proc compile_c (source, object, options, optimize, debug) is
  local args = [ options ]
  return try_exec ("@" & SYSTEM_CC, args, "-c", source)
end


proc assemble (source, object) is
  return try_exec ("@" & SYSTEM_ASM, "-xarch=v8plus", "-s", "-K", "PIC", source, "-o", object)
end


proc make_lib (lib, options, objects, imported_libs, shared) is
  local ret_code = 0
  local lib_a    = format ("lib%s.a", lib)
  local lib_so   = format ("lib%s.so", lib)
  local lib_sox  = format ("lib%s.so.5", lib)

  % first, build the non-shared library
  ret_code = try_exec ("@" & SYSTEM_AR, "cru", lib_a, objects)
  if not equal (ret_code, 0) return ret_code end

  if shared
    % then, build the shared library
    ret_code = try_exec ("@" & SYSTEM_LD,
      "-dy",
      "-G",
      "-z defs",
      % "-z text",
      "-o",
      lib_sox, "-h", lib_sox, objects,
      imported_libs,
      %GetM3CoreStaticObjs(lib)
      )
    if not equal (ret_code, 0) return ret_code end

    % create the version aliases
    link_file(lib_sox, lib_so)

    % finally, make sure the shared library stuff gets installed properly
    install_derived (lib_sox)
    install_derived_link (lib_sox, lib_so)
    install_link_to_derived (lib_sox, LIB_INSTALL)
    install_link_to_derived (lib_so, LIB_INSTALL)
    ShipM3CoreStaticObjs(lib)
  else
    delete_file (lib_so)
    delete_file (lib_sox)
  end

  return 0
end

%------------------------------------------------------------------- linker ---
% "m3_link" is called to produce a final executable.

proc m3_link (prog, options, objects, imported_libs, shared) is
  local linker = [ "@" & SYSTEM_CC ]
  local args = [
    "-o", prog, options, objects, imported_libs,
    % "-z text",
    "-z defs" ]
  return try_exec (linker, args, GetM3CoreStaticObjs(""))
end


%
% NT386.common could use "hand" here in the future.
%
%M3CoreStaticObjs = ["libgcc"]


include ("Unix.common")


M3_SHARED_LIB_ARG = "-R"
% --- pass "-R" flags to the linker too.


GNU_MAKE   = "gmake"
