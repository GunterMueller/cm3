% Copyright 1996 Critical Mass, Inc. All rights reserved.
% 
% common configuration file for various platforms
%

include("cm3cfg.common")

%-------------------------------------------------- compilation environment ---

readonly OS_TYPE      = "POSIX"           % { "WIN32" or "POSIX" }

readonly NAMING_CONVENTIONS = "0"
%                                        object files       libraries
%  0=Unix                          =>  .o   .io    .mo       libXX.a
%  1=Unix with a grumpy C compiler =>  .o   _i.o   _m.o      libXX.a
%  2=Windows NT or Windows 95      =>  .obj .io    .mo       XX.lib
%

%------------------------------------------------ external system libraries ---
% SYSTEM_LIBS provides a mapping from Modula-3 names for the common
% external libraries to site-dependent information about how they
% are accessed.  If SYSTEM_LIBS{x} is defined it should be a list
% of linker arguments that are used when linking against that library.
% If SYSTEM_LIBS{x} is not defined, the Modula-3 system will assume
% that the library is not available.

if not defined ("SYSTEM_LIBS")

SYSTEM_LIBS =
{
    "LIBC"       : [ "-lm", "-lpthread" ],
    "LEX-YACC"   : [ "-ll" ],
    "FLEX-BISON" : [ "-lfl" ],
    "POSTGRES95" : [ "-L/usr/local/pgsql/lib", "-lpq" ],
    "OPENGL"     : [ "-lGLU", "-lGL", "-lXext" ],
    "ODBC"       : [ "-lodbc" ],
    "MOTIF"      : [ "-lXm" ],
    "TCP"        : [ ],
    "X11" :      [  "-L/usr/X11R6/lib", "-lXaw", "-lXmu", "-lXext", "-lXt", "-lSM", "-lICE", "-lX11" ]
}

end

% SYSTEM_LIBORDER defines the order in which SYSTEM_LIBS should be
% scanned by the linker.

if not defined ("SYSTEM_LIBORDER")

SYSTEM_LIBORDER = [ "OPENGL", "DECPEX", "MOTIF", "X11", "TCP",
    "ODBC", "POSTGRES95", "FLEX-BISON", "LEX-YACC", "LIBC" ]

end

if not defined("SYSTEM_LD")
  SYSTEM_LD = SYSTEM_CC
end

%--------------------------------------------------------- Modula-3 backend ---
% For platforms without an integrated backend, "m3_backend" is called to
% translate Modula-3 intermediate code to object code.

proc m3_backend(source, object, optimize, debug) is
    local args = [ "-quiet", "-fno-reorder-blocks" ]
    if optimize and not equal(TARGET, "I386_INTERIX")
        args += "-O3"
    end
    if M3_PROFILING
        args += "-p"
    end
    local m3back = GetM3Back()
    return try_exec (m3back, args, source, "-o", object)
end

%--------------------------------------------------------------- C compiler ---
% "compile_c" is called to compile C source files.  Note that this function
% is only called if your program or library explicitly includes C source
% code, the system distributed by Critical Mass does not.

if not defined ("compile_c")

proc compile_c(source, object, options, optimize, debug) is
    local args = options
    if M3_PROFILING args += "-pg" end
    return try_exec ("@" & SYSTEM_CC, args, "-c", source)
    end

end

%---------------------------------------------------------------- assembler ---
% "assemble" is called to assemble .s or .asm files.  Note that this function
% is only called if your program or library explicitly includes assembly source
% code, the system distributed by Critical Mass does not.

proc assemble(source, object) is
    if defined("configure_assembler")
        configure_assembler()
    end
    return try_exec("@" & SYSTEM_ASM, source, "-o", object)
end

%--------------------------------------------------------- library creation ---
% "make_lib" is called to combine a collection of object modules into
% a library.

if not defined("make_lib")

proc make_lib(lib, options, objects, imported_libs, shared) is
    local suffix = "so"
    local hpux_flags = ""
    local soname_flag = "-soname"
    if equal (TARGET, "PA32_HPUX") or equal (TARGET, "PA64_HPUX")
      suffix = "sl"
      soname_flag = "+h"
    end
    local ret_code = 0
    local lib_a   = format("lib%s.a", lib)
    local lib_so  = format("lib%s.%s", lib, suffix)
    local lib_sox = format("lib%s.%s.5", lib, suffix)

    % first build the non-shared library in the usual ar/ranlib way

    local S = ""

    if defined("AR_AND_RANLIB_ARE_ONE")
        S = "s"
    end

    ret_code = try_exec("@ar", "cru" & S, lib_a, objects)
    if not equal(ret_code, 0)
        return ret_code
    end

    if not defined("AR_AND_RANLIB_ARE_ONE")
        ret_code = try_exec("@ranlib", lib_a)
        if not equal(ret_code, 0)
            return ret_code
        end
    end

    if shared and defined("install_symbolic_link")

        local soname_opt = "-Wl," & soname_flag & "," & lib_sox
        if equal (TARGET, "I386_INTERIX")
            soname_opt = ""
        end

        % build the shared library
        local pg = ""
        if M3_PROFILING
            pg = "-pg"
        end
        ret_code =
            try_exec(
                "@" & SYSTEM_LD,
                pg,
                "-shared",
                soname_opt,
                "-o", lib_sox,
                objects,
                imported_libs)
        if not equal(ret_code, 0)
            return ret_code
        end
    end

    local a = skip_lib(lib, shared)

    return 0
end

end

%-------------------------------------------------------------------
% "skip_lib" is called when the compiler decides it doesn't need to
% call "make_lib", but it wants to discover the names of the derived
% files that should be deleted or shipped.

if not defined("skip_lib")

proc skip_lib(lib, shared) is
    local suffix = "so"
    if equal (TARGET, "PA32_HPUX")
      suffix = "sl" 
    end

    local lib_a   = format("lib%s.a", lib)
    local lib_so = format("lib%s.%s", lib, suffix)
    local lib_sox = format("lib%s.%s.5", lib, suffix)

    if shared and defined("install_symbolic_link")
        % create the version aliases
        link_file(lib_sox, lib_so)

        % make sure the shared library stuff gets installed properly
        LibdExport(lib_sox)
        install_link_to_derived(lib_a, LIB_INSTALL)
        install_symbolic_link(lib_sox, LIB_INSTALL & "/" & lib_so)
        install_derived_link("../../../lib/" & lib_sox, lib_so)
        install_derived_link("../../../lib/" & lib_sox, lib_sox)

    else
        delete_file(lib_so)
        delete_file(lib_sox)
    end

    return 0
end

end

%------------------------------------------------------------------- linker ---
% "m3_link" is called to produce a final executable.

if not defined("m3_link")

proc m3_link(prog, options, objects, imported_libs, shared) is
    local args =
    [
        "-o", prog,
        options,
        objects,
        imported_libs,
    ]
    if M3_PROFILING
        args += "-pg"
    end
    if defined("POSITION_INDEPENDENT_EXECUTABLE")
        args += POSITION_INDEPENDENT_EXECUTABLE
    end
    return try_exec("@" & SYSTEM_LD, args)
end

end

%------------------------------------------------------------ misc. options ---
% Note, most of these options can be set from the command line.  Otherwise,
% they can be set "permanently" here in the config file or in as needed
% in user's m3makefiles.

M3_COVERAGE_LIB = LIB_USE & "/report_coverage.o"
% --- library linked in programs compiled with "-Z" coverage option

M3_SPLIT_LIBNAMES = TRUE
% --- split library names and pass -L/-l arguments to the linker

if not defined("M3_SHARED_LIB_ARG")
  M3_SHARED_LIB_ARG = "-Wl,-R"
end
% --- pass "-R" flags to the linker too.
