% Copyright (C) 1994, Digital Equipment Corporation
% All rights reserved.
% See the file COPYRIGHT for a full description.
%
% Last modified on Fri Feb 10 13:17:23 PST 1995 by kalsow
%

% Define quick to avoid doing a configure.  It should only need to be done
%  once on a given platform. 
%quick = 1

readonly Platform_info = {
  "AIX386"    : "i486-ibm-aix",
  "ALPHA_OSF" : "alpha-dec-osf1",
  "AP3000"    : "apollo68-bsd",
  "ARM"       : "arm--riscos",
  "BSDI4"     : "i386-unknown-freebsdelf",
  "DS3100"    : "decstation",
  "FBSD_ALPHA": "alpha-unknown-freebsd",
  "FreeBSD"   : "i486-unknown-bsd",
  "FreeBSD2"  : "i486-unknown-freebsd",
  "FreeBSD3"  : "i386-unknown-freebsd3",
  "FreeBSD4"  : "i386-unknown-freebsd4",
  "HP300"     : "m68k-hp-hpux",
  "HPPA"      : "hppa1.1-hp-hpux",
  "IBMR2"     : "rs6000-ibm-aix3.2",
  "IBMRT"     : "romp-ibm-aos",
  "IRIX5"     : "mips-sgi-irix5",
  "LINUX"     : "i486--linux",
  "LINUXELF"  : "i486--linuxelf",
  "LINUXLIBC6": "i486--linuxelf",
  "NEXT"      : "next-bsd",
  "NT386"     : "i686-pc-cygwin",
  "NT386GNU"  : "i686-pc-cygwin",
  "OKI"       : "i860--sysv4.0",
  "SEQUENT"   : "i386-sequent-bsd",
  "SOLgnu"    : "sparc-sun-solaris2",
  "SOLsun"    : "sparc-sun-solaris2",
  "SPARC"     : "sparc-sun-sunos4.1",
  "SUN3"      : "m68k-sun-sunos4.1",
  "SUN386"    : "i386-sun-sunos4.1",
  "Tru64v5"   : "alpha-dec-osf1",
  "UMAX"      : "encore-bsd",
  "VAX"       : "vax-dec-ultrix",
  "I386_DARWIN" : "i386-apple-darwin8.7.1",
  "PPC_DARWIN"  : "powerpc-apple-darwin6.3",
  "PPC_LINUX"   : "powerpc-apple-linuxelf",
  "NetBSD2_i386" : "i386-unknown-netbsdelf"
}

readonly proc GNU_platform (x) is
  if Platform_info contains x
    return Platform_info{x}
  else
    error ("GNU platform is not known for \"" & x & "\"")
    return "unknown-unknown-unknown"
  end
end

readonly m3gdb_config = {
  % misc. gdb configuration options  (e.g.  "DS3100" : "--with-stabs")
} % m3gdb_config

readonly proc get_config (target) is
  if m3gdb_config contains target
    return m3gdb_config {target}
  else
    return ""
  end
end

readonly proc get_overrides (nm, ov) is
  if equal (ov, "*")
    return ""
  else
    return format ("%s=\"%s\"", nm, ov)
  end
end

EXE = ""
if equal(TARGET, "NT386") or equal(TARGET, "NT386GNU")
    EXE = ".exe"
end

m3gdb_ResponseFileCounter = "0"

readonly proc m3gdb_Run (x)
is
    if equal($OS, "Windows_NT")
        local readonly Temp = "temp" & m3gdb_ResponseFileCounter & ".sh"
        > Temp in
            write(x)
        end
        %
        % Quake can't do math, or generate unique temp files.
        % Uniqueness is not critical here, it is merely useful
        % while debugging to go back and see the temp files.
        %
        m3gdb_ResponseFileCounter =
            { "0":"1","1":"2","2":"3","3":"4","4":"5",
              "5":"6","6":"7","7":"8","8":"9","9":"0", }{m3gdb_ResponseFileCounter}

        write("sh ./" & Temp & " (" & x & ")" & CR)
        exec("sh ./" & Temp)
    else
        %
        % PM3 m3gdb_Run apparently return a value that must be assigned to a variable
        % local ExitCode = m3gdb_Run(x)
        %
        exec(x)
    end
end


%
% star means default
% These are meant to come from the config file, but it can omit them
%
if not defined("GNU_CC")     GNU_CC     = "*"    end
if not defined("GNU_CFLAGS") GNU_CFLAGS = "*"    end
if not defined("GNU_MAKE")   GNU_MAKE   = "make" end


M3GDB_CFLAGS="-g"

% check for overrides, otherwise use the defaults from the configuration file
if not defined ("M3GDB_HOST")    M3GDB_HOST   = TARGET     end
if not defined ("M3GDB_CC")      M3GDB_CC     = GNU_CC     end
if not defined ("M3GDB_CFLAGS")  M3GDB_CFLAGS = GNU_CFLAGS end
if not defined ("M3GDB_MAKE")    M3GDB_MAKE   = GNU_MAKE   end
if not defined ("M3GDB_CONFIG")  M3GDB_CONFIG = get_config (M3GDB_HOST) end


% check for non-default flags
ARG0 = get_overrides ("CC", M3GDB_CC)
ARG1 = get_overrides ("CFLAGS", M3GDB_CFLAGS)

if defined ("quick")
  % do not bother reconfiguring, just build gdb
  %PM3: returnCode = m3gdb_Run ([M3GDB_MAKE, ARG0, ARG1])
  m3gdb_Run([M3GDB_MAKE, ARG0, ARG1])
else
  % configure the sources & compile
  % Here, current directory is LINUXLIBC6 

  CONFIG_PLATFORM = GNU_platform (M3GDB_HOST)

  write("###################### CONFIGURE: ##################" & CR)
  %
  % PM3 PERHAPS ran configure twice here, with and without CONFIG_PLATFORM?
  %
  m3gdb_Run(["../gdb/configure", M3GDB_CONFIG, "--srcdir=../gdb",  CONFIG_PLATFORM])
  write("###################### MAKE: ##################" & CR)
  EXTRA_MAKEFLAGS = ""
  if (equal(M3GDB_HOST, "SOLgnu"))
    EXTRA_MAKEFLAGS = "LDFLAGS=-lintl"
  end
  m3gdb_Run([M3GDB_MAKE, EXTRA_MAKEFLAGS, ARG0, ARG1])
end

% finally, build the exportable link and man page and export them
write("###################### LINK_FILE: ##################" & CR)
link_file ("gdb/gdb" & EXE, "m3gdb" & EXE)
write("###################### BINDEXPORT: ##################" & CR)
BindExport ("m3gdb" & EXE)
write("###################### MANPAGE: ##################" & CR)
ManPage ("m3gdb","1")

%write("###################### IMPORT: ##################" & CR)
%import("m3doc")
%write("###################### HTMLFILE: ##################" & CR)
%HtmlFile("index")

%write("###################### OTHERPACKAGE: ##################" & CR)
%OtherPackage("m3gdb")
