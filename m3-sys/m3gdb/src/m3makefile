%
% Copyright (C) 1994, Digital Equipment Corporation
% All rights reserved.
% See the file COPYRIGHT for a full description.
%
% Last modified on Fri Feb 10 13:17:23 PST 1995 by kalsow
%

%
% user can say cm3 -DM3GDB_HOST=FreeBSD4, for example.
%

if not (equal(TARGET, "AMD64_DARWIN") or equal(TARGET, "ARM_DARWIN") or equal(TARGET, "I386_DARWIN")
 or equal(TARGET, "PPC_DARWIN") or equal(TARGET, "PPC64_DARWIN") or equal(OS_TYPE, "WIN32"))

% Define quick to avoid doing a configure.  It should only need to be done
%  once on a given platform. 
%quick = 1

include("platforms.quake")

readonly proc GNU_platform (x) is
  if Platform_info contains x
    return Platform_info{x}
  else
    error ("GNU platform is not known for \"" & x & "\"")
    return "unknown-unknown-unknown"
  end
end

readonly proc Platform_ExeExtension (Platform) is
  if {"NT386":1,"NT386GNU":1,"AMD64_NT":1,"IA64_NT":1,"ARM_CE":1} contains Platform
    return ".exe"
  else
    return ""
  end
end

readonly proc HostIsNT () is
  return equal ($OS, "Windows_NT")
end

m3gdb_ResponseFileCounter = "0"

readonly proc m3gdb_Run (x) is
    >> "_m3.log" in
      write(x & CR)
    end
    if HostIsNT ()
        local readonly Temp = "_m3sh" & m3gdb_ResponseFileCounter & ".sh"
        > Temp in
            write(x)
        end
        %
        % Quake can't do math, or generate uniquely named temp files.
        % Uniqueness is not critical here, it is merely useful
        % while debugging to go back and see the temp files.
        %
        m3gdb_ResponseFileCounter =
            { "0":"1","1":"2","2":"3","3":"4","4":"5",
              "5":"6","6":"7","7":"8","8":"9","9":"0", }{m3gdb_ResponseFileCounter}

        write("sh ./" & Temp & " (" & x & ")" & CR)
        exec("sh ./" & Temp)
    else
        exec(x)
    end
end

local env = ""

include ("../../m3cc/src/gnumake.common")
include ("../../m3cc/src/gnucc.common")

ConfigureGNUMake()
write("GNU_MAKE is " & GNU_MAKE & CR)
env = env & " MAKE=" & GNU_MAKE & " "

M3GDB_CFLAGS="-g"

% check for overrides, otherwise use the defaults from the configuration file
if not defined ("M3GDB_MAKE")    M3GDB_MAKE   = GNU_MAKE   end

% check for non-default flags
env = env & " MAKEINFO=:"

M3GDB_CONFIG = M3GDB_CONFIG & " " & env
M3GDB_MAKE = M3GDB_MAKE & " " & env

% configure the sources
if equal (M3GDB_HOST, M3GDB_TARGET)
  m3gdb_Run([M3GDB_CONFIG, "../gdb/configure"])
else
  m3gdb_Run([M3GDB_CONFIG, "../gdb/configure", GNU_platform (M3GDB_HOST)])
end

m3gdb_Run([M3GDB_MAKE])

EXE = Platform_ExeExtension (M3GDB_HOST)

% build the exportable link and man page and export them
cp_if ("gdb/gdb" & EXE, "m3gdb" & EXE)
BindExport ("m3gdb" & EXE)
ManPage ("m3gdb","1")

%import("m3doc")
%HtmlFile("index")

%OtherPackage("m3gdb")

end
