<p>
   The shared object package is designed to complement Network
   objects.  A network object allows an object to be shared by
   multiple processes, possibly on different machines, by creating
   surrogate objects in all processes except the one in which the
   object actually exists.  From the point of view of the programmer
   and the executing program, the surrogate object behaves exactly
   like the original object.  However, all method calls to the
   surrogates are synchronously sent to the original object where they
   are executed, with return values or exceptions propogated back to
   the calling process.  
</p>
<p>
   For many applications, this is sufficient and has many desirable
   properties: there are no sychronization issues, calls are
   synchronous so exceptions propogate across processes, global
   garbage collection is performed, etc.  However, for some
   applicates, the paradigm is not appropriate.  The sychronous nature
   method calls restricts the frequency and of checking the object for
   changes.  More seriously, interested parties are restricted to
   polling an object if they are interested in changes.   Finally, all
   operations on an object, no matter how trivial, require a remote
   procedure call, which takes a significant amount of time.
</p>
<p>
   To address these problems, and others, the shared object package
   was created.  The model is the opposite of the network object
   package and is intended to complement rather that replace it.
   Instead of the object being stored at one location and remote
   method calls being used to access the object, shared objects are
   fully replicated in all interested processes, with any updates to
   the object being applied to all copies.  

</p>
