(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

INTERFACE QtLineRaw;


IMPORT Ctypes AS C;


<* EXTERNAL New_QLine0 *>
PROCEDURE New_QLine0 (): QLine;

<* EXTERNAL New_QLine1 *>
PROCEDURE New_QLine1 (pt1, pt2: ADDRESS; ): QLine;

<* EXTERNAL New_QLine2 *>
PROCEDURE New_QLine2 (x1, y1, x2, y2: C.int; ): QLine;

<* EXTERNAL QLine_isNull *>
PROCEDURE QLine_isNull (self: QLine; ): BOOLEAN;

<* EXTERNAL QLine_p1 *>
PROCEDURE QLine_p1 (self: QLine; ): ADDRESS;

<* EXTERNAL QLine_p2 *>
PROCEDURE QLine_p2 (self: QLine; ): ADDRESS;

<* EXTERNAL QLine_x1 *>
PROCEDURE QLine_x1 (self: QLine; ): C.int;

<* EXTERNAL QLine_y1 *>
PROCEDURE QLine_y1 (self: QLine; ): C.int;

<* EXTERNAL QLine_x2 *>
PROCEDURE QLine_x2 (self: QLine; ): C.int;

<* EXTERNAL QLine_y2 *>
PROCEDURE QLine_y2 (self: QLine; ): C.int;

<* EXTERNAL QLine_dx *>
PROCEDURE QLine_dx (self: QLine; ): C.int;

<* EXTERNAL QLine_dy *>
PROCEDURE QLine_dy (self: QLine; ): C.int;

<* EXTERNAL QLine_translate *>
PROCEDURE QLine_translate (self: QLine; p: ADDRESS; );

<* EXTERNAL QLine_translate1 *>
PROCEDURE QLine_translate1 (self: QLine; dx, dy: C.int; );

<* EXTERNAL QLine_translated *>
PROCEDURE QLine_translated (self: QLine; p: ADDRESS; ): ADDRESS;

<* EXTERNAL QLine_translated1 *>
PROCEDURE QLine_translated1 (self: QLine; dx, dy: C.int; ): ADDRESS;

<* EXTERNAL QLine_setP1 *>
PROCEDURE QLine_setP1 (self: QLine; p1: ADDRESS; );

<* EXTERNAL QLine_setP2 *>
PROCEDURE QLine_setP2 (self: QLine; p2: ADDRESS; );

<* EXTERNAL QLine_setPoints *>
PROCEDURE QLine_setPoints (self: QLine; p1, p2: ADDRESS; );

<* EXTERNAL QLine_setLine *>
PROCEDURE QLine_setLine (self: QLine; x1, y1, x2, y2: C.int; );

<* EXTERNAL QLine_EqualEqual *>
PROCEDURE QLine_EqualEqual (self: QLine; d: ADDRESS; ): BOOLEAN;

<* EXTERNAL QLine_NotEqual *>
PROCEDURE QLine_NotEqual (self: QLine; d: ADDRESS; ): BOOLEAN;

<* EXTERNAL Delete_QLine *>
PROCEDURE Delete_QLine (self: QLine; );

TYPE QLine <: ADDRESS;

<* EXTERNAL New_QLineF0 *>
PROCEDURE New_QLineF0 (): QLineF;

<* EXTERNAL New_QLineF1 *>
PROCEDURE New_QLineF1 (pt1, pt2: ADDRESS; ): QLineF;

<* EXTERNAL New_QLineF2 *>
PROCEDURE New_QLineF2 (x1, y1, x2, y2: C.double; ): QLineF;

<* EXTERNAL New_QLineF3 *>
PROCEDURE New_QLineF3 (line: ADDRESS; ): QLineF;

<* EXTERNAL FromPolar *>
PROCEDURE FromPolar (length, angle: C.double; ): ADDRESS;

<* EXTERNAL QLineF_isNull *>
PROCEDURE QLineF_isNull (self: QLineF; ): BOOLEAN;

<* EXTERNAL QLineF_p1 *>
PROCEDURE QLineF_p1 (self: QLineF; ): ADDRESS;

<* EXTERNAL QLineF_p2 *>
PROCEDURE QLineF_p2 (self: QLineF; ): ADDRESS;

<* EXTERNAL QLineF_x1 *>
PROCEDURE QLineF_x1 (self: QLineF; ): C.double;

<* EXTERNAL QLineF_y1 *>
PROCEDURE QLineF_y1 (self: QLineF; ): C.double;

<* EXTERNAL QLineF_x2 *>
PROCEDURE QLineF_x2 (self: QLineF; ): C.double;

<* EXTERNAL QLineF_y2 *>
PROCEDURE QLineF_y2 (self: QLineF; ): C.double;

<* EXTERNAL QLineF_dx *>
PROCEDURE QLineF_dx (self: QLineF; ): C.double;

<* EXTERNAL QLineF_dy *>
PROCEDURE QLineF_dy (self: QLineF; ): C.double;

<* EXTERNAL QLineF_length *>
PROCEDURE QLineF_length (self: QLineF; ): C.double;

<* EXTERNAL QLineF_setLength *>
PROCEDURE QLineF_setLength (self: QLineF; len: C.double; );

<* EXTERNAL QLineF_angle *>
PROCEDURE QLineF_angle (self: QLineF; ): C.double;

<* EXTERNAL QLineF_setAngle *>
PROCEDURE QLineF_setAngle (self: QLineF; angle: C.double; );

<* EXTERNAL QLineF_angleTo *>
PROCEDURE QLineF_angleTo (self: QLineF; l: ADDRESS; ): C.double;

<* EXTERNAL QLineF_unitVector *>
PROCEDURE QLineF_unitVector (self: QLineF; ): ADDRESS;

<* EXTERNAL QLineF_normalVector *>
PROCEDURE QLineF_normalVector (self: QLineF; ): ADDRESS;

<* EXTERNAL QLineF_intersect *>
PROCEDURE QLineF_intersect (self: QLineF; l, intersectionPoint: ADDRESS; ):
  C.int;

<* EXTERNAL QLineF_angle1 *>
PROCEDURE QLineF_angle1 (self: QLineF; l: ADDRESS; ): C.double;

<* EXTERNAL QLineF_pointAt *>
PROCEDURE QLineF_pointAt (self: QLineF; t: C.double; ): ADDRESS;

<* EXTERNAL QLineF_translate *>
PROCEDURE QLineF_translate (self: QLineF; p: ADDRESS; );

<* EXTERNAL QLineF_translate1 *>
PROCEDURE QLineF_translate1 (self: QLineF; dx, dy: C.double; );

<* EXTERNAL QLineF_translated *>
PROCEDURE QLineF_translated (self: QLineF; p: ADDRESS; ): ADDRESS;

<* EXTERNAL QLineF_translated1 *>
PROCEDURE QLineF_translated1 (self: QLineF; dx, dy: C.double; ): ADDRESS;

<* EXTERNAL QLineF_setP1 *>
PROCEDURE QLineF_setP1 (self: QLineF; p1: ADDRESS; );

<* EXTERNAL QLineF_setP2 *>
PROCEDURE QLineF_setP2 (self: QLineF; p2: ADDRESS; );

<* EXTERNAL QLineF_setPoints *>
PROCEDURE QLineF_setPoints (self: QLineF; p1, p2: ADDRESS; );

<* EXTERNAL QLineF_setLine *>
PROCEDURE QLineF_setLine (self: QLineF; x1, y1, x2, y2: C.double; );

<* EXTERNAL QLineF_EqualEqual *>
PROCEDURE QLineF_EqualEqual (self: QLineF; d: ADDRESS; ): BOOLEAN;

<* EXTERNAL QLineF_NotEqual *>
PROCEDURE QLineF_NotEqual (self: QLineF; d: ADDRESS; ): BOOLEAN;

<* EXTERNAL QLineF_toLine *>
PROCEDURE QLineF_toLine (self: QLineF; ): ADDRESS;

<* EXTERNAL Delete_QLineF *>
PROCEDURE Delete_QLineF (self: QLineF; );

TYPE QLineF <: ADDRESS;

END QtLineRaw.
