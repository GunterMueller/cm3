/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtCore/qabstractitemmodel.h>
#include <QtCore/qstringlist.h>
#include <QtCore/qsize.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QModelIndex * New_QModelIndex0() {
  QModelIndex *result = 0 ;
  QModelIndex * cresult ;
  
  result = (QModelIndex *)new QModelIndex();
  *(QModelIndex **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QModelIndex * New_QModelIndex1(QModelIndex const & other) {
  QModelIndex *arg1 = 0 ;
  QModelIndex *result = 0 ;
  QModelIndex * cresult ;
  
  arg1 = *(QModelIndex **)&other;
  result = (QModelIndex *)new QModelIndex((QModelIndex const &)*arg1);
  *(QModelIndex **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QModelIndex(QModelIndex * self) {
  QModelIndex *arg1 = (QModelIndex *) 0 ;
  
  arg1 = *(QModelIndex **)&self; 
  delete arg1;
}


SWIGEXPORT int QModelIndex_row(QModelIndex const * self) {
  QModelIndex *arg1 = (QModelIndex *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QModelIndex **)&self; 
  result = (int)((QModelIndex const *)arg1)->row();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QModelIndex_column(QModelIndex const * self) {
  QModelIndex *arg1 = (QModelIndex *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QModelIndex **)&self; 
  result = (int)((QModelIndex const *)arg1)->column();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned long QModelIndex_internalId(QModelIndex const * self) {
  QModelIndex *arg1 = (QModelIndex *) 0 ;
  unsigned long result;
  unsigned long cresult ;
  
  arg1 = *(QModelIndex **)&self; 
  result = (unsigned long)((QModelIndex const *)arg1)->internalId();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QModelIndex * QModelIndex_parent(QModelIndex const * self) {
  QModelIndex *arg1 = (QModelIndex *) 0 ;
  QModelIndex * cresult ;
  
  arg1 = *(QModelIndex **)&self; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QModelIndex const *)arg1)->parent());
  return cresult;
}


SWIGEXPORT QModelIndex * QModelIndex_sibling(QModelIndex const * self, int row, int column) {
  QModelIndex *arg1 = (QModelIndex *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex * cresult ;
  
  arg1 = *(QModelIndex **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QModelIndex const *)arg1)->sibling(arg2,arg3));
  return cresult;
}


SWIGEXPORT QModelIndex * QModelIndex_child(QModelIndex const * self, int row, int column) {
  QModelIndex *arg1 = (QModelIndex *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex * cresult ;
  
  arg1 = *(QModelIndex **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QModelIndex const *)arg1)->child(arg2,arg3));
  return cresult;
}


SWIGEXPORT int QModelIndex_flags(QModelIndex const * self) {
  QModelIndex *arg1 = (QModelIndex *) 0 ;
  Qt::ItemFlags result;
  int cresult ;
  
  arg1 = *(QModelIndex **)&self; 
  result = ((QModelIndex const *)arg1)->flags();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT QAbstractItemModel * QModelIndex_model(QModelIndex const * self) {
  QModelIndex *arg1 = (QModelIndex *) 0 ;
  QAbstractItemModel *result = 0 ;
  QAbstractItemModel * cresult ;
  
  arg1 = *(QModelIndex **)&self; 
  result = (QAbstractItemModel *)((QModelIndex const *)arg1)->model();
  *(QAbstractItemModel **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QModelIndex_isValid(QModelIndex const * self) {
  QModelIndex *arg1 = (QModelIndex *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QModelIndex **)&self; 
  result = (bool)((QModelIndex const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPersistentModelIndex * New_QPersistentModelIndex0() {
  QPersistentModelIndex *result = 0 ;
  QPersistentModelIndex * cresult ;
  
  result = (QPersistentModelIndex *)new QPersistentModelIndex();
  *(QPersistentModelIndex **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPersistentModelIndex * New_QPersistentModelIndex1(QModelIndex const & index) {
  QModelIndex *arg1 = 0 ;
  QPersistentModelIndex *result = 0 ;
  QPersistentModelIndex * cresult ;
  
  arg1 = *(QModelIndex **)&index;
  result = (QPersistentModelIndex *)new QPersistentModelIndex((QModelIndex const &)*arg1);
  *(QPersistentModelIndex **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPersistentModelIndex * New_QPersistentModelIndex2(QPersistentModelIndex const & other) {
  QPersistentModelIndex *arg1 = 0 ;
  QPersistentModelIndex *result = 0 ;
  QPersistentModelIndex * cresult ;
  
  arg1 = *(QPersistentModelIndex **)&other;
  result = (QPersistentModelIndex *)new QPersistentModelIndex((QPersistentModelIndex const &)*arg1);
  *(QPersistentModelIndex **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QPersistentModelIndex(QPersistentModelIndex * self) {
  QPersistentModelIndex *arg1 = (QPersistentModelIndex *) 0 ;
  
  arg1 = *(QPersistentModelIndex **)&self; 
  delete arg1;
}


SWIGEXPORT int QPersistentModelIndex_row(QPersistentModelIndex const * self) {
  QPersistentModelIndex *arg1 = (QPersistentModelIndex *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPersistentModelIndex **)&self; 
  result = (int)((QPersistentModelIndex const *)arg1)->row();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QPersistentModelIndex_column(QPersistentModelIndex const * self) {
  QPersistentModelIndex *arg1 = (QPersistentModelIndex *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPersistentModelIndex **)&self; 
  result = (int)((QPersistentModelIndex const *)arg1)->column();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned long QPersistentModelIndex_internalId(QPersistentModelIndex const * self) {
  QPersistentModelIndex *arg1 = (QPersistentModelIndex *) 0 ;
  unsigned long result;
  unsigned long cresult ;
  
  arg1 = *(QPersistentModelIndex **)&self; 
  result = (unsigned long)((QPersistentModelIndex const *)arg1)->internalId();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QModelIndex * QPersistentModelIndex_parent(QPersistentModelIndex const * self) {
  QPersistentModelIndex *arg1 = (QPersistentModelIndex *) 0 ;
  QModelIndex * cresult ;
  
  arg1 = *(QPersistentModelIndex **)&self; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QPersistentModelIndex const *)arg1)->parent());
  return cresult;
}


SWIGEXPORT QModelIndex * QPersistentModelIndex_sibling(QPersistentModelIndex const * self, int row, int column) {
  QPersistentModelIndex *arg1 = (QPersistentModelIndex *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex * cresult ;
  
  arg1 = *(QPersistentModelIndex **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QPersistentModelIndex const *)arg1)->sibling(arg2,arg3));
  return cresult;
}


SWIGEXPORT QModelIndex * QPersistentModelIndex_child(QPersistentModelIndex const * self, int row, int column) {
  QPersistentModelIndex *arg1 = (QPersistentModelIndex *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex * cresult ;
  
  arg1 = *(QPersistentModelIndex **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QPersistentModelIndex const *)arg1)->child(arg2,arg3));
  return cresult;
}


SWIGEXPORT int QPersistentModelIndex_flags(QPersistentModelIndex const * self) {
  QPersistentModelIndex *arg1 = (QPersistentModelIndex *) 0 ;
  Qt::ItemFlags result;
  int cresult ;
  
  arg1 = *(QPersistentModelIndex **)&self; 
  result = ((QPersistentModelIndex const *)arg1)->flags();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT QAbstractItemModel * QPersistentModelIndex_model(QPersistentModelIndex const * self) {
  QPersistentModelIndex *arg1 = (QPersistentModelIndex *) 0 ;
  QAbstractItemModel *result = 0 ;
  QAbstractItemModel * cresult ;
  
  arg1 = *(QPersistentModelIndex **)&self; 
  result = (QAbstractItemModel *)((QPersistentModelIndex const *)arg1)->model();
  *(QAbstractItemModel **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPersistentModelIndex_isValid(QPersistentModelIndex const * self) {
  QPersistentModelIndex *arg1 = (QPersistentModelIndex *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPersistentModelIndex **)&self; 
  result = (bool)((QPersistentModelIndex const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QAbstractItemModel(QAbstractItemModel * self) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  delete arg1;
}


SWIGEXPORT bool QAbstractItemModel_hasIndex(QAbstractItemModel * self, int row, int column, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex *arg4 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  arg4 = *(QModelIndex **)&parent;
  result = (bool)((QAbstractItemModel const *)arg1)->hasIndex(arg2,arg3,(QModelIndex const &)*arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_hasIndex1(QAbstractItemModel * self, int row, int column) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  result = (bool)((QAbstractItemModel const *)arg1)->hasIndex(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QModelIndex * QAbstractItemModel_sibling(QAbstractItemModel * self, int row, int column, QModelIndex const & idx) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex *arg4 = 0 ;
  QModelIndex * cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  arg4 = *(QModelIndex **)&idx;
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QAbstractItemModel const *)arg1)->sibling(arg2,arg3,(QModelIndex const &)*arg4));
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_hasChildren(QAbstractItemModel * self, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndex **)&parent;
  result = (bool)((QAbstractItemModel const *)arg1)->hasChildren((QModelIndex const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_hasChildren1(QAbstractItemModel * self) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  result = (bool)((QAbstractItemModel const *)arg1)->hasChildren();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_setData(QAbstractItemModel * self, QModelIndex const & index, QVariant * value, int role) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  QVariant *arg3 = 0 ;
  int arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndex **)&index;
  arg3 = *(QVariant **)&value;
  arg4 = (int)role; 
  result = (bool)(arg1)->setData((QModelIndex const &)*arg2,(QVariant const &)*arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_setData1(QAbstractItemModel * self, QModelIndex const & index, QVariant * value) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  QVariant *arg3 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndex **)&index;
  arg3 = *(QVariant **)&value;
  result = (bool)(arg1)->setData((QModelIndex const &)*arg2,(QVariant const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_setHeaderData(QAbstractItemModel * self, int section, Qt::Orientation orientation, QVariant * value, int role) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  Qt::Orientation arg3 ;
  QVariant *arg4 = 0 ;
  int arg5 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)section; 
  arg3 = (Qt::Orientation)orientation; 
  arg4 = *(QVariant **)&value;
  arg5 = (int)role; 
  result = (bool)(arg1)->setHeaderData(arg2,arg3,(QVariant const &)*arg4,arg5);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_setHeaderData1(QAbstractItemModel * self, int section, Qt::Orientation orientation, QVariant * value) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  Qt::Orientation arg3 ;
  QVariant *arg4 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)section; 
  arg3 = (Qt::Orientation)orientation; 
  arg4 = *(QVariant **)&value;
  result = (bool)(arg1)->setHeaderData(arg2,arg3,(QVariant const &)*arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QStringList * QAbstractItemModel_mimeTypes(QAbstractItemModel * self) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QStringList * cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  *(QStringList **)&cresult = new QStringList((const QStringList &)((QAbstractItemModel const *)arg1)->mimeTypes());
  return cresult;
}


SWIGEXPORT QMimeData * QAbstractItemModel_mimeData(QAbstractItemModel * self, QModelIndexList * indexes) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndexList *arg2 = 0 ;
  QMimeData *result = 0 ;
  QMimeData * cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndexList **)&indexes;
  result = (QMimeData *)((QAbstractItemModel const *)arg1)->mimeData((QModelIndexList const &)*arg2);
  *(QMimeData **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_dropMimeData(QAbstractItemModel * self, QMimeData * data, Qt::DropAction action, int row, int column, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QMimeData *arg2 = (QMimeData *) 0 ;
  Qt::DropAction arg3 ;
  int arg4 ;
  int arg5 ;
  QModelIndex *arg6 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QMimeData **)&data; 
  arg3 = (Qt::DropAction)action; 
  arg4 = (int)row; 
  arg5 = (int)column; 
  arg6 = *(QModelIndex **)&parent;
  result = (bool)(arg1)->dropMimeData((QMimeData const *)arg2,arg3,arg4,arg5,(QModelIndex const &)*arg6);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QAbstractItemModel_supportedDropActions(QAbstractItemModel * self) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  Qt::DropActions result;
  int cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  result = ((QAbstractItemModel const *)arg1)->supportedDropActions();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT int QAbstractItemModel_supportedDragActions(QAbstractItemModel * self) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  Qt::DropActions result;
  int cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  result = ((QAbstractItemModel const *)arg1)->supportedDragActions();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT void QAbstractItemModel_setSupportedDragActions(QAbstractItemModel * self, int m3arg2) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  Qt::DropActions arg2 ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (Qt::DropActions)m3arg2; 
  (arg1)->setSupportedDragActions(arg2);
}


SWIGEXPORT bool QAbstractItemModel_insertRows(QAbstractItemModel * self, int row, int count, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex *arg4 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)row; 
  arg3 = (int)count; 
  arg4 = *(QModelIndex **)&parent;
  result = (bool)(arg1)->insertRows(arg2,arg3,(QModelIndex const &)*arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_insertRows1(QAbstractItemModel * self, int row, int count) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)row; 
  arg3 = (int)count; 
  result = (bool)(arg1)->insertRows(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_insertColumns(QAbstractItemModel * self, int column, int count, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex *arg4 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)column; 
  arg3 = (int)count; 
  arg4 = *(QModelIndex **)&parent;
  result = (bool)(arg1)->insertColumns(arg2,arg3,(QModelIndex const &)*arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_insertColumns1(QAbstractItemModel * self, int column, int count) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)column; 
  arg3 = (int)count; 
  result = (bool)(arg1)->insertColumns(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_removeRows(QAbstractItemModel * self, int row, int count, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex *arg4 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)row; 
  arg3 = (int)count; 
  arg4 = *(QModelIndex **)&parent;
  result = (bool)(arg1)->removeRows(arg2,arg3,(QModelIndex const &)*arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_removeRows1(QAbstractItemModel * self, int row, int count) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)row; 
  arg3 = (int)count; 
  result = (bool)(arg1)->removeRows(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_removeColumns(QAbstractItemModel * self, int column, int count, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex *arg4 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)column; 
  arg3 = (int)count; 
  arg4 = *(QModelIndex **)&parent;
  result = (bool)(arg1)->removeColumns(arg2,arg3,(QModelIndex const &)*arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_removeColumns1(QAbstractItemModel * self, int column, int count) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)column; 
  arg3 = (int)count; 
  result = (bool)(arg1)->removeColumns(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_insertRow(QAbstractItemModel * self, int row, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  QModelIndex *arg3 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)row; 
  arg3 = *(QModelIndex **)&parent;
  result = (bool)(arg1)->insertRow(arg2,(QModelIndex const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_insertRow1(QAbstractItemModel * self, int row) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)row; 
  result = (bool)(arg1)->insertRow(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_insertColumn(QAbstractItemModel * self, int column, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  QModelIndex *arg3 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)column; 
  arg3 = *(QModelIndex **)&parent;
  result = (bool)(arg1)->insertColumn(arg2,(QModelIndex const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_insertColumn1(QAbstractItemModel * self, int column) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)column; 
  result = (bool)(arg1)->insertColumn(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_removeRow(QAbstractItemModel * self, int row, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  QModelIndex *arg3 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)row; 
  arg3 = *(QModelIndex **)&parent;
  result = (bool)(arg1)->removeRow(arg2,(QModelIndex const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_removeRow1(QAbstractItemModel * self, int row) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)row; 
  result = (bool)(arg1)->removeRow(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_removeColumn(QAbstractItemModel * self, int column, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  QModelIndex *arg3 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)column; 
  arg3 = *(QModelIndex **)&parent;
  result = (bool)(arg1)->removeColumn(arg2,(QModelIndex const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_removeColumn1(QAbstractItemModel * self, int column) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)column; 
  result = (bool)(arg1)->removeColumn(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QAbstractItemModel_fetchMore(QAbstractItemModel * self, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndex **)&parent;
  (arg1)->fetchMore((QModelIndex const &)*arg2);
}


SWIGEXPORT bool QAbstractItemModel_canFetchMore(QAbstractItemModel * self, QModelIndex const & parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndex **)&parent;
  result = (bool)((QAbstractItemModel const *)arg1)->canFetchMore((QModelIndex const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QAbstractItemModel_flags(QAbstractItemModel * self, QModelIndex const & index) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  Qt::ItemFlags result;
  int cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndex **)&index;
  result = ((QAbstractItemModel const *)arg1)->flags((QModelIndex const &)*arg2);
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT void QAbstractItemModel_sort(QAbstractItemModel * self, int column, Qt::SortOrder order) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  Qt::SortOrder arg3 ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)column; 
  arg3 = (Qt::SortOrder)order; 
  (arg1)->sort(arg2,arg3);
}


SWIGEXPORT void QAbstractItemModel_sort1(QAbstractItemModel * self, int column) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  int arg2 ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = (int)column; 
  (arg1)->sort(arg2);
}


SWIGEXPORT QModelIndex * QAbstractItemModel_buddy(QAbstractItemModel * self, QModelIndex const & index) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  QModelIndex * cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndex **)&index;
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QAbstractItemModel const *)arg1)->buddy((QModelIndex const &)*arg2));
  return cresult;
}


SWIGEXPORT QModelIndexList * QAbstractItemModel_match(QAbstractItemModel * self, QModelIndex const & start, int role, QVariant * value, int hits, int flags) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  int arg3 ;
  QVariant *arg4 = 0 ;
  int arg5 ;
  Qt::MatchFlags arg6 ;
  QModelIndexList * cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndex **)&start;
  arg3 = (int)role; 
  arg4 = *(QVariant **)&value;
  arg5 = (int)hits; 
  arg6 = (Qt::MatchFlags)flags; 
  *(QModelIndexList **)&cresult = new QModelIndexList((const QModelIndexList &)((QAbstractItemModel const *)arg1)->match((QModelIndex const &)*arg2,arg3,(QVariant const &)*arg4,arg5,arg6));
  return cresult;
}


SWIGEXPORT QModelIndexList * QAbstractItemModel_match1(QAbstractItemModel * self, QModelIndex const & start, int role, QVariant * value, int hits) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  int arg3 ;
  QVariant *arg4 = 0 ;
  int arg5 ;
  QModelIndexList * cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndex **)&start;
  arg3 = (int)role; 
  arg4 = *(QVariant **)&value;
  arg5 = (int)hits; 
  *(QModelIndexList **)&cresult = new QModelIndexList((const QModelIndexList &)((QAbstractItemModel const *)arg1)->match((QModelIndex const &)*arg2,arg3,(QVariant const &)*arg4,arg5));
  return cresult;
}


SWIGEXPORT QModelIndexList * QAbstractItemModel_match2(QAbstractItemModel * self, QModelIndex const & start, int role, QVariant * value) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  int arg3 ;
  QVariant *arg4 = 0 ;
  QModelIndexList * cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndex **)&start;
  arg3 = (int)role; 
  arg4 = *(QVariant **)&value;
  *(QModelIndexList **)&cresult = new QModelIndexList((const QModelIndexList &)((QAbstractItemModel const *)arg1)->match((QModelIndex const &)*arg2,arg3,(QVariant const &)*arg4));
  return cresult;
}


SWIGEXPORT QSize * QAbstractItemModel_span(QAbstractItemModel * self, QModelIndex const & index) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  QSize * cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  arg2 = *(QModelIndex **)&index;
  *(QSize **)&cresult = new QSize((const QSize &)((QAbstractItemModel const *)arg1)->span((QModelIndex const &)*arg2));
  return cresult;
}


SWIGEXPORT QObject * QAbstractItemModel_parent1_0(QAbstractItemModel * self) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QObject *result = 0 ;
  QObject * cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  result = (QObject *)((QAbstractItemModel const *)arg1)->parent();
  *(QObject **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractItemModel_submit(QAbstractItemModel * self) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  result = (bool)(arg1)->submit();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QAbstractItemModel_revert(QAbstractItemModel * self) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  
  arg1 = *(QAbstractItemModel **)&self; 
  (arg1)->revert();
}


SWIGEXPORT void Delete_QAbstractTableModel(QAbstractTableModel * self) {
  QAbstractTableModel *arg1 = (QAbstractTableModel *) 0 ;
  
  arg1 = *(QAbstractTableModel **)&self; 
  delete arg1;
}


SWIGEXPORT QModelIndex * QAbstractTableModel_index(QAbstractTableModel const * self, int row, int column, QModelIndex const & parent) {
  QAbstractTableModel *arg1 = (QAbstractTableModel *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex *arg4 = 0 ;
  QModelIndex * cresult ;
  
  arg1 = *(QAbstractTableModel **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  arg4 = *(QModelIndex **)&parent;
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QAbstractTableModel const *)arg1)->index(arg2,arg3,(QModelIndex const &)*arg4));
  return cresult;
}


SWIGEXPORT QModelIndex * QAbstractTableModel_index1(QAbstractTableModel const * self, int row, int column) {
  QAbstractTableModel *arg1 = (QAbstractTableModel *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex * cresult ;
  
  arg1 = *(QAbstractTableModel **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QAbstractTableModel const *)arg1)->index(arg2,arg3));
  return cresult;
}


SWIGEXPORT bool QAbstractTableModel_dropMimeData(QAbstractTableModel * self, QMimeData * data, Qt::DropAction action, int row, int column, QModelIndex const & parent) {
  QAbstractTableModel *arg1 = (QAbstractTableModel *) 0 ;
  QMimeData *arg2 = (QMimeData *) 0 ;
  Qt::DropAction arg3 ;
  int arg4 ;
  int arg5 ;
  QModelIndex *arg6 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractTableModel **)&self; 
  arg2 = *(QMimeData **)&data; 
  arg3 = (Qt::DropAction)action; 
  arg4 = (int)row; 
  arg5 = (int)column; 
  arg6 = *(QModelIndex **)&parent;
  result = (bool)(arg1)->dropMimeData((QMimeData const *)arg2,arg3,arg4,arg5,(QModelIndex const &)*arg6);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QAbstractListModel(QAbstractListModel * self) {
  QAbstractListModel *arg1 = (QAbstractListModel *) 0 ;
  
  arg1 = *(QAbstractListModel **)&self; 
  delete arg1;
}


SWIGEXPORT QModelIndex * QAbstractListModel_index(QAbstractListModel const * self, int row, int column, QModelIndex const & parent) {
  QAbstractListModel *arg1 = (QAbstractListModel *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex *arg4 = 0 ;
  QModelIndex * cresult ;
  
  arg1 = *(QAbstractListModel **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  arg4 = *(QModelIndex **)&parent;
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QAbstractListModel const *)arg1)->index(arg2,arg3,(QModelIndex const &)*arg4));
  return cresult;
}


SWIGEXPORT QModelIndex * QAbstractListModel_index1(QAbstractListModel const * self, int row, int column) {
  QAbstractListModel *arg1 = (QAbstractListModel *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex * cresult ;
  
  arg1 = *(QAbstractListModel **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QAbstractListModel const *)arg1)->index(arg2,arg3));
  return cresult;
}


SWIGEXPORT QModelIndex * QAbstractListModel_index2(QAbstractListModel const * self, int row) {
  QAbstractListModel *arg1 = (QAbstractListModel *) 0 ;
  int arg2 ;
  QModelIndex * cresult ;
  
  arg1 = *(QAbstractListModel **)&self; 
  arg2 = (int)row; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QAbstractListModel const *)arg1)->index(arg2));
  return cresult;
}


SWIGEXPORT bool QAbstractListModel_dropMimeData(QAbstractListModel * self, QMimeData * data, Qt::DropAction action, int row, int column, QModelIndex const & parent) {
  QAbstractListModel *arg1 = (QAbstractListModel *) 0 ;
  QMimeData *arg2 = (QMimeData *) 0 ;
  Qt::DropAction arg3 ;
  int arg4 ;
  int arg5 ;
  QModelIndex *arg6 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractListModel **)&self; 
  arg2 = *(QMimeData **)&data; 
  arg3 = (Qt::DropAction)action; 
  arg4 = (int)row; 
  arg5 = (int)column; 
  arg6 = *(QModelIndex **)&parent;
  result = (bool)(arg1)->dropMimeData((QMimeData const *)arg2,arg3,arg4,arg5,(QModelIndex const &)*arg6);
  cresult = result; 
  return cresult;
}


#ifdef __cplusplus
}
#endif

