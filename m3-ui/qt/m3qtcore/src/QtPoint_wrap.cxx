/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtCore/qpoint.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QPoint * New_QPoint0() {
  QPoint *result = 0 ;
  QPoint * cresult ;
  
  result = (QPoint *)new QPoint();
  *(QPoint **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPoint * New_QPoint1(int xpos, int ypos) {
  int arg1 ;
  int arg2 ;
  QPoint *result = 0 ;
  QPoint * cresult ;
  
  arg1 = (int)xpos; 
  arg2 = (int)ypos; 
  result = (QPoint *)new QPoint(arg1,arg2);
  *(QPoint **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPoint_isNull(QPoint const * self) {
  QPoint *arg1 = (QPoint *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPoint **)&self; 
  result = (bool)((QPoint const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QPoint_x(QPoint const * self) {
  QPoint *arg1 = (QPoint *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPoint **)&self; 
  result = (int)((QPoint const *)arg1)->x();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QPoint_y(QPoint const * self) {
  QPoint *arg1 = (QPoint *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPoint **)&self; 
  result = (int)((QPoint const *)arg1)->y();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPoint_setX(QPoint * self, int x) {
  QPoint *arg1 = (QPoint *) 0 ;
  int arg2 ;
  
  arg1 = *(QPoint **)&self; 
  arg2 = (int)x; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void QPoint_setY(QPoint * self, int y) {
  QPoint *arg1 = (QPoint *) 0 ;
  int arg2 ;
  
  arg1 = *(QPoint **)&self; 
  arg2 = (int)y; 
  (arg1)->setY(arg2);
}


SWIGEXPORT int QPoint_manhattanLength(QPoint const * self) {
  QPoint *arg1 = (QPoint *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPoint **)&self; 
  result = (int)((QPoint const *)arg1)->manhattanLength();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int * QPoint_rx(QPoint * self) {
  QPoint *arg1 = (QPoint *) 0 ;
  int *result = 0 ;
  int * cresult ;
  
  arg1 = *(QPoint **)&self; 
  result = (int *) &(arg1)->rx();
  *(int **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int * QPoint_ry(QPoint * self) {
  QPoint *arg1 = (QPoint *) 0 ;
  int *result = 0 ;
  int * cresult ;
  
  arg1 = *(QPoint **)&self; 
  result = (int *) &(arg1)->ry();
  *(int **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPoint * QPoint_PlusEqual(QPoint * self, QPoint * p) {
  QPoint *arg1 = (QPoint *) 0 ;
  QPoint *arg2 = 0 ;
  QPoint *result = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QPoint **)&self; 
  arg2 = *(QPoint **)&p;
  result = (QPoint *) &(arg1)->operator +=((QPoint const &)*arg2);
  *(QPoint **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPoint * QPoint_MinusEqual(QPoint * self, QPoint * p) {
  QPoint *arg1 = (QPoint *) 0 ;
  QPoint *arg2 = 0 ;
  QPoint *result = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QPoint **)&self; 
  arg2 = *(QPoint **)&p;
  result = (QPoint *) &(arg1)->operator -=((QPoint const &)*arg2);
  *(QPoint **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPoint * QPoint_MultiplyEqual(QPoint * self, double c) {
  QPoint *arg1 = (QPoint *) 0 ;
  double arg2 ;
  QPoint *result = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QPoint **)&self; 
  arg2 = (double)c; 
  result = (QPoint *) &(arg1)->operator *=(arg2);
  *(QPoint **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPoint * QPoint_DivideEqual(QPoint * self, double c) {
  QPoint *arg1 = (QPoint *) 0 ;
  double arg2 ;
  QPoint *result = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QPoint **)&self; 
  arg2 = (double)c; 
  result = (QPoint *) &(arg1)->operator /=(arg2);
  *(QPoint **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QPoint(QPoint * self) {
  QPoint *arg1 = (QPoint *) 0 ;
  
  arg1 = *(QPoint **)&self; 
  delete arg1;
}


SWIGEXPORT QPointF * New_QPointF0() {
  QPointF *result = 0 ;
  QPointF * cresult ;
  
  result = (QPointF *)new QPointF();
  *(QPointF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPointF * New_QPointF1(QPoint * p) {
  QPoint *arg1 = 0 ;
  QPointF *result = 0 ;
  QPointF * cresult ;
  
  arg1 = *(QPoint **)&p;
  result = (QPointF *)new QPointF((QPoint const &)*arg1);
  *(QPointF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPointF * New_QPointF2(double xpos, double ypos) {
  double arg1 ;
  double arg2 ;
  QPointF *result = 0 ;
  QPointF * cresult ;
  
  arg1 = (double)xpos; 
  arg2 = (double)ypos; 
  result = (QPointF *)new QPointF(arg1,arg2);
  *(QPointF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT double QPointF_manhattanLength(QPointF const * self) {
  QPointF *arg1 = (QPointF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QPointF **)&self; 
  result = (double)((QPointF const *)arg1)->manhattanLength();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPointF_isNull(QPointF const * self) {
  QPointF *arg1 = (QPointF *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPointF **)&self; 
  result = (bool)((QPointF const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QPointF_x(QPointF const * self) {
  QPointF *arg1 = (QPointF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QPointF **)&self; 
  result = (double)((QPointF const *)arg1)->x();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QPointF_y(QPointF const * self) {
  QPointF *arg1 = (QPointF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QPointF **)&self; 
  result = (double)((QPointF const *)arg1)->y();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPointF_setX(QPointF * self, double x) {
  QPointF *arg1 = (QPointF *) 0 ;
  double arg2 ;
  
  arg1 = *(QPointF **)&self; 
  arg2 = (double)x; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void QPointF_setY(QPointF * self, double y) {
  QPointF *arg1 = (QPointF *) 0 ;
  double arg2 ;
  
  arg1 = *(QPointF **)&self; 
  arg2 = (double)y; 
  (arg1)->setY(arg2);
}


SWIGEXPORT double & QPointF_rx(QPointF * self) {
  QPointF *arg1 = (QPointF *) 0 ;
  double *result = 0 ;
  double * cresult ;
  
  arg1 = *(QPointF **)&self; 
  result = (double *) &(arg1)->rx();
  *(double **)&cresult = result; 
  return *cresult;
}


SWIGEXPORT double & QPointF_ry(QPointF * self) {
  QPointF *arg1 = (QPointF *) 0 ;
  double *result = 0 ;
  double * cresult ;
  
  arg1 = *(QPointF **)&self; 
  result = (double *) &(arg1)->ry();
  *(double **)&cresult = result; 
  return *cresult;
}


SWIGEXPORT QPointF * QPointF_PlusEqual(QPointF * self, QPointF * p) {
  QPointF *arg1 = (QPointF *) 0 ;
  QPointF *arg2 = 0 ;
  QPointF *result = 0 ;
  QPointF * cresult ;
  
  arg1 = *(QPointF **)&self; 
  arg2 = *(QPointF **)&p;
  result = (QPointF *) &(arg1)->operator +=((QPointF const &)*arg2);
  *(QPointF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPointF * QPointF_MinusEqual(QPointF * self, QPointF * p) {
  QPointF *arg1 = (QPointF *) 0 ;
  QPointF *arg2 = 0 ;
  QPointF *result = 0 ;
  QPointF * cresult ;
  
  arg1 = *(QPointF **)&self; 
  arg2 = *(QPointF **)&p;
  result = (QPointF *) &(arg1)->operator -=((QPointF const &)*arg2);
  *(QPointF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPointF * QPointF_MultiplyEqual(QPointF * self, double c) {
  QPointF *arg1 = (QPointF *) 0 ;
  double arg2 ;
  QPointF *result = 0 ;
  QPointF * cresult ;
  
  arg1 = *(QPointF **)&self; 
  arg2 = (double)c; 
  result = (QPointF *) &(arg1)->operator *=(arg2);
  *(QPointF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPointF * QPointF_DivideEqual(QPointF * self, double c) {
  QPointF *arg1 = (QPointF *) 0 ;
  double arg2 ;
  QPointF *result = 0 ;
  QPointF * cresult ;
  
  arg1 = *(QPointF **)&self; 
  arg2 = (double)c; 
  result = (QPointF *) &(arg1)->operator /=(arg2);
  *(QPointF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPoint * QPointF_toPoint(QPointF const * self) {
  QPointF *arg1 = (QPointF *) 0 ;
  QPoint * cresult ;
  
  arg1 = *(QPointF **)&self; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QPointF const *)arg1)->toPoint());
  return cresult;
}


SWIGEXPORT void Delete_QPointF(QPointF * self) {
  QPointF *arg1 = (QPointF *) 0 ;
  
  arg1 = *(QPointF **)&self; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

