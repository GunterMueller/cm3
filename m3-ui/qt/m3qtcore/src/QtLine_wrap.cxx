/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtCore/qline.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QLine * New_QLine0() {
  QLine *result = 0 ;
  QLine * cresult ;
  
  result = (QLine *)new QLine();
  *(QLine **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLine * New_QLine1(QPoint * pt1, QPoint * pt2) {
  QPoint *arg1 = 0 ;
  QPoint *arg2 = 0 ;
  QLine *result = 0 ;
  QLine * cresult ;
  
  arg1 = *(QPoint **)&pt1;
  arg2 = *(QPoint **)&pt2;
  result = (QLine *)new QLine((QPoint const &)*arg1,(QPoint const &)*arg2);
  *(QLine **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLine * New_QLine2(int x1, int y1, int x2, int y2) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QLine *result = 0 ;
  QLine * cresult ;
  
  arg1 = (int)x1; 
  arg2 = (int)y1; 
  arg3 = (int)x2; 
  arg4 = (int)y2; 
  result = (QLine *)new QLine(arg1,arg2,arg3,arg4);
  *(QLine **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QLine_isNull(QLine const * self) {
  QLine *arg1 = (QLine *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLine **)&self; 
  result = (bool)((QLine const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPoint * QLine_p1(QLine const * self) {
  QLine *arg1 = (QLine *) 0 ;
  QPoint * cresult ;
  
  arg1 = *(QLine **)&self; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QLine const *)arg1)->p1());
  return cresult;
}


SWIGEXPORT QPoint * QLine_p2(QLine const * self) {
  QLine *arg1 = (QLine *) 0 ;
  QPoint * cresult ;
  
  arg1 = *(QLine **)&self; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QLine const *)arg1)->p2());
  return cresult;
}


SWIGEXPORT int QLine_x1(QLine const * self) {
  QLine *arg1 = (QLine *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QLine **)&self; 
  result = (int)((QLine const *)arg1)->x1();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QLine_y1(QLine const * self) {
  QLine *arg1 = (QLine *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QLine **)&self; 
  result = (int)((QLine const *)arg1)->y1();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QLine_x2(QLine const * self) {
  QLine *arg1 = (QLine *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QLine **)&self; 
  result = (int)((QLine const *)arg1)->x2();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QLine_y2(QLine const * self) {
  QLine *arg1 = (QLine *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QLine **)&self; 
  result = (int)((QLine const *)arg1)->y2();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QLine_dx(QLine const * self) {
  QLine *arg1 = (QLine *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QLine **)&self; 
  result = (int)((QLine const *)arg1)->dx();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QLine_dy(QLine const * self) {
  QLine *arg1 = (QLine *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QLine **)&self; 
  result = (int)((QLine const *)arg1)->dy();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QLine_translate(QLine * self, QPoint * p) {
  QLine *arg1 = (QLine *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QLine **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->translate((QPoint const &)*arg2);
}


SWIGEXPORT void QLine_translate1(QLine * self, int dx, int dy) {
  QLine *arg1 = (QLine *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QLine **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  (arg1)->translate(arg2,arg3);
}


SWIGEXPORT QLine * QLine_translated(QLine const * self, QPoint * p) {
  QLine *arg1 = (QLine *) 0 ;
  QPoint *arg2 = 0 ;
  QLine * cresult ;
  
  arg1 = *(QLine **)&self; 
  arg2 = *(QPoint **)&p;
  *(QLine **)&cresult = new QLine((const QLine &)((QLine const *)arg1)->translated((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT QLine * QLine_translated1(QLine const * self, int dx, int dy) {
  QLine *arg1 = (QLine *) 0 ;
  int arg2 ;
  int arg3 ;
  QLine * cresult ;
  
  arg1 = *(QLine **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  *(QLine **)&cresult = new QLine((const QLine &)((QLine const *)arg1)->translated(arg2,arg3));
  return cresult;
}


SWIGEXPORT void QLine_setP1(QLine * self, QPoint * p1) {
  QLine *arg1 = (QLine *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QLine **)&self; 
  arg2 = *(QPoint **)&p1;
  (arg1)->setP1((QPoint const &)*arg2);
}


SWIGEXPORT void QLine_setP2(QLine * self, QPoint * p2) {
  QLine *arg1 = (QLine *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QLine **)&self; 
  arg2 = *(QPoint **)&p2;
  (arg1)->setP2((QPoint const &)*arg2);
}


SWIGEXPORT void QLine_setPoints(QLine * self, QPoint * p1, QPoint * p2) {
  QLine *arg1 = (QLine *) 0 ;
  QPoint *arg2 = 0 ;
  QPoint *arg3 = 0 ;
  
  arg1 = *(QLine **)&self; 
  arg2 = *(QPoint **)&p1;
  arg3 = *(QPoint **)&p2;
  (arg1)->setPoints((QPoint const &)*arg2,(QPoint const &)*arg3);
}


SWIGEXPORT void QLine_setLine(QLine * self, int x1, int y1, int x2, int y2) {
  QLine *arg1 = (QLine *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QLine **)&self; 
  arg2 = (int)x1; 
  arg3 = (int)y1; 
  arg4 = (int)x2; 
  arg5 = (int)y2; 
  (arg1)->setLine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT bool QLine_EqualEqual(QLine const * self, QLine const & d) {
  QLine *arg1 = (QLine *) 0 ;
  QLine *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLine **)&self; 
  arg2 = *(QLine **)&d;
  result = (bool)((QLine const *)arg1)->operator ==((QLine const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QLine_NotEqual(QLine const * self, QLine const & d) {
  QLine *arg1 = (QLine *) 0 ;
  QLine *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLine **)&self; 
  arg2 = *(QLine **)&d;
  result = (bool)((QLine const *)arg1)->operator !=((QLine const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QLine(QLine * self) {
  QLine *arg1 = (QLine *) 0 ;
  
  arg1 = *(QLine **)&self; 
  delete arg1;
}


SWIGEXPORT QLineF * New_QLineF0() {
  QLineF *result = 0 ;
  QLineF * cresult ;
  
  result = (QLineF *)new QLineF();
  *(QLineF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLineF * New_QLineF1(QPointF * pt1, QPointF * pt2) {
  QPointF *arg1 = 0 ;
  QPointF *arg2 = 0 ;
  QLineF *result = 0 ;
  QLineF * cresult ;
  
  arg1 = *(QPointF **)&pt1;
  arg2 = *(QPointF **)&pt2;
  result = (QLineF *)new QLineF((QPointF const &)*arg1,(QPointF const &)*arg2);
  *(QLineF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLineF * New_QLineF2(double x1, double y1, double x2, double y2) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  QLineF *result = 0 ;
  QLineF * cresult ;
  
  arg1 = (double)x1; 
  arg2 = (double)y1; 
  arg3 = (double)x2; 
  arg4 = (double)y2; 
  result = (QLineF *)new QLineF(arg1,arg2,arg3,arg4);
  *(QLineF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLineF * New_QLineF3(QLine const & line) {
  QLine *arg1 = 0 ;
  QLineF *result = 0 ;
  QLineF * cresult ;
  
  arg1 = *(QLine **)&line;
  result = (QLineF *)new QLineF((QLine const &)*arg1);
  *(QLineF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLineF * FromPolar(double length, double angle) {
  double arg1 ;
  double arg2 ;
  QLineF * cresult ;
  
  arg1 = (double)length; 
  arg2 = (double)angle; 
  *(QLineF **)&cresult = new QLineF((const QLineF &)QLineF::fromPolar(arg1,arg2));
  return cresult;
}


SWIGEXPORT bool QLineF_isNull(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLineF **)&self; 
  result = (bool)((QLineF const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPointF * QLineF_p1(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QLineF **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QLineF const *)arg1)->p1());
  return cresult;
}


SWIGEXPORT QPointF * QLineF_p2(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QLineF **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QLineF const *)arg1)->p2());
  return cresult;
}


SWIGEXPORT double QLineF_x1(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QLineF **)&self; 
  result = (double)((QLineF const *)arg1)->x1();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QLineF_y1(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QLineF **)&self; 
  result = (double)((QLineF const *)arg1)->y1();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QLineF_x2(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QLineF **)&self; 
  result = (double)((QLineF const *)arg1)->x2();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QLineF_y2(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QLineF **)&self; 
  result = (double)((QLineF const *)arg1)->y2();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QLineF_dx(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QLineF **)&self; 
  result = (double)((QLineF const *)arg1)->dx();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QLineF_dy(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QLineF **)&self; 
  result = (double)((QLineF const *)arg1)->dy();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QLineF_length(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QLineF **)&self; 
  result = (double)((QLineF const *)arg1)->length();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QLineF_setLength(QLineF * self, double len) {
  QLineF *arg1 = (QLineF *) 0 ;
  double arg2 ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = (double)len; 
  (arg1)->setLength(arg2);
}


SWIGEXPORT double QLineF_angle(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QLineF **)&self; 
  result = (double)((QLineF const *)arg1)->angle();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QLineF_setAngle(QLineF * self, double angle) {
  QLineF *arg1 = (QLineF *) 0 ;
  double arg2 ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = (double)angle; 
  (arg1)->setAngle(arg2);
}


SWIGEXPORT double QLineF_angleTo(QLineF const * self, QLineF const & l) {
  QLineF *arg1 = (QLineF *) 0 ;
  QLineF *arg2 = 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = *(QLineF **)&l;
  result = (double)((QLineF const *)arg1)->angleTo((QLineF const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QLineF * QLineF_unitVector(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  QLineF * cresult ;
  
  arg1 = *(QLineF **)&self; 
  *(QLineF **)&cresult = new QLineF((const QLineF &)((QLineF const *)arg1)->unitVector());
  return cresult;
}


SWIGEXPORT QLineF * QLineF_normalVector(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  QLineF * cresult ;
  
  arg1 = *(QLineF **)&self; 
  *(QLineF **)&cresult = new QLineF((const QLineF &)((QLineF const *)arg1)->normalVector());
  return cresult;
}


SWIGEXPORT QLineF::IntersectType QLineF_intersect(QLineF const * self, QLineF const & l, QPointF * intersectionPoint) {
  QLineF *arg1 = (QLineF *) 0 ;
  QLineF *arg2 = 0 ;
  QPointF *arg3 = (QPointF *) 0 ;
  QLineF::IntersectType result;
  QLineF::IntersectType cresult ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = *(QLineF **)&l;
  arg3 = *(QPointF **)&intersectionPoint; 
  result = (QLineF::IntersectType)((QLineF const *)arg1)->intersect((QLineF const &)*arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QLineF_angle1(QLineF const * self, QLineF const & l) {
  QLineF *arg1 = (QLineF *) 0 ;
  QLineF *arg2 = 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = *(QLineF **)&l;
  result = (double)((QLineF const *)arg1)->angle((QLineF const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPointF * QLineF_pointAt(QLineF const * self, double t) {
  QLineF *arg1 = (QLineF *) 0 ;
  double arg2 ;
  QPointF * cresult ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = (double)t; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QLineF const *)arg1)->pointAt(arg2));
  return cresult;
}


SWIGEXPORT void QLineF_translate(QLineF * self, QPointF * p) {
  QLineF *arg1 = (QLineF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->translate((QPointF const &)*arg2);
}


SWIGEXPORT void QLineF_translate1(QLineF * self, double dx, double dy) {
  QLineF *arg1 = (QLineF *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = (double)dx; 
  arg3 = (double)dy; 
  (arg1)->translate(arg2,arg3);
}


SWIGEXPORT QLineF * QLineF_translated(QLineF const * self, QPointF * p) {
  QLineF *arg1 = (QLineF *) 0 ;
  QPointF *arg2 = 0 ;
  QLineF * cresult ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = *(QPointF **)&p;
  *(QLineF **)&cresult = new QLineF((const QLineF &)((QLineF const *)arg1)->translated((QPointF const &)*arg2));
  return cresult;
}


SWIGEXPORT QLineF * QLineF_translated1(QLineF const * self, double dx, double dy) {
  QLineF *arg1 = (QLineF *) 0 ;
  double arg2 ;
  double arg3 ;
  QLineF * cresult ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = (double)dx; 
  arg3 = (double)dy; 
  *(QLineF **)&cresult = new QLineF((const QLineF &)((QLineF const *)arg1)->translated(arg2,arg3));
  return cresult;
}


SWIGEXPORT void QLineF_setP1(QLineF * self, QPointF * p1) {
  QLineF *arg1 = (QLineF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = *(QPointF **)&p1;
  (arg1)->setP1((QPointF const &)*arg2);
}


SWIGEXPORT void QLineF_setP2(QLineF * self, QPointF * p2) {
  QLineF *arg1 = (QLineF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = *(QPointF **)&p2;
  (arg1)->setP2((QPointF const &)*arg2);
}


SWIGEXPORT void QLineF_setPoints(QLineF * self, QPointF * p1, QPointF * p2) {
  QLineF *arg1 = (QLineF *) 0 ;
  QPointF *arg2 = 0 ;
  QPointF *arg3 = 0 ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = *(QPointF **)&p1;
  arg3 = *(QPointF **)&p2;
  (arg1)->setPoints((QPointF const &)*arg2,(QPointF const &)*arg3);
}


SWIGEXPORT void QLineF_setLine(QLineF * self, double x1, double y1, double x2, double y2) {
  QLineF *arg1 = (QLineF *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = (double)x1; 
  arg3 = (double)y1; 
  arg4 = (double)x2; 
  arg5 = (double)y2; 
  (arg1)->setLine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT bool QLineF_EqualEqual(QLineF const * self, QLineF const & d) {
  QLineF *arg1 = (QLineF *) 0 ;
  QLineF *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = *(QLineF **)&d;
  result = (bool)((QLineF const *)arg1)->operator ==((QLineF const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QLineF_NotEqual(QLineF const * self, QLineF const & d) {
  QLineF *arg1 = (QLineF *) 0 ;
  QLineF *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLineF **)&self; 
  arg2 = *(QLineF **)&d;
  result = (bool)((QLineF const *)arg1)->operator !=((QLineF const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QLine * QLineF_toLine(QLineF const * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  QLine * cresult ;
  
  arg1 = *(QLineF **)&self; 
  *(QLine **)&cresult = new QLine((const QLine &)((QLineF const *)arg1)->toLine());
  return cresult;
}


SWIGEXPORT void Delete_QLineF(QLineF * self) {
  QLineF *arg1 = (QLineF *) 0 ;
  
  arg1 = *(QLineF **)&self; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

