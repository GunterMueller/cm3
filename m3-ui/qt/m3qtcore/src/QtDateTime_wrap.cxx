/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtCore/qdatetime.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QDate * New_QDate0() {
  QDate *result = 0 ;
  QDate * cresult ;
  
  result = (QDate *)new QDate();
  *(QDate **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDate * New_QDate1(int y, int m, int d) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  QDate *result = 0 ;
  QDate * cresult ;
  
  arg1 = (int)y; 
  arg2 = (int)m; 
  arg3 = (int)d; 
  result = (QDate *)new QDate(arg1,arg2,arg3);
  *(QDate **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDate_isNull(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDate **)&self; 
  result = (bool)((QDate const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDate_QDate_IsValid(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDate **)&self; 
  result = (bool)((QDate const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDate_year(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDate **)&self; 
  result = (int)((QDate const *)arg1)->year();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDate_month(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDate **)&self; 
  result = (int)((QDate const *)arg1)->month();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDate_day(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDate **)&self; 
  result = (int)((QDate const *)arg1)->day();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDate_dayOfWeek(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDate **)&self; 
  result = (int)((QDate const *)arg1)->dayOfWeek();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDate_dayOfYear(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDate **)&self; 
  result = (int)((QDate const *)arg1)->dayOfYear();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDate_daysInMonth(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDate **)&self; 
  result = (int)((QDate const *)arg1)->daysInMonth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDate_daysInYear(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDate **)&self; 
  result = (int)((QDate const *)arg1)->daysInYear();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDate_weekNumber(QDate const * self, int * yearNum) {
  QDate *arg1 = (QDate *) 0 ;
  int *arg2 = (int *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = *(int **)&yearNum; 
  result = (int)((QDate const *)arg1)->weekNumber(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDate_weekNumber1(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDate **)&self; 
  result = (int)((QDate const *)arg1)->weekNumber();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * ShortMonthName(int month) {
  int arg1 ;
  QString * cresult ;
  
  arg1 = (int)month; 
  *(QString **)&cresult = new QString((const QString &)QDate::shortMonthName(arg1));
  return cresult;
}


SWIGEXPORT QString * ShortMonthName1(int month, QDate::MonthNameType type) {
  int arg1 ;
  QDate::MonthNameType arg2 ;
  QString * cresult ;
  
  arg1 = (int)month; 
  arg2 = (QDate::MonthNameType)type; 
  *(QString **)&cresult = new QString((const QString &)QDate::shortMonthName(arg1,arg2));
  return cresult;
}


SWIGEXPORT QString * ShortDayName(int weekday) {
  int arg1 ;
  QString * cresult ;
  
  arg1 = (int)weekday; 
  *(QString **)&cresult = new QString((const QString &)QDate::shortDayName(arg1));
  return cresult;
}


SWIGEXPORT QString * ShortDayName1(int weekday, QDate::MonthNameType type) {
  int arg1 ;
  QDate::MonthNameType arg2 ;
  QString * cresult ;
  
  arg1 = (int)weekday; 
  arg2 = (QDate::MonthNameType)type; 
  *(QString **)&cresult = new QString((const QString &)QDate::shortDayName(arg1,arg2));
  return cresult;
}


SWIGEXPORT QString * LongMonthName(int month) {
  int arg1 ;
  QString * cresult ;
  
  arg1 = (int)month; 
  *(QString **)&cresult = new QString((const QString &)QDate::longMonthName(arg1));
  return cresult;
}


SWIGEXPORT QString * LongMonthName1(int month, QDate::MonthNameType type) {
  int arg1 ;
  QDate::MonthNameType arg2 ;
  QString * cresult ;
  
  arg1 = (int)month; 
  arg2 = (QDate::MonthNameType)type; 
  *(QString **)&cresult = new QString((const QString &)QDate::longMonthName(arg1,arg2));
  return cresult;
}


SWIGEXPORT QString * LongDayName(int weekday) {
  int arg1 ;
  QString * cresult ;
  
  arg1 = (int)weekday; 
  *(QString **)&cresult = new QString((const QString &)QDate::longDayName(arg1));
  return cresult;
}


SWIGEXPORT QString * LongDayName1(int weekday, QDate::MonthNameType type) {
  int arg1 ;
  QDate::MonthNameType arg2 ;
  QString * cresult ;
  
  arg1 = (int)weekday; 
  arg2 = (QDate::MonthNameType)type; 
  *(QString **)&cresult = new QString((const QString &)QDate::longDayName(arg1,arg2));
  return cresult;
}


SWIGEXPORT QString * QDate_toString(QDate const * self, Qt::DateFormat f) {
  QDate *arg1 = (QDate *) 0 ;
  Qt::DateFormat arg2 ;
  QString * cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = (Qt::DateFormat)f; 
  *(QString **)&cresult = new QString((const QString &)((QDate const *)arg1)->toString(arg2));
  return cresult;
}


SWIGEXPORT QString * QDate_toString1(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  QString * cresult ;
  
  arg1 = *(QDate **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QDate const *)arg1)->toString());
  return cresult;
}


SWIGEXPORT QString * QDate_toString2(QDate const * self, QString * format) {
  QDate *arg1 = (QDate *) 0 ;
  QString *arg2 = 0 ;
  QString * cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = *(QString **)&format;
  *(QString **)&cresult = new QString((const QString &)((QDate const *)arg1)->toString((QString const &)*arg2));
  return cresult;
}


SWIGEXPORT bool QDate_setYMD(QDate * self, int y, int m, int d) {
  QDate *arg1 = (QDate *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = (int)y; 
  arg3 = (int)m; 
  arg4 = (int)d; 
  result = (bool)(arg1)->setYMD(arg2,arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDate_setDate(QDate * self, int year, int month, int day) {
  QDate *arg1 = (QDate *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = (int)year; 
  arg3 = (int)month; 
  arg4 = (int)day; 
  result = (bool)(arg1)->setDate(arg2,arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDate_getDate(QDate * self, int * year, int * month, int * day) {
  QDate *arg1 = (QDate *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = *(QDate **)&self; 
  arg2 = *(int **)&year; 
  arg3 = *(int **)&month; 
  arg4 = *(int **)&day; 
  (arg1)->getDate(arg2,arg3,arg4);
}


SWIGEXPORT QDate * QDate_addDays(QDate const * self, int days) {
  QDate *arg1 = (QDate *) 0 ;
  int arg2 ;
  QDate * cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = (int)days; 
  *(QDate **)&cresult = new QDate((const QDate &)((QDate const *)arg1)->addDays(arg2));
  return cresult;
}


SWIGEXPORT QDate * QDate_addMonths(QDate const * self, int months) {
  QDate *arg1 = (QDate *) 0 ;
  int arg2 ;
  QDate * cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = (int)months; 
  *(QDate **)&cresult = new QDate((const QDate &)((QDate const *)arg1)->addMonths(arg2));
  return cresult;
}


SWIGEXPORT QDate * QDate_addYears(QDate const * self, int years) {
  QDate *arg1 = (QDate *) 0 ;
  int arg2 ;
  QDate * cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = (int)years; 
  *(QDate **)&cresult = new QDate((const QDate &)((QDate const *)arg1)->addYears(arg2));
  return cresult;
}


SWIGEXPORT int QDate_daysTo(QDate const * self, QDate const & m3arg2) {
  QDate *arg1 = (QDate *) 0 ;
  QDate *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = *(QDate **)&m3arg2;
  result = (int)((QDate const *)arg1)->daysTo((QDate const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDate_Equals(QDate const * self, QDate const & other) {
  QDate *arg1 = (QDate *) 0 ;
  QDate *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = *(QDate **)&other;
  result = (bool)((QDate const *)arg1)->operator ==((QDate const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDate_NotEquals(QDate const * self, QDate const & other) {
  QDate *arg1 = (QDate *) 0 ;
  QDate *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = *(QDate **)&other;
  result = (bool)((QDate const *)arg1)->operator !=((QDate const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDate_LessThan(QDate const * self, QDate const & other) {
  QDate *arg1 = (QDate *) 0 ;
  QDate *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = *(QDate **)&other;
  result = (bool)((QDate const *)arg1)->operator <((QDate const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDate_LessThanEquals(QDate const * self, QDate const & other) {
  QDate *arg1 = (QDate *) 0 ;
  QDate *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = *(QDate **)&other;
  result = (bool)((QDate const *)arg1)->operator <=((QDate const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDate_GreaterThan(QDate const * self, QDate const & other) {
  QDate *arg1 = (QDate *) 0 ;
  QDate *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = *(QDate **)&other;
  result = (bool)((QDate const *)arg1)->operator >((QDate const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDate_GreaterThanEquals(QDate const * self, QDate const & other) {
  QDate *arg1 = (QDate *) 0 ;
  QDate *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDate **)&self; 
  arg2 = *(QDate **)&other;
  result = (bool)((QDate const *)arg1)->operator >=((QDate const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QDate * CurrentDate() {
  QDate * cresult ;
  
  *(QDate **)&cresult = new QDate((const QDate &)QDate::currentDate());
  return cresult;
}


SWIGEXPORT QDate * QDate_FromString(QString * s, Qt::DateFormat f) {
  QString *arg1 = 0 ;
  Qt::DateFormat arg2 ;
  QDate * cresult ;
  
  arg1 = *(QString **)&s;
  arg2 = (Qt::DateFormat)f; 
  *(QDate **)&cresult = new QDate((const QDate &)QDate::fromString((QString const &)*arg1,arg2));
  return cresult;
}


SWIGEXPORT QDate * QDate_FromString1(QString * s) {
  QString *arg1 = 0 ;
  QDate * cresult ;
  
  arg1 = *(QString **)&s;
  *(QDate **)&cresult = new QDate((const QDate &)QDate::fromString((QString const &)*arg1));
  return cresult;
}


SWIGEXPORT QDate * QDate_FromString2(QString * s, QString * format) {
  QString *arg1 = 0 ;
  QString *arg2 = 0 ;
  QDate * cresult ;
  
  arg1 = *(QString **)&s;
  arg2 = *(QString **)&format;
  *(QDate **)&cresult = new QDate((const QDate &)QDate::fromString((QString const &)*arg1,(QString const &)*arg2));
  return cresult;
}


SWIGEXPORT bool QDate_IsValid1(int y, int m, int d) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = (int)y; 
  arg2 = (int)m; 
  arg3 = (int)d; 
  result = (bool)QDate::isValid(arg1,arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool IsLeapYear(int year) {
  int arg1 ;
  bool result;
  bool cresult ;
  
  arg1 = (int)year; 
  result = (bool)QDate::isLeapYear(arg1);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QDate * FromJulianDay(int jd) {
  int arg1 ;
  QDate * cresult ;
  
  arg1 = (int)jd; 
  *(QDate **)&cresult = new QDate((const QDate &)QDate::fromJulianDay(arg1));
  return cresult;
}


SWIGEXPORT int QDate_toJulianDay(QDate const * self) {
  QDate *arg1 = (QDate *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDate **)&self; 
  result = (int)((QDate const *)arg1)->toJulianDay();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QDate(QDate * self) {
  QDate *arg1 = (QDate *) 0 ;
  
  arg1 = *(QDate **)&self; 
  delete arg1;
}


SWIGEXPORT QTime * New_QTime0() {
  QTime *result = 0 ;
  QTime * cresult ;
  
  result = (QTime *)new QTime();
  *(QTime **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTime * New_QTime1(int h, int m, int s, int ms) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QTime *result = 0 ;
  QTime * cresult ;
  
  arg1 = (int)h; 
  arg2 = (int)m; 
  arg3 = (int)s; 
  arg4 = (int)ms; 
  result = (QTime *)new QTime(arg1,arg2,arg3,arg4);
  *(QTime **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTime * New_QTime2(int h, int m, int s) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  QTime *result = 0 ;
  QTime * cresult ;
  
  arg1 = (int)h; 
  arg2 = (int)m; 
  arg3 = (int)s; 
  result = (QTime *)new QTime(arg1,arg2,arg3);
  *(QTime **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTime * New_QTime3(int h, int m) {
  int arg1 ;
  int arg2 ;
  QTime *result = 0 ;
  QTime * cresult ;
  
  arg1 = (int)h; 
  arg2 = (int)m; 
  result = (QTime *)new QTime(arg1,arg2);
  *(QTime **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTime_isNull(QTime const * self) {
  QTime *arg1 = (QTime *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTime **)&self; 
  result = (bool)((QTime const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTime_isValid(QTime const * self) {
  QTime *arg1 = (QTime *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTime **)&self; 
  result = (bool)((QTime const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTime_hour(QTime const * self) {
  QTime *arg1 = (QTime *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTime **)&self; 
  result = (int)((QTime const *)arg1)->hour();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTime_minute(QTime const * self) {
  QTime *arg1 = (QTime *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTime **)&self; 
  result = (int)((QTime const *)arg1)->minute();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTime_second(QTime const * self) {
  QTime *arg1 = (QTime *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTime **)&self; 
  result = (int)((QTime const *)arg1)->second();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTime_msec(QTime const * self) {
  QTime *arg1 = (QTime *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTime **)&self; 
  result = (int)((QTime const *)arg1)->msec();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * QTime_toString(QTime const * self, Qt::DateFormat f) {
  QTime *arg1 = (QTime *) 0 ;
  Qt::DateFormat arg2 ;
  QString * cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = (Qt::DateFormat)f; 
  *(QString **)&cresult = new QString((const QString &)((QTime const *)arg1)->toString(arg2));
  return cresult;
}


SWIGEXPORT QString * QTime_toString1(QTime const * self) {
  QTime *arg1 = (QTime *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTime **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTime const *)arg1)->toString());
  return cresult;
}


SWIGEXPORT QString * QTime_toString2(QTime const * self, QString * format) {
  QTime *arg1 = (QTime *) 0 ;
  QString *arg2 = 0 ;
  QString * cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = *(QString **)&format;
  *(QString **)&cresult = new QString((const QString &)((QTime const *)arg1)->toString((QString const &)*arg2));
  return cresult;
}


SWIGEXPORT bool QTime_setHMS(QTime * self, int h, int m, int s, int ms) {
  QTime *arg1 = (QTime *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = (int)h; 
  arg3 = (int)m; 
  arg4 = (int)s; 
  arg5 = (int)ms; 
  result = (bool)(arg1)->setHMS(arg2,arg3,arg4,arg5);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTime_setHMS1(QTime * self, int h, int m, int s) {
  QTime *arg1 = (QTime *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = (int)h; 
  arg3 = (int)m; 
  arg4 = (int)s; 
  result = (bool)(arg1)->setHMS(arg2,arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTime * QTime_addSecs(QTime const * self, int secs) {
  QTime *arg1 = (QTime *) 0 ;
  int arg2 ;
  QTime * cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = (int)secs; 
  *(QTime **)&cresult = new QTime((const QTime &)((QTime const *)arg1)->addSecs(arg2));
  return cresult;
}


SWIGEXPORT int QTime_secsTo(QTime const * self, QTime const & m3arg2) {
  QTime *arg1 = (QTime *) 0 ;
  QTime *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = *(QTime **)&m3arg2;
  result = (int)((QTime const *)arg1)->secsTo((QTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTime * QTime_addMSecs(QTime const * self, int ms) {
  QTime *arg1 = (QTime *) 0 ;
  int arg2 ;
  QTime * cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = (int)ms; 
  *(QTime **)&cresult = new QTime((const QTime &)((QTime const *)arg1)->addMSecs(arg2));
  return cresult;
}


SWIGEXPORT int QTime_msecsTo(QTime const * self, QTime const & m3arg2) {
  QTime *arg1 = (QTime *) 0 ;
  QTime *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = *(QTime **)&m3arg2;
  result = (int)((QTime const *)arg1)->msecsTo((QTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTime_Equals(QTime const * self, QTime const & other) {
  QTime *arg1 = (QTime *) 0 ;
  QTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = *(QTime **)&other;
  result = (bool)((QTime const *)arg1)->operator ==((QTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTime_NotEquals(QTime const * self, QTime const & other) {
  QTime *arg1 = (QTime *) 0 ;
  QTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = *(QTime **)&other;
  result = (bool)((QTime const *)arg1)->operator !=((QTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTime_LessThan(QTime const * self, QTime const & other) {
  QTime *arg1 = (QTime *) 0 ;
  QTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = *(QTime **)&other;
  result = (bool)((QTime const *)arg1)->operator <((QTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTime_LessThanEquals(QTime const * self, QTime const & other) {
  QTime *arg1 = (QTime *) 0 ;
  QTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = *(QTime **)&other;
  result = (bool)((QTime const *)arg1)->operator <=((QTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTime_GreaterThan(QTime const * self, QTime const & other) {
  QTime *arg1 = (QTime *) 0 ;
  QTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = *(QTime **)&other;
  result = (bool)((QTime const *)arg1)->operator >((QTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTime_GreaterThanEquals(QTime const * self, QTime const & other) {
  QTime *arg1 = (QTime *) 0 ;
  QTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTime **)&self; 
  arg2 = *(QTime **)&other;
  result = (bool)((QTime const *)arg1)->operator >=((QTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTime * CurrentTime() {
  QTime * cresult ;
  
  *(QTime **)&cresult = new QTime((const QTime &)QTime::currentTime());
  return cresult;
}


SWIGEXPORT QTime * QTime_FromString(QString * s, Qt::DateFormat f) {
  QString *arg1 = 0 ;
  Qt::DateFormat arg2 ;
  QTime * cresult ;
  
  arg1 = *(QString **)&s;
  arg2 = (Qt::DateFormat)f; 
  *(QTime **)&cresult = new QTime((const QTime &)QTime::fromString((QString const &)*arg1,arg2));
  return cresult;
}


SWIGEXPORT QTime * QTime_FromString1(QString * s) {
  QString *arg1 = 0 ;
  QTime * cresult ;
  
  arg1 = *(QString **)&s;
  *(QTime **)&cresult = new QTime((const QTime &)QTime::fromString((QString const &)*arg1));
  return cresult;
}


SWIGEXPORT QTime * QTime_FromString2(QString * s, QString * format) {
  QString *arg1 = 0 ;
  QString *arg2 = 0 ;
  QTime * cresult ;
  
  arg1 = *(QString **)&s;
  arg2 = *(QString **)&format;
  *(QTime **)&cresult = new QTime((const QTime &)QTime::fromString((QString const &)*arg1,(QString const &)*arg2));
  return cresult;
}


SWIGEXPORT bool IsValid1(int h, int m, int s, int ms) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = (int)h; 
  arg2 = (int)m; 
  arg3 = (int)s; 
  arg4 = (int)ms; 
  result = (bool)QTime::isValid(arg1,arg2,arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool IsValid2(int h, int m, int s) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = (int)h; 
  arg2 = (int)m; 
  arg3 = (int)s; 
  result = (bool)QTime::isValid(arg1,arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTime_start(QTime * self) {
  QTime *arg1 = (QTime *) 0 ;
  
  arg1 = *(QTime **)&self; 
  (arg1)->start();
}


SWIGEXPORT int QTime_restart(QTime * self) {
  QTime *arg1 = (QTime *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTime **)&self; 
  result = (int)(arg1)->restart();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTime_elapsed(QTime const * self) {
  QTime *arg1 = (QTime *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTime **)&self; 
  result = (int)((QTime const *)arg1)->elapsed();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTime(QTime * self) {
  QTime *arg1 = (QTime *) 0 ;
  
  arg1 = *(QTime **)&self; 
  delete arg1;
}


SWIGEXPORT QDateTime * New_QDateTime0() {
  QDateTime *result = 0 ;
  QDateTime * cresult ;
  
  result = (QDateTime *)new QDateTime();
  *(QDateTime **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTime * New_QDateTime1(QDate const & m3arg1) {
  QDate *arg1 = 0 ;
  QDateTime *result = 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QDate **)&m3arg1;
  result = (QDateTime *)new QDateTime((QDate const &)*arg1);
  *(QDateTime **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTime * New_QDateTime2(QDate const & m3arg1, QTime const & m3arg2, Qt::TimeSpec spec) {
  QDate *arg1 = 0 ;
  QTime *arg2 = 0 ;
  Qt::TimeSpec arg3 ;
  QDateTime *result = 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QDate **)&m3arg1;
  arg2 = *(QTime **)&m3arg2;
  arg3 = (Qt::TimeSpec)spec; 
  result = (QDateTime *)new QDateTime((QDate const &)*arg1,(QTime const &)*arg2,arg3);
  *(QDateTime **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTime * New_QDateTime3(QDate const & m3arg1, QTime const & m3arg2) {
  QDate *arg1 = 0 ;
  QTime *arg2 = 0 ;
  QDateTime *result = 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QDate **)&m3arg1;
  arg2 = *(QTime **)&m3arg2;
  result = (QDateTime *)new QDateTime((QDate const &)*arg1,(QTime const &)*arg2);
  *(QDateTime **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTime * New_QDateTime4(QDateTime * other) {
  QDateTime *arg1 = 0 ;
  QDateTime *result = 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTime **)&other;
  result = (QDateTime *)new QDateTime((QDateTime const &)*arg1);
  *(QDateTime **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QDateTime(QDateTime * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  
  arg1 = *(QDateTime **)&self; 
  delete arg1;
}


SWIGEXPORT QDateTime * QDateTime_Assign(QDateTime * self, QDateTime * other) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime *arg2 = 0 ;
  QDateTime *result = 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QDateTime **)&other;
  result = (QDateTime *) &(arg1)->operator =((QDateTime const &)*arg2);
  *(QDateTime **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDateTime_isNull(QDateTime const * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDateTime **)&self; 
  result = (bool)((QDateTime const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDateTime_isValid(QDateTime const * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDateTime **)&self; 
  result = (bool)((QDateTime const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QDate * QDateTime_date(QDateTime const * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDate * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  *(QDate **)&cresult = new QDate((const QDate &)((QDateTime const *)arg1)->date());
  return cresult;
}


SWIGEXPORT QTime * QDateTime_time(QDateTime const * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QTime * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  *(QTime **)&cresult = new QTime((const QTime &)((QDateTime const *)arg1)->time());
  return cresult;
}


SWIGEXPORT Qt::TimeSpec QDateTime_timeSpec(QDateTime const * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  Qt::TimeSpec result;
  Qt::TimeSpec cresult ;
  
  arg1 = *(QDateTime **)&self; 
  result = (Qt::TimeSpec)((QDateTime const *)arg1)->timeSpec();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned long QDateTime_toMSecsSinceEpoch(QDateTime const * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  unsigned long result;
  unsigned long cresult ;
  
  arg1 = *(QDateTime **)&self; 
  result = (unsigned long)((QDateTime const *)arg1)->toMSecsSinceEpoch();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned int QDateTime_toTime_t(QDateTime const * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  unsigned int result;
  unsigned int cresult ;
  
  arg1 = *(QDateTime **)&self; 
  result = (unsigned int)((QDateTime const *)arg1)->toTime_t();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDateTime_setDate(QDateTime * self, QDate const & date) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDate *arg2 = 0 ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QDate **)&date;
  (arg1)->setDate((QDate const &)*arg2);
}


SWIGEXPORT void QDateTime_setTime(QDateTime * self, QTime const & time) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QTime *arg2 = 0 ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QTime **)&time;
  (arg1)->setTime((QTime const &)*arg2);
}


SWIGEXPORT void QDateTime_setTimeSpec(QDateTime * self, Qt::TimeSpec spec) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  Qt::TimeSpec arg2 ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = (Qt::TimeSpec)spec; 
  (arg1)->setTimeSpec(arg2);
}


SWIGEXPORT void QDateTime_setMSecsSinceEpoch(QDateTime * self, unsigned long msecs) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  unsigned long arg2 ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = (unsigned long)msecs; 
  (arg1)->setMSecsSinceEpoch(arg2);
}


SWIGEXPORT void QDateTime_setTime_t(QDateTime * self, unsigned int secsSince1Jan1970UTC) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = (unsigned int)secsSince1Jan1970UTC; 
  (arg1)->setTime_t(arg2);
}


SWIGEXPORT QString * QDateTime_toString(QDateTime const * self, Qt::DateFormat f) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  Qt::DateFormat arg2 ;
  QString * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = (Qt::DateFormat)f; 
  *(QString **)&cresult = new QString((const QString &)((QDateTime const *)arg1)->toString(arg2));
  return cresult;
}


SWIGEXPORT QString * QDateTime_toString1(QDateTime const * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QString * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QDateTime const *)arg1)->toString());
  return cresult;
}


SWIGEXPORT QString * QDateTime_toString2(QDateTime const * self, QString * format) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QString *arg2 = 0 ;
  QString * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QString **)&format;
  *(QString **)&cresult = new QString((const QString &)((QDateTime const *)arg1)->toString((QString const &)*arg2));
  return cresult;
}


SWIGEXPORT QDateTime * QDateTime_addDays(QDateTime const * self, int days) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  int arg2 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = (int)days; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)((QDateTime const *)arg1)->addDays(arg2));
  return cresult;
}


SWIGEXPORT QDateTime * QDateTime_addMonths(QDateTime const * self, int months) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  int arg2 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = (int)months; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)((QDateTime const *)arg1)->addMonths(arg2));
  return cresult;
}


SWIGEXPORT QDateTime * QDateTime_addYears(QDateTime const * self, int years) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  int arg2 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = (int)years; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)((QDateTime const *)arg1)->addYears(arg2));
  return cresult;
}


SWIGEXPORT QDateTime * QDateTime_addSecs(QDateTime const * self, int secs) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  int arg2 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = (int)secs; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)((QDateTime const *)arg1)->addSecs(arg2));
  return cresult;
}


SWIGEXPORT QDateTime * QDateTime_addMSecs(QDateTime const * self, unsigned long msecs) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  unsigned long arg2 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = (unsigned long)msecs; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)((QDateTime const *)arg1)->addMSecs(arg2));
  return cresult;
}


SWIGEXPORT QDateTime * QDateTime_toTimeSpec(QDateTime const * self, Qt::TimeSpec spec) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  Qt::TimeSpec arg2 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = (Qt::TimeSpec)spec; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)((QDateTime const *)arg1)->toTimeSpec(arg2));
  return cresult;
}


SWIGEXPORT QDateTime * QDateTime_toLocalTime(QDateTime const * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)((QDateTime const *)arg1)->toLocalTime());
  return cresult;
}


SWIGEXPORT QDateTime * QDateTime_toUTC(QDateTime const * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTime **)&self; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)((QDateTime const *)arg1)->toUTC());
  return cresult;
}


SWIGEXPORT int QDateTime_daysTo(QDateTime const * self, QDateTime * m3arg2) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QDateTime **)&m3arg2;
  result = (int)((QDateTime const *)arg1)->daysTo((QDateTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDateTime_secsTo(QDateTime const * self, QDateTime * m3arg2) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QDateTime **)&m3arg2;
  result = (int)((QDateTime const *)arg1)->secsTo((QDateTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned long QDateTime_msecsTo(QDateTime const * self, QDateTime * m3arg2) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime *arg2 = 0 ;
  unsigned long result;
  unsigned long cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QDateTime **)&m3arg2;
  result = (unsigned long)((QDateTime const *)arg1)->msecsTo((QDateTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDateTime_Equals(QDateTime const * self, QDateTime * other) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QDateTime **)&other;
  result = (bool)((QDateTime const *)arg1)->operator ==((QDateTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDateTime_NotEquals(QDateTime const * self, QDateTime * other) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QDateTime **)&other;
  result = (bool)((QDateTime const *)arg1)->operator !=((QDateTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDateTime_LessThan(QDateTime const * self, QDateTime * other) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QDateTime **)&other;
  result = (bool)((QDateTime const *)arg1)->operator <((QDateTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDateTime_LessThanEquals(QDateTime const * self, QDateTime * other) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QDateTime **)&other;
  result = (bool)((QDateTime const *)arg1)->operator <=((QDateTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDateTime_GreaterThan(QDateTime const * self, QDateTime * other) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QDateTime **)&other;
  result = (bool)((QDateTime const *)arg1)->operator >((QDateTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QDateTime_GreaterThanEquals(QDateTime const * self, QDateTime * other) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  QDateTime *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = *(QDateTime **)&other;
  result = (bool)((QDateTime const *)arg1)->operator >=((QDateTime const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDateTime_setUtcOffset(QDateTime * self, int seconds) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  int arg2 ;
  
  arg1 = *(QDateTime **)&self; 
  arg2 = (int)seconds; 
  (arg1)->setUtcOffset(arg2);
}


SWIGEXPORT int QDateTime_utcOffset(QDateTime const * self) {
  QDateTime *arg1 = (QDateTime *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDateTime **)&self; 
  result = (int)((QDateTime const *)arg1)->utcOffset();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTime * CurrentDateTime() {
  QDateTime * cresult ;
  
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)QDateTime::currentDateTime());
  return cresult;
}


SWIGEXPORT QDateTime * CurrentDateTimeUtc() {
  QDateTime * cresult ;
  
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)QDateTime::currentDateTimeUtc());
  return cresult;
}


SWIGEXPORT QDateTime * FromString(QString * s, Qt::DateFormat f) {
  QString *arg1 = 0 ;
  Qt::DateFormat arg2 ;
  QDateTime * cresult ;
  
  arg1 = *(QString **)&s;
  arg2 = (Qt::DateFormat)f; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)QDateTime::fromString((QString const &)*arg1,arg2));
  return cresult;
}


SWIGEXPORT QDateTime * FromString1(QString * s) {
  QString *arg1 = 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QString **)&s;
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)QDateTime::fromString((QString const &)*arg1));
  return cresult;
}


SWIGEXPORT QDateTime * FromString2(QString * s, QString * format) {
  QString *arg1 = 0 ;
  QString *arg2 = 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QString **)&s;
  arg2 = *(QString **)&format;
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)QDateTime::fromString((QString const &)*arg1,(QString const &)*arg2));
  return cresult;
}


SWIGEXPORT QDateTime * FromTime_t(unsigned int secsSince1Jan1970UTC) {
  unsigned int arg1 ;
  QDateTime * cresult ;
  
  arg1 = (unsigned int)secsSince1Jan1970UTC; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)QDateTime::fromTime_t(arg1));
  return cresult;
}


SWIGEXPORT QDateTime * FromMSecsSinceEpoch(unsigned long msecs) {
  unsigned long arg1 ;
  QDateTime * cresult ;
  
  arg1 = (unsigned long)msecs; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)QDateTime::fromMSecsSinceEpoch(arg1));
  return cresult;
}


SWIGEXPORT unsigned long CurrentMSecsSinceEpoch() {
  unsigned long result;
  unsigned long cresult ;
  
  result = (unsigned long)QDateTime::currentMSecsSinceEpoch();
  cresult = result; 
  return cresult;
}


#ifdef __cplusplus
}
#endif

