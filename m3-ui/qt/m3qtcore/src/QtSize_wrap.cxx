/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtCore/qsize.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QSize * New_QSize0() {
  QSize *result = 0 ;
  QSize * cresult ;
  
  result = (QSize *)new QSize();
  *(QSize **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * New_QSize1(int w, int h) {
  int arg1 ;
  int arg2 ;
  QSize *result = 0 ;
  QSize * cresult ;
  
  arg1 = (int)w; 
  arg2 = (int)h; 
  result = (QSize *)new QSize(arg1,arg2);
  *(QSize **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QSize_isNull(QSize const * self) {
  QSize *arg1 = (QSize *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSize **)&self; 
  result = (bool)((QSize const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QSize_isEmpty(QSize const * self) {
  QSize *arg1 = (QSize *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSize **)&self; 
  result = (bool)((QSize const *)arg1)->isEmpty();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QSize_isValid(QSize const * self) {
  QSize *arg1 = (QSize *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSize **)&self; 
  result = (bool)((QSize const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QSize_width(QSize const * self) {
  QSize *arg1 = (QSize *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QSize **)&self; 
  result = (int)((QSize const *)arg1)->width();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QSize_height(QSize const * self) {
  QSize *arg1 = (QSize *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QSize **)&self; 
  result = (int)((QSize const *)arg1)->height();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSize_setWidth(QSize * self, int w) {
  QSize *arg1 = (QSize *) 0 ;
  int arg2 ;
  
  arg1 = *(QSize **)&self; 
  arg2 = (int)w; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void QSize_setHeight(QSize * self, int h) {
  QSize *arg1 = (QSize *) 0 ;
  int arg2 ;
  
  arg1 = *(QSize **)&self; 
  arg2 = (int)h; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT void QSize_transpose(QSize * self) {
  QSize *arg1 = (QSize *) 0 ;
  
  arg1 = *(QSize **)&self; 
  (arg1)->transpose();
}


SWIGEXPORT void QSize_scale(QSize * self, int w, int h, Qt::AspectRatioMode mode) {
  QSize *arg1 = (QSize *) 0 ;
  int arg2 ;
  int arg3 ;
  Qt::AspectRatioMode arg4 ;
  
  arg1 = *(QSize **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  arg4 = (Qt::AspectRatioMode)mode; 
  (arg1)->scale(arg2,arg3,arg4);
}


SWIGEXPORT void QSize_scale1(QSize * self, QSize * s, Qt::AspectRatioMode mode) {
  QSize *arg1 = (QSize *) 0 ;
  QSize *arg2 = 0 ;
  Qt::AspectRatioMode arg3 ;
  
  arg1 = *(QSize **)&self; 
  arg2 = *(QSize **)&s;
  arg3 = (Qt::AspectRatioMode)mode; 
  (arg1)->scale((QSize const &)*arg2,arg3);
}


SWIGEXPORT QSize * QSize_expandedTo(QSize const * self, QSize * m3arg2) {
  QSize *arg1 = (QSize *) 0 ;
  QSize *arg2 = 0 ;
  QSize * cresult ;
  
  arg1 = *(QSize **)&self; 
  arg2 = *(QSize **)&m3arg2;
  *(QSize **)&cresult = new QSize((const QSize &)((QSize const *)arg1)->expandedTo((QSize const &)*arg2));
  return cresult;
}


SWIGEXPORT QSize * QSize_boundedTo(QSize const * self, QSize * m3arg2) {
  QSize *arg1 = (QSize *) 0 ;
  QSize *arg2 = 0 ;
  QSize * cresult ;
  
  arg1 = *(QSize **)&self; 
  arg2 = *(QSize **)&m3arg2;
  *(QSize **)&cresult = new QSize((const QSize &)((QSize const *)arg1)->boundedTo((QSize const &)*arg2));
  return cresult;
}


SWIGEXPORT int * QSize_rwidth(QSize * self) {
  QSize *arg1 = (QSize *) 0 ;
  int *result = 0 ;
  int * cresult ;
  
  arg1 = *(QSize **)&self; 
  result = (int *) &(arg1)->rwidth();
  *(int **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int * QSize_rheight(QSize * self) {
  QSize *arg1 = (QSize *) 0 ;
  int *result = 0 ;
  int * cresult ;
  
  arg1 = *(QSize **)&self; 
  result = (int *) &(arg1)->rheight();
  *(int **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QSize_PlusEqual(QSize * self, QSize * m3arg2) {
  QSize *arg1 = (QSize *) 0 ;
  QSize *arg2 = 0 ;
  QSize *result = 0 ;
  QSize * cresult ;
  
  arg1 = *(QSize **)&self; 
  arg2 = *(QSize **)&m3arg2;
  result = (QSize *) &(arg1)->operator +=((QSize const &)*arg2);
  *(QSize **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QSize_MinusEqual(QSize * self, QSize * m3arg2) {
  QSize *arg1 = (QSize *) 0 ;
  QSize *arg2 = 0 ;
  QSize *result = 0 ;
  QSize * cresult ;
  
  arg1 = *(QSize **)&self; 
  arg2 = *(QSize **)&m3arg2;
  result = (QSize *) &(arg1)->operator -=((QSize const &)*arg2);
  *(QSize **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QSize_MultiplyEqual(QSize * self, double c) {
  QSize *arg1 = (QSize *) 0 ;
  double arg2 ;
  QSize *result = 0 ;
  QSize * cresult ;
  
  arg1 = *(QSize **)&self; 
  arg2 = (double)c; 
  result = (QSize *) &(arg1)->operator *=(arg2);
  *(QSize **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QSize_DivideEqual(QSize * self, double c) {
  QSize *arg1 = (QSize *) 0 ;
  double arg2 ;
  QSize *result = 0 ;
  QSize * cresult ;
  
  arg1 = *(QSize **)&self; 
  arg2 = (double)c; 
  result = (QSize *) &(arg1)->operator /=(arg2);
  *(QSize **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QSize(QSize * self) {
  QSize *arg1 = (QSize *) 0 ;
  
  arg1 = *(QSize **)&self; 
  delete arg1;
}


SWIGEXPORT QSizeF * New_QSizeF0() {
  QSizeF *result = 0 ;
  QSizeF * cresult ;
  
  result = (QSizeF *)new QSizeF();
  *(QSizeF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSizeF * New_QSizeF1(QSize * sz) {
  QSize *arg1 = 0 ;
  QSizeF *result = 0 ;
  QSizeF * cresult ;
  
  arg1 = *(QSize **)&sz;
  result = (QSizeF *)new QSizeF((QSize const &)*arg1);
  *(QSizeF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSizeF * New_QSizeF2(double w, double h) {
  double arg1 ;
  double arg2 ;
  QSizeF *result = 0 ;
  QSizeF * cresult ;
  
  arg1 = (double)w; 
  arg2 = (double)h; 
  result = (QSizeF *)new QSizeF(arg1,arg2);
  *(QSizeF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QSizeF_isNull(QSizeF const * self) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSizeF **)&self; 
  result = (bool)((QSizeF const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QSizeF_isEmpty(QSizeF const * self) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSizeF **)&self; 
  result = (bool)((QSizeF const *)arg1)->isEmpty();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QSizeF_isValid(QSizeF const * self) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSizeF **)&self; 
  result = (bool)((QSizeF const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QSizeF_width(QSizeF const * self) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QSizeF **)&self; 
  result = (double)((QSizeF const *)arg1)->width();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QSizeF_height(QSizeF const * self) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QSizeF **)&self; 
  result = (double)((QSizeF const *)arg1)->height();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSizeF_setWidth(QSizeF * self, double w) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  double arg2 ;
  
  arg1 = *(QSizeF **)&self; 
  arg2 = (double)w; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void QSizeF_setHeight(QSizeF * self, double h) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  double arg2 ;
  
  arg1 = *(QSizeF **)&self; 
  arg2 = (double)h; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT void QSizeF_transpose(QSizeF * self) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  
  arg1 = *(QSizeF **)&self; 
  (arg1)->transpose();
}


SWIGEXPORT void QSizeF_scale(QSizeF * self, double w, double h, Qt::AspectRatioMode mode) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  double arg2 ;
  double arg3 ;
  Qt::AspectRatioMode arg4 ;
  
  arg1 = *(QSizeF **)&self; 
  arg2 = (double)w; 
  arg3 = (double)h; 
  arg4 = (Qt::AspectRatioMode)mode; 
  (arg1)->scale(arg2,arg3,arg4);
}


SWIGEXPORT void QSizeF_scale1(QSizeF * self, QSizeF * s, Qt::AspectRatioMode mode) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  QSizeF *arg2 = 0 ;
  Qt::AspectRatioMode arg3 ;
  
  arg1 = *(QSizeF **)&self; 
  arg2 = *(QSizeF **)&s;
  arg3 = (Qt::AspectRatioMode)mode; 
  (arg1)->scale((QSizeF const &)*arg2,arg3);
}


SWIGEXPORT QSizeF * QSizeF_expandedTo(QSizeF const * self, QSizeF * m3arg2) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  QSizeF *arg2 = 0 ;
  QSizeF * cresult ;
  
  arg1 = *(QSizeF **)&self; 
  arg2 = *(QSizeF **)&m3arg2;
  *(QSizeF **)&cresult = new QSizeF((const QSizeF &)((QSizeF const *)arg1)->expandedTo((QSizeF const &)*arg2));
  return cresult;
}


SWIGEXPORT QSizeF * QSizeF_boundedTo(QSizeF const * self, QSizeF * m3arg2) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  QSizeF *arg2 = 0 ;
  QSizeF * cresult ;
  
  arg1 = *(QSizeF **)&self; 
  arg2 = *(QSizeF **)&m3arg2;
  *(QSizeF **)&cresult = new QSizeF((const QSizeF &)((QSizeF const *)arg1)->boundedTo((QSizeF const &)*arg2));
  return cresult;
}


SWIGEXPORT double & QSizeF_rwidth(QSizeF * self) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  double *result = 0 ;
  double * cresult ;
  
  arg1 = *(QSizeF **)&self; 
  result = (double *) &(arg1)->rwidth();
  *(double **)&cresult = result; 
  return *cresult;
}


SWIGEXPORT double & QSizeF_rheight(QSizeF * self) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  double *result = 0 ;
  double * cresult ;
  
  arg1 = *(QSizeF **)&self; 
  result = (double *) &(arg1)->rheight();
  *(double **)&cresult = result; 
  return *cresult;
}


SWIGEXPORT QSizeF * QSizeF_PlusEqual(QSizeF * self, QSizeF * m3arg2) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  QSizeF *arg2 = 0 ;
  QSizeF *result = 0 ;
  QSizeF * cresult ;
  
  arg1 = *(QSizeF **)&self; 
  arg2 = *(QSizeF **)&m3arg2;
  result = (QSizeF *) &(arg1)->operator +=((QSizeF const &)*arg2);
  *(QSizeF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSizeF * QSizeF_MinusEqual(QSizeF * self, QSizeF * m3arg2) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  QSizeF *arg2 = 0 ;
  QSizeF *result = 0 ;
  QSizeF * cresult ;
  
  arg1 = *(QSizeF **)&self; 
  arg2 = *(QSizeF **)&m3arg2;
  result = (QSizeF *) &(arg1)->operator -=((QSizeF const &)*arg2);
  *(QSizeF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSizeF * QSizeF_MultiplyEqual(QSizeF * self, double c) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  double arg2 ;
  QSizeF *result = 0 ;
  QSizeF * cresult ;
  
  arg1 = *(QSizeF **)&self; 
  arg2 = (double)c; 
  result = (QSizeF *) &(arg1)->operator *=(arg2);
  *(QSizeF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSizeF * QSizeF_DivideEqual(QSizeF * self, double c) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  double arg2 ;
  QSizeF *result = 0 ;
  QSizeF * cresult ;
  
  arg1 = *(QSizeF **)&self; 
  arg2 = (double)c; 
  result = (QSizeF *) &(arg1)->operator /=(arg2);
  *(QSizeF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QSizeF_toSize(QSizeF const * self) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QSizeF **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QSizeF const *)arg1)->toSize());
  return cresult;
}


SWIGEXPORT void Delete_QSizeF(QSizeF * self) {
  QSizeF *arg1 = (QSizeF *) 0 ;
  
  arg1 = *(QSizeF **)&self; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

