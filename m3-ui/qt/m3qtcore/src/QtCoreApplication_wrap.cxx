/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtCore/qcoreapplication.h>
#include <QtCore/qstringlist.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QCoreApplication * New_QCoreApplication0(int * argc, char ** argv, int m3arg3) {
  int *arg1 = 0 ;
  char **arg2 = (char **) 0 ;
  int arg3 ;
  QCoreApplication *result = 0 ;
  QCoreApplication * cresult ;
  
  arg1 = *(int **)&argc;
  /*
  if(!arg1) {
     return 0;
    }
  */
  
  arg2 = *(char ***)&argv; 
  arg3 = (int)m3arg3; 
  result = (QCoreApplication *)new QCoreApplication(*arg1,arg2,arg3);
  *(QCoreApplication **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QCoreApplication * New_QCoreApplication1(int * argc, char ** argv) {
  int *arg1 = 0 ;
  char **arg2 = (char **) 0 ;
  QCoreApplication *result = 0 ;
  QCoreApplication * cresult ;
  
  arg1 = *(int **)&argc;
  /*
  if(!arg1) {
     return 0;
    }
  */
  
  arg2 = *(char ***)&argv; 
  result = (QCoreApplication *)new QCoreApplication(*arg1,arg2);
  *(QCoreApplication **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QCoreApplication(QCoreApplication * self) {
  QCoreApplication *arg1 = (QCoreApplication *) 0 ;
  
  arg1 = *(QCoreApplication **)&self; 
  delete arg1;
}


SWIGEXPORT QStringList * Arguments() {
  QStringList * cresult ;
  
  *(QStringList **)&cresult = new QStringList((const QStringList &)QCoreApplication::arguments());
  return cresult;
}


SWIGEXPORT void SetAttribute(Qt::ApplicationAttribute attribute, bool on) {
  Qt::ApplicationAttribute arg1 ;
  bool arg2 ;
  
  arg1 = (Qt::ApplicationAttribute)attribute; 
  arg2 = on ? true : false; 
  QCoreApplication::setAttribute(arg1,arg2);
}


SWIGEXPORT void SetAttribute1(Qt::ApplicationAttribute attribute) {
  Qt::ApplicationAttribute arg1 ;
  
  arg1 = (Qt::ApplicationAttribute)attribute; 
  QCoreApplication::setAttribute(arg1);
}


SWIGEXPORT bool TestAttribute(Qt::ApplicationAttribute attribute) {
  Qt::ApplicationAttribute arg1 ;
  bool result;
  bool cresult ;
  
  arg1 = (Qt::ApplicationAttribute)attribute; 
  result = (bool)QCoreApplication::testAttribute(arg1);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void SetOrganizationDomain(QString * orgDomain) {
  QString *arg1 = 0 ;
  
  arg1 = *(QString **)&orgDomain;
  QCoreApplication::setOrganizationDomain((QString const &)*arg1);
}


SWIGEXPORT QString * OrganizationDomain() {
  QString * cresult ;
  
  *(QString **)&cresult = new QString((const QString &)QCoreApplication::organizationDomain());
  return cresult;
}


SWIGEXPORT void SetOrganizationName(QString * orgName) {
  QString *arg1 = 0 ;
  
  arg1 = *(QString **)&orgName;
  QCoreApplication::setOrganizationName((QString const &)*arg1);
}


SWIGEXPORT QString * OrganizationName() {
  QString * cresult ;
  
  *(QString **)&cresult = new QString((const QString &)QCoreApplication::organizationName());
  return cresult;
}


SWIGEXPORT void SetApplicationName(QString * application) {
  QString *arg1 = 0 ;
  
  arg1 = *(QString **)&application;
  QCoreApplication::setApplicationName((QString const &)*arg1);
}


SWIGEXPORT QString * ApplicationName() {
  QString * cresult ;
  
  *(QString **)&cresult = new QString((const QString &)QCoreApplication::applicationName());
  return cresult;
}


SWIGEXPORT void SetApplicationVersion(QString * version) {
  QString *arg1 = 0 ;
  
  arg1 = *(QString **)&version;
  QCoreApplication::setApplicationVersion((QString const &)*arg1);
}


SWIGEXPORT QString * ApplicationVersion() {
  QString * cresult ;
  
  *(QString **)&cresult = new QString((const QString &)QCoreApplication::applicationVersion());
  return cresult;
}


SWIGEXPORT int Exec() {
  int result;
  int cresult ;
  
  result = (int)QCoreApplication::exec();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void ProcessEvents(int flags) {
  QEventLoop::ProcessEventsFlags arg1 ;
  
  arg1 = (QEventLoop::ProcessEventsFlags)flags; 
  QCoreApplication::processEvents(arg1);
}


SWIGEXPORT void ProcessEvents1() {
  QCoreApplication::processEvents();
}


SWIGEXPORT void ProcessEvents2(int flags, int maxtime) {
  QEventLoop::ProcessEventsFlags arg1 ;
  int arg2 ;
  
  arg1 = (QEventLoop::ProcessEventsFlags)flags; 
  arg2 = (int)maxtime; 
  QCoreApplication::processEvents(arg1,arg2);
}


SWIGEXPORT void Exit(int retcode) {
  int arg1 ;
  
  arg1 = (int)retcode; 
  QCoreApplication::exit(arg1);
}


SWIGEXPORT void Exit1() {
  QCoreApplication::exit();
}


SWIGEXPORT bool SendEvent(QObject * receiver, QEvent * event) {
  QObject *arg1 = (QObject *) 0 ;
  QEvent *arg2 = (QEvent *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QObject **)&receiver; 
  arg2 = *(QEvent **)&event; 
  result = (bool)QCoreApplication::sendEvent(arg1,arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void PostEvent(QObject * receiver, QEvent * event) {
  QObject *arg1 = (QObject *) 0 ;
  QEvent *arg2 = (QEvent *) 0 ;
  
  arg1 = *(QObject **)&receiver; 
  arg2 = *(QEvent **)&event; 
  QCoreApplication::postEvent(arg1,arg2);
}


SWIGEXPORT void PostEvent1(QObject * receiver, QEvent * event, int priority) {
  QObject *arg1 = (QObject *) 0 ;
  QEvent *arg2 = (QEvent *) 0 ;
  int arg3 ;
  
  arg1 = *(QObject **)&receiver; 
  arg2 = *(QEvent **)&event; 
  arg3 = (int)priority; 
  QCoreApplication::postEvent(arg1,arg2,arg3);
}


SWIGEXPORT void SendPostedEvents(QObject * receiver, int event_type) {
  QObject *arg1 = (QObject *) 0 ;
  int arg2 ;
  
  arg1 = *(QObject **)&receiver; 
  arg2 = (int)event_type; 
  QCoreApplication::sendPostedEvents(arg1,arg2);
}


SWIGEXPORT void SendPostedEvents1() {
  QCoreApplication::sendPostedEvents();
}


SWIGEXPORT void RemovePostedEvents(QObject * receiver) {
  QObject *arg1 = (QObject *) 0 ;
  
  arg1 = *(QObject **)&receiver; 
  QCoreApplication::removePostedEvents(arg1);
}


SWIGEXPORT void RemovePostedEvents1(QObject * receiver, int eventType) {
  QObject *arg1 = (QObject *) 0 ;
  int arg2 ;
  
  arg1 = *(QObject **)&receiver; 
  arg2 = (int)eventType; 
  QCoreApplication::removePostedEvents(arg1,arg2);
}


SWIGEXPORT bool HasPendingEvents() {
  bool result;
  bool cresult ;
  
  result = (bool)QCoreApplication::hasPendingEvents();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QCoreApplication_notify(QCoreApplication * self, QObject * m3arg2, QEvent * m3arg3) {
  QCoreApplication *arg1 = (QCoreApplication *) 0 ;
  QObject *arg2 = (QObject *) 0 ;
  QEvent *arg3 = (QEvent *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QCoreApplication **)&self; 
  arg2 = *(QObject **)&m3arg2; 
  arg3 = *(QEvent **)&m3arg3; 
  result = (bool)(arg1)->notify(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool StartingUp() {
  bool result;
  bool cresult ;
  
  result = (bool)QCoreApplication::startingUp();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool ClosingDown() {
  bool result;
  bool cresult ;
  
  result = (bool)QCoreApplication::closingDown();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * ApplicationDirPath() {
  QString * cresult ;
  
  *(QString **)&cresult = new QString((const QString &)QCoreApplication::applicationDirPath());
  return cresult;
}


SWIGEXPORT QString * ApplicationFilePath() {
  QString * cresult ;
  
  *(QString **)&cresult = new QString((const QString &)QCoreApplication::applicationFilePath());
  return cresult;
}


SWIGEXPORT unsigned long ApplicationPid() {
  unsigned long result;
  unsigned long cresult ;
  
  result = (unsigned long)QCoreApplication::applicationPid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void SetLibraryPaths(QStringList * m3arg1) {
  QStringList *arg1 = 0 ;
  
  arg1 = *(QStringList **)&m3arg1;
  QCoreApplication::setLibraryPaths((QStringList const &)*arg1);
}


SWIGEXPORT QStringList * LibraryPaths() {
  QStringList * cresult ;
  
  *(QStringList **)&cresult = new QStringList((const QStringList &)QCoreApplication::libraryPaths());
  return cresult;
}


SWIGEXPORT void AddLibraryPath(QString * m3arg1) {
  QString *arg1 = 0 ;
  
  arg1 = *(QString **)&m3arg1;
  QCoreApplication::addLibraryPath((QString const &)*arg1);
}


SWIGEXPORT void RemoveLibraryPath(QString * m3arg1) {
  QString *arg1 = 0 ;
  
  arg1 = *(QString **)&m3arg1;
  QCoreApplication::removeLibraryPath((QString const &)*arg1);
}


SWIGEXPORT QString * Translate(char * context, char * key, char * disambiguation, QCoreApplication::Encoding encoding) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  QCoreApplication::Encoding arg4 ;
  QString * cresult ;
  
  {
    arg1 = context;
  }
  {
    arg2 = key;
  }
  {
    arg3 = disambiguation;
  }
  arg4 = (QCoreApplication::Encoding)encoding; 
  *(QString **)&cresult = new QString((const QString &)QCoreApplication::translate((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4));
  return cresult;
}


SWIGEXPORT QString * Translate1(char * context, char * key, char * disambiguation) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  QString * cresult ;
  
  {
    arg1 = context;
  }
  {
    arg2 = key;
  }
  {
    arg3 = disambiguation;
  }
  *(QString **)&cresult = new QString((const QString &)QCoreApplication::translate((char const *)arg1,(char const *)arg2,(char const *)arg3));
  return cresult;
}


SWIGEXPORT QString * Translate2(char * context, char * key) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  QString * cresult ;
  
  {
    arg1 = context;
  }
  {
    arg2 = key;
  }
  *(QString **)&cresult = new QString((const QString &)QCoreApplication::translate((char const *)arg1,(char const *)arg2));
  return cresult;
}


SWIGEXPORT QString * Translate3(char * context, char * key, char * disambiguation, QCoreApplication::Encoding encoding, int n) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  QCoreApplication::Encoding arg4 ;
  int arg5 ;
  QString * cresult ;
  
  {
    arg1 = context;
  }
  {
    arg2 = key;
  }
  {
    arg3 = disambiguation;
  }
  arg4 = (QCoreApplication::Encoding)encoding; 
  arg5 = (int)n; 
  *(QString **)&cresult = new QString((const QString &)QCoreApplication::translate((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT void Flush() {
  QCoreApplication::flush();
}


SWIGEXPORT bool QCoreApplication_filterEvent(QCoreApplication * self, void * message, long * outResult) {
  QCoreApplication *arg1 = (QCoreApplication *) 0 ;
  void *arg2 = (void *) 0 ;
  long *arg3 = (long *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QCoreApplication **)&self; 
  arg2 = *(void **)&message; 
  arg3 = *(long **)&outResult; 
  result = (bool)(arg1)->filterEvent(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Quit() {
  QCoreApplication::quit();
}


#ifdef __cplusplus
}
#endif

