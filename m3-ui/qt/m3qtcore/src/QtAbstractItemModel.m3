(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtAbstractItemModel;


FROM QtStringList IMPORT QStringList;
IMPORT QtAbstractItemModelRaw;
FROM QtSize IMPORT QSize;
FROM QCoreStubs IMPORT QMimeData,QModelIndexList,QVariant;
FROM QtObject IMPORT QObject;
FROM QtNamespace IMPORT Orientation,ItemFlags,DropActions,DropAction,MatchFlags,SortOrder;


IMPORT WeakRef;

PROCEDURE New_QModelIndex0 (self:QModelIndex;): QModelIndex =
VAR
result : ADDRESS;
BEGIN
result := QtAbstractItemModelRaw.New_QModelIndex0();

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QModelIndex);

RETURN self;
END New_QModelIndex0;

PROCEDURE New_QModelIndex1 (self:QModelIndex; other: QModelIndex;
): QModelIndex =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(other.cxxObj,ADDRESS);
BEGIN
result := QtAbstractItemModelRaw.New_QModelIndex1(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QModelIndex);

RETURN self;
END New_QModelIndex1;

PROCEDURE Delete_QModelIndex ( self: QModelIndex;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtAbstractItemModelRaw.Delete_QModelIndex(selfAdr);
END Delete_QModelIndex;

PROCEDURE QModelIndex_row ( self: QModelIndex;
): INTEGER =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QModelIndex_row(selfAdr);
END QModelIndex_row;

PROCEDURE QModelIndex_column ( self: QModelIndex;
): INTEGER =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QModelIndex_column(selfAdr);
END QModelIndex_column;

PROCEDURE QModelIndex_internalId ( self: QModelIndex;
): CARDINAL =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QModelIndex_internalId(selfAdr);
END QModelIndex_internalId;

PROCEDURE QModelIndex_parent ( self: QModelIndex;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QModelIndex_parent(selfAdr);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QModelIndex_parent;

PROCEDURE QModelIndex_sibling ( self: QModelIndex;
row, column: INTEGER;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QModelIndex_sibling(selfAdr, row, column);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QModelIndex_sibling;

PROCEDURE QModelIndex_child ( self: QModelIndex;
row, column: INTEGER;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QModelIndex_child(selfAdr, row, column);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QModelIndex_child;

PROCEDURE QModelIndex_flags ( self: QModelIndex;
): ItemFlags =
VAR
ret:INTEGER; result : ItemFlags;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QModelIndex_flags(selfAdr);
result := VAL(ret,ItemFlags);  
RETURN result;
END QModelIndex_flags;

PROCEDURE QModelIndex_model ( self: QModelIndex;
): QAbstractItemModel =
VAR
ret:ADDRESS; result : QAbstractItemModel;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QModelIndex_model(selfAdr);

  result := NEW(QAbstractItemModel);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QModelIndex_model;

PROCEDURE QModelIndex_isValid ( self: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QModelIndex_isValid(selfAdr);
END QModelIndex_isValid;

PROCEDURE Cleanup_QModelIndex(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QModelIndex := ref;
BEGIN
  Delete_QModelIndex(obj);
 END Cleanup_QModelIndex;

PROCEDURE Destroy_QModelIndex(self : QModelIndex) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QModelIndex);
END Destroy_QModelIndex;

REVEAL
QModelIndex =
QModelIndexPublic BRANDED OBJECT
OVERRIDES
init_0 := New_QModelIndex0;
init_1 := New_QModelIndex1;
row := QModelIndex_row;
column := QModelIndex_column;
internalId := QModelIndex_internalId;
parent := QModelIndex_parent;
sibling := QModelIndex_sibling;
child := QModelIndex_child;
flags := QModelIndex_flags;
model := QModelIndex_model;
isValid := QModelIndex_isValid;
destroyCxx := Destroy_QModelIndex;
END;

PROCEDURE New_QPersistentModelIndex0 (self:QPersistentModelIndex;): QPersistentModelIndex =
VAR
result : ADDRESS;
BEGIN
result := QtAbstractItemModelRaw.New_QPersistentModelIndex0();

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QPersistentModelIndex);

RETURN self;
END New_QPersistentModelIndex0;

PROCEDURE New_QPersistentModelIndex1 (self:QPersistentModelIndex; index: QModelIndex;
): QPersistentModelIndex =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
BEGIN
result := QtAbstractItemModelRaw.New_QPersistentModelIndex1(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QPersistentModelIndex);

RETURN self;
END New_QPersistentModelIndex1;

PROCEDURE New_QPersistentModelIndex2 (self:QPersistentModelIndex; other: QPersistentModelIndex;
): QPersistentModelIndex =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(other.cxxObj,ADDRESS);
BEGIN
result := QtAbstractItemModelRaw.New_QPersistentModelIndex2(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QPersistentModelIndex);

RETURN self;
END New_QPersistentModelIndex2;

PROCEDURE Delete_QPersistentModelIndex ( self: QPersistentModelIndex;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtAbstractItemModelRaw.Delete_QPersistentModelIndex(selfAdr);
END Delete_QPersistentModelIndex;

PROCEDURE QPersistentModelIndex_row ( self: QPersistentModelIndex;
): INTEGER =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QPersistentModelIndex_row(selfAdr);
END QPersistentModelIndex_row;

PROCEDURE QPersistentModelIndex_column ( self: QPersistentModelIndex;
): INTEGER =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QPersistentModelIndex_column(selfAdr);
END QPersistentModelIndex_column;

PROCEDURE QPersistentModelIndex_internalId ( self: QPersistentModelIndex;
): CARDINAL =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QPersistentModelIndex_internalId(selfAdr);
END QPersistentModelIndex_internalId;

PROCEDURE QPersistentModelIndex_parent ( self: QPersistentModelIndex;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QPersistentModelIndex_parent(selfAdr);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QPersistentModelIndex_parent;

PROCEDURE QPersistentModelIndex_sibling ( self: QPersistentModelIndex;
row, column: INTEGER;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QPersistentModelIndex_sibling(selfAdr, row, column);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QPersistentModelIndex_sibling;

PROCEDURE QPersistentModelIndex_child ( self: QPersistentModelIndex;
row, column: INTEGER;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QPersistentModelIndex_child(selfAdr, row, column);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QPersistentModelIndex_child;

PROCEDURE QPersistentModelIndex_flags ( self: QPersistentModelIndex;
): ItemFlags =
VAR
ret:INTEGER; result : ItemFlags;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QPersistentModelIndex_flags(selfAdr);
result := VAL(ret,ItemFlags);  
RETURN result;
END QPersistentModelIndex_flags;

PROCEDURE QPersistentModelIndex_model ( self: QPersistentModelIndex;
): QAbstractItemModel =
VAR
ret:ADDRESS; result : QAbstractItemModel;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QPersistentModelIndex_model(selfAdr);

  result := NEW(QAbstractItemModel);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QPersistentModelIndex_model;

PROCEDURE QPersistentModelIndex_isValid ( self: QPersistentModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QPersistentModelIndex_isValid(selfAdr);
END QPersistentModelIndex_isValid;

PROCEDURE Cleanup_QPersistentModelIndex(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QPersistentModelIndex := ref;
BEGIN
  Delete_QPersistentModelIndex(obj);
 END Cleanup_QPersistentModelIndex;

PROCEDURE Destroy_QPersistentModelIndex(self : QPersistentModelIndex) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QPersistentModelIndex);
END Destroy_QPersistentModelIndex;

REVEAL
QPersistentModelIndex =
QPersistentModelIndexPublic BRANDED OBJECT
OVERRIDES
init_0 := New_QPersistentModelIndex0;
init_1 := New_QPersistentModelIndex1;
init_2 := New_QPersistentModelIndex2;
row := QPersistentModelIndex_row;
column := QPersistentModelIndex_column;
internalId := QPersistentModelIndex_internalId;
parent := QPersistentModelIndex_parent;
sibling := QPersistentModelIndex_sibling;
child := QPersistentModelIndex_child;
flags := QPersistentModelIndex_flags;
model := QPersistentModelIndex_model;
isValid := QPersistentModelIndex_isValid;
destroyCxx := Destroy_QPersistentModelIndex;
END;

PROCEDURE Delete_QAbstractItemModel ( self: QAbstractItemModel;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtAbstractItemModelRaw.Delete_QAbstractItemModel(selfAdr);
END Delete_QAbstractItemModel;

PROCEDURE QAbstractItemModel_hasIndex ( self: QAbstractItemModel;
row, column: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_hasIndex(selfAdr, row, column, arg4tmp);
END QAbstractItemModel_hasIndex;

PROCEDURE QAbstractItemModel_hasIndex1 ( self: QAbstractItemModel;
row, column: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_hasIndex1(selfAdr, row, column);
END QAbstractItemModel_hasIndex1;

PROCEDURE QAbstractItemModel_sibling ( self: QAbstractItemModel;
row, column: INTEGER;
 idx: QModelIndex;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(idx.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_sibling(selfAdr, row, column, arg4tmp);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractItemModel_sibling;

PROCEDURE QAbstractItemModel_hasChildren ( self: QAbstractItemModel;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_hasChildren(selfAdr, arg2tmp);
END QAbstractItemModel_hasChildren;

PROCEDURE QAbstractItemModel_hasChildren1 ( self: QAbstractItemModel;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_hasChildren1(selfAdr);
END QAbstractItemModel_hasChildren1;

PROCEDURE QAbstractItemModel_setData ( self: QAbstractItemModel;
 index: QModelIndex;
 value: QVariant;
role: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(value.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_setData(selfAdr, arg2tmp, arg3tmp, role);
END QAbstractItemModel_setData;

PROCEDURE QAbstractItemModel_setData1 ( self: QAbstractItemModel;
 index: QModelIndex;
 value: QVariant;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(value.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_setData1(selfAdr, arg2tmp, arg3tmp);
END QAbstractItemModel_setData1;

PROCEDURE QAbstractItemModel_setHeaderData ( self: QAbstractItemModel;
section: INTEGER;
orientation: Orientation;
 value: QVariant;
role: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(value.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_setHeaderData(selfAdr, section, ORD(orientation), arg4tmp, role);
END QAbstractItemModel_setHeaderData;

PROCEDURE QAbstractItemModel_setHeaderData1 ( self: QAbstractItemModel;
section: INTEGER;
orientation: Orientation;
 value: QVariant;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(value.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_setHeaderData1(selfAdr, section, ORD(orientation), arg4tmp);
END QAbstractItemModel_setHeaderData1;

PROCEDURE QAbstractItemModel_mimeTypes ( self: QAbstractItemModel;
): QStringList =
VAR
ret:ADDRESS; result : QStringList;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_mimeTypes(selfAdr);

  result := NEW(QStringList);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractItemModel_mimeTypes;

PROCEDURE QAbstractItemModel_mimeData ( self: QAbstractItemModel;
 indexes: QModelIndexList;
): QMimeData =
VAR
ret:ADDRESS; result : QMimeData;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(indexes.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_mimeData(selfAdr, arg2tmp);

  result := NEW(QMimeData);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractItemModel_mimeData;

PROCEDURE QAbstractItemModel_dropMimeData ( self: QAbstractItemModel;
 data: QMimeData;
action: DropAction;
row, column: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(data.cxxObj,ADDRESS);
arg6tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_dropMimeData(selfAdr, arg2tmp, ORD(action), row, column, arg6tmp);
END QAbstractItemModel_dropMimeData;

PROCEDURE QAbstractItemModel_supportedDropActions ( self: QAbstractItemModel;
): DropActions =
VAR
ret:INTEGER; result : DropActions;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_supportedDropActions(selfAdr);
result := VAL(ret,DropActions);  
RETURN result;
END QAbstractItemModel_supportedDropActions;

PROCEDURE QAbstractItemModel_supportedDragActions ( self: QAbstractItemModel;
): DropActions =
VAR
ret:INTEGER; result : DropActions;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_supportedDragActions(selfAdr);
result := VAL(ret,DropActions);  
RETURN result;
END QAbstractItemModel_supportedDragActions;

PROCEDURE QAbstractItemModel_setSupportedDragActions ( self: QAbstractItemModel;
arg2: DropActions;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtAbstractItemModelRaw.QAbstractItemModel_setSupportedDragActions(selfAdr, ORD(arg2));
END QAbstractItemModel_setSupportedDragActions;

PROCEDURE QAbstractItemModel_insertRows ( self: QAbstractItemModel;
row, count: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_insertRows(selfAdr, row, count, arg4tmp);
END QAbstractItemModel_insertRows;

PROCEDURE QAbstractItemModel_insertRows1 ( self: QAbstractItemModel;
row, count: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_insertRows1(selfAdr, row, count);
END QAbstractItemModel_insertRows1;

PROCEDURE QAbstractItemModel_insertColumns ( self: QAbstractItemModel;
column, count: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_insertColumns(selfAdr, column, count, arg4tmp);
END QAbstractItemModel_insertColumns;

PROCEDURE QAbstractItemModel_insertColumns1 ( self: QAbstractItemModel;
column, count: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_insertColumns1(selfAdr, column, count);
END QAbstractItemModel_insertColumns1;

PROCEDURE QAbstractItemModel_removeRows ( self: QAbstractItemModel;
row, count: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_removeRows(selfAdr, row, count, arg4tmp);
END QAbstractItemModel_removeRows;

PROCEDURE QAbstractItemModel_removeRows1 ( self: QAbstractItemModel;
row, count: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_removeRows1(selfAdr, row, count);
END QAbstractItemModel_removeRows1;

PROCEDURE QAbstractItemModel_removeColumns ( self: QAbstractItemModel;
column, count: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_removeColumns(selfAdr, column, count, arg4tmp);
END QAbstractItemModel_removeColumns;

PROCEDURE QAbstractItemModel_removeColumns1 ( self: QAbstractItemModel;
column, count: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_removeColumns1(selfAdr, column, count);
END QAbstractItemModel_removeColumns1;

PROCEDURE QAbstractItemModel_insertRow ( self: QAbstractItemModel;
row: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_insertRow(selfAdr, row, arg3tmp);
END QAbstractItemModel_insertRow;

PROCEDURE QAbstractItemModel_insertRow1 ( self: QAbstractItemModel;
row: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_insertRow1(selfAdr, row);
END QAbstractItemModel_insertRow1;

PROCEDURE QAbstractItemModel_insertColumn ( self: QAbstractItemModel;
column: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_insertColumn(selfAdr, column, arg3tmp);
END QAbstractItemModel_insertColumn;

PROCEDURE QAbstractItemModel_insertColumn1 ( self: QAbstractItemModel;
column: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_insertColumn1(selfAdr, column);
END QAbstractItemModel_insertColumn1;

PROCEDURE QAbstractItemModel_removeRow ( self: QAbstractItemModel;
row: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_removeRow(selfAdr, row, arg3tmp);
END QAbstractItemModel_removeRow;

PROCEDURE QAbstractItemModel_removeRow1 ( self: QAbstractItemModel;
row: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_removeRow1(selfAdr, row);
END QAbstractItemModel_removeRow1;

PROCEDURE QAbstractItemModel_removeColumn ( self: QAbstractItemModel;
column: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_removeColumn(selfAdr, column, arg3tmp);
END QAbstractItemModel_removeColumn;

PROCEDURE QAbstractItemModel_removeColumn1 ( self: QAbstractItemModel;
column: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_removeColumn1(selfAdr, column);
END QAbstractItemModel_removeColumn1;

PROCEDURE QAbstractItemModel_fetchMore ( self: QAbstractItemModel;
 parent: QModelIndex;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
QtAbstractItemModelRaw.QAbstractItemModel_fetchMore(selfAdr, arg2tmp);
END QAbstractItemModel_fetchMore;

PROCEDURE QAbstractItemModel_canFetchMore ( self: QAbstractItemModel;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_canFetchMore(selfAdr, arg2tmp);
END QAbstractItemModel_canFetchMore;

PROCEDURE QAbstractItemModel_flags ( self: QAbstractItemModel;
 index: QModelIndex;
): ItemFlags =
VAR
ret:INTEGER; result : ItemFlags;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_flags(selfAdr, arg2tmp);
result := VAL(ret,ItemFlags);  
RETURN result;
END QAbstractItemModel_flags;

PROCEDURE QAbstractItemModel_sort ( self: QAbstractItemModel;
column: INTEGER;
order: SortOrder;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtAbstractItemModelRaw.QAbstractItemModel_sort(selfAdr, column, ORD(order));
END QAbstractItemModel_sort;

PROCEDURE QAbstractItemModel_sort1 ( self: QAbstractItemModel;
column: INTEGER;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtAbstractItemModelRaw.QAbstractItemModel_sort1(selfAdr, column);
END QAbstractItemModel_sort1;

PROCEDURE QAbstractItemModel_buddy ( self: QAbstractItemModel;
 index: QModelIndex;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_buddy(selfAdr, arg2tmp);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractItemModel_buddy;

PROCEDURE QAbstractItemModel_match ( self: QAbstractItemModel;
 start: QModelIndex;
role: INTEGER;
 value: QVariant;
hits: INTEGER;
flags: MatchFlags;
): QModelIndexList =
VAR
ret:ADDRESS; result : QModelIndexList;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(start.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(value.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_match(selfAdr, arg2tmp, role, arg4tmp, hits, ORD(flags));

  result := NEW(QModelIndexList);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractItemModel_match;

PROCEDURE QAbstractItemModel_match1 ( self: QAbstractItemModel;
 start: QModelIndex;
role: INTEGER;
 value: QVariant;
hits: INTEGER;
): QModelIndexList =
VAR
ret:ADDRESS; result : QModelIndexList;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(start.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(value.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_match1(selfAdr, arg2tmp, role, arg4tmp, hits);

  result := NEW(QModelIndexList);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractItemModel_match1;

PROCEDURE QAbstractItemModel_match2 ( self: QAbstractItemModel;
 start: QModelIndex;
role: INTEGER;
 value: QVariant;
): QModelIndexList =
VAR
ret:ADDRESS; result : QModelIndexList;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(start.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(value.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_match2(selfAdr, arg2tmp, role, arg4tmp);

  result := NEW(QModelIndexList);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractItemModel_match2;

PROCEDURE QAbstractItemModel_span ( self: QAbstractItemModel;
 index: QModelIndex;
): QSize =
VAR
ret:ADDRESS; result : QSize;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_span(selfAdr, arg2tmp);

  result := NEW(QSize);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractItemModel_span;

PROCEDURE QAbstractItemModel_parent1_0 ( self: QAbstractItemModel;
): QObject =
VAR
ret:ADDRESS; result : QObject;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractItemModel_parent1_0(selfAdr);

  result := NEW(QObject);
  result.cxxObj := ret;

RETURN result;
END QAbstractItemModel_parent1_0;

PROCEDURE QAbstractItemModel_submit ( self: QAbstractItemModel;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractItemModel_submit(selfAdr);
END QAbstractItemModel_submit;

PROCEDURE QAbstractItemModel_revert ( self: QAbstractItemModel;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtAbstractItemModelRaw.QAbstractItemModel_revert(selfAdr);
END QAbstractItemModel_revert;

PROCEDURE Cleanup_QAbstractItemModel(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QAbstractItemModel := ref;
BEGIN
  Delete_QAbstractItemModel(obj);
 END Cleanup_QAbstractItemModel;

PROCEDURE Destroy_QAbstractItemModel(self : QAbstractItemModel) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QAbstractItemModel);
END Destroy_QAbstractItemModel;

REVEAL
QAbstractItemModel =
QAbstractItemModelPublic BRANDED OBJECT
OVERRIDES
hasIndex := QAbstractItemModel_hasIndex;
hasIndex1 := QAbstractItemModel_hasIndex1;
sibling := QAbstractItemModel_sibling;
hasChildren := QAbstractItemModel_hasChildren;
hasChildren1 := QAbstractItemModel_hasChildren1;
setData := QAbstractItemModel_setData;
setData1 := QAbstractItemModel_setData1;
setHeaderData := QAbstractItemModel_setHeaderData;
setHeaderData1 := QAbstractItemModel_setHeaderData1;
mimeTypes := QAbstractItemModel_mimeTypes;
mimeData := QAbstractItemModel_mimeData;
dropMimeData := QAbstractItemModel_dropMimeData;
supportedDropActions := QAbstractItemModel_supportedDropActions;
supportedDragActions := QAbstractItemModel_supportedDragActions;
setSupportedDragActions := QAbstractItemModel_setSupportedDragActions;
insertRows := QAbstractItemModel_insertRows;
insertRows1 := QAbstractItemModel_insertRows1;
insertColumns := QAbstractItemModel_insertColumns;
insertColumns1 := QAbstractItemModel_insertColumns1;
removeRows := QAbstractItemModel_removeRows;
removeRows1 := QAbstractItemModel_removeRows1;
removeColumns := QAbstractItemModel_removeColumns;
removeColumns1 := QAbstractItemModel_removeColumns1;
insertRow := QAbstractItemModel_insertRow;
insertRow1 := QAbstractItemModel_insertRow1;
insertColumn := QAbstractItemModel_insertColumn;
insertColumn1 := QAbstractItemModel_insertColumn1;
removeRow := QAbstractItemModel_removeRow;
removeRow1 := QAbstractItemModel_removeRow1;
removeColumn := QAbstractItemModel_removeColumn;
removeColumn1 := QAbstractItemModel_removeColumn1;
fetchMore := QAbstractItemModel_fetchMore;
canFetchMore := QAbstractItemModel_canFetchMore;
flags := QAbstractItemModel_flags;
sort := QAbstractItemModel_sort;
sort1 := QAbstractItemModel_sort1;
buddy := QAbstractItemModel_buddy;
match := QAbstractItemModel_match;
match1 := QAbstractItemModel_match1;
match2 := QAbstractItemModel_match2;
span := QAbstractItemModel_span;
parent1_0 := QAbstractItemModel_parent1_0;
submit := QAbstractItemModel_submit;
revert := QAbstractItemModel_revert;
destroyCxx := Destroy_QAbstractItemModel;
END;

PROCEDURE Delete_QAbstractTableModel ( self: QAbstractTableModel;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtAbstractItemModelRaw.Delete_QAbstractTableModel(selfAdr);
END Delete_QAbstractTableModel;

PROCEDURE QAbstractTableModel_index ( self: QAbstractTableModel;
row, column: INTEGER;
 parent: QModelIndex;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractTableModel_index(selfAdr, row, column, arg4tmp);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractTableModel_index;

PROCEDURE QAbstractTableModel_index1 ( self: QAbstractTableModel;
row, column: INTEGER;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractTableModel_index1(selfAdr, row, column);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractTableModel_index1;

PROCEDURE QAbstractTableModel_dropMimeData ( self: QAbstractTableModel;
 data: QMimeData;
action: DropAction;
row, column: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(data.cxxObj,ADDRESS);
arg6tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractTableModel_dropMimeData(selfAdr, arg2tmp, ORD(action), row, column, arg6tmp);
END QAbstractTableModel_dropMimeData;

PROCEDURE Cleanup_QAbstractTableModel(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QAbstractTableModel := ref;
BEGIN
  Delete_QAbstractTableModel(obj);
 END Cleanup_QAbstractTableModel;

PROCEDURE Destroy_QAbstractTableModel(self : QAbstractTableModel) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QAbstractTableModel);
END Destroy_QAbstractTableModel;

REVEAL
QAbstractTableModel =
QAbstractTableModelPublic BRANDED OBJECT
OVERRIDES
index := QAbstractTableModel_index;
index1 := QAbstractTableModel_index1;
dropMimeData := QAbstractTableModel_dropMimeData;
destroyCxx := Destroy_QAbstractTableModel;
END;

PROCEDURE Delete_QAbstractListModel ( self: QAbstractListModel;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtAbstractItemModelRaw.Delete_QAbstractListModel(selfAdr);
END Delete_QAbstractListModel;

PROCEDURE QAbstractListModel_index ( self: QAbstractListModel;
row, column: INTEGER;
 parent: QModelIndex;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractListModel_index(selfAdr, row, column, arg4tmp);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractListModel_index;

PROCEDURE QAbstractListModel_index1 ( self: QAbstractListModel;
row, column: INTEGER;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractListModel_index1(selfAdr, row, column);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractListModel_index1;

PROCEDURE QAbstractListModel_index2 ( self: QAbstractListModel;
row: INTEGER;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtAbstractItemModelRaw.QAbstractListModel_index2(selfAdr, row);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QAbstractListModel_index2;

PROCEDURE QAbstractListModel_dropMimeData ( self: QAbstractListModel;
 data: QMimeData;
action: DropAction;
row, column: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(data.cxxObj,ADDRESS);
arg6tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtAbstractItemModelRaw.QAbstractListModel_dropMimeData(selfAdr, arg2tmp, ORD(action), row, column, arg6tmp);
END QAbstractListModel_dropMimeData;

PROCEDURE Cleanup_QAbstractListModel(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QAbstractListModel := ref;
BEGIN
  Delete_QAbstractListModel(obj);
 END Cleanup_QAbstractListModel;

PROCEDURE Destroy_QAbstractListModel(self : QAbstractListModel) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QAbstractListModel);
END Destroy_QAbstractListModel;

REVEAL
QAbstractListModel =
QAbstractListModelPublic BRANDED OBJECT
OVERRIDES
index := QAbstractListModel_index;
index1 := QAbstractListModel_index1;
index2 := QAbstractListModel_index2;
dropMimeData := QAbstractListModel_dropMimeData;
destroyCxx := Destroy_QAbstractListModel;
END;


BEGIN
END QtAbstractItemModel.
