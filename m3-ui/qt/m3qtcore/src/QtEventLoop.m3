(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtEventLoop;


IMPORT QtEventLoopRaw;


IMPORT WeakRef;
FROM QtObject IMPORT QObject;

PROCEDURE New_QEventLoop0 (self: QEventLoop; parent: QObject; ):
  QEventLoop =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(parent.cxxObj, ADDRESS);
  BEGIN
    result := QtEventLoopRaw.New_QEventLoop0(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QEventLoop);

    RETURN self;
  END New_QEventLoop0;

PROCEDURE New_QEventLoop1 (self: QEventLoop; ): QEventLoop =
  VAR result: ADDRESS;
  BEGIN
    result := QtEventLoopRaw.New_QEventLoop1();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QEventLoop);

    RETURN self;
  END New_QEventLoop1;

PROCEDURE Delete_QEventLoop (self: QEventLoop; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtEventLoopRaw.Delete_QEventLoop(selfAdr);
  END Delete_QEventLoop;

PROCEDURE QEventLoop_processEvents
  (self: QEventLoop; flags: ProcessEventsFlags; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtEventLoopRaw.QEventLoop_processEvents(selfAdr, ORD(flags));
  END QEventLoop_processEvents;

PROCEDURE QEventLoop_processEvents1 (self: QEventLoop; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtEventLoopRaw.QEventLoop_processEvents1(selfAdr);
  END QEventLoop_processEvents1;

PROCEDURE QEventLoop_processEvents2
  (self: QEventLoop; flags: ProcessEventsFlags; maximumTime: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtEventLoopRaw.QEventLoop_processEvents2(
      selfAdr, ORD(flags), maximumTime);
  END QEventLoop_processEvents2;

PROCEDURE QEventLoop_exec (self: QEventLoop; flags: ProcessEventsFlags; ):
  INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtEventLoopRaw.QEventLoop_exec(selfAdr, ORD(flags));
  END QEventLoop_exec;

PROCEDURE QEventLoop_exec1 (self: QEventLoop; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtEventLoopRaw.QEventLoop_exec1(selfAdr);
  END QEventLoop_exec1;

PROCEDURE QEventLoop_exit (self: QEventLoop; returnCode: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtEventLoopRaw.QEventLoop_exit(selfAdr, returnCode);
  END QEventLoop_exit;

PROCEDURE QEventLoop_exit1 (self: QEventLoop; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtEventLoopRaw.QEventLoop_exit1(selfAdr);
  END QEventLoop_exit1;

PROCEDURE QEventLoop_isRunning (self: QEventLoop; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtEventLoopRaw.QEventLoop_isRunning(selfAdr);
  END QEventLoop_isRunning;

PROCEDURE QEventLoop_wakeUp (self: QEventLoop; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtEventLoopRaw.QEventLoop_wakeUp(selfAdr);
  END QEventLoop_wakeUp;

PROCEDURE QEventLoop_quit (self: QEventLoop; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtEventLoopRaw.QEventLoop_quit(selfAdr);
  END QEventLoop_quit;

PROCEDURE Cleanup_QEventLoop
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QEventLoop := ref;
  BEGIN
    Delete_QEventLoop(obj);
  END Cleanup_QEventLoop;

PROCEDURE Destroy_QEventLoop (self: QEventLoop) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QEventLoop);
  END Destroy_QEventLoop;

REVEAL
  QEventLoop = QEventLoopPublic BRANDED OBJECT
               OVERRIDES
                 init_0         := New_QEventLoop0;
                 init_1         := New_QEventLoop1;
                 processEvents  := QEventLoop_processEvents;
                 processEvents1 := QEventLoop_processEvents1;
                 processEvents2 := QEventLoop_processEvents2;
                 exec           := QEventLoop_exec;
                 exec1          := QEventLoop_exec1;
                 exit           := QEventLoop_exit;
                 exit1          := QEventLoop_exit1;
                 isRunning      := QEventLoop_isRunning;
                 wakeUp         := QEventLoop_wakeUp;
                 quit           := QEventLoop_quit;
                 destroyCxx     := Destroy_QEventLoop;
               END;


BEGIN
END QtEventLoop.
