/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtCore/qbytearray.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QByteArray * New_QByteArray0() {
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  result = (QByteArray *)new QByteArray();
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * New_QByteArray1(char * m3arg1) {
  char *arg1 = (char *) 0 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  {
    arg1 = m3arg1;
  }
  result = (QByteArray *)new QByteArray((char const *)arg1);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * New_QByteArray2(char * m3arg1, int size) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  {
    arg1 = m3arg1;
  }
  arg2 = (int)size; 
  result = (QByteArray *)new QByteArray((char const *)arg1,arg2);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * New_QByteArray3(int size, char c) {
  int arg1 ;
  char arg2 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  arg1 = (int)size; 
  arg2 = (char)c; 
  result = (QByteArray *)new QByteArray(arg1,arg2);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * New_QByteArray4(int size, Qt::Initialization m3arg2) {
  int arg1 ;
  Qt::Initialization arg2 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  arg1 = (int)size; 
  arg2 = (Qt::Initialization)m3arg2; 
  result = (QByteArray *)new QByteArray(arg1,arg2);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * New_QByteArray5(QByteArray * m3arg1) {
  QByteArray *arg1 = 0 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&m3arg1;
  result = (QByteArray *)new QByteArray((QByteArray const &)*arg1);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QByteArray(QByteArray * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  
  arg1 = *(QByteArray **)&self; 
  delete arg1;
}


SWIGEXPORT int QByteArray_size(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (int)((QByteArray const *)arg1)->size();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QByteArray_isEmpty(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (bool)((QByteArray const *)arg1)->isEmpty();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QByteArray_resize(QByteArray * self, int size) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int arg2 ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (int)size; 
  (arg1)->resize(arg2);
}


SWIGEXPORT QByteArray * QByteArray_fill(QByteArray * self, char c, int size) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char arg2 ;
  int arg3 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (char)c; 
  arg3 = (int)size; 
  result = (QByteArray *) &(arg1)->fill(arg2,arg3);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_fill1(QByteArray * self, char c) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char arg2 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (char)c; 
  result = (QByteArray *) &(arg1)->fill(arg2);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QByteArray_capacity(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (int)((QByteArray const *)arg1)->capacity();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QByteArray_reserve(QByteArray * self, int size) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int arg2 ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (int)size; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void QByteArray_squeeze(QByteArray * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  
  arg1 = *(QByteArray **)&self; 
  (arg1)->squeeze();
}


SWIGEXPORT char * QByteArray_data(QByteArray * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char *result = 0 ;
  char * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (char *)(arg1)->data();
  *(char **)&cresult = result; 
  return cresult;
}


SWIGEXPORT char * QByteArray_data1(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char *result = 0 ;
  char * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (char *)((QByteArray const *)arg1)->data();
  *(char **)&cresult = result; 
  return cresult;
}


SWIGEXPORT char * QByteArray_constData(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char *result = 0 ;
  char * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (char *)((QByteArray const *)arg1)->constData();
  *(char **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QByteArray_detach(QByteArray * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  
  arg1 = *(QByteArray **)&self; 
  (arg1)->detach();
}


SWIGEXPORT bool QByteArray_isDetached(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (bool)((QByteArray const *)arg1)->isDetached();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QByteArray_clear(QByteArray * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  
  arg1 = *(QByteArray **)&self; 
  (arg1)->clear();
}


SWIGEXPORT int QByteArray_count(QByteArray const * self, char c) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (char)c; 
  result = (int)((QByteArray const *)arg1)->count(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QByteArray_count1(QByteArray const * self, char * a) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  {
    arg2 = a;
  }
  result = (int)((QByteArray const *)arg1)->count((char const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QByteArray_count2(QByteArray const * self, QByteArray * a) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(QByteArray **)&a;
  result = (int)((QByteArray const *)arg1)->count((QByteArray const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_left(QByteArray const * self, int len) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int arg2 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (int)len; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->left(arg2));
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_right(QByteArray const * self, int len) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int arg2 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (int)len; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->right(arg2));
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_mid(QByteArray const * self, int index, int len) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int arg2 ;
  int arg3 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (int)index; 
  arg3 = (int)len; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->mid(arg2,arg3));
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_mid1(QByteArray const * self, int index) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int arg2 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (int)index; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->mid(arg2));
  return cresult;
}


SWIGEXPORT bool QByteArray_startsWith(QByteArray const * self, QByteArray * a) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(QByteArray **)&a;
  result = (bool)((QByteArray const *)arg1)->startsWith((QByteArray const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QByteArray_startsWith1(QByteArray const * self, char c) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (char)c; 
  result = (bool)((QByteArray const *)arg1)->startsWith(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QByteArray_startsWith2(QByteArray const * self, char * c) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QByteArray **)&self; 
  {
    arg2 = c;
  }
  result = (bool)((QByteArray const *)arg1)->startsWith((char const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QByteArray_endsWith(QByteArray const * self, QByteArray * a) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(QByteArray **)&a;
  result = (bool)((QByteArray const *)arg1)->endsWith((QByteArray const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QByteArray_endsWith1(QByteArray const * self, char c) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (char)c; 
  result = (bool)((QByteArray const *)arg1)->endsWith(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QByteArray_endsWith2(QByteArray const * self, char * c) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QByteArray **)&self; 
  {
    arg2 = c;
  }
  result = (bool)((QByteArray const *)arg1)->endsWith((char const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QByteArray_truncate(QByteArray * self, int pos) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int arg2 ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (int)pos; 
  (arg1)->truncate(arg2);
}


SWIGEXPORT void QByteArray_chop(QByteArray * self, int n) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int arg2 ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (int)n; 
  (arg1)->chop(arg2);
}


SWIGEXPORT QByteArray * QByteArray_toLower(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->toLower());
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_toUpper(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->toUpper());
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_trimmed(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->trimmed());
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_simplified(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->simplified());
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_prepend(QByteArray * self, char c) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char arg2 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (char)c; 
  result = (QByteArray *) &(arg1)->prepend(arg2);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_prepend1(QByteArray * self, char * s) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char *arg2 = (char *) 0 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  {
    arg2 = s;
  }
  result = (QByteArray *) &(arg1)->prepend((char const *)arg2);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_prepend2(QByteArray * self, char * s, int len) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  {
    arg2 = s;
  }
  arg3 = (int)len; 
  result = (QByteArray *) &(arg1)->prepend((char const *)arg2,arg3);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_prepend3(QByteArray * self, QByteArray * a) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray *arg2 = 0 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(QByteArray **)&a;
  result = (QByteArray *) &(arg1)->prepend((QByteArray const &)*arg2);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_remove(QByteArray * self, int index, int len) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int arg2 ;
  int arg3 ;
  QByteArray *result = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (int)index; 
  arg3 = (int)len; 
  result = (QByteArray *) &(arg1)->remove(arg2,arg3);
  *(QByteArray **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_repeated(QByteArray const * self, int times) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int arg2 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (int)times; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->repeated(arg2));
  return cresult;
}


SWIGEXPORT short QByteArray_toShort(QByteArray const * self, bool * ok, int base) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int arg3 ;
  short result;
  short cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  arg3 = (int)base; 
  result = (short)((QByteArray const *)arg1)->toShort(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT short QByteArray_toShort1(QByteArray const * self, bool * ok) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  short result;
  short cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  result = (short)((QByteArray const *)arg1)->toShort(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT short QByteArray_toShort2(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  short result;
  short cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (short)((QByteArray const *)arg1)->toShort();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned short QByteArray_toUShort(QByteArray const * self, bool * ok, int base) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int arg3 ;
  unsigned short result;
  unsigned short cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  arg3 = (int)base; 
  result = (unsigned short)((QByteArray const *)arg1)->toUShort(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned short QByteArray_toUShort1(QByteArray const * self, bool * ok) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  unsigned short result;
  unsigned short cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  result = (unsigned short)((QByteArray const *)arg1)->toUShort(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned short QByteArray_toUShort2(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  unsigned short result;
  unsigned short cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (unsigned short)((QByteArray const *)arg1)->toUShort();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QByteArray_toInt(QByteArray const * self, bool * ok, int base) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int arg3 ;
  int result;
  int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  arg3 = (int)base; 
  result = (int)((QByteArray const *)arg1)->toInt(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QByteArray_toInt1(QByteArray const * self, bool * ok) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  result = (int)((QByteArray const *)arg1)->toInt(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QByteArray_toInt2(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (int)((QByteArray const *)arg1)->toInt();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned int QByteArray_toUInt(QByteArray const * self, bool * ok, int base) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int arg3 ;
  unsigned int result;
  unsigned int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  arg3 = (int)base; 
  result = (unsigned int)((QByteArray const *)arg1)->toUInt(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned int QByteArray_toUInt1(QByteArray const * self, bool * ok) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  unsigned int result;
  unsigned int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  result = (unsigned int)((QByteArray const *)arg1)->toUInt(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned int QByteArray_toUInt2(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  unsigned int result;
  unsigned int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (unsigned int)((QByteArray const *)arg1)->toUInt();
  cresult = result; 
  return cresult;
}


SWIGEXPORT long QByteArray_toLong(QByteArray const * self, bool * ok, int base) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int arg3 ;
  long result;
  long cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  arg3 = (int)base; 
  result = (long)((QByteArray const *)arg1)->toLong(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT long QByteArray_toLong1(QByteArray const * self, bool * ok) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  long result;
  long cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  result = (long)((QByteArray const *)arg1)->toLong(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT long QByteArray_toLong2(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  long result;
  long cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (long)((QByteArray const *)arg1)->toLong();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned long QByteArray_toULong(QByteArray const * self, bool * ok, int base) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  int arg3 ;
  unsigned long result;
  unsigned long cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  arg3 = (int)base; 
  result = (unsigned long)((QByteArray const *)arg1)->toULong(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned long QByteArray_toULong1(QByteArray const * self, bool * ok) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  unsigned long result;
  unsigned long cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  result = (unsigned long)((QByteArray const *)arg1)->toULong(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned long QByteArray_toULong2(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  unsigned long result;
  unsigned long cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (unsigned long)((QByteArray const *)arg1)->toULong();
  cresult = result; 
  return cresult;
}


SWIGEXPORT float QByteArray_toFloat(QByteArray const * self, bool * ok) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  float result;
  float cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  result = (float)((QByteArray const *)arg1)->toFloat(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT float QByteArray_toFloat1(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  float result;
  float cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (float)((QByteArray const *)arg1)->toFloat();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QByteArray_toDouble(QByteArray const * self, bool * ok) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool *arg2 = (bool *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(bool **)&ok; 
  result = (double)((QByteArray const *)arg1)->toDouble(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QByteArray_toDouble1(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (double)((QByteArray const *)arg1)->toDouble();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_toBase64(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->toBase64());
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_toHex(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->toHex());
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_toPercentEncoding(QByteArray const * self, QByteArray * exclude, QByteArray * include, char percent) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray *arg2 = 0 ;
  QByteArray *arg3 = 0 ;
  char arg4 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(QByteArray **)&exclude;
  arg3 = *(QByteArray **)&include;
  arg4 = (char)percent; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->toPercentEncoding((QByteArray const &)*arg2,(QByteArray const &)*arg3,arg4));
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_toPercentEncoding1(QByteArray const * self, QByteArray * exclude, QByteArray * include) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray *arg2 = 0 ;
  QByteArray *arg3 = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(QByteArray **)&exclude;
  arg3 = *(QByteArray **)&include;
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->toPercentEncoding((QByteArray const &)*arg2,(QByteArray const &)*arg3));
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_toPercentEncoding2(QByteArray const * self, QByteArray * exclude) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray *arg2 = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(QByteArray **)&exclude;
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->toPercentEncoding((QByteArray const &)*arg2));
  return cresult;
}


SWIGEXPORT QByteArray * QByteArray_toPercentEncoding3(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QByteArray const *)arg1)->toPercentEncoding());
  return cresult;
}


SWIGEXPORT QByteArray * FromRawData(char * m3arg1, int size) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  QByteArray * cresult ;
  
  {
    arg1 = m3arg1;
  }
  arg2 = (int)size; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)QByteArray::fromRawData((char const *)arg1,arg2));
  return cresult;
}


SWIGEXPORT QByteArray * FromBase64(QByteArray * base64) {
  QByteArray *arg1 = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&base64;
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)QByteArray::fromBase64((QByteArray const &)*arg1));
  return cresult;
}


SWIGEXPORT QByteArray * FromHex(QByteArray * hexEncoded) {
  QByteArray *arg1 = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&hexEncoded;
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)QByteArray::fromHex((QByteArray const &)*arg1));
  return cresult;
}


SWIGEXPORT QByteArray * FromPercentEncoding(QByteArray * pctEncoded, char percent) {
  QByteArray *arg1 = 0 ;
  char arg2 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&pctEncoded;
  arg2 = (char)percent; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)QByteArray::fromPercentEncoding((QByteArray const &)*arg1,arg2));
  return cresult;
}


SWIGEXPORT QByteArray * FromPercentEncoding1(QByteArray * pctEncoded) {
  QByteArray *arg1 = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QByteArray **)&pctEncoded;
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)QByteArray::fromPercentEncoding((QByteArray const &)*arg1));
  return cresult;
}


SWIGEXPORT void QByteArray_push_back(QByteArray * self, char c) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char arg2 ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (char)c; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void QByteArray_push_back1(QByteArray * self, char * c) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(QByteArray **)&self; 
  {
    arg2 = c;
  }
  (arg1)->push_back((char const *)arg2);
}


SWIGEXPORT void QByteArray_push_back2(QByteArray * self, QByteArray * a) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray *arg2 = 0 ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(QByteArray **)&a;
  (arg1)->push_back((QByteArray const &)*arg2);
}


SWIGEXPORT void QByteArray_push_front(QByteArray * self, char c) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char arg2 ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = (char)c; 
  (arg1)->push_front(arg2);
}


SWIGEXPORT void QByteArray_push_front1(QByteArray * self, char * c) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(QByteArray **)&self; 
  {
    arg2 = c;
  }
  (arg1)->push_front((char const *)arg2);
}


SWIGEXPORT void QByteArray_push_front2(QByteArray * self, QByteArray * a) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  QByteArray *arg2 = 0 ;
  
  arg1 = *(QByteArray **)&self; 
  arg2 = *(QByteArray **)&a;
  (arg1)->push_front((QByteArray const &)*arg2);
}


SWIGEXPORT int QByteArray_count3(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (int)((QByteArray const *)arg1)->count();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QByteArray_length(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (int)((QByteArray const *)arg1)->length();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QByteArray_isNull(QByteArray const * self) {
  QByteArray *arg1 = (QByteArray *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QByteArray **)&self; 
  result = (bool)((QByteArray const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


#ifdef __cplusplus
}
#endif

