/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtCore/qrect.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QRect * New_QRect0() {
  QRect *result = 0 ;
  QRect * cresult ;
  
  result = (QRect *)new QRect();
  *(QRect **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * New_QRect1(QPoint * topleft, QPoint * bottomright) {
  QPoint *arg1 = 0 ;
  QPoint *arg2 = 0 ;
  QRect *result = 0 ;
  QRect * cresult ;
  
  arg1 = *(QPoint **)&topleft;
  arg2 = *(QPoint **)&bottomright;
  result = (QRect *)new QRect((QPoint const &)*arg1,(QPoint const &)*arg2);
  *(QRect **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * New_QRect2(QPoint * topleft, QSize * size) {
  QPoint *arg1 = 0 ;
  QSize *arg2 = 0 ;
  QRect *result = 0 ;
  QRect * cresult ;
  
  arg1 = *(QPoint **)&topleft;
  arg2 = *(QSize **)&size;
  result = (QRect *)new QRect((QPoint const &)*arg1,(QSize const &)*arg2);
  *(QRect **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * New_init(int left, int top, int width, int height) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QRect *result = 0 ;
  QRect * cresult ;
  
  arg1 = (int)left; 
  arg2 = (int)top; 
  arg3 = (int)width; 
  arg4 = (int)height; 
  result = (QRect *)new QRect(arg1,arg2,arg3,arg4);
  *(QRect **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRect_isNull(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRect **)&self; 
  result = (bool)((QRect const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRect_isEmpty(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRect **)&self; 
  result = (bool)((QRect const *)arg1)->isEmpty();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRect_isValid(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRect **)&self; 
  result = (bool)((QRect const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QRect_left(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QRect **)&self; 
  result = (int)((QRect const *)arg1)->left();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QRect_top(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QRect **)&self; 
  result = (int)((QRect const *)arg1)->top();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QRect_right(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QRect **)&self; 
  result = (int)((QRect const *)arg1)->right();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QRect_bottom(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QRect **)&self; 
  result = (int)((QRect const *)arg1)->bottom();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QRect_normalized(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QRect const *)arg1)->normalized());
  return cresult;
}


SWIGEXPORT int QRect_x(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QRect **)&self; 
  result = (int)((QRect const *)arg1)->x();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QRect_y(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QRect **)&self; 
  result = (int)((QRect const *)arg1)->y();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QRect_setLeft(QRect * self, int pos) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)pos; 
  (arg1)->setLeft(arg2);
}


SWIGEXPORT void QRect_setTop(QRect * self, int pos) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)pos; 
  (arg1)->setTop(arg2);
}


SWIGEXPORT void QRect_setRight(QRect * self, int pos) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)pos; 
  (arg1)->setRight(arg2);
}


SWIGEXPORT void QRect_setBottom(QRect * self, int pos) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)pos; 
  (arg1)->setBottom(arg2);
}


SWIGEXPORT void QRect_setX(QRect * self, int x) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)x; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void QRect_setY(QRect * self, int y) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)y; 
  (arg1)->setY(arg2);
}


SWIGEXPORT void QRect_setTopLeft(QRect * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->setTopLeft((QPoint const &)*arg2);
}


SWIGEXPORT void QRect_setBottomRight(QRect * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->setBottomRight((QPoint const &)*arg2);
}


SWIGEXPORT void QRect_setTopRight(QRect * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->setTopRight((QPoint const &)*arg2);
}


SWIGEXPORT void QRect_setBottomLeft(QRect * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->setBottomLeft((QPoint const &)*arg2);
}


SWIGEXPORT QPoint * QRect_topLeft(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint * cresult ;
  
  arg1 = *(QRect **)&self; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QRect const *)arg1)->topLeft());
  return cresult;
}


SWIGEXPORT QPoint * QRect_bottomRight(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint * cresult ;
  
  arg1 = *(QRect **)&self; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QRect const *)arg1)->bottomRight());
  return cresult;
}


SWIGEXPORT QPoint * QRect_topRight(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint * cresult ;
  
  arg1 = *(QRect **)&self; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QRect const *)arg1)->topRight());
  return cresult;
}


SWIGEXPORT QPoint * QRect_bottomLeft(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint * cresult ;
  
  arg1 = *(QRect **)&self; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QRect const *)arg1)->bottomLeft());
  return cresult;
}


SWIGEXPORT QPoint * QRect_center(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint * cresult ;
  
  arg1 = *(QRect **)&self; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QRect const *)arg1)->center());
  return cresult;
}


SWIGEXPORT void QRect_moveLeft(QRect * self, int pos) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)pos; 
  (arg1)->moveLeft(arg2);
}


SWIGEXPORT void QRect_moveTop(QRect * self, int pos) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)pos; 
  (arg1)->moveTop(arg2);
}


SWIGEXPORT void QRect_moveRight(QRect * self, int pos) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)pos; 
  (arg1)->moveRight(arg2);
}


SWIGEXPORT void QRect_moveBottom(QRect * self, int pos) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)pos; 
  (arg1)->moveBottom(arg2);
}


SWIGEXPORT void QRect_moveTopLeft(QRect * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->moveTopLeft((QPoint const &)*arg2);
}


SWIGEXPORT void QRect_moveBottomRight(QRect * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->moveBottomRight((QPoint const &)*arg2);
}


SWIGEXPORT void QRect_moveTopRight(QRect * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->moveTopRight((QPoint const &)*arg2);
}


SWIGEXPORT void QRect_moveBottomLeft(QRect * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->moveBottomLeft((QPoint const &)*arg2);
}


SWIGEXPORT void QRect_moveCenter(QRect * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->moveCenter((QPoint const &)*arg2);
}


SWIGEXPORT void QRect_translate(QRect * self, int dx, int dy) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  (arg1)->translate(arg2,arg3);
}


SWIGEXPORT void QRect_translate1(QRect * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->translate((QPoint const &)*arg2);
}


SWIGEXPORT QRect * QRect_translated(QRect const * self, int dx, int dy) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  int arg3 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  *(QRect **)&cresult = new QRect((const QRect &)((QRect const *)arg1)->translated(arg2,arg3));
  return cresult;
}


SWIGEXPORT QRect * QRect_translated1(QRect const * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  *(QRect **)&cresult = new QRect((const QRect &)((QRect const *)arg1)->translated((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT void QRect_moveTo(QRect * self, int x, int t) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)x; 
  arg3 = (int)t; 
  (arg1)->moveTo(arg2,arg3);
}


SWIGEXPORT void QRect_moveTo1(QRect * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->moveTo((QPoint const &)*arg2);
}


SWIGEXPORT void QRect_setRect(QRect * self, int x, int y, int w, int h) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  (arg1)->setRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QRect_getRect(QRect const * self, int * x, int * y, int * w, int * h) {
  QRect *arg1 = (QRect *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(int **)&x; 
  arg3 = *(int **)&y; 
  arg4 = *(int **)&w; 
  arg5 = *(int **)&h; 
  ((QRect const *)arg1)->getRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QRect_setCoords(QRect * self, int x1, int y1, int x2, int y2) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)x1; 
  arg3 = (int)y1; 
  arg4 = (int)x2; 
  arg5 = (int)y2; 
  (arg1)->setCoords(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QRect_getCoords(QRect const * self, int * x1, int * y1, int * x2, int * y2) {
  QRect *arg1 = (QRect *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(int **)&x1; 
  arg3 = *(int **)&y1; 
  arg4 = *(int **)&x2; 
  arg5 = *(int **)&y2; 
  ((QRect const *)arg1)->getCoords(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QRect_adjust(QRect * self, int x1, int y1, int x2, int y2) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)x1; 
  arg3 = (int)y1; 
  arg4 = (int)x2; 
  arg5 = (int)y2; 
  (arg1)->adjust(arg2,arg3,arg4,arg5);
}


SWIGEXPORT QRect * QRect_adjusted(QRect const * self, int x1, int y1, int x2, int y2) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)x1; 
  arg3 = (int)y1; 
  arg4 = (int)x2; 
  arg5 = (int)y2; 
  *(QRect **)&cresult = new QRect((const QRect &)((QRect const *)arg1)->adjusted(arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QSize * QRect_size(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QRect **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QRect const *)arg1)->size());
  return cresult;
}


SWIGEXPORT int QRect_width(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QRect **)&self; 
  result = (int)((QRect const *)arg1)->width();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QRect_height(QRect const * self) {
  QRect *arg1 = (QRect *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QRect **)&self; 
  result = (int)((QRect const *)arg1)->height();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QRect_setWidth(QRect * self, int w) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)w; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void QRect_setHeight(QRect * self, int h) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)h; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT void QRect_setSize(QRect * self, QSize * s) {
  QRect *arg1 = (QRect *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QSize **)&s;
  (arg1)->setSize((QSize const &)*arg2);
}


SWIGEXPORT QRect * QRect_PlusEqual(QRect const * self, QRect * r) {
  QRect *arg1 = (QRect *) 0 ;
  QRect *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QRect **)&r;
  *(QRect **)&cresult = new QRect((const QRect &)((QRect const *)arg1)->operator |((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QRect * QRect_MinusEqual(QRect const * self, QRect * r) {
  QRect *arg1 = (QRect *) 0 ;
  QRect *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QRect **)&r;
  *(QRect **)&cresult = new QRect((const QRect &)((QRect const *)arg1)->operator &((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QRect * QRect_MultiplyEqual(QRect * self, QRect * r) {
  QRect *arg1 = (QRect *) 0 ;
  QRect *arg2 = 0 ;
  QRect *result = 0 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QRect **)&r;
  result = (QRect *) &(arg1)->operator |=((QRect const &)*arg2);
  *(QRect **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QRect_DivideEqual(QRect * self, QRect * r) {
  QRect *arg1 = (QRect *) 0 ;
  QRect *arg2 = 0 ;
  QRect *result = 0 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QRect **)&r;
  result = (QRect *) &(arg1)->operator &=((QRect const &)*arg2);
  *(QRect **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRect_contains(QRect const * self, QPoint * p, bool proper) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  arg3 = proper ? true : false; 
  result = (bool)((QRect const *)arg1)->contains((QPoint const &)*arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRect_contains1(QRect const * self, QPoint * p) {
  QRect *arg1 = (QRect *) 0 ;
  QPoint *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QPoint **)&p;
  result = (bool)((QRect const *)arg1)->contains((QPoint const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRect_contains2(QRect const * self, int x, int y) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  result = (bool)((QRect const *)arg1)->contains(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRect_contains3(QRect const * self, int x, int y, bool proper) {
  QRect *arg1 = (QRect *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = proper ? true : false; 
  result = (bool)((QRect const *)arg1)->contains(arg2,arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRect_contains4(QRect const * self, QRect * r, bool proper) {
  QRect *arg1 = (QRect *) 0 ;
  QRect *arg2 = 0 ;
  bool arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QRect **)&r;
  arg3 = proper ? true : false; 
  result = (bool)((QRect const *)arg1)->contains((QRect const &)*arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRect_contains5(QRect const * self, QRect * r) {
  QRect *arg1 = (QRect *) 0 ;
  QRect *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QRect **)&r;
  result = (bool)((QRect const *)arg1)->contains((QRect const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QRect_unite(QRect const * self, QRect * r) {
  QRect *arg1 = (QRect *) 0 ;
  QRect *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QRect **)&r;
  *(QRect **)&cresult = new QRect((const QRect &)((QRect const *)arg1)->unite((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QRect * QRect_united(QRect const * self, QRect * other) {
  QRect *arg1 = (QRect *) 0 ;
  QRect *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QRect **)&other;
  *(QRect **)&cresult = new QRect((const QRect &)((QRect const *)arg1)->united((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QRect * QRect_intersect(QRect const * self, QRect * r) {
  QRect *arg1 = (QRect *) 0 ;
  QRect *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QRect **)&r;
  *(QRect **)&cresult = new QRect((const QRect &)((QRect const *)arg1)->intersect((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QRect * QRect_intersected(QRect const * self, QRect * other) {
  QRect *arg1 = (QRect *) 0 ;
  QRect *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QRect **)&other;
  *(QRect **)&cresult = new QRect((const QRect &)((QRect const *)arg1)->intersected((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT bool QRect_intersects(QRect const * self, QRect * r) {
  QRect *arg1 = (QRect *) 0 ;
  QRect *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRect **)&self; 
  arg2 = *(QRect **)&r;
  result = (bool)((QRect const *)arg1)->intersects((QRect const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QRect(QRect * self) {
  QRect *arg1 = (QRect *) 0 ;
  
  arg1 = *(QRect **)&self; 
  delete arg1;
}


SWIGEXPORT QRectF * New_QRectF0() {
  QRectF *result = 0 ;
  QRectF * cresult ;
  
  result = (QRectF *)new QRectF();
  *(QRectF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRectF * New_QRectF1(QPointF * topleft, QSizeF * size) {
  QPointF *arg1 = 0 ;
  QSizeF *arg2 = 0 ;
  QRectF *result = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QPointF **)&topleft;
  arg2 = *(QSizeF **)&size;
  result = (QRectF *)new QRectF((QPointF const &)*arg1,(QSizeF const &)*arg2);
  *(QRectF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRectF * New_QRectF2(QPointF * topleft, QPointF * bottomRight) {
  QPointF *arg1 = 0 ;
  QPointF *arg2 = 0 ;
  QRectF *result = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QPointF **)&topleft;
  arg2 = *(QPointF **)&bottomRight;
  result = (QRectF *)new QRectF((QPointF const &)*arg1,(QPointF const &)*arg2);
  *(QRectF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRectF * New_QRectF3(double left, double top, double width, double height) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  QRectF *result = 0 ;
  QRectF * cresult ;
  
  arg1 = (double)left; 
  arg2 = (double)top; 
  arg3 = (double)width; 
  arg4 = (double)height; 
  result = (QRectF *)new QRectF(arg1,arg2,arg3,arg4);
  *(QRectF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRectF * New_QRectF4(QRect * rect) {
  QRect *arg1 = 0 ;
  QRectF *result = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QRect **)&rect;
  result = (QRectF *)new QRectF((QRect const &)*arg1);
  *(QRectF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRectF_isNull(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRectF **)&self; 
  result = (bool)((QRectF const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRectF_isEmpty(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRectF **)&self; 
  result = (bool)((QRectF const *)arg1)->isEmpty();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRectF_isValid(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRectF **)&self; 
  result = (bool)((QRectF const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRectF * QRectF_normalized(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QRectF const *)arg1)->normalized());
  return cresult;
}


SWIGEXPORT double QRectF_left(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QRectF **)&self; 
  result = (double)((QRectF const *)arg1)->left();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QRectF_top(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QRectF **)&self; 
  result = (double)((QRectF const *)arg1)->top();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QRectF_right(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QRectF **)&self; 
  result = (double)((QRectF const *)arg1)->right();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QRectF_bottom(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QRectF **)&self; 
  result = (double)((QRectF const *)arg1)->bottom();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QRectF_x(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QRectF **)&self; 
  result = (double)((QRectF const *)arg1)->x();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QRectF_y(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QRectF **)&self; 
  result = (double)((QRectF const *)arg1)->y();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QRectF_setLeft(QRectF * self, double pos) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)pos; 
  (arg1)->setLeft(arg2);
}


SWIGEXPORT void QRectF_setTop(QRectF * self, double pos) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)pos; 
  (arg1)->setTop(arg2);
}


SWIGEXPORT void QRectF_setRight(QRectF * self, double pos) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)pos; 
  (arg1)->setRight(arg2);
}


SWIGEXPORT void QRectF_setBottom(QRectF * self, double pos) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)pos; 
  (arg1)->setBottom(arg2);
}


SWIGEXPORT void QRectF_setX(QRectF * self, double pos) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)pos; 
  (arg1)->setX(arg2);
}


SWIGEXPORT void QRectF_setY(QRectF * self, double pos) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)pos; 
  (arg1)->setY(arg2);
}


SWIGEXPORT QPointF * QRectF_topLeft(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QRectF const *)arg1)->topLeft());
  return cresult;
}


SWIGEXPORT QPointF * QRectF_bottomRight(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QRectF const *)arg1)->bottomRight());
  return cresult;
}


SWIGEXPORT QPointF * QRectF_topRight(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QRectF const *)arg1)->topRight());
  return cresult;
}


SWIGEXPORT QPointF * QRectF_bottomLeft(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QRectF const *)arg1)->bottomLeft());
  return cresult;
}


SWIGEXPORT QPointF * QRectF_center(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QRectF const *)arg1)->center());
  return cresult;
}


SWIGEXPORT void QRectF_setTopLeft(QRectF * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->setTopLeft((QPointF const &)*arg2);
}


SWIGEXPORT void QRectF_setBottomRight(QRectF * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->setBottomRight((QPointF const &)*arg2);
}


SWIGEXPORT void QRectF_setTopRight(QRectF * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->setTopRight((QPointF const &)*arg2);
}


SWIGEXPORT void QRectF_setBottomLeft(QRectF * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->setBottomLeft((QPointF const &)*arg2);
}


SWIGEXPORT void QRectF_moveLeft(QRectF * self, double pos) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)pos; 
  (arg1)->moveLeft(arg2);
}


SWIGEXPORT void QRectF_moveTop(QRectF * self, double pos) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)pos; 
  (arg1)->moveTop(arg2);
}


SWIGEXPORT void QRectF_moveRight(QRectF * self, double pos) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)pos; 
  (arg1)->moveRight(arg2);
}


SWIGEXPORT void QRectF_moveBottom(QRectF * self, double pos) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)pos; 
  (arg1)->moveBottom(arg2);
}


SWIGEXPORT void QRectF_moveTopLeft(QRectF * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->moveTopLeft((QPointF const &)*arg2);
}


SWIGEXPORT void QRectF_moveBottomRight(QRectF * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->moveBottomRight((QPointF const &)*arg2);
}


SWIGEXPORT void QRectF_moveTopRight(QRectF * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->moveTopRight((QPointF const &)*arg2);
}


SWIGEXPORT void QRectF_moveBottomLeft(QRectF * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->moveBottomLeft((QPointF const &)*arg2);
}


SWIGEXPORT void QRectF_moveCenter(QRectF * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->moveCenter((QPointF const &)*arg2);
}


SWIGEXPORT void QRectF_translate(QRectF * self, double dx, double dy) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)dx; 
  arg3 = (double)dy; 
  (arg1)->translate(arg2,arg3);
}


SWIGEXPORT void QRectF_translate1(QRectF * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->translate((QPointF const &)*arg2);
}


SWIGEXPORT QRectF * QRectF_translated(QRectF const * self, double dx, double dy) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  double arg3 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)dx; 
  arg3 = (double)dy; 
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QRectF const *)arg1)->translated(arg2,arg3));
  return cresult;
}


SWIGEXPORT QRectF * QRectF_translated1(QRectF const * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QRectF const *)arg1)->translated((QPointF const &)*arg2));
  return cresult;
}


SWIGEXPORT void QRectF_moveTo(QRectF * self, double x, double t) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)x; 
  arg3 = (double)t; 
  (arg1)->moveTo(arg2,arg3);
}


SWIGEXPORT void QRectF_moveTo1(QRectF * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  (arg1)->moveTo((QPointF const &)*arg2);
}


SWIGEXPORT void QRectF_setRect(QRectF * self, double x, double y, double w, double h) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  arg4 = (double)w; 
  arg5 = (double)h; 
  (arg1)->setRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QRectF_getRect(QRectF const * self, double * x, double * y, double * w, double * h) {
  QRectF *arg1 = (QRectF *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(double **)&x; 
  arg3 = *(double **)&y; 
  arg4 = *(double **)&w; 
  arg5 = *(double **)&h; 
  ((QRectF const *)arg1)->getRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QRectF_setCoords(QRectF * self, double x1, double y1, double x2, double y2) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)x1; 
  arg3 = (double)y1; 
  arg4 = (double)x2; 
  arg5 = (double)y2; 
  (arg1)->setCoords(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QRectF_getCoords(QRectF const * self, double * x1, double * y1, double * x2, double * y2) {
  QRectF *arg1 = (QRectF *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(double **)&x1; 
  arg3 = *(double **)&y1; 
  arg4 = *(double **)&x2; 
  arg5 = *(double **)&y2; 
  ((QRectF const *)arg1)->getCoords(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QRectF_adjust(QRectF * self, double x1, double y1, double x2, double y2) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)x1; 
  arg3 = (double)y1; 
  arg4 = (double)x2; 
  arg5 = (double)y2; 
  (arg1)->adjust(arg2,arg3,arg4,arg5);
}


SWIGEXPORT QRectF * QRectF_adjusted(QRectF const * self, double x1, double y1, double x2, double y2) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)x1; 
  arg3 = (double)y1; 
  arg4 = (double)x2; 
  arg5 = (double)y2; 
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QRectF const *)arg1)->adjusted(arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QSizeF * QRectF_size(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  QSizeF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  *(QSizeF **)&cresult = new QSizeF((const QSizeF &)((QRectF const *)arg1)->size());
  return cresult;
}


SWIGEXPORT double QRectF_width(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QRectF **)&self; 
  result = (double)((QRectF const *)arg1)->width();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QRectF_height(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QRectF **)&self; 
  result = (double)((QRectF const *)arg1)->height();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QRectF_setWidth(QRectF * self, double w) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)w; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void QRectF_setHeight(QRectF * self, double h) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)h; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT void QRectF_setSize(QRectF * self, QSizeF * s) {
  QRectF *arg1 = (QRectF *) 0 ;
  QSizeF *arg2 = 0 ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QSizeF **)&s;
  (arg1)->setSize((QSizeF const &)*arg2);
}


SWIGEXPORT QRectF * QRectF_PlusEqual(QRectF const * self, QRectF * r) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRectF *arg2 = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QRectF **)&r;
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QRectF const *)arg1)->operator |((QRectF const &)*arg2));
  return cresult;
}


SWIGEXPORT QRectF * QRectF_MinusEqual(QRectF const * self, QRectF * r) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRectF *arg2 = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QRectF **)&r;
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QRectF const *)arg1)->operator &((QRectF const &)*arg2));
  return cresult;
}


SWIGEXPORT QRectF * QRectF_MultiplyEqual(QRectF * self, QRectF * r) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRectF *arg2 = 0 ;
  QRectF *result = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QRectF **)&r;
  result = (QRectF *) &(arg1)->operator |=((QRectF const &)*arg2);
  *(QRectF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRectF * QRectF_DivideEqual(QRectF * self, QRectF * r) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRectF *arg2 = 0 ;
  QRectF *result = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QRectF **)&r;
  result = (QRectF *) &(arg1)->operator &=((QRectF const &)*arg2);
  *(QRectF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRectF_contains(QRectF const * self, QPointF * p) {
  QRectF *arg1 = (QRectF *) 0 ;
  QPointF *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QPointF **)&p;
  result = (bool)((QRectF const *)arg1)->contains((QPointF const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRectF_contains1(QRectF const * self, double x, double y) {
  QRectF *arg1 = (QRectF *) 0 ;
  double arg2 ;
  double arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  result = (bool)((QRectF const *)arg1)->contains(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRectF_contains2(QRectF const * self, QRectF * r) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRectF *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QRectF **)&r;
  result = (bool)((QRectF const *)arg1)->contains((QRectF const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRectF * QRectF_unite(QRectF const * self, QRectF * r) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRectF *arg2 = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QRectF **)&r;
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QRectF const *)arg1)->unite((QRectF const &)*arg2));
  return cresult;
}


SWIGEXPORT QRectF * QRectF_united(QRectF const * self, QRectF * other) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRectF *arg2 = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QRectF **)&other;
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QRectF const *)arg1)->united((QRectF const &)*arg2));
  return cresult;
}


SWIGEXPORT QRectF * QRectF_intersect(QRectF const * self, QRectF * r) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRectF *arg2 = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QRectF **)&r;
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QRectF const *)arg1)->intersect((QRectF const &)*arg2));
  return cresult;
}


SWIGEXPORT QRectF * QRectF_intersected(QRectF const * self, QRectF * other) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRectF *arg2 = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QRectF **)&other;
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QRectF const *)arg1)->intersected((QRectF const &)*arg2));
  return cresult;
}


SWIGEXPORT bool QRectF_intersects(QRectF const * self, QRectF * r) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRectF *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRectF **)&self; 
  arg2 = *(QRectF **)&r;
  result = (bool)((QRectF const *)arg1)->intersects((QRectF const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QRectF_toRect(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QRectF **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QRectF const *)arg1)->toRect());
  return cresult;
}


SWIGEXPORT QRect * QRectF_toAlignedRect(QRectF const * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QRectF **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QRectF const *)arg1)->toAlignedRect());
  return cresult;
}


SWIGEXPORT void Delete_QRectF(QRectF * self) {
  QRectF *arg1 = (QRectF *) 0 ;
  
  arg1 = *(QRectF **)&self; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

