(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtDateTime;


IMPORT QtDateTimeRaw;
FROM QtNamespace IMPORT TimeSpec, DateFormat;


IMPORT WeakRef;
FROM QtString IMPORT QString;
FROM QtByteArray IMPORT QByteArray;
IMPORT Ctypes AS C;

PROCEDURE New_QDate0 (self: QDate; ): QDate =
  VAR result: ADDRESS;
  BEGIN
    result := QtDateTimeRaw.New_QDate0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QDate);

    RETURN self;
  END New_QDate0;

PROCEDURE New_QDate1 (self: QDate; y, m, d: INTEGER; ): QDate =
  VAR result: ADDRESS;
  BEGIN
    result := QtDateTimeRaw.New_QDate1(y, m, d);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QDate);

    RETURN self;
  END New_QDate1;

PROCEDURE QDate_isNull (self: QDate; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_isNull(selfAdr);
  END QDate_isNull;

PROCEDURE QDate_QDate_IsValid (self: QDate; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_QDate_IsValid(selfAdr);
  END QDate_QDate_IsValid;

PROCEDURE QDate_year (self: QDate; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_year(selfAdr);
  END QDate_year;

PROCEDURE QDate_month (self: QDate; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_month(selfAdr);
  END QDate_month;

PROCEDURE QDate_day (self: QDate; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_day(selfAdr);
  END QDate_day;

PROCEDURE QDate_dayOfWeek (self: QDate; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_dayOfWeek(selfAdr);
  END QDate_dayOfWeek;

PROCEDURE QDate_dayOfYear (self: QDate; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_dayOfYear(selfAdr);
  END QDate_dayOfYear;

PROCEDURE QDate_daysInMonth (self: QDate; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_daysInMonth(selfAdr);
  END QDate_daysInMonth;

PROCEDURE QDate_daysInYear (self: QDate; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_daysInYear(selfAdr);
  END QDate_daysInYear;

PROCEDURE QDate_weekNumber (self: QDate; VAR yearNum: INTEGER; ): INTEGER =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: C.int;
    result : INTEGER;
  BEGIN
    arg2tmp := yearNum;
    result := QtDateTimeRaw.QDate_weekNumber(selfAdr, arg2tmp);
    yearNum := arg2tmp;
    RETURN result;
  END QDate_weekNumber;

PROCEDURE QDate_weekNumber1 (self: QDate; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_weekNumber1(selfAdr);
  END QDate_weekNumber1;

PROCEDURE ShortMonthName (month: INTEGER; ): TEXT =
  VAR
    ret   : ADDRESS;
    qstr               := NEW(QString);
    ba    : QByteArray;
    result: TEXT;
  BEGIN
    ret := QtDateTimeRaw.ShortMonthName(month);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END ShortMonthName;

PROCEDURE ShortMonthName1 (month: INTEGER; type: MonthNameType; ): TEXT =
  VAR
    ret   : ADDRESS;
    qstr               := NEW(QString);
    ba    : QByteArray;
    result: TEXT;
  BEGIN
    ret := QtDateTimeRaw.ShortMonthName1(month, ORD(type));

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END ShortMonthName1;

PROCEDURE ShortDayName (weekday: INTEGER; ): TEXT =
  VAR
    ret   : ADDRESS;
    qstr               := NEW(QString);
    ba    : QByteArray;
    result: TEXT;
  BEGIN
    ret := QtDateTimeRaw.ShortDayName(weekday);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END ShortDayName;

PROCEDURE ShortDayName1 (weekday: INTEGER; type: MonthNameType; ): TEXT =
  VAR
    ret   : ADDRESS;
    qstr               := NEW(QString);
    ba    : QByteArray;
    result: TEXT;
  BEGIN
    ret := QtDateTimeRaw.ShortDayName1(weekday, ORD(type));

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END ShortDayName1;

PROCEDURE LongMonthName (month: INTEGER; ): TEXT =
  VAR
    ret   : ADDRESS;
    qstr               := NEW(QString);
    ba    : QByteArray;
    result: TEXT;
  BEGIN
    ret := QtDateTimeRaw.LongMonthName(month);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END LongMonthName;

PROCEDURE LongMonthName1 (month: INTEGER; type: MonthNameType; ): TEXT =
  VAR
    ret   : ADDRESS;
    qstr               := NEW(QString);
    ba    : QByteArray;
    result: TEXT;
  BEGIN
    ret := QtDateTimeRaw.LongMonthName1(month, ORD(type));

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END LongMonthName1;

PROCEDURE LongDayName (weekday: INTEGER; ): TEXT =
  VAR
    ret   : ADDRESS;
    qstr               := NEW(QString);
    ba    : QByteArray;
    result: TEXT;
  BEGIN
    ret := QtDateTimeRaw.LongDayName(weekday);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END LongDayName;

PROCEDURE LongDayName1 (weekday: INTEGER; type: MonthNameType; ): TEXT =
  VAR
    ret   : ADDRESS;
    qstr               := NEW(QString);
    ba    : QByteArray;
    result: TEXT;
  BEGIN
    ret := QtDateTimeRaw.LongDayName1(weekday, ORD(type));

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END LongDayName1;

PROCEDURE QDate_toString (self: QDate; f: DateFormat; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDate_toString(selfAdr, ORD(f));

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QDate_toString;

PROCEDURE QDate_toString1 (self: QDate; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDate_toString1(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QDate_toString1;

PROCEDURE QDate_toString2 (self: QDate; format: TEXT; ): TEXT =
  VAR
    ret        : ADDRESS;
    qstr                    := NEW(QString);
    ba         : QByteArray;
    result     : TEXT;
    selfAdr    : ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_format             := NEW(QString).initQString(format);
    arg2tmp                 := LOOPHOLE(qstr_format.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDate_toString2(selfAdr, arg2tmp);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QDate_toString2;

PROCEDURE QDate_setYMD (self: QDate; y, m, d: INTEGER; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_setYMD(selfAdr, y, m, d);
  END QDate_setYMD;

PROCEDURE QDate_setDate (self: QDate; year, month, day: INTEGER; ):
  BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_setDate(selfAdr, year, month, day);
  END QDate_setDate;

PROCEDURE QDate_getDate (self: QDate; VAR year, month, day: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: C.int;
    arg3tmp: C.int;
    arg4tmp: C.int;
  BEGIN
    arg2tmp := year;
    arg3tmp := month;
    arg4tmp := day;
    QtDateTimeRaw.QDate_getDate(selfAdr, arg2tmp, arg3tmp, arg4tmp);
    year := arg2tmp;
    month := arg3tmp;
    day := arg4tmp;
  END QDate_getDate;

PROCEDURE QDate_addDays (self: QDate; days: INTEGER; ): QDate =
  VAR
    ret    : ADDRESS;
    result : QDate;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDate_addDays(selfAdr, days);

    result := NEW(QDate);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDate_addDays;

PROCEDURE QDate_addMonths (self: QDate; months: INTEGER; ): QDate =
  VAR
    ret    : ADDRESS;
    result : QDate;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDate_addMonths(selfAdr, months);

    result := NEW(QDate);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDate_addMonths;

PROCEDURE QDate_addYears (self: QDate; years: INTEGER; ): QDate =
  VAR
    ret    : ADDRESS;
    result : QDate;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDate_addYears(selfAdr, years);

    result := NEW(QDate);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDate_addYears;

PROCEDURE QDate_daysTo (self, arg2: QDate; ): INTEGER =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_daysTo(selfAdr, arg2tmp);
  END QDate_daysTo;

PROCEDURE QDate_Equals (self, other: QDate; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_Equals(selfAdr, arg2tmp);
  END QDate_Equals;

PROCEDURE QDate_NotEquals (self, other: QDate; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_NotEquals(selfAdr, arg2tmp);
  END QDate_NotEquals;

PROCEDURE QDate_LessThan (self, other: QDate; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_LessThan(selfAdr, arg2tmp);
  END QDate_LessThan;

PROCEDURE QDate_LessThanEquals (self, other: QDate; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_LessThanEquals(selfAdr, arg2tmp);
  END QDate_LessThanEquals;

PROCEDURE QDate_GreaterThan (self, other: QDate; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_GreaterThan(selfAdr, arg2tmp);
  END QDate_GreaterThan;

PROCEDURE QDate_GreaterThanEquals (self, other: QDate; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_GreaterThanEquals(selfAdr, arg2tmp);
  END QDate_GreaterThanEquals;

PROCEDURE CurrentDate (): QDate =
  VAR
    ret   : ADDRESS;
    result: QDate;
  BEGIN
    ret := QtDateTimeRaw.CurrentDate();

    result := NEW(QDate);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END CurrentDate;

PROCEDURE QDate_FromString (s: TEXT; f: DateFormat; ): QDate =
  VAR
    ret    : ADDRESS;
    result : QDate;
    qstr_s           := NEW(QString).initQString(s);
    arg1tmp          := LOOPHOLE(qstr_s.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDate_FromString(arg1tmp, ORD(f));

    result := NEW(QDate);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDate_FromString;

PROCEDURE QDate_FromString1 (s: TEXT; ): QDate =
  VAR
    ret    : ADDRESS;
    result : QDate;
    qstr_s           := NEW(QString).initQString(s);
    arg1tmp          := LOOPHOLE(qstr_s.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDate_FromString1(arg1tmp);

    result := NEW(QDate);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDate_FromString1;

PROCEDURE QDate_FromString2 (s, format: TEXT; ): QDate =
  VAR
    ret        : ADDRESS;
    result     : QDate;
    qstr_s               := NEW(QString).initQString(s);
    arg1tmp              := LOOPHOLE(qstr_s.cxxObj, ADDRESS);
    qstr_format          := NEW(QString).initQString(format);
    arg2tmp              := LOOPHOLE(qstr_format.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDate_FromString2(arg1tmp, arg2tmp);

    result := NEW(QDate);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDate_FromString2;

PROCEDURE QDate_IsValid1 (y, m, d: INTEGER; ): BOOLEAN =
  BEGIN
    RETURN QtDateTimeRaw.QDate_IsValid1(y, m, d);
  END QDate_IsValid1;

PROCEDURE IsLeapYear (year: INTEGER; ): BOOLEAN =
  BEGIN
    RETURN QtDateTimeRaw.IsLeapYear(year);
  END IsLeapYear;

PROCEDURE FromJulianDay (jd: INTEGER; ): QDate =
  VAR
    ret   : ADDRESS;
    result: QDate;
  BEGIN
    ret := QtDateTimeRaw.FromJulianDay(jd);

    result := NEW(QDate);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END FromJulianDay;

PROCEDURE QDate_toJulianDay (self: QDate; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDate_toJulianDay(selfAdr);
  END QDate_toJulianDay;

PROCEDURE Delete_QDate (self: QDate; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtDateTimeRaw.Delete_QDate(selfAdr);
  END Delete_QDate;

PROCEDURE Cleanup_QDate
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QDate := ref;
  BEGIN
    Delete_QDate(obj);
  END Cleanup_QDate;

PROCEDURE Destroy_QDate (self: QDate) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QDate);
  END Destroy_QDate;

REVEAL
  QDate = QDatePublic BRANDED OBJECT
          OVERRIDES
            init_0            := New_QDate0;
            init_1            := New_QDate1;
            isNull            := QDate_isNull;
            QDate_IsValid     := QDate_QDate_IsValid;
            year              := QDate_year;
            month             := QDate_month;
            day               := QDate_day;
            dayOfWeek         := QDate_dayOfWeek;
            dayOfYear         := QDate_dayOfYear;
            daysInMonth       := QDate_daysInMonth;
            daysInYear        := QDate_daysInYear;
            weekNumber        := QDate_weekNumber;
            weekNumber1       := QDate_weekNumber1;
            toString          := QDate_toString;
            toString1         := QDate_toString1;
            toString2         := QDate_toString2;
            setYMD            := QDate_setYMD;
            setDate           := QDate_setDate;
            getDate           := QDate_getDate;
            addDays           := QDate_addDays;
            addMonths         := QDate_addMonths;
            addYears          := QDate_addYears;
            daysTo            := QDate_daysTo;
            Equals            := QDate_Equals;
            NotEquals         := QDate_NotEquals;
            LessThan          := QDate_LessThan;
            LessThanEquals    := QDate_LessThanEquals;
            GreaterThan       := QDate_GreaterThan;
            GreaterThanEquals := QDate_GreaterThanEquals;
            toJulianDay       := QDate_toJulianDay;
            destroyCxx        := Destroy_QDate;
          END;

PROCEDURE New_QTime0 (self: QTime; ): QTime =
  VAR result: ADDRESS;
  BEGIN
    result := QtDateTimeRaw.New_QTime0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTime);

    RETURN self;
  END New_QTime0;

PROCEDURE New_QTime1 (self: QTime; h, m, s, ms: INTEGER; ): QTime =
  VAR result: ADDRESS;
  BEGIN
    result := QtDateTimeRaw.New_QTime1(h, m, s, ms);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTime);

    RETURN self;
  END New_QTime1;

PROCEDURE New_QTime2 (self: QTime; h, m, s: INTEGER; ): QTime =
  VAR result: ADDRESS;
  BEGIN
    result := QtDateTimeRaw.New_QTime2(h, m, s);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTime);

    RETURN self;
  END New_QTime2;

PROCEDURE New_QTime3 (self: QTime; h, m: INTEGER; ): QTime =
  VAR result: ADDRESS;
  BEGIN
    result := QtDateTimeRaw.New_QTime3(h, m);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTime);

    RETURN self;
  END New_QTime3;

PROCEDURE QTime_isNull (self: QTime; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_isNull(selfAdr);
  END QTime_isNull;

PROCEDURE QTime_isValid (self: QTime; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_isValid(selfAdr);
  END QTime_isValid;

PROCEDURE QTime_hour (self: QTime; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_hour(selfAdr);
  END QTime_hour;

PROCEDURE QTime_minute (self: QTime; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_minute(selfAdr);
  END QTime_minute;

PROCEDURE QTime_second (self: QTime; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_second(selfAdr);
  END QTime_second;

PROCEDURE QTime_msec (self: QTime; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_msec(selfAdr);
  END QTime_msec;

PROCEDURE QTime_toString (self: QTime; f: DateFormat; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QTime_toString(selfAdr, ORD(f));

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTime_toString;

PROCEDURE QTime_toString1 (self: QTime; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QTime_toString1(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTime_toString1;

PROCEDURE QTime_toString2 (self: QTime; format: TEXT; ): TEXT =
  VAR
    ret        : ADDRESS;
    qstr                    := NEW(QString);
    ba         : QByteArray;
    result     : TEXT;
    selfAdr    : ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_format             := NEW(QString).initQString(format);
    arg2tmp                 := LOOPHOLE(qstr_format.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QTime_toString2(selfAdr, arg2tmp);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTime_toString2;

PROCEDURE QTime_setHMS (self: QTime; h, m, s, ms: INTEGER; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_setHMS(selfAdr, h, m, s, ms);
  END QTime_setHMS;

PROCEDURE QTime_setHMS1 (self: QTime; h, m, s: INTEGER; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_setHMS1(selfAdr, h, m, s);
  END QTime_setHMS1;

PROCEDURE QTime_addSecs (self: QTime; secs: INTEGER; ): QTime =
  VAR
    ret    : ADDRESS;
    result : QTime;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QTime_addSecs(selfAdr, secs);

    result := NEW(QTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTime_addSecs;

PROCEDURE QTime_secsTo (self, arg2: QTime; ): INTEGER =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_secsTo(selfAdr, arg2tmp);
  END QTime_secsTo;

PROCEDURE QTime_addMSecs (self: QTime; ms: INTEGER; ): QTime =
  VAR
    ret    : ADDRESS;
    result : QTime;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QTime_addMSecs(selfAdr, ms);

    result := NEW(QTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTime_addMSecs;

PROCEDURE QTime_msecsTo (self, arg2: QTime; ): INTEGER =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_msecsTo(selfAdr, arg2tmp);
  END QTime_msecsTo;

PROCEDURE QTime_Equals (self, other: QTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_Equals(selfAdr, arg2tmp);
  END QTime_Equals;

PROCEDURE QTime_NotEquals (self, other: QTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_NotEquals(selfAdr, arg2tmp);
  END QTime_NotEquals;

PROCEDURE QTime_LessThan (self, other: QTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_LessThan(selfAdr, arg2tmp);
  END QTime_LessThan;

PROCEDURE QTime_LessThanEquals (self, other: QTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_LessThanEquals(selfAdr, arg2tmp);
  END QTime_LessThanEquals;

PROCEDURE QTime_GreaterThan (self, other: QTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_GreaterThan(selfAdr, arg2tmp);
  END QTime_GreaterThan;

PROCEDURE QTime_GreaterThanEquals (self, other: QTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_GreaterThanEquals(selfAdr, arg2tmp);
  END QTime_GreaterThanEquals;

PROCEDURE CurrentTime (): QTime =
  VAR
    ret   : ADDRESS;
    result: QTime;
  BEGIN
    ret := QtDateTimeRaw.CurrentTime();

    result := NEW(QTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END CurrentTime;

PROCEDURE QTime_FromString (s: TEXT; f: DateFormat; ): QTime =
  VAR
    ret    : ADDRESS;
    result : QTime;
    qstr_s           := NEW(QString).initQString(s);
    arg1tmp          := LOOPHOLE(qstr_s.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QTime_FromString(arg1tmp, ORD(f));

    result := NEW(QTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTime_FromString;

PROCEDURE QTime_FromString1 (s: TEXT; ): QTime =
  VAR
    ret    : ADDRESS;
    result : QTime;
    qstr_s           := NEW(QString).initQString(s);
    arg1tmp          := LOOPHOLE(qstr_s.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QTime_FromString1(arg1tmp);

    result := NEW(QTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTime_FromString1;

PROCEDURE QTime_FromString2 (s, format: TEXT; ): QTime =
  VAR
    ret        : ADDRESS;
    result     : QTime;
    qstr_s               := NEW(QString).initQString(s);
    arg1tmp              := LOOPHOLE(qstr_s.cxxObj, ADDRESS);
    qstr_format          := NEW(QString).initQString(format);
    arg2tmp              := LOOPHOLE(qstr_format.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QTime_FromString2(arg1tmp, arg2tmp);

    result := NEW(QTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTime_FromString2;

PROCEDURE IsValid1 (h, m, s, ms: INTEGER; ): BOOLEAN =
  BEGIN
    RETURN QtDateTimeRaw.IsValid1(h, m, s, ms);
  END IsValid1;

PROCEDURE IsValid2 (h, m, s: INTEGER; ): BOOLEAN =
  BEGIN
    RETURN QtDateTimeRaw.IsValid2(h, m, s);
  END IsValid2;

PROCEDURE QTime_start (self: QTime; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtDateTimeRaw.QTime_start(selfAdr);
  END QTime_start;

PROCEDURE QTime_restart (self: QTime; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_restart(selfAdr);
  END QTime_restart;

PROCEDURE QTime_elapsed (self: QTime; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QTime_elapsed(selfAdr);
  END QTime_elapsed;

PROCEDURE Delete_QTime (self: QTime; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtDateTimeRaw.Delete_QTime(selfAdr);
  END Delete_QTime;

PROCEDURE Cleanup_QTime
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTime := ref;
  BEGIN
    Delete_QTime(obj);
  END Cleanup_QTime;

PROCEDURE Destroy_QTime (self: QTime) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTime);
  END Destroy_QTime;

REVEAL
  QTime = QTimePublic BRANDED OBJECT
          OVERRIDES
            init_0            := New_QTime0;
            init_1            := New_QTime1;
            init_2            := New_QTime2;
            init_3            := New_QTime3;
            isNull            := QTime_isNull;
            isValid           := QTime_isValid;
            hour              := QTime_hour;
            minute            := QTime_minute;
            second            := QTime_second;
            msec              := QTime_msec;
            toString          := QTime_toString;
            toString1         := QTime_toString1;
            toString2         := QTime_toString2;
            setHMS            := QTime_setHMS;
            setHMS1           := QTime_setHMS1;
            addSecs           := QTime_addSecs;
            secsTo            := QTime_secsTo;
            addMSecs          := QTime_addMSecs;
            msecsTo           := QTime_msecsTo;
            Equals            := QTime_Equals;
            NotEquals         := QTime_NotEquals;
            LessThan          := QTime_LessThan;
            LessThanEquals    := QTime_LessThanEquals;
            GreaterThan       := QTime_GreaterThan;
            GreaterThanEquals := QTime_GreaterThanEquals;
            start             := QTime_start;
            restart           := QTime_restart;
            elapsed           := QTime_elapsed;
            destroyCxx        := Destroy_QTime;
          END;

PROCEDURE New_QDateTime0 (self: QDateTime; ): QDateTime =
  VAR result: ADDRESS;
  BEGIN
    result := QtDateTimeRaw.New_QDateTime0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QDateTime);

    RETURN self;
  END New_QDateTime0;

PROCEDURE New_QDateTime1 (self: QDateTime; arg1: QDate; ): QDateTime =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(arg1.cxxObj, ADDRESS);
  BEGIN
    result := QtDateTimeRaw.New_QDateTime1(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QDateTime);

    RETURN self;
  END New_QDateTime1;

PROCEDURE New_QDateTime2
  (self: QDateTime; arg1: QDate; arg2: QTime; spec: TimeSpec; ):
  QDateTime =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(arg1.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    result := QtDateTimeRaw.New_QDateTime2(arg1tmp, arg2tmp, ORD(spec));

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QDateTime);

    RETURN self;
  END New_QDateTime2;

PROCEDURE New_QDateTime3 (self: QDateTime; arg1: QDate; arg2: QTime; ):
  QDateTime =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(arg1.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    result := QtDateTimeRaw.New_QDateTime3(arg1tmp, arg2tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QDateTime);

    RETURN self;
  END New_QDateTime3;

PROCEDURE New_QDateTime4 (self: QDateTime; other: QDateTime; ): QDateTime =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    result := QtDateTimeRaw.New_QDateTime4(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QDateTime);

    RETURN self;
  END New_QDateTime4;

PROCEDURE Delete_QDateTime (self: QDateTime; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtDateTimeRaw.Delete_QDateTime(selfAdr);
  END Delete_QDateTime;

PROCEDURE QDateTime_Assign (self, other: QDateTime; ): QDateTime =
  VAR
    ret    : ADDRESS;
    result : QDateTime;
    selfAdr: ADDRESS   := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp            := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_Assign(selfAdr, arg2tmp);

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDateTime_Assign;

PROCEDURE QDateTime_isNull (self: QDateTime; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_isNull(selfAdr);
  END QDateTime_isNull;

PROCEDURE QDateTime_isValid (self: QDateTime; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_isValid(selfAdr);
  END QDateTime_isValid;

PROCEDURE QDateTime_date (self: QDateTime; ): QDate =
  VAR
    ret    : ADDRESS;
    result : QDate;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_date(selfAdr);

    result := NEW(QDate);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDateTime_date;

PROCEDURE QDateTime_time (self: QDateTime; ): QTime =
  VAR
    ret    : ADDRESS;
    result : QTime;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_time(selfAdr);

    result := NEW(QTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDateTime_time;

PROCEDURE QDateTime_timeSpec (self: QDateTime; ): TimeSpec =
  VAR
    ret    : INTEGER;
    result : TimeSpec;
    selfAdr: ADDRESS  := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_timeSpec(selfAdr);
    result := VAL(ret, TimeSpec);
    RETURN result;
  END QDateTime_timeSpec;

PROCEDURE QDateTime_toTime_t (self: QDateTime; ): CARDINAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_toTime_t(selfAdr);
  END QDateTime_toTime_t;

PROCEDURE QDateTime_setDate (self: QDateTime; date: QDate; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(date.cxxObj, ADDRESS);
  BEGIN
    QtDateTimeRaw.QDateTime_setDate(selfAdr, arg2tmp);
  END QDateTime_setDate;

PROCEDURE QDateTime_setTime (self: QDateTime; time: QTime; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(time.cxxObj, ADDRESS);
  BEGIN
    QtDateTimeRaw.QDateTime_setTime(selfAdr, arg2tmp);
  END QDateTime_setTime;

PROCEDURE QDateTime_setTimeSpec (self: QDateTime; spec: TimeSpec; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtDateTimeRaw.QDateTime_setTimeSpec(selfAdr, ORD(spec));
  END QDateTime_setTimeSpec;

PROCEDURE QDateTime_setTime_t
  (self: QDateTime; secsSince1Jan1970UTC: CARDINAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtDateTimeRaw.QDateTime_setTime_t(selfAdr, secsSince1Jan1970UTC);
  END QDateTime_setTime_t;

PROCEDURE QDateTime_toString (self: QDateTime; f: DateFormat; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_toString(selfAdr, ORD(f));

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QDateTime_toString;

PROCEDURE QDateTime_toString1 (self: QDateTime; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_toString1(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QDateTime_toString1;

PROCEDURE QDateTime_toString2 (self: QDateTime; format: TEXT; ): TEXT =
  VAR
    ret        : ADDRESS;
    qstr                    := NEW(QString);
    ba         : QByteArray;
    result     : TEXT;
    selfAdr    : ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_format             := NEW(QString).initQString(format);
    arg2tmp                 := LOOPHOLE(qstr_format.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_toString2(selfAdr, arg2tmp);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QDateTime_toString2;

PROCEDURE QDateTime_addDays (self: QDateTime; days: INTEGER; ): QDateTime =
  VAR
    ret    : ADDRESS;
    result : QDateTime;
    selfAdr: ADDRESS   := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_addDays(selfAdr, days);

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDateTime_addDays;

PROCEDURE QDateTime_addMonths (self: QDateTime; months: INTEGER; ):
  QDateTime =
  VAR
    ret    : ADDRESS;
    result : QDateTime;
    selfAdr: ADDRESS   := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_addMonths(selfAdr, months);

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDateTime_addMonths;

PROCEDURE QDateTime_addYears (self: QDateTime; years: INTEGER; ):
  QDateTime =
  VAR
    ret    : ADDRESS;
    result : QDateTime;
    selfAdr: ADDRESS   := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_addYears(selfAdr, years);

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDateTime_addYears;

PROCEDURE QDateTime_addSecs (self: QDateTime; secs: INTEGER; ): QDateTime =
  VAR
    ret    : ADDRESS;
    result : QDateTime;
    selfAdr: ADDRESS   := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_addSecs(selfAdr, secs);

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDateTime_addSecs;

PROCEDURE QDateTime_addMSecs (self: QDateTime; msecs: CARDINAL; ):
  QDateTime =
  VAR
    ret    : ADDRESS;
    result : QDateTime;
    selfAdr: ADDRESS   := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_addMSecs(selfAdr, msecs);

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDateTime_addMSecs;

PROCEDURE QDateTime_toTimeSpec (self: QDateTime; spec: TimeSpec; ):
  QDateTime =
  VAR
    ret    : ADDRESS;
    result : QDateTime;
    selfAdr: ADDRESS   := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_toTimeSpec(selfAdr, ORD(spec));

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDateTime_toTimeSpec;

PROCEDURE QDateTime_toLocalTime (self: QDateTime; ): QDateTime =
  VAR
    ret    : ADDRESS;
    result : QDateTime;
    selfAdr: ADDRESS   := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_toLocalTime(selfAdr);

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDateTime_toLocalTime;

PROCEDURE QDateTime_toUTC (self: QDateTime; ): QDateTime =
  VAR
    ret    : ADDRESS;
    result : QDateTime;
    selfAdr: ADDRESS   := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.QDateTime_toUTC(selfAdr);

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QDateTime_toUTC;

PROCEDURE QDateTime_daysTo (self, arg2: QDateTime; ): INTEGER =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_daysTo(selfAdr, arg2tmp);
  END QDateTime_daysTo;

PROCEDURE QDateTime_secsTo (self, arg2: QDateTime; ): INTEGER =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_secsTo(selfAdr, arg2tmp);
  END QDateTime_secsTo;

PROCEDURE QDateTime_Equals (self, other: QDateTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_Equals(selfAdr, arg2tmp);
  END QDateTime_Equals;

PROCEDURE QDateTime_NotEquals (self, other: QDateTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_NotEquals(selfAdr, arg2tmp);
  END QDateTime_NotEquals;

PROCEDURE QDateTime_LessThan (self, other: QDateTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_LessThan(selfAdr, arg2tmp);
  END QDateTime_LessThan;

PROCEDURE QDateTime_LessThanEquals (self, other: QDateTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_LessThanEquals(selfAdr, arg2tmp);
  END QDateTime_LessThanEquals;

PROCEDURE QDateTime_GreaterThan (self, other: QDateTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_GreaterThan(selfAdr, arg2tmp);
  END QDateTime_GreaterThan;

PROCEDURE QDateTime_GreaterThanEquals (self, other: QDateTime; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_GreaterThanEquals(selfAdr, arg2tmp);
  END QDateTime_GreaterThanEquals;

PROCEDURE QDateTime_setUtcOffset (self: QDateTime; seconds: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtDateTimeRaw.QDateTime_setUtcOffset(selfAdr, seconds);
  END QDateTime_setUtcOffset;

PROCEDURE QDateTime_utcOffset (self: QDateTime; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtDateTimeRaw.QDateTime_utcOffset(selfAdr);
  END QDateTime_utcOffset;

PROCEDURE CurrentDateTime (): QDateTime =
  VAR
    ret   : ADDRESS;
    result: QDateTime;
  BEGIN
    ret := QtDateTimeRaw.CurrentDateTime();

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END CurrentDateTime;

PROCEDURE FromString (s: TEXT; f: DateFormat; ): QDateTime =
  VAR
    ret    : ADDRESS;
    result : QDateTime;
    qstr_s             := NEW(QString).initQString(s);
    arg1tmp            := LOOPHOLE(qstr_s.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.FromString(arg1tmp, ORD(f));

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END FromString;

PROCEDURE FromString1 (s: TEXT; ): QDateTime =
  VAR
    ret    : ADDRESS;
    result : QDateTime;
    qstr_s             := NEW(QString).initQString(s);
    arg1tmp            := LOOPHOLE(qstr_s.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.FromString1(arg1tmp);

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END FromString1;

PROCEDURE FromString2 (s, format: TEXT; ): QDateTime =
  VAR
    ret        : ADDRESS;
    result     : QDateTime;
    qstr_s                 := NEW(QString).initQString(s);
    arg1tmp                := LOOPHOLE(qstr_s.cxxObj, ADDRESS);
    qstr_format            := NEW(QString).initQString(format);
    arg2tmp                := LOOPHOLE(qstr_format.cxxObj, ADDRESS);
  BEGIN
    ret := QtDateTimeRaw.FromString2(arg1tmp, arg2tmp);

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END FromString2;

PROCEDURE FromTime_t (secsSince1Jan1970UTC: CARDINAL; ): QDateTime =
  VAR
    ret   : ADDRESS;
    result: QDateTime;
  BEGIN
    ret := QtDateTimeRaw.FromTime_t(secsSince1Jan1970UTC);

    result := NEW(QDateTime);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END FromTime_t;

PROCEDURE Cleanup_QDateTime
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QDateTime := ref;
  BEGIN
    Delete_QDateTime(obj);
  END Cleanup_QDateTime;

PROCEDURE Destroy_QDateTime (self: QDateTime) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QDateTime);
  END Destroy_QDateTime;

REVEAL
  QDateTime = QDateTimePublic BRANDED OBJECT
              OVERRIDES
                init_0            := New_QDateTime0;
                init_1            := New_QDateTime1;
                init_2            := New_QDateTime2;
                init_3            := New_QDateTime3;
                init_4            := New_QDateTime4;
                Assign            := QDateTime_Assign;
                isNull            := QDateTime_isNull;
                isValid           := QDateTime_isValid;
                date              := QDateTime_date;
                time              := QDateTime_time;
                timeSpec          := QDateTime_timeSpec;
                toTime_t          := QDateTime_toTime_t;
                setDate           := QDateTime_setDate;
                setTime           := QDateTime_setTime;
                setTimeSpec       := QDateTime_setTimeSpec;
                setTime_t         := QDateTime_setTime_t;
                toString          := QDateTime_toString;
                toString1         := QDateTime_toString1;
                toString2         := QDateTime_toString2;
                addDays           := QDateTime_addDays;
                addMonths         := QDateTime_addMonths;
                addYears          := QDateTime_addYears;
                addSecs           := QDateTime_addSecs;
                addMSecs          := QDateTime_addMSecs;
                toTimeSpec        := QDateTime_toTimeSpec;
                toLocalTime       := QDateTime_toLocalTime;
                toUTC             := QDateTime_toUTC;
                daysTo            := QDateTime_daysTo;
                secsTo            := QDateTime_secsTo;
                Equals            := QDateTime_Equals;
                NotEquals         := QDateTime_NotEquals;
                LessThan          := QDateTime_LessThan;
                LessThanEquals    := QDateTime_LessThanEquals;
                GreaterThan       := QDateTime_GreaterThan;
                GreaterThanEquals := QDateTime_GreaterThanEquals;
                setUtcOffset      := QDateTime_setUtcOffset;
                utcOffset         := QDateTime_utcOffset;
                destroyCxx        := Destroy_QDateTime;
              END;


BEGIN
END QtDateTime.
