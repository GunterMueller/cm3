/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qtablewidget.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QTableWidgetSelectionRange * New_QTableWidgetSelectionRange0() {
  QTableWidgetSelectionRange *result = 0 ;
  QTableWidgetSelectionRange * cresult ;
  
  result = (QTableWidgetSelectionRange *)new QTableWidgetSelectionRange();
  *(QTableWidgetSelectionRange **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetSelectionRange * New_QTableWidgetSelectionRange1(int top, int left, int bottom, int right) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QTableWidgetSelectionRange *result = 0 ;
  QTableWidgetSelectionRange * cresult ;
  
  arg1 = (int)top; 
  arg2 = (int)left; 
  arg3 = (int)bottom; 
  arg4 = (int)right; 
  result = (QTableWidgetSelectionRange *)new QTableWidgetSelectionRange(arg1,arg2,arg3,arg4);
  *(QTableWidgetSelectionRange **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetSelectionRange * New_QTableWidgetSelectionRange2(QTableWidgetSelectionRange const & other) {
  QTableWidgetSelectionRange *arg1 = 0 ;
  QTableWidgetSelectionRange *result = 0 ;
  QTableWidgetSelectionRange * cresult ;
  
  arg1 = *(QTableWidgetSelectionRange **)&other;
  result = (QTableWidgetSelectionRange *)new QTableWidgetSelectionRange((QTableWidgetSelectionRange const &)*arg1);
  *(QTableWidgetSelectionRange **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTableWidgetSelectionRange(QTableWidgetSelectionRange * self) {
  QTableWidgetSelectionRange *arg1 = (QTableWidgetSelectionRange *) 0 ;
  
  arg1 = *(QTableWidgetSelectionRange **)&self; 
  delete arg1;
}


SWIGEXPORT int QTableWidgetSelectionRange_topRow(QTableWidgetSelectionRange const * self) {
  QTableWidgetSelectionRange *arg1 = (QTableWidgetSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidgetSelectionRange **)&self; 
  result = (int)((QTableWidgetSelectionRange const *)arg1)->topRow();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableWidgetSelectionRange_bottomRow(QTableWidgetSelectionRange const * self) {
  QTableWidgetSelectionRange *arg1 = (QTableWidgetSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidgetSelectionRange **)&self; 
  result = (int)((QTableWidgetSelectionRange const *)arg1)->bottomRow();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableWidgetSelectionRange_leftColumn(QTableWidgetSelectionRange const * self) {
  QTableWidgetSelectionRange *arg1 = (QTableWidgetSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidgetSelectionRange **)&self; 
  result = (int)((QTableWidgetSelectionRange const *)arg1)->leftColumn();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableWidgetSelectionRange_rightColumn(QTableWidgetSelectionRange const * self) {
  QTableWidgetSelectionRange *arg1 = (QTableWidgetSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidgetSelectionRange **)&self; 
  result = (int)((QTableWidgetSelectionRange const *)arg1)->rightColumn();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableWidgetSelectionRange_rowCount(QTableWidgetSelectionRange const * self) {
  QTableWidgetSelectionRange *arg1 = (QTableWidgetSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidgetSelectionRange **)&self; 
  result = (int)((QTableWidgetSelectionRange const *)arg1)->rowCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableWidgetSelectionRange_columnCount(QTableWidgetSelectionRange const * self) {
  QTableWidgetSelectionRange *arg1 = (QTableWidgetSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidgetSelectionRange **)&self; 
  result = (int)((QTableWidgetSelectionRange const *)arg1)->columnCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * New_QTableWidgetItem0(int type) {
  int arg1 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = (int)type; 
  result = (QTableWidgetItem *)new QTableWidgetItem(arg1);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * New_QTableWidgetItem1() {
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  result = (QTableWidgetItem *)new QTableWidgetItem();
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * New_QTableWidgetItem2(QString * text, int type) {
  QString *arg1 = 0 ;
  int arg2 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QString **)&text;
  arg2 = (int)type; 
  result = (QTableWidgetItem *)new QTableWidgetItem((QString const &)*arg1,arg2);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * New_QTableWidgetItem3(QString * text) {
  QString *arg1 = 0 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QString **)&text;
  result = (QTableWidgetItem *)new QTableWidgetItem((QString const &)*arg1);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * New_QTableWidgetItem4(QIcon * icon, QString * text, int type) {
  QIcon *arg1 = 0 ;
  QString *arg2 = 0 ;
  int arg3 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QIcon **)&icon;
  arg2 = *(QString **)&text;
  arg3 = (int)type; 
  result = (QTableWidgetItem *)new QTableWidgetItem((QIcon const &)*arg1,(QString const &)*arg2,arg3);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * New_QTableWidgetItem5(QIcon * icon, QString * text) {
  QIcon *arg1 = 0 ;
  QString *arg2 = 0 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QIcon **)&icon;
  arg2 = *(QString **)&text;
  result = (QTableWidgetItem *)new QTableWidgetItem((QIcon const &)*arg1,(QString const &)*arg2);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * New_QTableWidgetItem6(QTableWidgetItem const & other) {
  QTableWidgetItem *arg1 = 0 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidgetItem **)&other;
  result = (QTableWidgetItem *)new QTableWidgetItem((QTableWidgetItem const &)*arg1);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTableWidgetItem(QTableWidgetItem * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  delete arg1;
}


SWIGEXPORT QTableWidgetItem * QTableWidgetItem_clone(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  result = (QTableWidgetItem *)((QTableWidgetItem const *)arg1)->clone();
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidget * QTableWidgetItem_tableWidget(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QTableWidget *result = 0 ;
  QTableWidget * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  result = (QTableWidget *)((QTableWidgetItem const *)arg1)->tableWidget();
  *(QTableWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableWidgetItem_row(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  result = (int)((QTableWidgetItem const *)arg1)->row();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableWidgetItem_column(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  result = (int)((QTableWidgetItem const *)arg1)->column();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setSelected(QTableWidgetItem * self, bool select) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = select ? true : false; 
  (arg1)->setSelected(arg2);
}


SWIGEXPORT bool QTableWidgetItem_isSelected(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  result = (bool)((QTableWidgetItem const *)arg1)->isSelected();
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::ItemFlags QTableWidgetItem_flags(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  Qt::ItemFlags cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(Qt::ItemFlags **)&cresult = new Qt::ItemFlags((const Qt::ItemFlags &)((QTableWidgetItem const *)arg1)->flags());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setFlags(QTableWidgetItem * self, Qt::ItemFlags flags) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  Qt::ItemFlags arg2 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = (Qt::ItemFlags)flags; 
  (arg1)->setFlags(arg2);
}


SWIGEXPORT QString * QTableWidgetItem_text(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTableWidgetItem const *)arg1)->text());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setText(QTableWidgetItem * self, QString * text) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->setText((QString const &)*arg2);
}


SWIGEXPORT QIcon * QTableWidgetItem_icon(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QIcon * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(QIcon **)&cresult = new QIcon((const QIcon &)((QTableWidgetItem const *)arg1)->icon());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setIcon(QTableWidgetItem * self, QIcon * icon) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QIcon *arg2 = 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = *(QIcon **)&icon;
  (arg1)->setIcon((QIcon const &)*arg2);
}


SWIGEXPORT QString * QTableWidgetItem_statusTip(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTableWidgetItem const *)arg1)->statusTip());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setStatusTip(QTableWidgetItem * self, QString * statusTip) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = *(QString **)&statusTip;
  (arg1)->setStatusTip((QString const &)*arg2);
}


SWIGEXPORT QString * QTableWidgetItem_toolTip(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTableWidgetItem const *)arg1)->toolTip());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setToolTip(QTableWidgetItem * self, QString * toolTip) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = *(QString **)&toolTip;
  (arg1)->setToolTip((QString const &)*arg2);
}


SWIGEXPORT QString * QTableWidgetItem_whatsThis(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTableWidgetItem const *)arg1)->whatsThis());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setWhatsThis(QTableWidgetItem * self, QString * whatsThis) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = *(QString **)&whatsThis;
  (arg1)->setWhatsThis((QString const &)*arg2);
}


SWIGEXPORT QFont * QTableWidgetItem_font(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QFont * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(QFont **)&cresult = new QFont((const QFont &)((QTableWidgetItem const *)arg1)->font());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setFont(QTableWidgetItem * self, QFont * font) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QFont *arg2 = 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = *(QFont **)&font;
  (arg1)->setFont((QFont const &)*arg2);
}


SWIGEXPORT int QTableWidgetItem_textAlignment(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  result = (int)((QTableWidgetItem const *)arg1)->textAlignment();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setTextAlignment(QTableWidgetItem * self, int alignment) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = (int)alignment; 
  (arg1)->setTextAlignment(arg2);
}


SWIGEXPORT QColor * QTableWidgetItem_backgroundColor(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QTableWidgetItem const *)arg1)->backgroundColor());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setBackgroundColor(QTableWidgetItem * self, QColor * color) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QColor *arg2 = 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = *(QColor **)&color;
  (arg1)->setBackgroundColor((QColor const &)*arg2);
}


SWIGEXPORT QBrush * QTableWidgetItem_background(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QBrush * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QTableWidgetItem const *)arg1)->background());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setBackground(QTableWidgetItem * self, QBrush * brush) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QBrush *arg2 = 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = *(QBrush **)&brush;
  (arg1)->setBackground((QBrush const &)*arg2);
}


SWIGEXPORT QColor * QTableWidgetItem_textColor(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QTableWidgetItem const *)arg1)->textColor());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setTextColor(QTableWidgetItem * self, QColor * color) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QColor *arg2 = 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = *(QColor **)&color;
  (arg1)->setTextColor((QColor const &)*arg2);
}


SWIGEXPORT QBrush * QTableWidgetItem_foreground(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QBrush * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QTableWidgetItem const *)arg1)->foreground());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setForeground(QTableWidgetItem * self, QBrush * brush) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QBrush *arg2 = 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = *(QBrush **)&brush;
  (arg1)->setForeground((QBrush const &)*arg2);
}


SWIGEXPORT Qt::CheckState QTableWidgetItem_checkState(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  Qt::CheckState result;
  Qt::CheckState cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  result = (Qt::CheckState)((QTableWidgetItem const *)arg1)->checkState();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setCheckState(QTableWidgetItem * self, Qt::CheckState state) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  Qt::CheckState arg2 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = (Qt::CheckState)state; 
  (arg1)->setCheckState(arg2);
}


SWIGEXPORT QSize * QTableWidgetItem_sizeHint(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QTableWidgetItem const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT void QTableWidgetItem_setSizeHint(QTableWidgetItem * self, QSize * size) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  arg2 = *(QSize **)&size;
  (arg1)->setSizeHint((QSize const &)*arg2);
}


SWIGEXPORT int QTableWidgetItem_type(QTableWidgetItem const * self) {
  QTableWidgetItem *arg1 = (QTableWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidgetItem **)&self; 
  result = (int)((QTableWidgetItem const *)arg1)->type();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidget * New_QTableWidget0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QTableWidget *result = 0 ;
  QTableWidget * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QTableWidget *)new QTableWidget(arg1);
  *(QTableWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidget * New_QTableWidget1() {
  QTableWidget *result = 0 ;
  QTableWidget * cresult ;
  
  result = (QTableWidget *)new QTableWidget();
  *(QTableWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidget * New_QTableWidget2(int rows, int columns, QWidget * parent) {
  int arg1 ;
  int arg2 ;
  QWidget *arg3 = (QWidget *) 0 ;
  QTableWidget *result = 0 ;
  QTableWidget * cresult ;
  
  arg1 = (int)rows; 
  arg2 = (int)columns; 
  arg3 = *(QWidget **)&parent; 
  result = (QTableWidget *)new QTableWidget(arg1,arg2,arg3);
  *(QTableWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidget * New_QTableWidget3(int rows, int columns) {
  int arg1 ;
  int arg2 ;
  QTableWidget *result = 0 ;
  QTableWidget * cresult ;
  
  arg1 = (int)rows; 
  arg2 = (int)columns; 
  result = (QTableWidget *)new QTableWidget(arg1,arg2);
  *(QTableWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTableWidget(QTableWidget * self) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  delete arg1;
}


SWIGEXPORT void QTableWidget_setRowCount(QTableWidget * self, int rows) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)rows; 
  (arg1)->setRowCount(arg2);
}


SWIGEXPORT int QTableWidget_rowCount(QTableWidget const * self) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  result = (int)((QTableWidget const *)arg1)->rowCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidget_setColumnCount(QTableWidget * self, int columns) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)columns; 
  (arg1)->setColumnCount(arg2);
}


SWIGEXPORT int QTableWidget_columnCount(QTableWidget const * self) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  result = (int)((QTableWidget const *)arg1)->columnCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableWidget_row(QTableWidget const * self, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  result = (int)((QTableWidget const *)arg1)->row((QTableWidgetItem const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableWidget_column(QTableWidget const * self, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  result = (int)((QTableWidget const *)arg1)->column((QTableWidgetItem const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * QTableWidget_item(QTableWidget const * self, int row, int column) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  result = (QTableWidgetItem *)((QTableWidget const *)arg1)->item(arg2,arg3);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidget_setItem(QTableWidget * self, int row, int column, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QTableWidgetItem *arg4 = (QTableWidgetItem *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  arg4 = *(QTableWidgetItem **)&item; 
  (arg1)->setItem(arg2,arg3,arg4);
}


SWIGEXPORT QTableWidgetItem * QTableWidget_takeItem(QTableWidget * self, int row, int column) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  result = (QTableWidgetItem *)(arg1)->takeItem(arg2,arg3);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * QTableWidget_verticalHeaderItem(QTableWidget const * self, int row) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  result = (QTableWidgetItem *)((QTableWidget const *)arg1)->verticalHeaderItem(arg2);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidget_setVerticalHeaderItem(QTableWidget * self, int row, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  QTableWidgetItem *arg3 = (QTableWidgetItem *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  arg3 = *(QTableWidgetItem **)&item; 
  (arg1)->setVerticalHeaderItem(arg2,arg3);
}


SWIGEXPORT QTableWidgetItem * QTableWidget_takeVerticalHeaderItem(QTableWidget * self, int row) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  result = (QTableWidgetItem *)(arg1)->takeVerticalHeaderItem(arg2);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * QTableWidget_horizontalHeaderItem(QTableWidget const * self, int column) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)column; 
  result = (QTableWidgetItem *)((QTableWidget const *)arg1)->horizontalHeaderItem(arg2);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidget_setHorizontalHeaderItem(QTableWidget * self, int column, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  QTableWidgetItem *arg3 = (QTableWidgetItem *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)column; 
  arg3 = *(QTableWidgetItem **)&item; 
  (arg1)->setHorizontalHeaderItem(arg2,arg3);
}


SWIGEXPORT QTableWidgetItem * QTableWidget_takeHorizontalHeaderItem(QTableWidget * self, int column) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)column; 
  result = (QTableWidgetItem *)(arg1)->takeHorizontalHeaderItem(arg2);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidget_setVerticalHeaderLabels(QTableWidget * self, QStringList * labels) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QStringList *arg2 = 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QStringList **)&labels;
  (arg1)->setVerticalHeaderLabels((QStringList const &)*arg2);
}


SWIGEXPORT void QTableWidget_setHorizontalHeaderLabels(QTableWidget * self, QStringList * labels) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QStringList *arg2 = 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QStringList **)&labels;
  (arg1)->setHorizontalHeaderLabels((QStringList const &)*arg2);
}


SWIGEXPORT int QTableWidget_currentRow(QTableWidget const * self) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  result = (int)((QTableWidget const *)arg1)->currentRow();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableWidget_currentColumn(QTableWidget const * self) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  result = (int)((QTableWidget const *)arg1)->currentColumn();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * QTableWidget_currentItem(QTableWidget const * self) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  result = (QTableWidgetItem *)((QTableWidget const *)arg1)->currentItem();
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidget_setCurrentItem(QTableWidget * self, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  (arg1)->setCurrentItem(arg2);
}


SWIGEXPORT void QTableWidget_setCurrentItem1(QTableWidget * self, QTableWidgetItem * item, QItemSelectionModel::SelectionFlags command) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  QItemSelectionModel::SelectionFlags arg3 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  arg3 = (QItemSelectionModel::SelectionFlags)command; 
  (arg1)->setCurrentItem(arg2,arg3);
}


SWIGEXPORT void QTableWidget_setCurrentCell(QTableWidget * self, int row, int column) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  (arg1)->setCurrentCell(arg2,arg3);
}


SWIGEXPORT void QTableWidget_setCurrentCell1(QTableWidget * self, int row, int column, QItemSelectionModel::SelectionFlags command) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QItemSelectionModel::SelectionFlags arg4 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  arg4 = (QItemSelectionModel::SelectionFlags)command; 
  (arg1)->setCurrentCell(arg2,arg3,arg4);
}


SWIGEXPORT void QTableWidget_sortItems(QTableWidget * self, int column, Qt::SortOrder order) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  Qt::SortOrder arg3 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)column; 
  arg3 = (Qt::SortOrder)order; 
  (arg1)->sortItems(arg2,arg3);
}


SWIGEXPORT void QTableWidget_sortItems1(QTableWidget * self, int column) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)column; 
  (arg1)->sortItems(arg2);
}


SWIGEXPORT void QTableWidget_setSortingEnabled(QTableWidget * self, bool enable) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setSortingEnabled(arg2);
}


SWIGEXPORT bool QTableWidget_isSortingEnabled(QTableWidget const * self) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  result = (bool)((QTableWidget const *)arg1)->isSortingEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidget_editItem(QTableWidget * self, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  (arg1)->editItem(arg2);
}


SWIGEXPORT void QTableWidget_openPersistentEditor(QTableWidget * self, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  (arg1)->openPersistentEditor(arg2);
}


SWIGEXPORT void QTableWidget_closePersistentEditor(QTableWidget * self, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  (arg1)->closePersistentEditor(arg2);
}


SWIGEXPORT QWidget * QTableWidget_cellWidget(QTableWidget const * self, int row, int column) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  result = (QWidget *)((QTableWidget const *)arg1)->cellWidget(arg2,arg3);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidget_setCellWidget(QTableWidget * self, int row, int column, QWidget * widget) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QWidget *arg4 = (QWidget *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  arg4 = *(QWidget **)&widget; 
  (arg1)->setCellWidget(arg2,arg3,arg4);
}


SWIGEXPORT void QTableWidget_removeCellWidget(QTableWidget * self, int row, int column) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  (arg1)->removeCellWidget(arg2,arg3);
}


SWIGEXPORT bool QTableWidget_isItemSelected(QTableWidget const * self, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  result = (bool)((QTableWidget const *)arg1)->isItemSelected((QTableWidgetItem const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidget_setItemSelected(QTableWidget * self, QTableWidgetItem * item, bool select) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  bool arg3 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  arg3 = select ? true : false; 
  (arg1)->setItemSelected((QTableWidgetItem const *)arg2,arg3);
}


SWIGEXPORT void QTableWidget_setRangeSelected(QTableWidget * self, QTableWidgetSelectionRange const & range, bool select) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetSelectionRange *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetSelectionRange **)&range;
  arg3 = select ? true : false; 
  (arg1)->setRangeSelected((QTableWidgetSelectionRange const &)*arg2,arg3);
}


SWIGEXPORT int QTableWidget_visualRow(QTableWidget const * self, int logicalRow) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)logicalRow; 
  result = (int)((QTableWidget const *)arg1)->visualRow(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableWidget_visualColumn(QTableWidget const * self, int logicalColumn) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)logicalColumn; 
  result = (int)((QTableWidget const *)arg1)->visualColumn(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * QTableWidget_itemAt(QTableWidget const * self, QPoint * p) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QPoint *arg2 = 0 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QPoint **)&p;
  result = (QTableWidgetItem *)((QTableWidget const *)arg1)->itemAt((QPoint const &)*arg2);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableWidgetItem * QTableWidget_itemAt1(QTableWidget const * self, int x, int y) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  result = (QTableWidgetItem *)((QTableWidget const *)arg1)->itemAt(arg2,arg3);
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QTableWidget_visualItemRect(QTableWidget const * self, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  *(QRect **)&cresult = new QRect((const QRect &)((QTableWidget const *)arg1)->visualItemRect((QTableWidgetItem const *)arg2));
  return cresult;
}


SWIGEXPORT QTableWidgetItem * QTableWidget_itemPrototype(QTableWidget const * self) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *result = 0 ;
  QTableWidgetItem * cresult ;
  
  arg1 = *(QTableWidget **)&self; 
  result = (QTableWidgetItem *)((QTableWidget const *)arg1)->itemPrototype();
  *(QTableWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableWidget_setItemPrototype(QTableWidget * self, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  (arg1)->setItemPrototype((QTableWidgetItem const *)arg2);
}


SWIGEXPORT void QTableWidget_scrollToItem(QTableWidget * self, QTableWidgetItem * item, QAbstractItemView::ScrollHint hint) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  QAbstractItemView::ScrollHint arg3 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  arg3 = (QAbstractItemView::ScrollHint)hint; 
  (arg1)->scrollToItem((QTableWidgetItem const *)arg2,arg3);
}


SWIGEXPORT void QTableWidget_scrollToItem1(QTableWidget * self, QTableWidgetItem * item) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  QTableWidgetItem *arg2 = (QTableWidgetItem *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = *(QTableWidgetItem **)&item; 
  (arg1)->scrollToItem((QTableWidgetItem const *)arg2);
}


SWIGEXPORT void QTableWidget_insertRow(QTableWidget * self, int row) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  (arg1)->insertRow(arg2);
}


SWIGEXPORT void QTableWidget_insertColumn(QTableWidget * self, int column) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)column; 
  (arg1)->insertColumn(arg2);
}


SWIGEXPORT void QTableWidget_removeRow(QTableWidget * self, int row) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)row; 
  (arg1)->removeRow(arg2);
}


SWIGEXPORT void QTableWidget_removeColumn(QTableWidget * self, int column) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableWidget **)&self; 
  arg2 = (int)column; 
  (arg1)->removeColumn(arg2);
}


SWIGEXPORT void QTableWidget_clear(QTableWidget * self) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  (arg1)->clear();
}


SWIGEXPORT void QTableWidget_clearContents(QTableWidget * self) {
  QTableWidget *arg1 = (QTableWidget *) 0 ;
  
  arg1 = *(QTableWidget **)&self; 
  (arg1)->clearContents();
}


SWIGEXPORT long Modula3_QTableWidgetToQTableView(long objectRef) {
    long baseptr = 0;
    *(QTableView **)&baseptr = *(QTableWidget **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

