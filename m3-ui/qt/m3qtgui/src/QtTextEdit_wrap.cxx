/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qtextedit.h>
#define  AutoFormatting QTextEdit::AutoFormatting


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QTextEdit * New_QTextEdit0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QTextEdit *result = 0 ;
  QTextEdit * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QTextEdit *)new QTextEdit(arg1);
  *(QTextEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTextEdit * New_QTextEdit1() {
  QTextEdit *result = 0 ;
  QTextEdit * cresult ;
  
  result = (QTextEdit *)new QTextEdit();
  *(QTextEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTextEdit * New_QTextEdit2(QString * text, QWidget * parent) {
  QString *arg1 = 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QTextEdit *result = 0 ;
  QTextEdit * cresult ;
  
  arg1 = *(QString **)&text;
  arg2 = *(QWidget **)&parent; 
  result = (QTextEdit *)new QTextEdit((QString const &)*arg1,arg2);
  *(QTextEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTextEdit * New_QTextEdit3(QString * text) {
  QString *arg1 = 0 ;
  QTextEdit *result = 0 ;
  QTextEdit * cresult ;
  
  arg1 = *(QString **)&text;
  result = (QTextEdit *)new QTextEdit((QString const &)*arg1);
  *(QTextEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTextEdit(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  delete arg1;
}


SWIGEXPORT void QTextEdit_setDocument(QTextEdit * self, QTextDocument * document) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextDocument *arg2 = (QTextDocument *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QTextDocument **)&document; 
  (arg1)->setDocument(arg2);
}


SWIGEXPORT QTextDocument * QTextEdit_document(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextDocument *result = 0 ;
  QTextDocument * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (QTextDocument *)((QTextEdit const *)arg1)->document();
  *(QTextDocument **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextEdit_setTextCursor(QTextEdit * self, QTextCursor const & cursor) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextCursor *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QTextCursor **)&cursor;
  (arg1)->setTextCursor((QTextCursor const &)*arg2);
}


SWIGEXPORT QTextCursor * QTextEdit_textCursor(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextCursor * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(QTextCursor **)&cresult = new QTextCursor((const QTextCursor &)((QTextEdit const *)arg1)->textCursor());
  return cresult;
}


SWIGEXPORT bool QTextEdit_isReadOnly(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (bool)((QTextEdit const *)arg1)->isReadOnly();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextEdit_setReadOnly(QTextEdit * self, bool ro) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = ro ? true : false; 
  (arg1)->setReadOnly(arg2);
}


SWIGEXPORT void QTextEdit_setTextInteractionFlags(QTextEdit * self, Qt::TextInteractionFlags flags) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  Qt::TextInteractionFlags arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (Qt::TextInteractionFlags)flags; 
  (arg1)->setTextInteractionFlags(arg2);
}


SWIGEXPORT Qt::TextInteractionFlags QTextEdit_textInteractionFlags(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  Qt::TextInteractionFlags cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(Qt::TextInteractionFlags **)&cresult = new Qt::TextInteractionFlags((const Qt::TextInteractionFlags &)((QTextEdit const *)arg1)->textInteractionFlags());
  return cresult;
}


SWIGEXPORT double QTextEdit_fontPointSize(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (double)((QTextEdit const *)arg1)->fontPointSize();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * QTextEdit_fontFamily(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTextEdit const *)arg1)->fontFamily());
  return cresult;
}


SWIGEXPORT int QTextEdit_fontWeight(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (int)((QTextEdit const *)arg1)->fontWeight();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextEdit_fontUnderline(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (bool)((QTextEdit const *)arg1)->fontUnderline();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextEdit_fontItalic(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (bool)((QTextEdit const *)arg1)->fontItalic();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QColor * QTextEdit_textColor(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QTextEdit const *)arg1)->textColor());
  return cresult;
}


SWIGEXPORT QColor * QTextEdit_textBackgroundColor(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QTextEdit const *)arg1)->textBackgroundColor());
  return cresult;
}


SWIGEXPORT QFont * QTextEdit_currentFont(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QFont * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(QFont **)&cresult = new QFont((const QFont &)((QTextEdit const *)arg1)->currentFont());
  return cresult;
}


SWIGEXPORT Qt::Alignment QTextEdit_alignment(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  Qt::Alignment cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(Qt::Alignment **)&cresult = new Qt::Alignment((const Qt::Alignment &)((QTextEdit const *)arg1)->alignment());
  return cresult;
}


SWIGEXPORT void QTextEdit_mergeCurrentCharFormat(QTextEdit * self, QTextCharFormat * modifier) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextCharFormat *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QTextCharFormat **)&modifier;
  (arg1)->mergeCurrentCharFormat((QTextCharFormat const &)*arg2);
}


SWIGEXPORT void QTextEdit_setCurrentCharFormat(QTextEdit * self, QTextCharFormat * format) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextCharFormat *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QTextCharFormat **)&format;
  (arg1)->setCurrentCharFormat((QTextCharFormat const &)*arg2);
}


SWIGEXPORT QTextCharFormat * QTextEdit_currentCharFormat(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextCharFormat * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(QTextCharFormat **)&cresult = new QTextCharFormat((const QTextCharFormat &)((QTextEdit const *)arg1)->currentCharFormat());
  return cresult;
}


SWIGEXPORT AutoFormatting QTextEdit_autoFormatting(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  AutoFormatting cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(AutoFormatting **)&cresult = new AutoFormatting((const AutoFormatting &)((QTextEdit const *)arg1)->autoFormatting());
  return cresult;
}


SWIGEXPORT void QTextEdit_setAutoFormatting(QTextEdit * self, AutoFormatting features) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  AutoFormatting arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (AutoFormatting)features; 
  (arg1)->setAutoFormatting(arg2);
}


SWIGEXPORT bool QTextEdit_tabChangesFocus(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (bool)((QTextEdit const *)arg1)->tabChangesFocus();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextEdit_setTabChangesFocus(QTextEdit * self, bool b) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = b ? true : false; 
  (arg1)->setTabChangesFocus(arg2);
}


SWIGEXPORT void QTextEdit_setDocumentTitle(QTextEdit * self, QString * title) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QString **)&title;
  (arg1)->setDocumentTitle((QString const &)*arg2);
}


SWIGEXPORT QString * QTextEdit_documentTitle(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTextEdit const *)arg1)->documentTitle());
  return cresult;
}


SWIGEXPORT bool QTextEdit_isUndoRedoEnabled(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (bool)((QTextEdit const *)arg1)->isUndoRedoEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextEdit_setUndoRedoEnabled(QTextEdit * self, bool enable) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setUndoRedoEnabled(arg2);
}


SWIGEXPORT QTextEdit::LineWrapMode QTextEdit_lineWrapMode(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextEdit::LineWrapMode result;
  QTextEdit::LineWrapMode cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (QTextEdit::LineWrapMode)((QTextEdit const *)arg1)->lineWrapMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextEdit_setLineWrapMode(QTextEdit * self, QTextEdit::LineWrapMode mode) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextEdit::LineWrapMode arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (QTextEdit::LineWrapMode)mode; 
  (arg1)->setLineWrapMode(arg2);
}


SWIGEXPORT int QTextEdit_lineWrapColumnOrWidth(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (int)((QTextEdit const *)arg1)->lineWrapColumnOrWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextEdit_setLineWrapColumnOrWidth(QTextEdit * self, int w) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (int)w; 
  (arg1)->setLineWrapColumnOrWidth(arg2);
}


SWIGEXPORT QTextOption::WrapMode QTextEdit_wordWrapMode(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextOption::WrapMode cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(QTextOption::WrapMode **)&cresult = new QTextOption::WrapMode((const QTextOption::WrapMode &)((QTextEdit const *)arg1)->wordWrapMode());
  return cresult;
}


SWIGEXPORT void QTextEdit_setWordWrapMode(QTextEdit * self, QTextOption::WrapMode policy) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextOption::WrapMode arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (QTextOption::WrapMode)policy; 
  (arg1)->setWordWrapMode(arg2);
}


SWIGEXPORT bool QTextEdit_find(QTextEdit * self, QString * exp, QTextDocument::FindFlags options) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString *arg2 = 0 ;
  QTextDocument::FindFlags arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QString **)&exp;
  arg3 = (QTextDocument::FindFlags)options; 
  result = (bool)(arg1)->find((QString const &)*arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextEdit_find1(QTextEdit * self, QString * exp) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QString **)&exp;
  result = (bool)(arg1)->find((QString const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * QTextEdit_toPlainText(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTextEdit const *)arg1)->toPlainText());
  return cresult;
}


SWIGEXPORT QString * QTextEdit_toHtml(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTextEdit const *)arg1)->toHtml());
  return cresult;
}


SWIGEXPORT void QTextEdit_ensureCursorVisible(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  (arg1)->ensureCursorVisible();
}


SWIGEXPORT QMenu * QTextEdit_createStandardContextMenu(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QMenu *result = 0 ;
  QMenu * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (QMenu *)(arg1)->createStandardContextMenu();
  *(QMenu **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMenu * QTextEdit_createStandardContextMenu1(QTextEdit * self, QPoint * position) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QPoint *arg2 = 0 ;
  QMenu *result = 0 ;
  QMenu * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QPoint **)&position;
  result = (QMenu *)(arg1)->createStandardContextMenu((QPoint const &)*arg2);
  *(QMenu **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTextCursor * QTextEdit_cursorForPosition(QTextEdit const * self, QPoint * pos) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QPoint *arg2 = 0 ;
  QTextCursor * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QPoint **)&pos;
  *(QTextCursor **)&cresult = new QTextCursor((const QTextCursor &)((QTextEdit const *)arg1)->cursorForPosition((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT QRect * QTextEdit_cursorRect(QTextEdit const * self, QTextCursor const & cursor) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextCursor *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QTextCursor **)&cursor;
  *(QRect **)&cresult = new QRect((const QRect &)((QTextEdit const *)arg1)->cursorRect((QTextCursor const &)*arg2));
  return cresult;
}


SWIGEXPORT QRect * QTextEdit_cursorRect1(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QTextEdit const *)arg1)->cursorRect());
  return cresult;
}


SWIGEXPORT QString * QTextEdit_anchorAt(QTextEdit const * self, QPoint * pos) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QPoint *arg2 = 0 ;
  QString * cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QPoint **)&pos;
  *(QString **)&cresult = new QString((const QString &)((QTextEdit const *)arg1)->anchorAt((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT bool QTextEdit_overwriteMode(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (bool)((QTextEdit const *)arg1)->overwriteMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextEdit_setOverwriteMode(QTextEdit * self, bool overwrite) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = overwrite ? true : false; 
  (arg1)->setOverwriteMode(arg2);
}


SWIGEXPORT int QTextEdit_tabStopWidth(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (int)((QTextEdit const *)arg1)->tabStopWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextEdit_setTabStopWidth(QTextEdit * self, int width) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (int)width; 
  (arg1)->setTabStopWidth(arg2);
}


SWIGEXPORT int QTextEdit_cursorWidth(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (int)((QTextEdit const *)arg1)->cursorWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextEdit_setCursorWidth(QTextEdit * self, int width) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (int)width; 
  (arg1)->setCursorWidth(arg2);
}


SWIGEXPORT bool QTextEdit_acceptRichText(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (bool)((QTextEdit const *)arg1)->acceptRichText();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextEdit_setAcceptRichText(QTextEdit * self, bool accept) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = accept ? true : false; 
  (arg1)->setAcceptRichText(arg2);
}


SWIGEXPORT void QTextEdit_moveCursor(QTextEdit * self, QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextCursor::MoveOperation arg2 ;
  QTextCursor::MoveMode arg3 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (QTextCursor::MoveOperation)operation; 
  arg3 = (QTextCursor::MoveMode)mode; 
  (arg1)->moveCursor(arg2,arg3);
}


SWIGEXPORT void QTextEdit_moveCursor1(QTextEdit * self, QTextCursor::MoveOperation operation) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QTextCursor::MoveOperation arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (QTextCursor::MoveOperation)operation; 
  (arg1)->moveCursor(arg2);
}


SWIGEXPORT bool QTextEdit_canPaste(QTextEdit const * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextEdit **)&self; 
  result = (bool)((QTextEdit const *)arg1)->canPaste();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextEdit_setFontPointSize(QTextEdit * self, double s) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (double)s; 
  (arg1)->setFontPointSize(arg2);
}


SWIGEXPORT void QTextEdit_setFontFamily(QTextEdit * self, QString * fontFamily) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QString **)&fontFamily;
  (arg1)->setFontFamily((QString const &)*arg2);
}


SWIGEXPORT void QTextEdit_setFontWeight(QTextEdit * self, int w) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (int)w; 
  (arg1)->setFontWeight(arg2);
}


SWIGEXPORT void QTextEdit_setFontUnderline(QTextEdit * self, bool b) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = b ? true : false; 
  (arg1)->setFontUnderline(arg2);
}


SWIGEXPORT void QTextEdit_setFontItalic(QTextEdit * self, bool b) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = b ? true : false; 
  (arg1)->setFontItalic(arg2);
}


SWIGEXPORT void QTextEdit_setTextColor(QTextEdit * self, QColor * c) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QColor *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QColor **)&c;
  (arg1)->setTextColor((QColor const &)*arg2);
}


SWIGEXPORT void QTextEdit_setTextBackgroundColor(QTextEdit * self, QColor * c) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QColor *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QColor **)&c;
  (arg1)->setTextBackgroundColor((QColor const &)*arg2);
}


SWIGEXPORT void QTextEdit_setCurrentFont(QTextEdit * self, QFont * f) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QFont *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QFont **)&f;
  (arg1)->setCurrentFont((QFont const &)*arg2);
}


SWIGEXPORT void QTextEdit_setAlignment(QTextEdit * self, Qt::Alignment a) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  Qt::Alignment arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (Qt::Alignment)a; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT void QTextEdit_setPlainText(QTextEdit * self, QString * text) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->setPlainText((QString const &)*arg2);
}


SWIGEXPORT void QTextEdit_setHtml(QTextEdit * self, QString * text) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->setHtml((QString const &)*arg2);
}


SWIGEXPORT void QTextEdit_setText(QTextEdit * self, QString * text) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->setText((QString const &)*arg2);
}


SWIGEXPORT void QTextEdit_cut(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  (arg1)->cut();
}


SWIGEXPORT void QTextEdit_copy(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  (arg1)->copy();
}


SWIGEXPORT void QTextEdit_paste(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  (arg1)->paste();
}


SWIGEXPORT void QTextEdit_undo(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  (arg1)->undo();
}


SWIGEXPORT void QTextEdit_redo(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  (arg1)->redo();
}


SWIGEXPORT void QTextEdit_clear(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  (arg1)->clear();
}


SWIGEXPORT void QTextEdit_selectAll(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  (arg1)->selectAll();
}


SWIGEXPORT void QTextEdit_insertPlainText(QTextEdit * self, QString * text) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->insertPlainText((QString const &)*arg2);
}


SWIGEXPORT void QTextEdit_insertHtml(QTextEdit * self, QString * text) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->insertHtml((QString const &)*arg2);
}


SWIGEXPORT void QTextEdit_append(QTextEdit * self, QString * text) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->append((QString const &)*arg2);
}


SWIGEXPORT void QTextEdit_scrollToAnchor(QTextEdit * self, QString * name) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = *(QString **)&name;
  (arg1)->scrollToAnchor((QString const &)*arg2);
}


SWIGEXPORT void QTextEdit_zoomIn(QTextEdit * self, int range) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (int)range; 
  (arg1)->zoomIn(arg2);
}


SWIGEXPORT void QTextEdit_zoomIn1(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  (arg1)->zoomIn();
}


SWIGEXPORT void QTextEdit_zoomOut(QTextEdit * self, int range) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextEdit **)&self; 
  arg2 = (int)range; 
  (arg1)->zoomOut(arg2);
}


SWIGEXPORT void QTextEdit_zoomOut1(QTextEdit * self) {
  QTextEdit *arg1 = (QTextEdit *) 0 ;
  
  arg1 = *(QTextEdit **)&self; 
  (arg1)->zoomOut();
}


SWIGEXPORT long Modula3_QTextEditToQAbstractScrollArea(long objectRef) {
    long baseptr = 0;
    *(QAbstractScrollArea **)&baseptr = *(QTextEdit **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

