/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qpainter.h>
#define RenderHints QPainter::RenderHints
#define PixmapFragmentHints QPainter::PixmapFragmentHints


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QPainter * New_QPainter0() {
  QPainter *result = 0 ;
  QPainter * cresult ;
  
  result = (QPainter *)new QPainter();
  *(QPainter **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPainter * New_QPainter1(QPaintDevice * m3arg1) {
  QPaintDevice *arg1 = (QPaintDevice *) 0 ;
  QPainter *result = 0 ;
  QPainter * cresult ;
  
  arg1 = *(QPaintDevice **)&m3arg1; 
  result = (QPainter *)new QPainter(arg1);
  *(QPainter **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QPainter(QPainter * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  
  arg1 = *(QPainter **)&self; 
  delete arg1;
}


SWIGEXPORT QPaintDevice * QPainter_device(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPaintDevice *result = 0 ;
  QPaintDevice * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QPaintDevice *)((QPainter const *)arg1)->device();
  *(QPaintDevice **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPainter_begin(QPainter * self, QPaintDevice * m3arg2) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPaintDevice *arg2 = (QPaintDevice *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPaintDevice **)&m3arg2; 
  result = (bool)(arg1)->begin(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPainter_end(QPainter * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (bool)(arg1)->end();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPainter_isActive(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (bool)((QPainter const *)arg1)->isActive();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_initFrom(QPainter * self, QWidget * widget) {
  QPainter *arg1 = (QPainter *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QWidget **)&widget; 
  (arg1)->initFrom((QWidget const *)arg2);
}


SWIGEXPORT void QPainter_setCompositionMode(QPainter * self, QPainter::CompositionMode mode) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPainter::CompositionMode arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (QPainter::CompositionMode)mode; 
  (arg1)->setCompositionMode(arg2);
}


SWIGEXPORT QPainter::CompositionMode QPainter_compositionMode(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPainter::CompositionMode result;
  QPainter::CompositionMode cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QPainter::CompositionMode)((QPainter const *)arg1)->compositionMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QFont * QPainter_font(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QFont *result = 0 ;
  QFont * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QFont *) &((QPainter const *)arg1)->font();
  *(QFont **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_setFont(QPainter * self, QFont * f) {
  QPainter *arg1 = (QPainter *) 0 ;
  QFont *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QFont **)&f;
  (arg1)->setFont((QFont const &)*arg2);
}


SWIGEXPORT QFontMetrics * QPainter_fontMetrics(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QFontMetrics * cresult ;
  
  arg1 = *(QPainter **)&self; 
  *(QFontMetrics **)&cresult = new QFontMetrics((const QFontMetrics &)((QPainter const *)arg1)->fontMetrics());
  return cresult;
}


SWIGEXPORT QFontInfo * QPainter_fontInfo(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QFontInfo * cresult ;
  
  arg1 = *(QPainter **)&self; 
  *(QFontInfo **)&cresult = new QFontInfo((const QFontInfo &)((QPainter const *)arg1)->fontInfo());
  return cresult;
}


SWIGEXPORT void QPainter_setPen(QPainter * self, QColor * color) {
  QPainter *arg1 = (QPainter *) 0 ;
  QColor *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QColor **)&color;
  (arg1)->setPen((QColor const &)*arg2);
}


SWIGEXPORT void QPainter_setPen1(QPainter * self, QPen * pen) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPen *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPen **)&pen;
  (arg1)->setPen((QPen const &)*arg2);
}


SWIGEXPORT void QPainter_setPen2(QPainter * self, Qt::PenStyle style) {
  QPainter *arg1 = (QPainter *) 0 ;
  Qt::PenStyle arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (Qt::PenStyle)style; 
  (arg1)->setPen(arg2);
}


SWIGEXPORT QPen * QPainter_pen(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPen *result = 0 ;
  QPen * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QPen *) &((QPainter const *)arg1)->pen();
  *(QPen **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_setBrush(QPainter * self, QBrush * brush) {
  QPainter *arg1 = (QPainter *) 0 ;
  QBrush *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QBrush **)&brush;
  (arg1)->setBrush((QBrush const &)*arg2);
}


SWIGEXPORT void QPainter_setBrush1(QPainter * self, Qt::BrushStyle style) {
  QPainter *arg1 = (QPainter *) 0 ;
  Qt::BrushStyle arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (Qt::BrushStyle)style; 
  (arg1)->setBrush(arg2);
}


SWIGEXPORT QBrush * QPainter_brush(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QBrush *) &((QPainter const *)arg1)->brush();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_setBackgroundMode(QPainter * self, Qt::BGMode mode) {
  QPainter *arg1 = (QPainter *) 0 ;
  Qt::BGMode arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (Qt::BGMode)mode; 
  (arg1)->setBackgroundMode(arg2);
}


SWIGEXPORT Qt::BGMode QPainter_backgroundMode(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  Qt::BGMode result;
  Qt::BGMode cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (Qt::BGMode)((QPainter const *)arg1)->backgroundMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPoint * QPainter_brushOrigin(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint * cresult ;
  
  arg1 = *(QPainter **)&self; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QPainter const *)arg1)->brushOrigin());
  return cresult;
}


SWIGEXPORT void QPainter_setBrushOrigin(QPainter * self, int x, int y) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  (arg1)->setBrushOrigin(arg2,arg3);
}


SWIGEXPORT void QPainter_setBrushOrigin1(QPainter * self, QPoint * m3arg2) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&m3arg2;
  (arg1)->setBrushOrigin((QPoint const &)*arg2);
}


SWIGEXPORT void QPainter_setBrushOrigin2(QPainter * self, QPointF * m3arg2) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&m3arg2;
  (arg1)->setBrushOrigin((QPointF const &)*arg2);
}


SWIGEXPORT void QPainter_setBackground(QPainter * self, QBrush * bg) {
  QPainter *arg1 = (QPainter *) 0 ;
  QBrush *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QBrush **)&bg;
  (arg1)->setBackground((QBrush const &)*arg2);
}


SWIGEXPORT QBrush * QPainter_background(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QBrush *) &((QPainter const *)arg1)->background();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT double QPainter_opacity(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (double)((QPainter const *)arg1)->opacity();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_setOpacity(QPainter * self, double opacity) {
  QPainter *arg1 = (QPainter *) 0 ;
  double arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (double)opacity; 
  (arg1)->setOpacity(arg2);
}


SWIGEXPORT QRegion * QPainter_clipRegion(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRegion * cresult ;
  
  arg1 = *(QPainter **)&self; 
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QPainter const *)arg1)->clipRegion());
  return cresult;
}


SWIGEXPORT void QPainter_setClipRect(QPainter * self, QRectF * m3arg2, Qt::ClipOperation op) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  Qt::ClipOperation arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&m3arg2;
  arg3 = (Qt::ClipOperation)op; 
  (arg1)->setClipRect((QRectF const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_setClipRect1(QPainter * self, QRectF * m3arg2) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&m3arg2;
  (arg1)->setClipRect((QRectF const &)*arg2);
}


SWIGEXPORT void QPainter_setClipRect2(QPainter * self, QRect * m3arg2, Qt::ClipOperation op) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  Qt::ClipOperation arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&m3arg2;
  arg3 = (Qt::ClipOperation)op; 
  (arg1)->setClipRect((QRect const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_setClipRect3(QPainter * self, QRect * m3arg2) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&m3arg2;
  (arg1)->setClipRect((QRect const &)*arg2);
}


SWIGEXPORT void QPainter_setClipRect4(QPainter * self, int x, int y, int w, int h, Qt::ClipOperation op) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  Qt::ClipOperation arg6 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (Qt::ClipOperation)op; 
  (arg1)->setClipRect(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QPainter_setClipRect5(QPainter * self, int x, int y, int w, int h) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  (arg1)->setClipRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QPainter_setClipRegion(QPainter * self, QRegion * m3arg2, Qt::ClipOperation op) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRegion *arg2 = 0 ;
  Qt::ClipOperation arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRegion **)&m3arg2;
  arg3 = (Qt::ClipOperation)op; 
  (arg1)->setClipRegion((QRegion const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_setClipRegion1(QPainter * self, QRegion * m3arg2) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRegion *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRegion **)&m3arg2;
  (arg1)->setClipRegion((QRegion const &)*arg2);
}


SWIGEXPORT void QPainter_setClipping(QPainter * self, bool enable) {
  QPainter *arg1 = (QPainter *) 0 ;
  bool arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setClipping(arg2);
}


SWIGEXPORT bool QPainter_hasClipping(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (bool)((QPainter const *)arg1)->hasClipping();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRectF * QPainter_clipBoundingRect(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF * cresult ;
  
  arg1 = *(QPainter **)&self; 
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QPainter const *)arg1)->clipBoundingRect());
  return cresult;
}


SWIGEXPORT void QPainter_save(QPainter * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  
  arg1 = *(QPainter **)&self; 
  (arg1)->save();
}


SWIGEXPORT void QPainter_restore(QPainter * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  
  arg1 = *(QPainter **)&self; 
  (arg1)->restore();
}


SWIGEXPORT void QPainter_setMatrix(QPainter * self, QMatrix * matrix, bool combine) {
  QPainter *arg1 = (QPainter *) 0 ;
  QMatrix *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QMatrix **)&matrix;
  arg3 = combine ? true : false; 
  (arg1)->setMatrix((QMatrix const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_setMatrix1(QPainter * self, QMatrix * matrix) {
  QPainter *arg1 = (QPainter *) 0 ;
  QMatrix *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QMatrix **)&matrix;
  (arg1)->setMatrix((QMatrix const &)*arg2);
}


SWIGEXPORT QMatrix * QPainter_matrix(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QMatrix *result = 0 ;
  QMatrix * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QMatrix *) &((QPainter const *)arg1)->matrix();
  *(QMatrix **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMatrix * QPainter_deviceMatrix(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QMatrix *result = 0 ;
  QMatrix * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QMatrix *) &((QPainter const *)arg1)->deviceMatrix();
  *(QMatrix **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_resetMatrix(QPainter * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  
  arg1 = *(QPainter **)&self; 
  (arg1)->resetMatrix();
}


SWIGEXPORT void QPainter_setTransform(QPainter * self, QTransform * transform, bool combine) {
  QPainter *arg1 = (QPainter *) 0 ;
  QTransform *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QTransform **)&transform;
  arg3 = combine ? true : false; 
  (arg1)->setTransform((QTransform const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_setTransform1(QPainter * self, QTransform * transform) {
  QPainter *arg1 = (QPainter *) 0 ;
  QTransform *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QTransform **)&transform;
  (arg1)->setTransform((QTransform const &)*arg2);
}


SWIGEXPORT QTransform * QPainter_transform(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QTransform *) &((QPainter const *)arg1)->transform();
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QPainter_deviceTransform(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QTransform *) &((QPainter const *)arg1)->deviceTransform();
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_resetTransform(QPainter * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  
  arg1 = *(QPainter **)&self; 
  (arg1)->resetTransform();
}


SWIGEXPORT void QPainter_setWorldMatrix(QPainter * self, QMatrix * matrix, bool combine) {
  QPainter *arg1 = (QPainter *) 0 ;
  QMatrix *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QMatrix **)&matrix;
  arg3 = combine ? true : false; 
  (arg1)->setWorldMatrix((QMatrix const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_setWorldMatrix1(QPainter * self, QMatrix * matrix) {
  QPainter *arg1 = (QPainter *) 0 ;
  QMatrix *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QMatrix **)&matrix;
  (arg1)->setWorldMatrix((QMatrix const &)*arg2);
}


SWIGEXPORT QMatrix * QPainter_worldMatrix(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QMatrix *result = 0 ;
  QMatrix * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QMatrix *) &((QPainter const *)arg1)->worldMatrix();
  *(QMatrix **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_setWorldTransform(QPainter * self, QTransform * matrix, bool combine) {
  QPainter *arg1 = (QPainter *) 0 ;
  QTransform *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QTransform **)&matrix;
  arg3 = combine ? true : false; 
  (arg1)->setWorldTransform((QTransform const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_setWorldTransform1(QPainter * self, QTransform * matrix) {
  QPainter *arg1 = (QPainter *) 0 ;
  QTransform *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QTransform **)&matrix;
  (arg1)->setWorldTransform((QTransform const &)*arg2);
}


SWIGEXPORT QTransform * QPainter_worldTransform(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QTransform *) &((QPainter const *)arg1)->worldTransform();
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMatrix * QPainter_combinedMatrix(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QMatrix * cresult ;
  
  arg1 = *(QPainter **)&self; 
  *(QMatrix **)&cresult = new QMatrix((const QMatrix &)((QPainter const *)arg1)->combinedMatrix());
  return cresult;
}


SWIGEXPORT QTransform * QPainter_combinedTransform(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QTransform * cresult ;
  
  arg1 = *(QPainter **)&self; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)((QPainter const *)arg1)->combinedTransform());
  return cresult;
}


SWIGEXPORT void QPainter_setMatrixEnabled(QPainter * self, bool enabled) {
  QPainter *arg1 = (QPainter *) 0 ;
  bool arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = enabled ? true : false; 
  (arg1)->setMatrixEnabled(arg2);
}


SWIGEXPORT bool QPainter_matrixEnabled(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (bool)((QPainter const *)arg1)->matrixEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_setWorldMatrixEnabled(QPainter * self, bool enabled) {
  QPainter *arg1 = (QPainter *) 0 ;
  bool arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = enabled ? true : false; 
  (arg1)->setWorldMatrixEnabled(arg2);
}


SWIGEXPORT bool QPainter_worldMatrixEnabled(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (bool)((QPainter const *)arg1)->worldMatrixEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_scale(QPainter * self, double sx, double sy) {
  QPainter *arg1 = (QPainter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (double)sx; 
  arg3 = (double)sy; 
  (arg1)->scale(arg2,arg3);
}


SWIGEXPORT void QPainter_shear(QPainter * self, double sh, double sv) {
  QPainter *arg1 = (QPainter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (double)sh; 
  arg3 = (double)sv; 
  (arg1)->shear(arg2,arg3);
}


SWIGEXPORT void QPainter_rotate(QPainter * self, double a) {
  QPainter *arg1 = (QPainter *) 0 ;
  double arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (double)a; 
  (arg1)->rotate(arg2);
}


SWIGEXPORT void QPainter_translate(QPainter * self, QPointF * offset) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&offset;
  (arg1)->translate((QPointF const &)*arg2);
}


SWIGEXPORT void QPainter_translate1(QPainter * self, QPoint * offset) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&offset;
  (arg1)->translate((QPoint const &)*arg2);
}


SWIGEXPORT void QPainter_translate2(QPainter * self, double dx, double dy) {
  QPainter *arg1 = (QPainter *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (double)dx; 
  arg3 = (double)dy; 
  (arg1)->translate(arg2,arg3);
}


SWIGEXPORT QRect * QPainter_window(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QPainter **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QPainter const *)arg1)->window());
  return cresult;
}


SWIGEXPORT void QPainter_setWindow(QPainter * self, QRect * window) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&window;
  (arg1)->setWindow((QRect const &)*arg2);
}


SWIGEXPORT void QPainter_setWindow1(QPainter * self, int x, int y, int w, int h) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  (arg1)->setWindow(arg2,arg3,arg4,arg5);
}


SWIGEXPORT QRect * QPainter_viewport(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QPainter **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QPainter const *)arg1)->viewport());
  return cresult;
}


SWIGEXPORT void QPainter_setViewport(QPainter * self, QRect * viewport) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&viewport;
  (arg1)->setViewport((QRect const &)*arg2);
}


SWIGEXPORT void QPainter_setViewport1(QPainter * self, int x, int y, int w, int h) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  (arg1)->setViewport(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QPainter_setViewTransformEnabled(QPainter * self, bool enable) {
  QPainter *arg1 = (QPainter *) 0 ;
  bool arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setViewTransformEnabled(arg2);
}


SWIGEXPORT bool QPainter_viewTransformEnabled(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (bool)((QPainter const *)arg1)->viewTransformEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_drawPoint(QPainter * self, QPointF * pt) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&pt;
  (arg1)->drawPoint((QPointF const &)*arg2);
}


SWIGEXPORT void QPainter_drawPoint1(QPainter * self, QPoint * p) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->drawPoint((QPoint const &)*arg2);
}


SWIGEXPORT void QPainter_drawPoint2(QPainter * self, int x, int y) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  (arg1)->drawPoint(arg2,arg3);
}


SWIGEXPORT void QPainter_drawPoints(QPainter * self, QPointF * points, int pointCount) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = (QPointF *) 0 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&points; 
  arg3 = (int)pointCount; 
  (arg1)->drawPoints((QPointF const *)arg2,arg3);
}


SWIGEXPORT void QPainter_drawPoints1(QPainter * self, QPolygonF * points) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPolygonF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPolygonF **)&points;
  (arg1)->drawPoints((QPolygonF const &)*arg2);
}


SWIGEXPORT void QPainter_drawPoints2(QPainter * self, QPoint * points, int pointCount) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = (QPoint *) 0 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&points; 
  arg3 = (int)pointCount; 
  (arg1)->drawPoints((QPoint const *)arg2,arg3);
}


SWIGEXPORT void QPainter_drawPoints3(QPainter * self, QPolygon * points) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPolygon *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPolygon **)&points;
  (arg1)->drawPoints((QPolygon const &)*arg2);
}


SWIGEXPORT void QPainter_drawLine(QPainter * self, QLineF * line) {
  QPainter *arg1 = (QPainter *) 0 ;
  QLineF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QLineF **)&line;
  (arg1)->drawLine((QLineF const &)*arg2);
}


SWIGEXPORT void QPainter_drawLine1(QPainter * self, QLine * line) {
  QPainter *arg1 = (QPainter *) 0 ;
  QLine *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QLine **)&line;
  (arg1)->drawLine((QLine const &)*arg2);
}


SWIGEXPORT void QPainter_drawLine2(QPainter * self, int x1, int y1, int x2, int y2) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x1; 
  arg3 = (int)y1; 
  arg4 = (int)x2; 
  arg5 = (int)y2; 
  (arg1)->drawLine(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QPainter_drawLine3(QPainter * self, QPoint * p1, QPoint * p2) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  QPoint *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&p1;
  arg3 = *(QPoint **)&p2;
  (arg1)->drawLine((QPoint const &)*arg2,(QPoint const &)*arg3);
}


SWIGEXPORT void QPainter_drawLine4(QPainter * self, QPointF * p1, QPointF * p2) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  QPointF *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&p1;
  arg3 = *(QPointF **)&p2;
  (arg1)->drawLine((QPointF const &)*arg2,(QPointF const &)*arg3);
}


SWIGEXPORT void QPainter_drawRect(QPainter * self, QRectF * rect) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&rect;
  (arg1)->drawRect((QRectF const &)*arg2);
}


SWIGEXPORT void QPainter_drawRect1(QPainter * self, int x1, int y1, int w, int h) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x1; 
  arg3 = (int)y1; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  (arg1)->drawRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QPainter_drawRect2(QPainter * self, QRect * rect) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&rect;
  (arg1)->drawRect((QRect const &)*arg2);
}


SWIGEXPORT void QPainter_drawEllipse(QPainter * self, QRectF * r) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&r;
  (arg1)->drawEllipse((QRectF const &)*arg2);
}


SWIGEXPORT void QPainter_drawEllipse1(QPainter * self, QRect * r) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&r;
  (arg1)->drawEllipse((QRect const &)*arg2);
}


SWIGEXPORT void QPainter_drawEllipse2(QPainter * self, int x, int y, int w, int h) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QPainter_drawEllipse3(QPainter * self, QPointF * center, double rx, double ry) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&center;
  arg3 = (double)rx; 
  arg4 = (double)ry; 
  (arg1)->drawEllipse((QPointF const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawEllipse4(QPainter * self, QPoint * center, int rx, int ry) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&center;
  arg3 = (int)rx; 
  arg4 = (int)ry; 
  (arg1)->drawEllipse((QPoint const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawPolyline(QPainter * self, QPointF * points, int pointCount) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = (QPointF *) 0 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&points; 
  arg3 = (int)pointCount; 
  (arg1)->drawPolyline((QPointF const *)arg2,arg3);
}


SWIGEXPORT void QPainter_drawPolyline1(QPainter * self, QPolygonF * polyline) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPolygonF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPolygonF **)&polyline;
  (arg1)->drawPolyline((QPolygonF const &)*arg2);
}


SWIGEXPORT void QPainter_drawPolyline2(QPainter * self, QPoint * points, int pointCount) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = (QPoint *) 0 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&points; 
  arg3 = (int)pointCount; 
  (arg1)->drawPolyline((QPoint const *)arg2,arg3);
}


SWIGEXPORT void QPainter_drawPolyline3(QPainter * self, QPolygon * polygon) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPolygon *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPolygon **)&polygon;
  (arg1)->drawPolyline((QPolygon const &)*arg2);
}


SWIGEXPORT void QPainter_drawPolygon(QPainter * self, QPointF * points, int pointCount, Qt::FillRule fillRule) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = (QPointF *) 0 ;
  int arg3 ;
  Qt::FillRule arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&points; 
  arg3 = (int)pointCount; 
  arg4 = (Qt::FillRule)fillRule; 
  (arg1)->drawPolygon((QPointF const *)arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawPolygon1(QPainter * self, QPointF * points, int pointCount) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = (QPointF *) 0 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&points; 
  arg3 = (int)pointCount; 
  (arg1)->drawPolygon((QPointF const *)arg2,arg3);
}


SWIGEXPORT void QPainter_drawPolygon2(QPainter * self, QPolygonF * polygon, Qt::FillRule fillRule) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPolygonF *arg2 = 0 ;
  Qt::FillRule arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPolygonF **)&polygon;
  arg3 = (Qt::FillRule)fillRule; 
  (arg1)->drawPolygon((QPolygonF const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_drawPolygon3(QPainter * self, QPolygonF * polygon) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPolygonF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPolygonF **)&polygon;
  (arg1)->drawPolygon((QPolygonF const &)*arg2);
}


SWIGEXPORT void QPainter_drawPolygon4(QPainter * self, QPoint * points, int pointCount, Qt::FillRule fillRule) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = (QPoint *) 0 ;
  int arg3 ;
  Qt::FillRule arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&points; 
  arg3 = (int)pointCount; 
  arg4 = (Qt::FillRule)fillRule; 
  (arg1)->drawPolygon((QPoint const *)arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawPolygon5(QPainter * self, QPoint * points, int pointCount) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = (QPoint *) 0 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&points; 
  arg3 = (int)pointCount; 
  (arg1)->drawPolygon((QPoint const *)arg2,arg3);
}


SWIGEXPORT void QPainter_drawPolygon6(QPainter * self, QPolygon * polygon, Qt::FillRule fillRule) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPolygon *arg2 = 0 ;
  Qt::FillRule arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPolygon **)&polygon;
  arg3 = (Qt::FillRule)fillRule; 
  (arg1)->drawPolygon((QPolygon const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_drawPolygon7(QPainter * self, QPolygon * polygon) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPolygon *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPolygon **)&polygon;
  (arg1)->drawPolygon((QPolygon const &)*arg2);
}


SWIGEXPORT void QPainter_drawConvexPolygon(QPainter * self, QPointF * points, int pointCount) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = (QPointF *) 0 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&points; 
  arg3 = (int)pointCount; 
  (arg1)->drawConvexPolygon((QPointF const *)arg2,arg3);
}


SWIGEXPORT void QPainter_drawConvexPolygon1(QPainter * self, QPolygonF * polygon) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPolygonF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPolygonF **)&polygon;
  (arg1)->drawConvexPolygon((QPolygonF const &)*arg2);
}


SWIGEXPORT void QPainter_drawConvexPolygon2(QPainter * self, QPoint * points, int pointCount) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = (QPoint *) 0 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&points; 
  arg3 = (int)pointCount; 
  (arg1)->drawConvexPolygon((QPoint const *)arg2,arg3);
}


SWIGEXPORT void QPainter_drawConvexPolygon3(QPainter * self, QPolygon * polygon) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPolygon *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPolygon **)&polygon;
  (arg1)->drawConvexPolygon((QPolygon const &)*arg2);
}


SWIGEXPORT void QPainter_drawArc(QPainter * self, QRectF * rect, int a, int alen) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&rect;
  arg3 = (int)a; 
  arg4 = (int)alen; 
  (arg1)->drawArc((QRectF const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawArc1(QPainter * self, QRect * m3arg2, int a, int alen) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&m3arg2;
  arg3 = (int)a; 
  arg4 = (int)alen; 
  (arg1)->drawArc((QRect const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawArc2(QPainter * self, int x, int y, int w, int h, int a, int alen) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (int)a; 
  arg7 = (int)alen; 
  (arg1)->drawArc(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QPainter_drawPie(QPainter * self, QRectF * rect, int a, int alen) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&rect;
  arg3 = (int)a; 
  arg4 = (int)alen; 
  (arg1)->drawPie((QRectF const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawPie1(QPainter * self, int x, int y, int w, int h, int a, int alen) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (int)a; 
  arg7 = (int)alen; 
  (arg1)->drawPie(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QPainter_drawPie2(QPainter * self, QRect * m3arg2, int a, int alen) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&m3arg2;
  arg3 = (int)a; 
  arg4 = (int)alen; 
  (arg1)->drawPie((QRect const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawChord(QPainter * self, QRectF * rect, int a, int alen) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&rect;
  arg3 = (int)a; 
  arg4 = (int)alen; 
  (arg1)->drawChord((QRectF const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawChord1(QPainter * self, int x, int y, int w, int h, int a, int alen) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (int)a; 
  arg7 = (int)alen; 
  (arg1)->drawChord(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QPainter_drawChord2(QPainter * self, QRect * m3arg2, int a, int alen) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&m3arg2;
  arg3 = (int)a; 
  arg4 = (int)alen; 
  (arg1)->drawChord((QRect const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawRoundedRect(QPainter * self, QRectF * rect, double xRadius, double yRadius, Qt::SizeMode mode) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  Qt::SizeMode arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&rect;
  arg3 = (double)xRadius; 
  arg4 = (double)yRadius; 
  arg5 = (Qt::SizeMode)mode; 
  (arg1)->drawRoundedRect((QRectF const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QPainter_drawRoundedRect1(QPainter * self, QRectF * rect, double xRadius, double yRadius) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&rect;
  arg3 = (double)xRadius; 
  arg4 = (double)yRadius; 
  (arg1)->drawRoundedRect((QRectF const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawRoundedRect2(QPainter * self, int x, int y, int w, int h, double xRadius, double yRadius, Qt::SizeMode mode) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  Qt::SizeMode arg8 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (double)xRadius; 
  arg7 = (double)yRadius; 
  arg8 = (Qt::SizeMode)mode; 
  (arg1)->drawRoundedRect(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void QPainter_drawRoundedRect3(QPainter * self, int x, int y, int w, int h, double xRadius, double yRadius) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  double arg7 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (double)xRadius; 
  arg7 = (double)yRadius; 
  (arg1)->drawRoundedRect(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QPainter_drawRoundedRect4(QPainter * self, QRect * rect, double xRadius, double yRadius, Qt::SizeMode mode) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  Qt::SizeMode arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&rect;
  arg3 = (double)xRadius; 
  arg4 = (double)yRadius; 
  arg5 = (Qt::SizeMode)mode; 
  (arg1)->drawRoundedRect((QRect const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QPainter_drawRoundedRect5(QPainter * self, QRect * rect, double xRadius, double yRadius) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&rect;
  arg3 = (double)xRadius; 
  arg4 = (double)yRadius; 
  (arg1)->drawRoundedRect((QRect const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawRoundRect(QPainter * self, QRectF * r, int xround, int yround) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&r;
  arg3 = (int)xround; 
  arg4 = (int)yround; 
  (arg1)->drawRoundRect((QRectF const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawRoundRect1(QPainter * self, QRectF * r, int xround) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&r;
  arg3 = (int)xround; 
  (arg1)->drawRoundRect((QRectF const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_drawRoundRect2(QPainter * self, QRectF * r) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&r;
  (arg1)->drawRoundRect((QRectF const &)*arg2);
}


SWIGEXPORT void QPainter_drawRoundRect3(QPainter * self, int x, int y, int w, int h, int m3arg6, int m3arg7) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (int)m3arg6; 
  arg7 = (int)m3arg7; 
  (arg1)->drawRoundRect(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QPainter_drawRoundRect4(QPainter * self, int x, int y, int w, int h, int m3arg6) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (int)m3arg6; 
  (arg1)->drawRoundRect(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QPainter_drawRoundRect5(QPainter * self, int x, int y, int w, int h) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  (arg1)->drawRoundRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QPainter_drawRoundRect6(QPainter * self, QRect * r, int xround, int yround) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&r;
  arg3 = (int)xround; 
  arg4 = (int)yround; 
  (arg1)->drawRoundRect((QRect const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QPainter_drawRoundRect7(QPainter * self, QRect * r, int xround) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&r;
  arg3 = (int)xround; 
  (arg1)->drawRoundRect((QRect const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_drawRoundRect8(QPainter * self, QRect * r) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&r;
  (arg1)->drawRoundRect((QRect const &)*arg2);
}


SWIGEXPORT void QPainter_drawTiledPixmap(QPainter * self, QRectF * rect, QPixmap * pm, QPointF * offset) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  QPixmap *arg3 = 0 ;
  QPointF *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&rect;
  arg3 = *(QPixmap **)&pm;
  arg4 = *(QPointF **)&offset;
  (arg1)->drawTiledPixmap((QRectF const &)*arg2,(QPixmap const &)*arg3,(QPointF const &)*arg4);
}


SWIGEXPORT void QPainter_drawTiledPixmap1(QPainter * self, QRectF * rect, QPixmap * pm) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  QPixmap *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&rect;
  arg3 = *(QPixmap **)&pm;
  (arg1)->drawTiledPixmap((QRectF const &)*arg2,(QPixmap const &)*arg3);
}


SWIGEXPORT void QPainter_drawTiledPixmap2(QPainter * self, int x, int y, int w, int h, QPixmap * m3arg6, int sx, int sy) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QPixmap *arg6 = 0 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = *(QPixmap **)&m3arg6;
  arg7 = (int)sx; 
  arg8 = (int)sy; 
  (arg1)->drawTiledPixmap(arg2,arg3,arg4,arg5,(QPixmap const &)*arg6,arg7,arg8);
}


SWIGEXPORT void QPainter_drawTiledPixmap3(QPainter * self, int x, int y, int w, int h, QPixmap * m3arg6, int sx) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QPixmap *arg6 = 0 ;
  int arg7 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = *(QPixmap **)&m3arg6;
  arg7 = (int)sx; 
  (arg1)->drawTiledPixmap(arg2,arg3,arg4,arg5,(QPixmap const &)*arg6,arg7);
}


SWIGEXPORT void QPainter_drawTiledPixmap4(QPainter * self, int x, int y, int w, int h, QPixmap * m3arg6) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QPixmap *arg6 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = *(QPixmap **)&m3arg6;
  (arg1)->drawTiledPixmap(arg2,arg3,arg4,arg5,(QPixmap const &)*arg6);
}


SWIGEXPORT void QPainter_drawTiledPixmap5(QPainter * self, QRect * m3arg2, QPixmap * m3arg3, QPoint * m3arg4) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  QPixmap *arg3 = 0 ;
  QPoint *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&m3arg2;
  arg3 = *(QPixmap **)&m3arg3;
  arg4 = *(QPoint **)&m3arg4;
  (arg1)->drawTiledPixmap((QRect const &)*arg2,(QPixmap const &)*arg3,(QPoint const &)*arg4);
}


SWIGEXPORT void QPainter_drawTiledPixmap6(QPainter * self, QRect * m3arg2, QPixmap * m3arg3) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  QPixmap *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&m3arg2;
  arg3 = *(QPixmap **)&m3arg3;
  (arg1)->drawTiledPixmap((QRect const &)*arg2,(QPixmap const &)*arg3);
}


SWIGEXPORT void QPainter_drawPicture(QPainter * self, QPointF * p, QPicture * picture) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  QPicture *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&p;
  arg3 = *(QPicture **)&picture;
  (arg1)->drawPicture((QPointF const &)*arg2,(QPicture const &)*arg3);
}


SWIGEXPORT void QPainter_drawPicture1(QPainter * self, int x, int y, QPicture * picture) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  QPicture *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = *(QPicture **)&picture;
  (arg1)->drawPicture(arg2,arg3,(QPicture const &)*arg4);
}


SWIGEXPORT void QPainter_drawPicture2(QPainter * self, QPoint * p, QPicture * picture) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  QPicture *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&p;
  arg3 = *(QPicture **)&picture;
  (arg1)->drawPicture((QPoint const &)*arg2,(QPicture const &)*arg3);
}


SWIGEXPORT void QPainter_drawPixmap(QPainter * self, QRectF * targetRect, QPixmap * pixmap, QRectF * sourceRect) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  QPixmap *arg3 = 0 ;
  QRectF *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&targetRect;
  arg3 = *(QPixmap **)&pixmap;
  arg4 = *(QRectF **)&sourceRect;
  (arg1)->drawPixmap((QRectF const &)*arg2,(QPixmap const &)*arg3,(QRectF const &)*arg4);
}


SWIGEXPORT void QPainter_drawPixmap1(QPainter * self, QRect * targetRect, QPixmap * pixmap, QRect * sourceRect) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  QPixmap *arg3 = 0 ;
  QRect *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&targetRect;
  arg3 = *(QPixmap **)&pixmap;
  arg4 = *(QRect **)&sourceRect;
  (arg1)->drawPixmap((QRect const &)*arg2,(QPixmap const &)*arg3,(QRect const &)*arg4);
}


SWIGEXPORT void QPainter_drawPixmap2(QPainter * self, int x, int y, int w, int h, QPixmap * pm, int sx, int sy, int sw, int sh) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QPixmap *arg6 = 0 ;
  int arg7 ;
  int arg8 ;
  int arg9 ;
  int arg10 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = *(QPixmap **)&pm;
  arg7 = (int)sx; 
  arg8 = (int)sy; 
  arg9 = (int)sw; 
  arg10 = (int)sh; 
  (arg1)->drawPixmap(arg2,arg3,arg4,arg5,(QPixmap const &)*arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void QPainter_drawPixmap3(QPainter * self, int x, int y, QPixmap * pm, int sx, int sy, int sw, int sh) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  QPixmap *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = *(QPixmap **)&pm;
  arg5 = (int)sx; 
  arg6 = (int)sy; 
  arg7 = (int)sw; 
  arg8 = (int)sh; 
  (arg1)->drawPixmap(arg2,arg3,(QPixmap const &)*arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void QPainter_drawPixmap4(QPainter * self, QPointF * p, QPixmap * pm, QRectF * sr) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  QPixmap *arg3 = 0 ;
  QRectF *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&p;
  arg3 = *(QPixmap **)&pm;
  arg4 = *(QRectF **)&sr;
  (arg1)->drawPixmap((QPointF const &)*arg2,(QPixmap const &)*arg3,(QRectF const &)*arg4);
}


SWIGEXPORT void QPainter_drawPixmap5(QPainter * self, QPoint * p, QPixmap * pm, QRect * sr) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  QPixmap *arg3 = 0 ;
  QRect *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&p;
  arg3 = *(QPixmap **)&pm;
  arg4 = *(QRect **)&sr;
  (arg1)->drawPixmap((QPoint const &)*arg2,(QPixmap const &)*arg3,(QRect const &)*arg4);
}


SWIGEXPORT void QPainter_drawPixmap6(QPainter * self, QPointF * p, QPixmap * pm) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  QPixmap *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&p;
  arg3 = *(QPixmap **)&pm;
  (arg1)->drawPixmap((QPointF const &)*arg2,(QPixmap const &)*arg3);
}


SWIGEXPORT void QPainter_drawPixmap7(QPainter * self, QPoint * p, QPixmap * pm) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  QPixmap *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&p;
  arg3 = *(QPixmap **)&pm;
  (arg1)->drawPixmap((QPoint const &)*arg2,(QPixmap const &)*arg3);
}


SWIGEXPORT void QPainter_drawPixmap8(QPainter * self, int x, int y, QPixmap * pm) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  QPixmap *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = *(QPixmap **)&pm;
  (arg1)->drawPixmap(arg2,arg3,(QPixmap const &)*arg4);
}


SWIGEXPORT void QPainter_drawPixmap9(QPainter * self, QRect * r, QPixmap * pm) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  QPixmap *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&r;
  arg3 = *(QPixmap **)&pm;
  (arg1)->drawPixmap((QRect const &)*arg2,(QPixmap const &)*arg3);
}


SWIGEXPORT void QPainter_drawPixmap10(QPainter * self, int x, int y, int w, int h, QPixmap * pm) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QPixmap *arg6 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = *(QPixmap **)&pm;
  (arg1)->drawPixmap(arg2,arg3,arg4,arg5,(QPixmap const &)*arg6);
}


SWIGEXPORT void QPainter_drawImage(QPainter * self, QRectF * targetRect, QImage * image, QRectF * sourceRect, int flags) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  QImage *arg3 = 0 ;
  QRectF *arg4 = 0 ;
  Qt::ImageConversionFlags arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&targetRect;
  arg3 = *(QImage **)&image;
  arg4 = *(QRectF **)&sourceRect;
  arg5 = (Qt::ImageConversionFlags)flags; 
  (arg1)->drawImage((QRectF const &)*arg2,(QImage const &)*arg3,(QRectF const &)*arg4,arg5);
}


SWIGEXPORT void QPainter_drawImage1(QPainter * self, QRectF * targetRect, QImage * image, QRectF * sourceRect) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  QImage *arg3 = 0 ;
  QRectF *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&targetRect;
  arg3 = *(QImage **)&image;
  arg4 = *(QRectF **)&sourceRect;
  (arg1)->drawImage((QRectF const &)*arg2,(QImage const &)*arg3,(QRectF const &)*arg4);
}


SWIGEXPORT void QPainter_drawImage2(QPainter * self, QRect * targetRect, QImage * image, QRect * sourceRect, int flags) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  QImage *arg3 = 0 ;
  QRect *arg4 = 0 ;
  Qt::ImageConversionFlags arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&targetRect;
  arg3 = *(QImage **)&image;
  arg4 = *(QRect **)&sourceRect;
  arg5 = (Qt::ImageConversionFlags)flags; 
  (arg1)->drawImage((QRect const &)*arg2,(QImage const &)*arg3,(QRect const &)*arg4,arg5);
}


SWIGEXPORT void QPainter_drawImage3(QPainter * self, QRect * targetRect, QImage * image, QRect * sourceRect) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  QImage *arg3 = 0 ;
  QRect *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&targetRect;
  arg3 = *(QImage **)&image;
  arg4 = *(QRect **)&sourceRect;
  (arg1)->drawImage((QRect const &)*arg2,(QImage const &)*arg3,(QRect const &)*arg4);
}


SWIGEXPORT void QPainter_drawImage4(QPainter * self, QPointF * p, QImage * image, QRectF * sr, int flags) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  QImage *arg3 = 0 ;
  QRectF *arg4 = 0 ;
  Qt::ImageConversionFlags arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&p;
  arg3 = *(QImage **)&image;
  arg4 = *(QRectF **)&sr;
  arg5 = (Qt::ImageConversionFlags)flags; 
  (arg1)->drawImage((QPointF const &)*arg2,(QImage const &)*arg3,(QRectF const &)*arg4,arg5);
}


SWIGEXPORT void QPainter_drawImage5(QPainter * self, QPointF * p, QImage * image, QRectF * sr) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  QImage *arg3 = 0 ;
  QRectF *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&p;
  arg3 = *(QImage **)&image;
  arg4 = *(QRectF **)&sr;
  (arg1)->drawImage((QPointF const &)*arg2,(QImage const &)*arg3,(QRectF const &)*arg4);
}


SWIGEXPORT void QPainter_drawImage6(QPainter * self, QPoint * p, QImage * image, QRect * sr, int flags) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  QImage *arg3 = 0 ;
  QRect *arg4 = 0 ;
  Qt::ImageConversionFlags arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&p;
  arg3 = *(QImage **)&image;
  arg4 = *(QRect **)&sr;
  arg5 = (Qt::ImageConversionFlags)flags; 
  (arg1)->drawImage((QPoint const &)*arg2,(QImage const &)*arg3,(QRect const &)*arg4,arg5);
}


SWIGEXPORT void QPainter_drawImage7(QPainter * self, QPoint * p, QImage * image, QRect * sr) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  QImage *arg3 = 0 ;
  QRect *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&p;
  arg3 = *(QImage **)&image;
  arg4 = *(QRect **)&sr;
  (arg1)->drawImage((QPoint const &)*arg2,(QImage const &)*arg3,(QRect const &)*arg4);
}


SWIGEXPORT void QPainter_drawImage8(QPainter * self, QRectF * r, QImage * image) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  QImage *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&r;
  arg3 = *(QImage **)&image;
  (arg1)->drawImage((QRectF const &)*arg2,(QImage const &)*arg3);
}


SWIGEXPORT void QPainter_drawImage9(QPainter * self, QRect * r, QImage * image) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  QImage *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&r;
  arg3 = *(QImage **)&image;
  (arg1)->drawImage((QRect const &)*arg2,(QImage const &)*arg3);
}


SWIGEXPORT void QPainter_drawImage10(QPainter * self, QPointF * p, QImage * image) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  QImage *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&p;
  arg3 = *(QImage **)&image;
  (arg1)->drawImage((QPointF const &)*arg2,(QImage const &)*arg3);
}


SWIGEXPORT void QPainter_drawImage11(QPainter * self, QPoint * p, QImage * image) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  QImage *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&p;
  arg3 = *(QImage **)&image;
  (arg1)->drawImage((QPoint const &)*arg2,(QImage const &)*arg3);
}


SWIGEXPORT void QPainter_drawImage12(QPainter * self, int x, int y, QImage * image, int sx, int sy, int sw, int sh, int flags) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  QImage *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  Qt::ImageConversionFlags arg9 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = *(QImage **)&image;
  arg5 = (int)sx; 
  arg6 = (int)sy; 
  arg7 = (int)sw; 
  arg8 = (int)sh; 
  arg9 = (Qt::ImageConversionFlags)flags; 
  (arg1)->drawImage(arg2,arg3,(QImage const &)*arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void QPainter_drawImage13(QPainter * self, int x, int y, QImage * image, int sx, int sy, int sw, int sh) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  QImage *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = *(QImage **)&image;
  arg5 = (int)sx; 
  arg6 = (int)sy; 
  arg7 = (int)sw; 
  arg8 = (int)sh; 
  (arg1)->drawImage(arg2,arg3,(QImage const &)*arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void QPainter_drawImage14(QPainter * self, int x, int y, QImage * image, int sx, int sy, int sw) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  QImage *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = *(QImage **)&image;
  arg5 = (int)sx; 
  arg6 = (int)sy; 
  arg7 = (int)sw; 
  (arg1)->drawImage(arg2,arg3,(QImage const &)*arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QPainter_drawImage15(QPainter * self, int x, int y, QImage * image, int sx, int sy) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  QImage *arg4 = 0 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = *(QImage **)&image;
  arg5 = (int)sx; 
  arg6 = (int)sy; 
  (arg1)->drawImage(arg2,arg3,(QImage const &)*arg4,arg5,arg6);
}


SWIGEXPORT void QPainter_drawImage16(QPainter * self, int x, int y, QImage * image, int sx) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  QImage *arg4 = 0 ;
  int arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = *(QImage **)&image;
  arg5 = (int)sx; 
  (arg1)->drawImage(arg2,arg3,(QImage const &)*arg4,arg5);
}


SWIGEXPORT void QPainter_drawImage17(QPainter * self, int x, int y, QImage * image) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  QImage *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = *(QImage **)&image;
  (arg1)->drawImage(arg2,arg3,(QImage const &)*arg4);
}


SWIGEXPORT void QPainter_setLayoutDirection(QPainter * self, Qt::LayoutDirection direction) {
  QPainter *arg1 = (QPainter *) 0 ;
  Qt::LayoutDirection arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (Qt::LayoutDirection)direction; 
  (arg1)->setLayoutDirection(arg2);
}


SWIGEXPORT Qt::LayoutDirection QPainter_layoutDirection(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  Qt::LayoutDirection result;
  Qt::LayoutDirection cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (Qt::LayoutDirection)((QPainter const *)arg1)->layoutDirection();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPainter_drawTextItem(QPainter * self, QPointF * p, QTextItem * ti) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPointF *arg2 = 0 ;
  QTextItem *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPointF **)&p;
  arg3 = *(QTextItem **)&ti;
  (arg1)->drawTextItem((QPointF const &)*arg2,(QTextItem const &)*arg3);
}


SWIGEXPORT void QPainter_drawTextItem1(QPainter * self, int x, int y, QTextItem * ti) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  QTextItem *arg4 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = *(QTextItem **)&ti;
  (arg1)->drawTextItem(arg2,arg3,(QTextItem const &)*arg4);
}


SWIGEXPORT void QPainter_drawTextItem2(QPainter * self, QPoint * p, QTextItem * ti) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPoint *arg2 = 0 ;
  QTextItem *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QPoint **)&p;
  arg3 = *(QTextItem **)&ti;
  (arg1)->drawTextItem((QPoint const &)*arg2,(QTextItem const &)*arg3);
}


SWIGEXPORT void QPainter_fillRect(QPainter * self, QRectF * m3arg2, QBrush * m3arg3) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  QBrush *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&m3arg2;
  arg3 = *(QBrush **)&m3arg3;
  (arg1)->fillRect((QRectF const &)*arg2,(QBrush const &)*arg3);
}


SWIGEXPORT void QPainter_fillRect1(QPainter * self, int x, int y, int w, int h, QBrush * m3arg6) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QBrush *arg6 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = *(QBrush **)&m3arg6;
  (arg1)->fillRect(arg2,arg3,arg4,arg5,(QBrush const &)*arg6);
}


SWIGEXPORT void QPainter_fillRect2(QPainter * self, QRect * m3arg2, QBrush * m3arg3) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  QBrush *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&m3arg2;
  arg3 = *(QBrush **)&m3arg3;
  (arg1)->fillRect((QRect const &)*arg2,(QBrush const &)*arg3);
}


SWIGEXPORT void QPainter_fillRect3(QPainter * self, QRectF * m3arg2, QColor * color) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  QColor *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&m3arg2;
  arg3 = *(QColor **)&color;
  (arg1)->fillRect((QRectF const &)*arg2,(QColor const &)*arg3);
}


SWIGEXPORT void QPainter_fillRect4(QPainter * self, int x, int y, int w, int h, QColor * color) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QColor *arg6 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = *(QColor **)&color;
  (arg1)->fillRect(arg2,arg3,arg4,arg5,(QColor const &)*arg6);
}


SWIGEXPORT void QPainter_fillRect5(QPainter * self, QRect * m3arg2, QColor * color) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  QColor *arg3 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&m3arg2;
  arg3 = *(QColor **)&color;
  (arg1)->fillRect((QRect const &)*arg2,(QColor const &)*arg3);
}


SWIGEXPORT void QPainter_fillRect6(QPainter * self, int x, int y, int w, int h, Qt::GlobalColor c) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  Qt::GlobalColor arg6 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (Qt::GlobalColor)c; 
  (arg1)->fillRect(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QPainter_fillRect7(QPainter * self, QRect * r, Qt::GlobalColor c) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  Qt::GlobalColor arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&r;
  arg3 = (Qt::GlobalColor)c; 
  (arg1)->fillRect((QRect const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_fillRect8(QPainter * self, QRectF * r, Qt::GlobalColor c) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  Qt::GlobalColor arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&r;
  arg3 = (Qt::GlobalColor)c; 
  (arg1)->fillRect((QRectF const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_fillRect9(QPainter * self, int x, int y, int w, int h, Qt::BrushStyle style) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  Qt::BrushStyle arg6 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (Qt::BrushStyle)style; 
  (arg1)->fillRect(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QPainter_fillRect10(QPainter * self, QRect * r, Qt::BrushStyle style) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  Qt::BrushStyle arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&r;
  arg3 = (Qt::BrushStyle)style; 
  (arg1)->fillRect((QRect const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_fillRect11(QPainter * self, QRectF * r, Qt::BrushStyle style) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  Qt::BrushStyle arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&r;
  arg3 = (Qt::BrushStyle)style; 
  (arg1)->fillRect((QRectF const &)*arg2,arg3);
}


SWIGEXPORT void QPainter_eraseRect(QPainter * self, QRectF * m3arg2) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRectF *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRectF **)&m3arg2;
  (arg1)->eraseRect((QRectF const &)*arg2);
}


SWIGEXPORT void QPainter_eraseRect1(QPainter * self, int x, int y, int w, int h) {
  QPainter *arg1 = (QPainter *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  (arg1)->eraseRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QPainter_eraseRect2(QPainter * self, QRect * m3arg2) {
  QPainter *arg1 = (QPainter *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = *(QRect **)&m3arg2;
  (arg1)->eraseRect((QRect const &)*arg2);
}


SWIGEXPORT void QPainter_setRenderHint(QPainter * self, QPainter::RenderHint hint, bool on) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPainter::RenderHint arg2 ;
  bool arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (QPainter::RenderHint)hint; 
  arg3 = on ? true : false; 
  (arg1)->setRenderHint(arg2,arg3);
}


SWIGEXPORT void QPainter_setRenderHint1(QPainter * self, QPainter::RenderHint hint) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPainter::RenderHint arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (QPainter::RenderHint)hint; 
  (arg1)->setRenderHint(arg2);
}


SWIGEXPORT void QPainter_setRenderHints(QPainter * self, int hints, bool on) {
  QPainter *arg1 = (QPainter *) 0 ;
  RenderHints arg2 ;
  bool arg3 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (RenderHints)hints; 
  arg3 = on ? true : false; 
  (arg1)->setRenderHints(arg2,arg3);
}


SWIGEXPORT void QPainter_setRenderHints1(QPainter * self, int hints) {
  QPainter *arg1 = (QPainter *) 0 ;
  RenderHints arg2 ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (RenderHints)hints; 
  (arg1)->setRenderHints(arg2);
}


SWIGEXPORT int QPainter_renderHints(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  RenderHints result;
  int cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = ((QPainter const *)arg1)->renderHints();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT bool QPainter_testRenderHint(QPainter const * self, QPainter::RenderHint hint) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPainter::RenderHint arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPainter **)&self; 
  arg2 = (QPainter::RenderHint)hint; 
  result = (bool)((QPainter const *)arg1)->testRenderHint(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPaintEngine * QPainter_paintEngine(QPainter const * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  QPaintEngine *result = 0 ;
  QPaintEngine * cresult ;
  
  arg1 = *(QPainter **)&self; 
  result = (QPaintEngine *)((QPainter const *)arg1)->paintEngine();
  *(QPaintEngine **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void SetRedirected(QPaintDevice * device, QPaintDevice * replacement, QPoint * offset) {
  QPaintDevice *arg1 = (QPaintDevice *) 0 ;
  QPaintDevice *arg2 = (QPaintDevice *) 0 ;
  QPoint *arg3 = 0 ;
  
  arg1 = *(QPaintDevice **)&device; 
  arg2 = *(QPaintDevice **)&replacement; 
  arg3 = *(QPoint **)&offset;
  QPainter::setRedirected((QPaintDevice const *)arg1,arg2,(QPoint const &)*arg3);
}


SWIGEXPORT void SetRedirected1(QPaintDevice * device, QPaintDevice * replacement) {
  QPaintDevice *arg1 = (QPaintDevice *) 0 ;
  QPaintDevice *arg2 = (QPaintDevice *) 0 ;
  
  arg1 = *(QPaintDevice **)&device; 
  arg2 = *(QPaintDevice **)&replacement; 
  QPainter::setRedirected((QPaintDevice const *)arg1,arg2);
}


SWIGEXPORT QPaintDevice * Redirected(QPaintDevice * device, QPoint * offset) {
  QPaintDevice *arg1 = (QPaintDevice *) 0 ;
  QPoint *arg2 = (QPoint *) 0 ;
  QPaintDevice *result = 0 ;
  QPaintDevice * cresult ;
  
  arg1 = *(QPaintDevice **)&device; 
  arg2 = *(QPoint **)&offset; 
  result = (QPaintDevice *)QPainter::redirected((QPaintDevice const *)arg1,arg2);
  *(QPaintDevice **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPaintDevice * Redirected1(QPaintDevice * device) {
  QPaintDevice *arg1 = (QPaintDevice *) 0 ;
  QPaintDevice *result = 0 ;
  QPaintDevice * cresult ;
  
  arg1 = *(QPaintDevice **)&device; 
  result = (QPaintDevice *)QPainter::redirected((QPaintDevice const *)arg1);
  *(QPaintDevice **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void RestoreRedirected(QPaintDevice * device) {
  QPaintDevice *arg1 = (QPaintDevice *) 0 ;
  
  arg1 = *(QPaintDevice **)&device; 
  QPainter::restoreRedirected((QPaintDevice const *)arg1);
}


SWIGEXPORT void QPainter_beginNativePainting(QPainter * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  
  arg1 = *(QPainter **)&self; 
  (arg1)->beginNativePainting();
}


SWIGEXPORT void QPainter_endNativePainting(QPainter * self) {
  QPainter *arg1 = (QPainter *) 0 ;
  
  arg1 = *(QPainter **)&self; 
  (arg1)->endNativePainting();
}


#ifdef __cplusplus
}
#endif

