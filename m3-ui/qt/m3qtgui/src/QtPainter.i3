(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

INTERFACE QtPainter;

FROM QtTransform IMPORT QTransform;
FROM QtPoint IMPORT QPoint, QPointF;
FROM QtPaintDevice IMPORT QPaintDevice;
FROM QtPen IMPORT QPen;
FROM QtPixmap IMPORT QPixmap;
FROM QtLine IMPORT QLineF, QLine;
FROM QtNamespace IMPORT BrushStyle, GlobalColor, ClipOperation, BGMode,
                        FillRule, SizeMode, ImageConversionFlags, PenStyle,
                        LayoutDirection;
FROM QtColor IMPORT QColor;
FROM QtFont IMPORT QFont;
FROM QtPaintEngine IMPORT QTextItem, QPaintEngine;
FROM QtImage IMPORT QImage;
FROM QtPicture IMPORT QPicture;
FROM QtRect IMPORT QRect, QRectF;
FROM QtWidget IMPORT QWidget;
FROM QtMatrix IMPORT QMatrix;
FROM QtRegion IMPORT QRegion;
FROM QtFontInfo IMPORT QFontInfo;
FROM QtPolygon IMPORT QPolygon, QPolygonF;
FROM QtBrush IMPORT QBrush;
FROM QtFontMetrics IMPORT QFontMetrics;



TYPE
  T = QPainter;
  RenderHints = INTEGER;


CONST                            (* Enum RenderHint *)
  Antialiasing            = 1;
  TextAntialiasing        = 2;
  SmoothPixmapTransform   = 4;
  HighQualityAntialiasing = 8;
  NonCosmeticDefaultPen   = 16;

TYPE                             (* Enum RenderHint *)
  RenderHint = [1 .. 16];


CONST                            (* Enum PixmapFragmentHint *)
  OpaqueHint = 1;

TYPE                             (* Enum PixmapFragmentHint *)
  PixmapFragmentHint = [1 .. 1];


TYPE                             (* Enum CompositionMode *)
  CompositionMode =
    {CompositionMode_SourceOver, CompositionMode_DestinationOver,
     CompositionMode_Clear, CompositionMode_Source,
     CompositionMode_Destination, CompositionMode_SourceIn,
     CompositionMode_DestinationIn, CompositionMode_SourceOut,
     CompositionMode_DestinationOut, CompositionMode_SourceAtop,
     CompositionMode_DestinationAtop, CompositionMode_Xor,
     CompositionMode_Plus, CompositionMode_Multiply,
     CompositionMode_Screen, CompositionMode_Overlay,
     CompositionMode_Darken, CompositionMode_Lighten,
     CompositionMode_ColorDodge, CompositionMode_ColorBurn,
     CompositionMode_HardLight, CompositionMode_SoftLight,
     CompositionMode_Difference, CompositionMode_Exclusion,
     RasterOp_SourceOrDestination, RasterOp_SourceAndDestination,
     RasterOp_SourceXorDestination, RasterOp_NotSourceAndNotDestination,
     RasterOp_NotSourceOrNotDestination, RasterOp_NotSourceXorDestination,
     RasterOp_NotSource, RasterOp_NotSourceAndDestination,
     RasterOp_SourceAndNotDestination};

PROCEDURE SetRedirected
  (device, replacement: QPaintDevice; offset: QPoint; );

PROCEDURE SetRedirected1 (device, replacement: QPaintDevice; );

PROCEDURE Redirected (device: QPaintDevice; offset: QPoint; ):
  QPaintDevice;

PROCEDURE Redirected1 (device: QPaintDevice; ): QPaintDevice;

PROCEDURE RestoreRedirected (device: QPaintDevice; );


TYPE
  QPainter <: QPainterPublic;
  QPainterPublic =
    BRANDED OBJECT
      cxxObj: ADDRESS;
    METHODS
      init_0                  (): QPainter;
      init_1                  (arg1: QPaintDevice; ): QPainter;
      device                  (): QPaintDevice;
      begin                   (arg1: QPaintDevice; ): BOOLEAN;
      end                     (): BOOLEAN;
      isActive                (): BOOLEAN;
      initFrom                (widget: QWidget; );
      setCompositionMode      (mode: CompositionMode; );
      compositionMode         (): CompositionMode;
      font                    (): QFont;
      setFont                 (f: QFont; );
      fontMetrics             (): QFontMetrics;
      fontInfo                (): QFontInfo;
      setPen                  (color: QColor; );
      setPen1                 (pen: QPen; );
      setPen2                 (style: PenStyle; );
      pen                     (): QPen;
      setBrush                (brush: QBrush; );
      setBrush1               (style: BrushStyle; );
      brush                   (): QBrush;
      setBackgroundMode       (mode: BGMode; );
      backgroundMode          (): BGMode;
      brushOrigin             (): QPoint;
      setBrushOrigin          (x, y: INTEGER; );
      setBrushOrigin1         (arg1: QPoint; );
      setBrushOrigin2         (arg1: QPointF; );
      setBackground           (bg: QBrush; );
      background              (): QBrush;
      opacity                 (): LONGREAL;
      setOpacity              (opacity: LONGREAL; );
      clipRegion              (): QRegion;
      setClipRect             (arg1: QRectF; op: ClipOperation; );
      setClipRect1            (arg1: QRectF; );
      setClipRect2            (arg1: QRect; op: ClipOperation; );
      setClipRect3            (arg1: QRect; );
      setClipRect4            (x, y, w, h: INTEGER; op: ClipOperation; );
      setClipRect5            (x, y, w, h: INTEGER; );
      setClipRegion           (arg1: QRegion; op: ClipOperation; );
      setClipRegion1          (arg1: QRegion; );
      setClipping             (enable: BOOLEAN; );
      hasClipping             (): BOOLEAN;
      clipBoundingRect        (): QRectF;
      save                    ();
      restore                 ();
      setMatrix               (matrix: QMatrix; combine: BOOLEAN; );
      setMatrix1              (matrix: QMatrix; );
      matrix                  (): QMatrix;
      deviceMatrix            (): QMatrix;
      resetMatrix             ();
      setTransform            (transform: QTransform; combine: BOOLEAN; );
      setTransform1           (transform: QTransform; );
      transform               (): QTransform;
      deviceTransform         (): QTransform;
      resetTransform          ();
      setWorldMatrix          (matrix: QMatrix; combine: BOOLEAN; );
      setWorldMatrix1         (matrix: QMatrix; );
      worldMatrix             (): QMatrix;
      setWorldTransform       (matrix: QTransform; combine: BOOLEAN; );
      setWorldTransform1      (matrix: QTransform; );
      worldTransform          (): QTransform;
      combinedMatrix          (): QMatrix;
      combinedTransform       (): QTransform;
      setMatrixEnabled        (enabled: BOOLEAN; );
      matrixEnabled           (): BOOLEAN;
      setWorldMatrixEnabled   (enabled: BOOLEAN; );
      worldMatrixEnabled      (): BOOLEAN;
      scale                   (sx, sy: LONGREAL; );
      shear                   (sh, sv: LONGREAL; );
      rotate                  (a: LONGREAL; );
      translate               (offset: QPointF; );
      translate1              (offset: QPoint; );
      translate2              (dx, dy: LONGREAL; );
      window                  (): QRect;
      setWindow               (window: QRect; );
      setWindow1              (x, y, w, h: INTEGER; );
      viewport                (): QRect;
      setViewport             (viewport: QRect; );
      setViewport1            (x, y, w, h: INTEGER; );
      setViewTransformEnabled (enable: BOOLEAN; );
      viewTransformEnabled    (): BOOLEAN;
      drawPoint               (pt: QPointF; );
      drawPoint1              (p: QPoint; );
      drawPoint2              (x, y: INTEGER; );
      drawPoints              (points: QPointF; pointCount: INTEGER; );
      drawPoints1             (points: QPolygonF; );
      drawPoints2             (points: QPoint; pointCount: INTEGER; );
      drawPoints3             (points: QPolygon; );
      drawLine                (line: QLineF; );
      drawLine1               (line: QLine; );
      drawLine2               (x1, y1, x2, y2: INTEGER; );
      drawLine3               (p1, p2: QPoint; );
      drawLine4               (p1, p2: QPointF; );
      drawRect                (rect: QRectF; );
      drawRect1               (x1, y1, w, h: INTEGER; );
      drawRect2               (rect: QRect; );
      drawEllipse             (r: QRectF; );
      drawEllipse1            (r: QRect; );
      drawEllipse2            (x, y, w, h: INTEGER; );
      drawEllipse3            (center: QPointF; rx, ry: LONGREAL; );
      drawEllipse4            (center: QPoint; rx, ry: INTEGER; );
      drawPolyline            (points: QPointF; pointCount: INTEGER; );
      drawPolyline1           (polyline: QPolygonF; );
      drawPolyline2           (points: QPoint; pointCount: INTEGER; );
      drawPolyline3           (polygon: QPolygon; );
      drawPolygon (points    : QPointF;
                   pointCount: INTEGER;
                   fillRule  : FillRule; );
      drawPolygon1 (points: QPointF; pointCount: INTEGER; );
      drawPolygon2 (polygon: QPolygonF; fillRule: FillRule; );
      drawPolygon3 (polygon: QPolygonF; );
      drawPolygon4 (points    : QPoint;
                    pointCount: INTEGER;
                    fillRule  : FillRule; );
      drawPolygon5       (points: QPoint; pointCount: INTEGER; );
      drawPolygon6       (polygon: QPolygon; fillRule: FillRule; );
      drawPolygon7       (polygon: QPolygon; );
      drawConvexPolygon  (points: QPointF; pointCount: INTEGER; );
      drawConvexPolygon1 (polygon: QPolygonF; );
      drawConvexPolygon2 (points: QPoint; pointCount: INTEGER; );
      drawConvexPolygon3 (polygon: QPolygon; );
      drawArc            (rect: QRectF; a, alen: INTEGER; );
      drawArc1           (arg1: QRect; a, alen: INTEGER; );
      drawArc2           (x, y, w, h, a, alen: INTEGER; );
      drawPie            (rect: QRectF; a, alen: INTEGER; );
      drawPie1           (x, y, w, h, a, alen: INTEGER; );
      drawPie2           (arg1: QRect; a, alen: INTEGER; );
      drawChord          (rect: QRectF; a, alen: INTEGER; );
      drawChord1         (x, y, w, h, a, alen: INTEGER; );
      drawChord2         (arg1: QRect; a, alen: INTEGER; );
      drawRoundedRect (rect            : QRectF;
                       xRadius, yRadius: LONGREAL;
                       mode            : SizeMode; );
      drawRoundedRect1 (rect: QRectF; xRadius, yRadius: LONGREAL; );
      drawRoundedRect2 (x, y, w, h      : INTEGER;
                        xRadius, yRadius: LONGREAL;
                        mode            : SizeMode; );
      drawRoundedRect3 (x, y, w, h: INTEGER; xRadius, yRadius: LONGREAL; );
      drawRoundedRect4 (rect            : QRect;
                        xRadius, yRadius: LONGREAL;
                        mode            : SizeMode; );
      drawRoundedRect5 (rect: QRect; xRadius, yRadius: LONGREAL; );
      drawRoundRect    (r: QRectF; xround, yround: INTEGER; );
      drawRoundRect1   (r: QRectF; xround: INTEGER; );
      drawRoundRect2   (r: QRectF; );
      drawRoundRect3   (x, y, w, h, arg5, arg6: INTEGER; );
      drawRoundRect4   (x, y, w, h, arg5: INTEGER; );
      drawRoundRect5   (x, y, w, h: INTEGER; );
      drawRoundRect6   (r: QRect; xround, yround: INTEGER; );
      drawRoundRect7   (r: QRect; xround: INTEGER; );
      drawRoundRect8   (r: QRect; );
      drawTiledPixmap  (rect: QRectF; pm: QPixmap; offset: QPointF; );
      drawTiledPixmap1 (rect: QRectF; pm: QPixmap; );
      drawTiledPixmap2 (x, y, w, h: INTEGER;
                        arg5      : QPixmap;
                        sx, sy    : INTEGER; );
      drawTiledPixmap3 (x, y, w, h: INTEGER; arg5: QPixmap; sx: INTEGER; );
      drawTiledPixmap4 (x, y, w, h: INTEGER; arg5: QPixmap; );
      drawTiledPixmap5 (arg1: QRect; arg2: QPixmap; arg3: QPoint; );
      drawTiledPixmap6 (arg1: QRect; arg2: QPixmap; );
      drawPicture      (p: QPointF; picture: QPicture; );
      drawPicture1     (x, y: INTEGER; picture: QPicture; );
      drawPicture2     (p: QPoint; picture: QPicture; );
      drawPixmap (targetRect: QRectF; pixmap: QPixmap; sourceRect: QRectF; );
      drawPixmap1 (targetRect: QRect; pixmap: QPixmap; sourceRect: QRect; );
      drawPixmap2 (x, y, w, h    : INTEGER;
                   pm            : QPixmap;
                   sx, sy, sw, sh: INTEGER; );
      drawPixmap3  (x, y: INTEGER; pm: QPixmap; sx, sy, sw, sh: INTEGER; );
      drawPixmap4  (p: QPointF; pm: QPixmap; sr: QRectF; );
      drawPixmap5  (p: QPoint; pm: QPixmap; sr: QRect; );
      drawPixmap6  (p: QPointF; pm: QPixmap; );
      drawPixmap7  (p: QPoint; pm: QPixmap; );
      drawPixmap8  (x, y: INTEGER; pm: QPixmap; );
      drawPixmap9  (r: QRect; pm: QPixmap; );
      drawPixmap10 (x, y, w, h: INTEGER; pm: QPixmap; );
      drawImage (targetRect: QRectF;
                 image     : QImage;
                 sourceRect: QRectF;
                 flags     : ImageConversionFlags; );
      drawImage1 (targetRect: QRectF; image: QImage; sourceRect: QRectF; );
      drawImage2 (targetRect: QRect;
                  image     : QImage;
                  sourceRect: QRect;
                  flags     : ImageConversionFlags; );
      drawImage3 (targetRect: QRect; image: QImage; sourceRect: QRect; );
      drawImage4 (p    : QPointF;
                  image: QImage;
                  sr   : QRectF;
                  flags: ImageConversionFlags; );
      drawImage5 (p: QPointF; image: QImage; sr: QRectF; );
      drawImage6 (p    : QPoint;
                  image: QImage;
                  sr   : QRect;
                  flags: ImageConversionFlags; );
      drawImage7  (p: QPoint; image: QImage; sr: QRect; );
      drawImage8  (r: QRectF; image: QImage; );
      drawImage9  (r: QRect; image: QImage; );
      drawImage10 (p: QPointF; image: QImage; );
      drawImage11 (p: QPoint; image: QImage; );
      drawImage12 (x, y          : INTEGER;
                   image         : QImage;
                   sx, sy, sw, sh: INTEGER;
                   flags         : ImageConversionFlags; );
      drawImage13 (x, y: INTEGER; image: QImage; sx, sy, sw, sh: INTEGER; );
      drawImage14 (x, y: INTEGER; image: QImage; sx, sy, sw: INTEGER; );
      drawImage15 (x, y: INTEGER; image: QImage; sx, sy: INTEGER; );
      drawImage16 (x, y: INTEGER; image: QImage; sx: INTEGER; );
      drawImage17 (x, y: INTEGER; image: QImage; );
      setLayoutDirection  (direction: LayoutDirection; );
      layoutDirection     (): LayoutDirection;
      drawTextItem        (p: QPointF; ti: QTextItem; );
      drawTextItem1       (x, y: INTEGER; ti: QTextItem; );
      drawTextItem2       (p: QPoint; ti: QTextItem; );
      fillRect            (arg1: QRectF; arg2: QBrush; );
      fillRect1           (x, y, w, h: INTEGER; arg5: QBrush; );
      fillRect2           (arg1: QRect; arg2: QBrush; );
      fillRect3           (arg1: QRectF; color: QColor; );
      fillRect4           (x, y, w, h: INTEGER; color: QColor; );
      fillRect5           (arg1: QRect; color: QColor; );
      fillRect6           (x, y, w, h: INTEGER; c: GlobalColor; );
      fillRect7           (r: QRect; c: GlobalColor; );
      fillRect8           (r: QRectF; c: GlobalColor; );
      fillRect9           (x, y, w, h: INTEGER; style: BrushStyle; );
      fillRect10          (r: QRect; style: BrushStyle; );
      fillRect11          (r: QRectF; style: BrushStyle; );
      eraseRect           (arg1: QRectF; );
      eraseRect1          (x, y, w, h: INTEGER; );
      eraseRect2          (arg1: QRect; );
      setRenderHint       (hint: RenderHint; on: BOOLEAN; );
      setRenderHint1      (hint: RenderHint; );
      setRenderHints      (hints: RenderHints; on: BOOLEAN; );
      setRenderHints1     (hints: RenderHints; );
      renderHints         (): RenderHints;
      testRenderHint      (hint: RenderHint; ): BOOLEAN;
      paintEngine         (): QPaintEngine;
      beginNativePainting ();
      endNativePainting   ();
      destroyCxx          ();
    END;


END QtPainter.
