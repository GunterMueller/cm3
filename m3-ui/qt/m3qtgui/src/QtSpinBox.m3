(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtSpinBox;


IMPORT QtSpinBoxRaw;
FROM QtByteArray IMPORT QByteArray;
FROM QtWidget IMPORT QWidget;
FROM QtString IMPORT QString;


IMPORT WeakRef;

PROCEDURE New_QSpinBox0 (self: QSpinBox; parent: QWidget; ): QSpinBox =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(parent.cxxObj, ADDRESS);
  BEGIN
    result := QtSpinBoxRaw.New_QSpinBox0(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QSpinBox);

    RETURN self;
  END New_QSpinBox0;

PROCEDURE New_QSpinBox1 (self: QSpinBox; ): QSpinBox =
  VAR result: ADDRESS;
  BEGIN
    result := QtSpinBoxRaw.New_QSpinBox1();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QSpinBox);

    RETURN self;
  END New_QSpinBox1;

PROCEDURE QSpinBox_value (self: QSpinBox; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtSpinBoxRaw.QSpinBox_value(selfAdr);
  END QSpinBox_value;

PROCEDURE QSpinBox_prefix (self: QSpinBox; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtSpinBoxRaw.QSpinBox_prefix(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QSpinBox_prefix;

PROCEDURE QSpinBox_setPrefix (self: QSpinBox; prefix: TEXT; ) =
  VAR
    selfAdr    : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_prefix          := NEW(QString).initQString(prefix);
    arg2tmp              := LOOPHOLE(qstr_prefix.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QSpinBox_setPrefix(selfAdr, arg2tmp);
  END QSpinBox_setPrefix;

PROCEDURE QSpinBox_suffix (self: QSpinBox; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtSpinBoxRaw.QSpinBox_suffix(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QSpinBox_suffix;

PROCEDURE QSpinBox_setSuffix (self: QSpinBox; suffix: TEXT; ) =
  VAR
    selfAdr    : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_suffix          := NEW(QString).initQString(suffix);
    arg2tmp              := LOOPHOLE(qstr_suffix.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QSpinBox_setSuffix(selfAdr, arg2tmp);
  END QSpinBox_setSuffix;

PROCEDURE QSpinBox_cleanText (self: QSpinBox; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtSpinBoxRaw.QSpinBox_cleanText(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QSpinBox_cleanText;

PROCEDURE QSpinBox_singleStep (self: QSpinBox; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtSpinBoxRaw.QSpinBox_singleStep(selfAdr);
  END QSpinBox_singleStep;

PROCEDURE QSpinBox_setSingleStep (self: QSpinBox; val: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QSpinBox_setSingleStep(selfAdr, val);
  END QSpinBox_setSingleStep;

PROCEDURE QSpinBox_minimum (self: QSpinBox; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtSpinBoxRaw.QSpinBox_minimum(selfAdr);
  END QSpinBox_minimum;

PROCEDURE QSpinBox_setMinimum (self: QSpinBox; min: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QSpinBox_setMinimum(selfAdr, min);
  END QSpinBox_setMinimum;

PROCEDURE QSpinBox_maximum (self: QSpinBox; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtSpinBoxRaw.QSpinBox_maximum(selfAdr);
  END QSpinBox_maximum;

PROCEDURE QSpinBox_setMaximum (self: QSpinBox; max: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QSpinBox_setMaximum(selfAdr, max);
  END QSpinBox_setMaximum;

PROCEDURE QSpinBox_setRange (self: QSpinBox; min, max: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QSpinBox_setRange(selfAdr, min, max);
  END QSpinBox_setRange;

PROCEDURE QSpinBox_setValue (self: QSpinBox; val: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QSpinBox_setValue(selfAdr, val);
  END QSpinBox_setValue;

PROCEDURE Delete_QSpinBox (self: QSpinBox; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.Delete_QSpinBox(selfAdr);
  END Delete_QSpinBox;

PROCEDURE Cleanup_QSpinBox
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QSpinBox := ref;
  BEGIN
    Delete_QSpinBox(obj);
  END Cleanup_QSpinBox;

PROCEDURE Destroy_QSpinBox (self: QSpinBox) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QSpinBox);
  END Destroy_QSpinBox;

REVEAL
  QSpinBox = QSpinBoxPublic BRANDED OBJECT
             OVERRIDES
               init_0        := New_QSpinBox0;
               init_1        := New_QSpinBox1;
               value         := QSpinBox_value;
               prefix        := QSpinBox_prefix;
               setPrefix     := QSpinBox_setPrefix;
               suffix        := QSpinBox_suffix;
               setSuffix     := QSpinBox_setSuffix;
               cleanText     := QSpinBox_cleanText;
               singleStep    := QSpinBox_singleStep;
               setSingleStep := QSpinBox_setSingleStep;
               minimum       := QSpinBox_minimum;
               setMinimum    := QSpinBox_setMinimum;
               maximum       := QSpinBox_maximum;
               setMaximum    := QSpinBox_setMaximum;
               setRange      := QSpinBox_setRange;
               setValue      := QSpinBox_setValue;
               destroyCxx    := Destroy_QSpinBox;
             END;

PROCEDURE New_QDoubleSpinBox0 (self: QDoubleSpinBox; parent: QWidget; ):
  QDoubleSpinBox =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(parent.cxxObj, ADDRESS);
  BEGIN
    result := QtSpinBoxRaw.New_QDoubleSpinBox0(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QDoubleSpinBox);

    RETURN self;
  END New_QDoubleSpinBox0;

PROCEDURE New_QDoubleSpinBox1 (self: QDoubleSpinBox; ): QDoubleSpinBox =
  VAR result: ADDRESS;
  BEGIN
    result := QtSpinBoxRaw.New_QDoubleSpinBox1();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QDoubleSpinBox);

    RETURN self;
  END New_QDoubleSpinBox1;

PROCEDURE QDoubleSpinBox_value (self: QDoubleSpinBox; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtSpinBoxRaw.QDoubleSpinBox_value(selfAdr);
  END QDoubleSpinBox_value;

PROCEDURE QDoubleSpinBox_prefix (self: QDoubleSpinBox; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtSpinBoxRaw.QDoubleSpinBox_prefix(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QDoubleSpinBox_prefix;

PROCEDURE QDoubleSpinBox_setPrefix (self: QDoubleSpinBox; prefix: TEXT; ) =
  VAR
    selfAdr    : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_prefix          := NEW(QString).initQString(prefix);
    arg2tmp              := LOOPHOLE(qstr_prefix.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QDoubleSpinBox_setPrefix(selfAdr, arg2tmp);
  END QDoubleSpinBox_setPrefix;

PROCEDURE QDoubleSpinBox_suffix (self: QDoubleSpinBox; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtSpinBoxRaw.QDoubleSpinBox_suffix(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QDoubleSpinBox_suffix;

PROCEDURE QDoubleSpinBox_setSuffix (self: QDoubleSpinBox; suffix: TEXT; ) =
  VAR
    selfAdr    : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_suffix          := NEW(QString).initQString(suffix);
    arg2tmp              := LOOPHOLE(qstr_suffix.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QDoubleSpinBox_setSuffix(selfAdr, arg2tmp);
  END QDoubleSpinBox_setSuffix;

PROCEDURE QDoubleSpinBox_cleanText (self: QDoubleSpinBox; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtSpinBoxRaw.QDoubleSpinBox_cleanText(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QDoubleSpinBox_cleanText;

PROCEDURE QDoubleSpinBox_singleStep (self: QDoubleSpinBox; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtSpinBoxRaw.QDoubleSpinBox_singleStep(selfAdr);
  END QDoubleSpinBox_singleStep;

PROCEDURE QDoubleSpinBox_setSingleStep
  (self: QDoubleSpinBox; val: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QDoubleSpinBox_setSingleStep(selfAdr, val);
  END QDoubleSpinBox_setSingleStep;

PROCEDURE QDoubleSpinBox_minimum (self: QDoubleSpinBox; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtSpinBoxRaw.QDoubleSpinBox_minimum(selfAdr);
  END QDoubleSpinBox_minimum;

PROCEDURE QDoubleSpinBox_setMinimum
  (self: QDoubleSpinBox; min: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QDoubleSpinBox_setMinimum(selfAdr, min);
  END QDoubleSpinBox_setMinimum;

PROCEDURE QDoubleSpinBox_maximum (self: QDoubleSpinBox; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtSpinBoxRaw.QDoubleSpinBox_maximum(selfAdr);
  END QDoubleSpinBox_maximum;

PROCEDURE QDoubleSpinBox_setMaximum
  (self: QDoubleSpinBox; max: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QDoubleSpinBox_setMaximum(selfAdr, max);
  END QDoubleSpinBox_setMaximum;

PROCEDURE QDoubleSpinBox_setRange
  (self: QDoubleSpinBox; min, max: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QDoubleSpinBox_setRange(selfAdr, min, max);
  END QDoubleSpinBox_setRange;

PROCEDURE QDoubleSpinBox_decimals (self: QDoubleSpinBox; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtSpinBoxRaw.QDoubleSpinBox_decimals(selfAdr);
  END QDoubleSpinBox_decimals;

PROCEDURE QDoubleSpinBox_setDecimals
  (self: QDoubleSpinBox; prec: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QDoubleSpinBox_setDecimals(selfAdr, prec);
  END QDoubleSpinBox_setDecimals;

PROCEDURE QDoubleSpinBox_valueFromText
  (self: QDoubleSpinBox; text: TEXT; ): LONGREAL =
  VAR
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_text          := NEW(QString).initQString(text);
    arg2tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    RETURN QtSpinBoxRaw.QDoubleSpinBox_valueFromText(selfAdr, arg2tmp);
  END QDoubleSpinBox_valueFromText;

PROCEDURE QDoubleSpinBox_textFromValue
  (self: QDoubleSpinBox; val: LONGREAL; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtSpinBoxRaw.QDoubleSpinBox_textFromValue(selfAdr, val);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QDoubleSpinBox_textFromValue;

PROCEDURE QDoubleSpinBox_fixup (self: QDoubleSpinBox; str: TEXT; ) =
  VAR
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_str          := NEW(QString).initQString(str);
    arg2tmp           := LOOPHOLE(qstr_str.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QDoubleSpinBox_fixup(selfAdr, arg2tmp);
  END QDoubleSpinBox_fixup;

PROCEDURE QDoubleSpinBox_setValue (self: QDoubleSpinBox; val: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.QDoubleSpinBox_setValue(selfAdr, val);
  END QDoubleSpinBox_setValue;

PROCEDURE Delete_QDoubleSpinBox (self: QDoubleSpinBox; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtSpinBoxRaw.Delete_QDoubleSpinBox(selfAdr);
  END Delete_QDoubleSpinBox;

PROCEDURE Cleanup_QDoubleSpinBox
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QDoubleSpinBox := ref;
  BEGIN
    Delete_QDoubleSpinBox(obj);
  END Cleanup_QDoubleSpinBox;

PROCEDURE Destroy_QDoubleSpinBox (self: QDoubleSpinBox) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QDoubleSpinBox);
  END Destroy_QDoubleSpinBox;

REVEAL
  QDoubleSpinBox = QDoubleSpinBoxPublic BRANDED OBJECT
                   OVERRIDES
                     init_0        := New_QDoubleSpinBox0;
                     init_1        := New_QDoubleSpinBox1;
                     value         := QDoubleSpinBox_value;
                     prefix        := QDoubleSpinBox_prefix;
                     setPrefix     := QDoubleSpinBox_setPrefix;
                     suffix        := QDoubleSpinBox_suffix;
                     setSuffix     := QDoubleSpinBox_setSuffix;
                     cleanText     := QDoubleSpinBox_cleanText;
                     singleStep    := QDoubleSpinBox_singleStep;
                     setSingleStep := QDoubleSpinBox_setSingleStep;
                     minimum       := QDoubleSpinBox_minimum;
                     setMinimum    := QDoubleSpinBox_setMinimum;
                     maximum       := QDoubleSpinBox_maximum;
                     setMaximum    := QDoubleSpinBox_setMaximum;
                     setRange      := QDoubleSpinBox_setRange;
                     decimals      := QDoubleSpinBox_decimals;
                     setDecimals   := QDoubleSpinBox_setDecimals;
                     valueFromText := QDoubleSpinBox_valueFromText;
                     textFromValue := QDoubleSpinBox_textFromValue;
                     fixup         := QDoubleSpinBox_fixup;
                     setValue      := QDoubleSpinBox_setValue;
                     destroyCxx    := Destroy_QDoubleSpinBox;
                   END;


BEGIN
END QtSpinBox.
