/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qtoolbar.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QToolBar * New_QToolBar0(QString * title, QWidget * parent) {
  QString *arg1 = 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QToolBar *result = 0 ;
  QToolBar * cresult ;
  
  arg1 = *(QString **)&title;
  arg2 = *(QWidget **)&parent; 
  result = (QToolBar *)new QToolBar((QString const &)*arg1,arg2);
  *(QToolBar **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QToolBar * New_QToolBar1(QString * title) {
  QString *arg1 = 0 ;
  QToolBar *result = 0 ;
  QToolBar * cresult ;
  
  arg1 = *(QString **)&title;
  result = (QToolBar *)new QToolBar((QString const &)*arg1);
  *(QToolBar **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QToolBar * New_QToolBar2(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QToolBar *result = 0 ;
  QToolBar * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QToolBar *)new QToolBar(arg1);
  *(QToolBar **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QToolBar * New_QToolBar3() {
  QToolBar *result = 0 ;
  QToolBar * cresult ;
  
  result = (QToolBar *)new QToolBar();
  *(QToolBar **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QToolBar(QToolBar * self) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  
  arg1 = *(QToolBar **)&self; 
  delete arg1;
}


SWIGEXPORT void QToolBar_setMovable(QToolBar * self, bool movable) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  bool arg2 ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = movable ? true : false; 
  (arg1)->setMovable(arg2);
}


SWIGEXPORT bool QToolBar_isMovable(QToolBar const * self) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QToolBar **)&self; 
  result = (bool)((QToolBar const *)arg1)->isMovable();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QToolBar_setAllowedAreas(QToolBar * self, Qt::ToolBarAreas areas) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  Qt::ToolBarAreas arg2 ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = (Qt::ToolBarAreas)areas; 
  (arg1)->setAllowedAreas(arg2);
}


SWIGEXPORT Qt::ToolBarAreas QToolBar_allowedAreas(QToolBar const * self) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  Qt::ToolBarAreas cresult ;
  
  arg1 = *(QToolBar **)&self; 
  *(Qt::ToolBarAreas **)&cresult = new Qt::ToolBarAreas((const Qt::ToolBarAreas &)((QToolBar const *)arg1)->allowedAreas());
  return cresult;
}


SWIGEXPORT bool QToolBar_isAreaAllowed(QToolBar const * self, Qt::ToolBarArea area) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  Qt::ToolBarArea arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = (Qt::ToolBarArea)area; 
  result = (bool)((QToolBar const *)arg1)->isAreaAllowed(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QToolBar_setOrientation(QToolBar * self, Qt::Orientation orientation) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  Qt::Orientation arg2 ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = (Qt::Orientation)orientation; 
  (arg1)->setOrientation(arg2);
}


SWIGEXPORT Qt::Orientation QToolBar_orientation(QToolBar const * self) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  Qt::Orientation result;
  Qt::Orientation cresult ;
  
  arg1 = *(QToolBar **)&self; 
  result = (Qt::Orientation)((QToolBar const *)arg1)->orientation();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QToolBar_clear(QToolBar * self) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  
  arg1 = *(QToolBar **)&self; 
  (arg1)->clear();
}


SWIGEXPORT void QToolBar_addAction0_0(QToolBar * self, QAction * action) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QAction **)&action; 
  (arg1)->addAction(arg2);
}


SWIGEXPORT QAction * QToolBar_addAction1(QToolBar * self, QString * text) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QString *arg2 = 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QString **)&text;
  result = (QAction *)(arg1)->addAction((QString const &)*arg2);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QToolBar_addAction2(QToolBar * self, QIcon * icon, QString * text) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QIcon *arg2 = 0 ;
  QString *arg3 = 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QIcon **)&icon;
  arg3 = *(QString **)&text;
  result = (QAction *)(arg1)->addAction((QIcon const &)*arg2,(QString const &)*arg3);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QToolBar_addAction3(QToolBar * self, QString * text, QObject * receiver, char * member) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QString *arg2 = 0 ;
  QObject *arg3 = (QObject *) 0 ;
  char *arg4 = (char *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QString **)&text;
  arg3 = *(QObject **)&receiver; 
  {
    arg4 = member;
  }
  result = (QAction *)(arg1)->addAction((QString const &)*arg2,(QObject const *)arg3,(char const *)arg4);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QToolBar_addAction4(QToolBar * self, QIcon * icon, QString * text, QObject * receiver, char * member) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QIcon *arg2 = 0 ;
  QString *arg3 = 0 ;
  QObject *arg4 = (QObject *) 0 ;
  char *arg5 = (char *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QIcon **)&icon;
  arg3 = *(QString **)&text;
  arg4 = *(QObject **)&receiver; 
  {
    arg5 = member;
  }
  result = (QAction *)(arg1)->addAction((QIcon const &)*arg2,(QString const &)*arg3,(QObject const *)arg4,(char const *)arg5);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QToolBar_addSeparator(QToolBar * self) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  result = (QAction *)(arg1)->addSeparator();
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QToolBar_insertSeparator(QToolBar * self, QAction * before) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QAction **)&before; 
  result = (QAction *)(arg1)->insertSeparator(arg2);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QToolBar_addWidget(QToolBar * self, QWidget * widget) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QWidget **)&widget; 
  result = (QAction *)(arg1)->addWidget(arg2);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QToolBar_insertWidget(QToolBar * self, QAction * before, QWidget * widget) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  QWidget *arg3 = (QWidget *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QAction **)&before; 
  arg3 = *(QWidget **)&widget; 
  result = (QAction *)(arg1)->insertWidget(arg2,arg3);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QToolBar_actionGeometry(QToolBar const * self, QAction * action) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QAction **)&action; 
  *(QRect **)&cresult = new QRect((const QRect &)((QToolBar const *)arg1)->actionGeometry(arg2));
  return cresult;
}


SWIGEXPORT QAction * QToolBar_actionAt(QToolBar const * self, QPoint * p) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QPoint *arg2 = 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QPoint **)&p;
  result = (QAction *)((QToolBar const *)arg1)->actionAt((QPoint const &)*arg2);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QToolBar_actionAt1(QToolBar const * self, int x, int y) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  int arg2 ;
  int arg3 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  result = (QAction *)((QToolBar const *)arg1)->actionAt(arg2,arg3);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QToolBar_toggleViewAction(QToolBar const * self) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  result = (QAction *)((QToolBar const *)arg1)->toggleViewAction();
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QToolBar_iconSize(QToolBar const * self) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QToolBar const *)arg1)->iconSize());
  return cresult;
}


SWIGEXPORT Qt::ToolButtonStyle QToolBar_toolButtonStyle(QToolBar const * self) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  Qt::ToolButtonStyle result;
  Qt::ToolButtonStyle cresult ;
  
  arg1 = *(QToolBar **)&self; 
  result = (Qt::ToolButtonStyle)((QToolBar const *)arg1)->toolButtonStyle();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QToolBar_widgetForAction(QToolBar const * self, QAction * action) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QAction **)&action; 
  result = (QWidget *)((QToolBar const *)arg1)->widgetForAction(arg2);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QToolBar_isFloatable(QToolBar const * self) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QToolBar **)&self; 
  result = (bool)((QToolBar const *)arg1)->isFloatable();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QToolBar_setFloatable(QToolBar * self, bool floatable) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  bool arg2 ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = floatable ? true : false; 
  (arg1)->setFloatable(arg2);
}


SWIGEXPORT bool QToolBar_isFloating(QToolBar const * self) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QToolBar **)&self; 
  result = (bool)((QToolBar const *)arg1)->isFloating();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QToolBar_setIconSize(QToolBar * self, QSize * iconSize) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = *(QSize **)&iconSize;
  (arg1)->setIconSize((QSize const &)*arg2);
}


SWIGEXPORT void QToolBar_setToolButtonStyle(QToolBar * self, Qt::ToolButtonStyle toolButtonStyle) {
  QToolBar *arg1 = (QToolBar *) 0 ;
  Qt::ToolButtonStyle arg2 ;
  
  arg1 = *(QToolBar **)&self; 
  arg2 = (Qt::ToolButtonStyle)toolButtonStyle; 
  (arg1)->setToolButtonStyle(arg2);
}


SWIGEXPORT long Modula3_QToolBarToQWidget(long objectRef) {
    long baseptr = 0;
    *(QWidget **)&baseptr = *(QToolBar **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

