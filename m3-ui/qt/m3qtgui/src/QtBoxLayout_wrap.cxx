/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qboxlayout.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QBoxLayout * New_QBoxLayout0(QBoxLayout::Direction m3arg1, QWidget * parent) {
  QBoxLayout::Direction arg1 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QBoxLayout *result = 0 ;
  QBoxLayout * cresult ;
  
  arg1 = (QBoxLayout::Direction)m3arg1; 
  arg2 = *(QWidget **)&parent; 
  result = (QBoxLayout *)new QBoxLayout(arg1,arg2);
  *(QBoxLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBoxLayout * New_QBoxLayout1(QBoxLayout::Direction m3arg1) {
  QBoxLayout::Direction arg1 ;
  QBoxLayout *result = 0 ;
  QBoxLayout * cresult ;
  
  arg1 = (QBoxLayout::Direction)m3arg1; 
  result = (QBoxLayout *)new QBoxLayout(arg1);
  *(QBoxLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QBoxLayout(QBoxLayout * self) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  
  arg1 = *(QBoxLayout **)&self; 
  delete arg1;
}


SWIGEXPORT QBoxLayout::Direction QBoxLayout_direction(QBoxLayout const * self) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QBoxLayout::Direction result;
  QBoxLayout::Direction cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  result = (QBoxLayout::Direction)((QBoxLayout const *)arg1)->direction();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QBoxLayout_setDirection(QBoxLayout * self, QBoxLayout::Direction m3arg2) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QBoxLayout::Direction arg2 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (QBoxLayout::Direction)m3arg2; 
  (arg1)->setDirection(arg2);
}


SWIGEXPORT void QBoxLayout_addSpacing(QBoxLayout * self, int size) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)size; 
  (arg1)->addSpacing(arg2);
}


SWIGEXPORT void QBoxLayout_addStretch(QBoxLayout * self, int stretch) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)stretch; 
  (arg1)->addStretch(arg2);
}


SWIGEXPORT void QBoxLayout_addStretch1(QBoxLayout * self) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  
  arg1 = *(QBoxLayout **)&self; 
  (arg1)->addStretch();
}


SWIGEXPORT void QBoxLayout_addSpacerItem(QBoxLayout * self, QSpacerItem * spacerItem) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QSpacerItem *arg2 = (QSpacerItem *) 0 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = *(QSpacerItem **)&spacerItem; 
  (arg1)->addSpacerItem(arg2);
}


SWIGEXPORT void QBoxLayout_addWidget(QBoxLayout * self, QWidget * m3arg2, int stretch, Qt::Alignment alignment) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int arg3 ;
  Qt::Alignment arg4 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  arg3 = (int)stretch; 
  arg4 = (Qt::Alignment)alignment; 
  (arg1)->addWidget(arg2,arg3,arg4);
}


SWIGEXPORT void QBoxLayout_addWidget1(QBoxLayout * self, QWidget * m3arg2, int stretch) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int arg3 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  arg3 = (int)stretch; 
  (arg1)->addWidget(arg2,arg3);
}


SWIGEXPORT void QBoxLayout_addWidget2(QBoxLayout * self, QWidget * m3arg2) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  (arg1)->addWidget(arg2);
}


SWIGEXPORT void QBoxLayout_addLayout(QBoxLayout * self, QLayout * layout, int stretch) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  int arg3 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = *(QLayout **)&layout; 
  arg3 = (int)stretch; 
  (arg1)->addLayout(arg2,arg3);
}


SWIGEXPORT void QBoxLayout_addLayout1(QBoxLayout * self, QLayout * layout) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = *(QLayout **)&layout; 
  (arg1)->addLayout(arg2);
}


SWIGEXPORT void QBoxLayout_addStrut(QBoxLayout * self, int m3arg2) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)m3arg2; 
  (arg1)->addStrut(arg2);
}


SWIGEXPORT void QBoxLayout_addItem(QBoxLayout * self, QLayoutItem * m3arg2) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QLayoutItem *arg2 = (QLayoutItem *) 0 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = *(QLayoutItem **)&m3arg2; 
  (arg1)->addItem(arg2);
}


SWIGEXPORT void QBoxLayout_insertSpacing(QBoxLayout * self, int index, int size) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)index; 
  arg3 = (int)size; 
  (arg1)->insertSpacing(arg2,arg3);
}


SWIGEXPORT void QBoxLayout_insertStretch(QBoxLayout * self, int index, int stretch) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)index; 
  arg3 = (int)stretch; 
  (arg1)->insertStretch(arg2,arg3);
}


SWIGEXPORT void QBoxLayout_insertStretch1(QBoxLayout * self, int index) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)index; 
  (arg1)->insertStretch(arg2);
}


SWIGEXPORT void QBoxLayout_insertSpacerItem(QBoxLayout * self, int index, QSpacerItem * spacerItem) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  QSpacerItem *arg3 = (QSpacerItem *) 0 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)index; 
  arg3 = *(QSpacerItem **)&spacerItem; 
  (arg1)->insertSpacerItem(arg2,arg3);
}


SWIGEXPORT void QBoxLayout_insertWidget(QBoxLayout * self, int index, QWidget * widget, int stretch, Qt::Alignment alignment) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  QWidget *arg3 = (QWidget *) 0 ;
  int arg4 ;
  Qt::Alignment arg5 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)index; 
  arg3 = *(QWidget **)&widget; 
  arg4 = (int)stretch; 
  arg5 = (Qt::Alignment)alignment; 
  (arg1)->insertWidget(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QBoxLayout_insertWidget1(QBoxLayout * self, int index, QWidget * widget, int stretch) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  QWidget *arg3 = (QWidget *) 0 ;
  int arg4 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)index; 
  arg3 = *(QWidget **)&widget; 
  arg4 = (int)stretch; 
  (arg1)->insertWidget(arg2,arg3,arg4);
}


SWIGEXPORT void QBoxLayout_insertWidget2(QBoxLayout * self, int index, QWidget * widget) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  QWidget *arg3 = (QWidget *) 0 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)index; 
  arg3 = *(QWidget **)&widget; 
  (arg1)->insertWidget(arg2,arg3);
}


SWIGEXPORT void QBoxLayout_insertLayout(QBoxLayout * self, int index, QLayout * layout, int stretch) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  QLayout *arg3 = (QLayout *) 0 ;
  int arg4 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)index; 
  arg3 = *(QLayout **)&layout; 
  arg4 = (int)stretch; 
  (arg1)->insertLayout(arg2,arg3,arg4);
}


SWIGEXPORT void QBoxLayout_insertLayout1(QBoxLayout * self, int index, QLayout * layout) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  QLayout *arg3 = (QLayout *) 0 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)index; 
  arg3 = *(QLayout **)&layout; 
  (arg1)->insertLayout(arg2,arg3);
}


SWIGEXPORT int QBoxLayout_spacing(QBoxLayout const * self) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  result = (int)((QBoxLayout const *)arg1)->spacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QBoxLayout_setSpacing(QBoxLayout * self, int spacing) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)spacing; 
  (arg1)->setSpacing(arg2);
}


SWIGEXPORT bool QBoxLayout_setStretchFactor(QBoxLayout * self, QWidget * w, int stretch) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = *(QWidget **)&w; 
  arg3 = (int)stretch; 
  result = (bool)(arg1)->setStretchFactor(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QBoxLayout_setStretchFactor1(QBoxLayout * self, QLayout * l, int stretch) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = *(QLayout **)&l; 
  arg3 = (int)stretch; 
  result = (bool)(arg1)->setStretchFactor(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QBoxLayout_setStretch(QBoxLayout * self, int index, int stretch) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)index; 
  arg3 = (int)stretch; 
  (arg1)->setStretch(arg2,arg3);
}


SWIGEXPORT int QBoxLayout_stretch(QBoxLayout const * self, int index) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)index; 
  result = (int)((QBoxLayout const *)arg1)->stretch(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QBoxLayout_sizeHint(QBoxLayout const * self) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QBoxLayout const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QSize * QBoxLayout_minimumSize(QBoxLayout const * self) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QBoxLayout const *)arg1)->minimumSize());
  return cresult;
}


SWIGEXPORT QSize * QBoxLayout_maximumSize(QBoxLayout const * self) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QBoxLayout const *)arg1)->maximumSize());
  return cresult;
}


SWIGEXPORT bool QBoxLayout_hasHeightForWidth(QBoxLayout const * self) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  result = (bool)((QBoxLayout const *)arg1)->hasHeightForWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QBoxLayout_heightForWidth(QBoxLayout const * self, int m3arg2) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)m3arg2; 
  result = (int)((QBoxLayout const *)arg1)->heightForWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QBoxLayout_minimumHeightForWidth(QBoxLayout const * self, int m3arg2) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)m3arg2; 
  result = (int)((QBoxLayout const *)arg1)->minimumHeightForWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::Orientations QBoxLayout_expandingDirections(QBoxLayout const * self) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  Qt::Orientations cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  *(Qt::Orientations **)&cresult = new Qt::Orientations((const Qt::Orientations &)((QBoxLayout const *)arg1)->expandingDirections());
  return cresult;
}


SWIGEXPORT void QBoxLayout_invalidate(QBoxLayout * self) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  
  arg1 = *(QBoxLayout **)&self; 
  (arg1)->invalidate();
}


SWIGEXPORT QLayoutItem * QBoxLayout_itemAt(QBoxLayout const * self, int m3arg2) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  QLayoutItem *result = 0 ;
  QLayoutItem * cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)m3arg2; 
  result = (QLayoutItem *)((QBoxLayout const *)arg1)->itemAt(arg2);
  *(QLayoutItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLayoutItem * QBoxLayout_takeAt(QBoxLayout * self, int m3arg2) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int arg2 ;
  QLayoutItem *result = 0 ;
  QLayoutItem * cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = (int)m3arg2; 
  result = (QLayoutItem *)(arg1)->takeAt(arg2);
  *(QLayoutItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QBoxLayout_count(QBoxLayout const * self) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QBoxLayout **)&self; 
  result = (int)((QBoxLayout const *)arg1)->count();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QBoxLayout_setGeometry(QBoxLayout * self, QRect * m3arg2) {
  QBoxLayout *arg1 = (QBoxLayout *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QBoxLayout **)&self; 
  arg2 = *(QRect **)&m3arg2;
  (arg1)->setGeometry((QRect const &)*arg2);
}


SWIGEXPORT QHBoxLayout * New_QHBoxLayout0() {
  QHBoxLayout *result = 0 ;
  QHBoxLayout * cresult ;
  
  result = (QHBoxLayout *)new QHBoxLayout();
  *(QHBoxLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QHBoxLayout * New_QHBoxLayout1(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QHBoxLayout *result = 0 ;
  QHBoxLayout * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QHBoxLayout *)new QHBoxLayout(arg1);
  *(QHBoxLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QHBoxLayout(QHBoxLayout * self) {
  QHBoxLayout *arg1 = (QHBoxLayout *) 0 ;
  
  arg1 = *(QHBoxLayout **)&self; 
  delete arg1;
}


SWIGEXPORT QVBoxLayout * New_QVBoxLayout0() {
  QVBoxLayout *result = 0 ;
  QVBoxLayout * cresult ;
  
  result = (QVBoxLayout *)new QVBoxLayout();
  *(QVBoxLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QVBoxLayout * New_QVBoxLayout1(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QVBoxLayout *result = 0 ;
  QVBoxLayout * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QVBoxLayout *)new QVBoxLayout(arg1);
  *(QVBoxLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QVBoxLayout(QVBoxLayout * self) {
  QVBoxLayout *arg1 = (QVBoxLayout *) 0 ;
  
  arg1 = *(QVBoxLayout **)&self; 
  delete arg1;
}


SWIGEXPORT long Modula3_QBoxLayoutToQLayout(long objectRef) {
    long baseptr = 0;
    *(QLayout **)&baseptr = *(QBoxLayout **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QHBoxLayoutToQBoxLayout(long objectRef) {
    long baseptr = 0;
    *(QBoxLayout **)&baseptr = *(QHBoxLayout **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QVBoxLayoutToQBoxLayout(long objectRef) {
    long baseptr = 0;
    *(QBoxLayout **)&baseptr = *(QVBoxLayout **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

