/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include  <QtGui/qtextformat.h>
#define PageBreakFlags QTextFormat::PageBreakFlags


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QTextLength * New_QTextLength0() {
  QTextLength *result = 0 ;
  QTextLength * cresult ;
  
  result = (QTextLength *)new QTextLength();
  *(QTextLength **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTextLength * New_QTextLength1(QTextLength::Type type, double value) {
  QTextLength::Type arg1 ;
  double arg2 ;
  QTextLength *result = 0 ;
  QTextLength * cresult ;
  
  arg1 = (QTextLength::Type)type; 
  arg2 = (double)value; 
  result = (QTextLength *)new QTextLength(arg1,arg2);
  *(QTextLength **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTextLength::Type QTextLength_type(QTextLength const * self) {
  QTextLength *arg1 = (QTextLength *) 0 ;
  QTextLength::Type result;
  QTextLength::Type cresult ;
  
  arg1 = *(QTextLength **)&self; 
  result = (QTextLength::Type)((QTextLength const *)arg1)->type();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTextLength_value(QTextLength const * self, double maximumLength) {
  QTextLength *arg1 = (QTextLength *) 0 ;
  double arg2 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextLength **)&self; 
  arg2 = (double)maximumLength; 
  result = (double)((QTextLength const *)arg1)->value(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTextLength_rawValue(QTextLength const * self) {
  QTextLength *arg1 = (QTextLength *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextLength **)&self; 
  result = (double)((QTextLength const *)arg1)->rawValue();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTextLength(QTextLength * self) {
  QTextLength *arg1 = (QTextLength *) 0 ;
  
  arg1 = *(QTextLength **)&self; 
  delete arg1;
}


SWIGEXPORT QTextFormat * New_QTextFormat0() {
  QTextFormat *result = 0 ;
  QTextFormat * cresult ;
  
  result = (QTextFormat *)new QTextFormat();
  *(QTextFormat **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTextFormat * New_QTextFormat1(int type) {
  int arg1 ;
  QTextFormat *result = 0 ;
  QTextFormat * cresult ;
  
  arg1 = (int)type; 
  result = (QTextFormat *)new QTextFormat(arg1);
  *(QTextFormat **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTextFormat * New_QTextFormat2(QTextFormat const & rhs) {
  QTextFormat *arg1 = 0 ;
  QTextFormat *result = 0 ;
  QTextFormat * cresult ;
  
  arg1 = *(QTextFormat **)&rhs;
  result = (QTextFormat *)new QTextFormat((QTextFormat const &)*arg1);
  *(QTextFormat **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTextFormat(QTextFormat * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  
  arg1 = *(QTextFormat **)&self; 
  delete arg1;
}


SWIGEXPORT void QTextFormat_merge(QTextFormat * self, QTextFormat const & other) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QTextFormat *arg2 = 0 ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = *(QTextFormat **)&other;
  (arg1)->merge((QTextFormat const &)*arg2);
}


SWIGEXPORT bool QTextFormat_isValid(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (bool)((QTextFormat const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTextFormat_type(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (int)((QTextFormat const *)arg1)->type();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTextFormat_objectIndex(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (int)((QTextFormat const *)arg1)->objectIndex();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFormat_setObjectIndex(QTextFormat * self, int object) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)object; 
  (arg1)->setObjectIndex(arg2);
}


SWIGEXPORT void QTextFormat_clearProperty(QTextFormat * self, int propertyId) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)propertyId; 
  (arg1)->clearProperty(arg2);
}


SWIGEXPORT bool QTextFormat_hasProperty(QTextFormat const * self, int propertyId) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)propertyId; 
  result = (bool)((QTextFormat const *)arg1)->hasProperty(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextFormat_boolProperty(QTextFormat const * self, int propertyId) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)propertyId; 
  result = (bool)((QTextFormat const *)arg1)->boolProperty(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTextFormat_intProperty(QTextFormat const * self, int propertyId) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)propertyId; 
  result = (int)((QTextFormat const *)arg1)->intProperty(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTextFormat_doubleProperty(QTextFormat const * self, int propertyId) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)propertyId; 
  result = (double)((QTextFormat const *)arg1)->doubleProperty(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * QTextFormat_stringProperty(QTextFormat const * self, int propertyId) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  QString * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)propertyId; 
  *(QString **)&cresult = new QString((const QString &)((QTextFormat const *)arg1)->stringProperty(arg2));
  return cresult;
}


SWIGEXPORT QColor * QTextFormat_colorProperty(QTextFormat const * self, int propertyId) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  QColor * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)propertyId; 
  *(QColor **)&cresult = new QColor((const QColor &)((QTextFormat const *)arg1)->colorProperty(arg2));
  return cresult;
}


SWIGEXPORT QPen * QTextFormat_penProperty(QTextFormat const * self, int propertyId) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  QPen * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)propertyId; 
  *(QPen **)&cresult = new QPen((const QPen &)((QTextFormat const *)arg1)->penProperty(arg2));
  return cresult;
}


SWIGEXPORT QBrush * QTextFormat_brushProperty(QTextFormat const * self, int propertyId) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  QBrush * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)propertyId; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QTextFormat const *)arg1)->brushProperty(arg2));
  return cresult;
}


SWIGEXPORT QTextLength * QTextFormat_lengthProperty(QTextFormat const * self, int propertyId) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  QTextLength * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)propertyId; 
  *(QTextLength **)&cresult = new QTextLength((const QTextLength &)((QTextFormat const *)arg1)->lengthProperty(arg2));
  return cresult;
}


SWIGEXPORT int QTextFormat_propertyCount(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (int)((QTextFormat const *)arg1)->propertyCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFormat_setObjectType(QTextFormat * self, int type) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (int)type; 
  (arg1)->setObjectType(arg2);
}


SWIGEXPORT int QTextFormat_objectType(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (int)((QTextFormat const *)arg1)->objectType();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextFormat_isCharFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (bool)((QTextFormat const *)arg1)->isCharFormat();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextFormat_isBlockFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (bool)((QTextFormat const *)arg1)->isBlockFormat();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextFormat_isListFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (bool)((QTextFormat const *)arg1)->isListFormat();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextFormat_isFrameFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (bool)((QTextFormat const *)arg1)->isFrameFormat();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextFormat_isImageFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (bool)((QTextFormat const *)arg1)->isImageFormat();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextFormat_isTableFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (bool)((QTextFormat const *)arg1)->isTableFormat();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextFormat_isTableCellFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (bool)((QTextFormat const *)arg1)->isTableCellFormat();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTextBlockFormat * QTextFormat_toBlockFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QTextBlockFormat * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  *(QTextBlockFormat **)&cresult = new QTextBlockFormat((const QTextBlockFormat &)((QTextFormat const *)arg1)->toBlockFormat());
  return cresult;
}


SWIGEXPORT QTextCharFormat * QTextFormat_toCharFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QTextCharFormat * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  *(QTextCharFormat **)&cresult = new QTextCharFormat((const QTextCharFormat &)((QTextFormat const *)arg1)->toCharFormat());
  return cresult;
}


SWIGEXPORT QTextListFormat * QTextFormat_toListFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QTextListFormat * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  *(QTextListFormat **)&cresult = new QTextListFormat((const QTextListFormat &)((QTextFormat const *)arg1)->toListFormat());
  return cresult;
}


SWIGEXPORT QTextTableFormat * QTextFormat_toTableFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QTextTableFormat * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  *(QTextTableFormat **)&cresult = new QTextTableFormat((const QTextTableFormat &)((QTextFormat const *)arg1)->toTableFormat());
  return cresult;
}


SWIGEXPORT QTextFrameFormat * QTextFormat_toFrameFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QTextFrameFormat * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  *(QTextFrameFormat **)&cresult = new QTextFrameFormat((const QTextFrameFormat &)((QTextFormat const *)arg1)->toFrameFormat());
  return cresult;
}


SWIGEXPORT QTextImageFormat * QTextFormat_toImageFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QTextImageFormat * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  *(QTextImageFormat **)&cresult = new QTextImageFormat((const QTextImageFormat &)((QTextFormat const *)arg1)->toImageFormat());
  return cresult;
}


SWIGEXPORT QTextTableCellFormat * QTextFormat_toTableCellFormat(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QTextTableCellFormat * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  *(QTextTableCellFormat **)&cresult = new QTextTableCellFormat((const QTextTableCellFormat &)((QTextFormat const *)arg1)->toTableCellFormat());
  return cresult;
}


SWIGEXPORT void QTextFormat_setLayoutDirection(QTextFormat * self, Qt::LayoutDirection direction) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  Qt::LayoutDirection arg2 ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = (Qt::LayoutDirection)direction; 
  (arg1)->setLayoutDirection(arg2);
}


SWIGEXPORT Qt::LayoutDirection QTextFormat_layoutDirection(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  Qt::LayoutDirection result;
  Qt::LayoutDirection cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  result = (Qt::LayoutDirection)((QTextFormat const *)arg1)->layoutDirection();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFormat_setBackground(QTextFormat * self, QBrush * brush) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QBrush *arg2 = 0 ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = *(QBrush **)&brush;
  (arg1)->setBackground((QBrush const &)*arg2);
}


SWIGEXPORT QBrush * QTextFormat_background(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QBrush * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QTextFormat const *)arg1)->background());
  return cresult;
}


SWIGEXPORT void QTextFormat_clearBackground(QTextFormat * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  
  arg1 = *(QTextFormat **)&self; 
  (arg1)->clearBackground();
}


SWIGEXPORT void QTextFormat_setForeground(QTextFormat * self, QBrush * brush) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QBrush *arg2 = 0 ;
  
  arg1 = *(QTextFormat **)&self; 
  arg2 = *(QBrush **)&brush;
  (arg1)->setForeground((QBrush const &)*arg2);
}


SWIGEXPORT QBrush * QTextFormat_foreground(QTextFormat const * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  QBrush * cresult ;
  
  arg1 = *(QTextFormat **)&self; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QTextFormat const *)arg1)->foreground());
  return cresult;
}


SWIGEXPORT void QTextFormat_clearForeground(QTextFormat * self) {
  QTextFormat *arg1 = (QTextFormat *) 0 ;
  
  arg1 = *(QTextFormat **)&self; 
  (arg1)->clearForeground();
}


SWIGEXPORT QTextCharFormat * New_QTextCharFormat0() {
  QTextCharFormat *result = 0 ;
  QTextCharFormat * cresult ;
  
  result = (QTextCharFormat *)new QTextCharFormat();
  *(QTextCharFormat **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextCharFormat_isValid(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (bool)((QTextCharFormat const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFont(QTextCharFormat * self, QFont * font) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QFont *arg2 = 0 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = *(QFont **)&font;
  (arg1)->setFont((QFont const &)*arg2);
}


SWIGEXPORT QFont * QTextCharFormat_font(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QFont * cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QFont **)&cresult = new QFont((const QFont &)((QTextCharFormat const *)arg1)->font());
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontFamily(QTextCharFormat * self, QString * family) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = *(QString **)&family;
  (arg1)->setFontFamily((QString const &)*arg2);
}


SWIGEXPORT QString * QTextCharFormat_fontFamily(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTextCharFormat const *)arg1)->fontFamily());
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontPointSize(QTextCharFormat * self, double size) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (double)size; 
  (arg1)->setFontPointSize(arg2);
}


SWIGEXPORT double QTextCharFormat_fontPointSize(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (double)((QTextCharFormat const *)arg1)->fontPointSize();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontWeight(QTextCharFormat * self, int weight) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (int)weight; 
  (arg1)->setFontWeight(arg2);
}


SWIGEXPORT int QTextCharFormat_fontWeight(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (int)((QTextCharFormat const *)arg1)->fontWeight();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontItalic(QTextCharFormat * self, bool italic) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = italic ? true : false; 
  (arg1)->setFontItalic(arg2);
}


SWIGEXPORT bool QTextCharFormat_fontItalic(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (bool)((QTextCharFormat const *)arg1)->fontItalic();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontCapitalization(QTextCharFormat * self, QFont::Capitalization capitalization) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QFont::Capitalization arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (QFont::Capitalization)capitalization; 
  (arg1)->setFontCapitalization(arg2);
}


SWIGEXPORT QFont::Capitalization QTextCharFormat_fontCapitalization(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QFont::Capitalization cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QFont::Capitalization **)&cresult = new QFont::Capitalization((const QFont::Capitalization &)((QTextCharFormat const *)arg1)->fontCapitalization());
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontLetterSpacing(QTextCharFormat * self, double spacing) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (double)spacing; 
  (arg1)->setFontLetterSpacing(arg2);
}


SWIGEXPORT double QTextCharFormat_fontLetterSpacing(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (double)((QTextCharFormat const *)arg1)->fontLetterSpacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontWordSpacing(QTextCharFormat * self, double spacing) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (double)spacing; 
  (arg1)->setFontWordSpacing(arg2);
}


SWIGEXPORT double QTextCharFormat_fontWordSpacing(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (double)((QTextCharFormat const *)arg1)->fontWordSpacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontUnderline(QTextCharFormat * self, bool underline) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = underline ? true : false; 
  (arg1)->setFontUnderline(arg2);
}


SWIGEXPORT bool QTextCharFormat_fontUnderline(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (bool)((QTextCharFormat const *)arg1)->fontUnderline();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontOverline(QTextCharFormat * self, bool overline) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = overline ? true : false; 
  (arg1)->setFontOverline(arg2);
}


SWIGEXPORT bool QTextCharFormat_fontOverline(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (bool)((QTextCharFormat const *)arg1)->fontOverline();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontStrikeOut(QTextCharFormat * self, bool strikeOut) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = strikeOut ? true : false; 
  (arg1)->setFontStrikeOut(arg2);
}


SWIGEXPORT bool QTextCharFormat_fontStrikeOut(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (bool)((QTextCharFormat const *)arg1)->fontStrikeOut();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setUnderlineColor(QTextCharFormat * self, QColor * color) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QColor *arg2 = 0 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = *(QColor **)&color;
  (arg1)->setUnderlineColor((QColor const &)*arg2);
}


SWIGEXPORT QColor * QTextCharFormat_underlineColor(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QTextCharFormat const *)arg1)->underlineColor());
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontFixedPitch(QTextCharFormat * self, bool fixedPitch) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = fixedPitch ? true : false; 
  (arg1)->setFontFixedPitch(arg2);
}


SWIGEXPORT bool QTextCharFormat_fontFixedPitch(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (bool)((QTextCharFormat const *)arg1)->fontFixedPitch();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontStyleHint(QTextCharFormat * self, QFont::StyleHint hint, QFont::StyleStrategy strategy) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QFont::StyleHint arg2 ;
  QFont::StyleStrategy arg3 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (QFont::StyleHint)hint; 
  arg3 = (QFont::StyleStrategy)strategy; 
  (arg1)->setFontStyleHint(arg2,arg3);
}


SWIGEXPORT void QTextCharFormat_setFontStyleHint1(QTextCharFormat * self, QFont::StyleHint hint) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QFont::StyleHint arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (QFont::StyleHint)hint; 
  (arg1)->setFontStyleHint(arg2);
}


SWIGEXPORT void QTextCharFormat_setFontStyleStrategy(QTextCharFormat * self, QFont::StyleStrategy strategy) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QFont::StyleStrategy arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (QFont::StyleStrategy)strategy; 
  (arg1)->setFontStyleStrategy(arg2);
}


SWIGEXPORT QFont::StyleHint QTextCharFormat_fontStyleHint(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QFont::StyleHint cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QFont::StyleHint **)&cresult = new QFont::StyleHint((const QFont::StyleHint &)((QTextCharFormat const *)arg1)->fontStyleHint());
  return cresult;
}


SWIGEXPORT QFont::StyleStrategy QTextCharFormat_fontStyleStrategy(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QFont::StyleStrategy cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QFont::StyleStrategy **)&cresult = new QFont::StyleStrategy((const QFont::StyleStrategy &)((QTextCharFormat const *)arg1)->fontStyleStrategy());
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontHintingPreference(QTextCharFormat * self, QFont::HintingPreference hintingPreference) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QFont::HintingPreference arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (QFont::HintingPreference)hintingPreference; 
  (arg1)->setFontHintingPreference(arg2);
}


SWIGEXPORT QFont::HintingPreference QTextCharFormat_fontHintingPreference(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QFont::HintingPreference cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QFont::HintingPreference **)&cresult = new QFont::HintingPreference((const QFont::HintingPreference &)((QTextCharFormat const *)arg1)->fontHintingPreference());
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setFontKerning(QTextCharFormat * self, bool enable) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setFontKerning(arg2);
}


SWIGEXPORT bool QTextCharFormat_fontKerning(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (bool)((QTextCharFormat const *)arg1)->fontKerning();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setUnderlineStyle(QTextCharFormat * self, QTextCharFormat::UnderlineStyle style) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QTextCharFormat::UnderlineStyle arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (QTextCharFormat::UnderlineStyle)style; 
  (arg1)->setUnderlineStyle(arg2);
}


SWIGEXPORT QTextCharFormat::UnderlineStyle QTextCharFormat_underlineStyle(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QTextCharFormat::UnderlineStyle result;
  QTextCharFormat::UnderlineStyle cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (QTextCharFormat::UnderlineStyle)((QTextCharFormat const *)arg1)->underlineStyle();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setVerticalAlignment(QTextCharFormat * self, QTextCharFormat::VerticalAlignment alignment) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QTextCharFormat::VerticalAlignment arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (QTextCharFormat::VerticalAlignment)alignment; 
  (arg1)->setVerticalAlignment(arg2);
}


SWIGEXPORT QTextCharFormat::VerticalAlignment QTextCharFormat_verticalAlignment(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QTextCharFormat::VerticalAlignment result;
  QTextCharFormat::VerticalAlignment cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (QTextCharFormat::VerticalAlignment)((QTextCharFormat const *)arg1)->verticalAlignment();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setTextOutline(QTextCharFormat * self, QPen * pen) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QPen *arg2 = 0 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = *(QPen **)&pen;
  (arg1)->setTextOutline((QPen const &)*arg2);
}


SWIGEXPORT QPen * QTextCharFormat_textOutline(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QPen * cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QPen **)&cresult = new QPen((const QPen &)((QTextCharFormat const *)arg1)->textOutline());
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setToolTip(QTextCharFormat * self, QString * tip) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = *(QString **)&tip;
  (arg1)->setToolTip((QString const &)*arg2);
}


SWIGEXPORT QString * QTextCharFormat_toolTip(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTextCharFormat const *)arg1)->toolTip());
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setAnchor(QTextCharFormat * self, bool anchor) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = anchor ? true : false; 
  (arg1)->setAnchor(arg2);
}


SWIGEXPORT bool QTextCharFormat_isAnchor(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (bool)((QTextCharFormat const *)arg1)->isAnchor();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setAnchorHref(QTextCharFormat * self, QString * value) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = *(QString **)&value;
  (arg1)->setAnchorHref((QString const &)*arg2);
}


SWIGEXPORT QString * QTextCharFormat_anchorHref(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTextCharFormat const *)arg1)->anchorHref());
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setAnchorName(QTextCharFormat * self, QString * name) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = *(QString **)&name;
  (arg1)->setAnchorName((QString const &)*arg2);
}


SWIGEXPORT QString * QTextCharFormat_anchorName(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTextCharFormat const *)arg1)->anchorName());
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setAnchorNames(QTextCharFormat * self, QStringList * names) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QStringList *arg2 = 0 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = *(QStringList **)&names;
  (arg1)->setAnchorNames((QStringList const &)*arg2);
}


SWIGEXPORT QStringList * QTextCharFormat_anchorNames(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  QStringList * cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  *(QStringList **)&cresult = new QStringList((const QStringList &)((QTextCharFormat const *)arg1)->anchorNames());
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setTableCellRowSpan(QTextCharFormat * self, int tableCellRowSpan) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (int)tableCellRowSpan; 
  (arg1)->setTableCellRowSpan(arg2);
}


SWIGEXPORT int QTextCharFormat_tableCellRowSpan(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (int)((QTextCharFormat const *)arg1)->tableCellRowSpan();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextCharFormat_setTableCellColumnSpan(QTextCharFormat * self, int tableCellColumnSpan) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  arg2 = (int)tableCellColumnSpan; 
  (arg1)->setTableCellColumnSpan(arg2);
}


SWIGEXPORT int QTextCharFormat_tableCellColumnSpan(QTextCharFormat const * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextCharFormat **)&self; 
  result = (int)((QTextCharFormat const *)arg1)->tableCellColumnSpan();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTextCharFormat(QTextCharFormat * self) {
  QTextCharFormat *arg1 = (QTextCharFormat *) 0 ;
  
  arg1 = *(QTextCharFormat **)&self; 
  delete arg1;
}


SWIGEXPORT QTextBlockFormat * New_QTextBlockFormat0() {
  QTextBlockFormat *result = 0 ;
  QTextBlockFormat * cresult ;
  
  result = (QTextBlockFormat *)new QTextBlockFormat();
  *(QTextBlockFormat **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextBlockFormat_isValid(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  result = (bool)((QTextBlockFormat const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextBlockFormat_setAlignment(QTextBlockFormat * self, Qt::Alignment alignment) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  Qt::Alignment arg2 ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  arg2 = (Qt::Alignment)alignment; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT Qt::Alignment QTextBlockFormat_alignment(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  Qt::Alignment cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  *(Qt::Alignment **)&cresult = new Qt::Alignment((const Qt::Alignment &)((QTextBlockFormat const *)arg1)->alignment());
  return cresult;
}


SWIGEXPORT void QTextBlockFormat_setTopMargin(QTextBlockFormat * self, double margin) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  arg2 = (double)margin; 
  (arg1)->setTopMargin(arg2);
}


SWIGEXPORT double QTextBlockFormat_topMargin(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  result = (double)((QTextBlockFormat const *)arg1)->topMargin();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextBlockFormat_setBottomMargin(QTextBlockFormat * self, double margin) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  arg2 = (double)margin; 
  (arg1)->setBottomMargin(arg2);
}


SWIGEXPORT double QTextBlockFormat_bottomMargin(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  result = (double)((QTextBlockFormat const *)arg1)->bottomMargin();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextBlockFormat_setLeftMargin(QTextBlockFormat * self, double margin) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  arg2 = (double)margin; 
  (arg1)->setLeftMargin(arg2);
}


SWIGEXPORT double QTextBlockFormat_leftMargin(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  result = (double)((QTextBlockFormat const *)arg1)->leftMargin();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextBlockFormat_setRightMargin(QTextBlockFormat * self, double margin) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  arg2 = (double)margin; 
  (arg1)->setRightMargin(arg2);
}


SWIGEXPORT double QTextBlockFormat_rightMargin(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  result = (double)((QTextBlockFormat const *)arg1)->rightMargin();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextBlockFormat_setTextIndent(QTextBlockFormat * self, double aindent) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  arg2 = (double)aindent; 
  (arg1)->setTextIndent(arg2);
}


SWIGEXPORT double QTextBlockFormat_textIndent(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  result = (double)((QTextBlockFormat const *)arg1)->textIndent();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextBlockFormat_setIndent(QTextBlockFormat * self, int indent) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  arg2 = (int)indent; 
  (arg1)->setIndent(arg2);
}


SWIGEXPORT int QTextBlockFormat_indent(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  result = (int)((QTextBlockFormat const *)arg1)->indent();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextBlockFormat_setLineHeight(QTextBlockFormat * self, double height, int heightType) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double arg2 ;
  int arg3 ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  arg2 = (double)height; 
  arg3 = (int)heightType; 
  (arg1)->setLineHeight(arg2,arg3);
}


SWIGEXPORT double QTextBlockFormat_lineHeight(QTextBlockFormat const * self, double scriptLineHeight, double scaling) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double arg2 ;
  double arg3 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  arg2 = (double)scriptLineHeight; 
  arg3 = (double)scaling; 
  result = (double)((QTextBlockFormat const *)arg1)->lineHeight(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTextBlockFormat_lineHeight1(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  result = (double)((QTextBlockFormat const *)arg1)->lineHeight();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTextBlockFormat_lineHeightType(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  result = (int)((QTextBlockFormat const *)arg1)->lineHeightType();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextBlockFormat_setNonBreakableLines(QTextBlockFormat * self, bool b) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  arg2 = b ? true : false; 
  (arg1)->setNonBreakableLines(arg2);
}


SWIGEXPORT bool QTextBlockFormat_nonBreakableLines(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  result = (bool)((QTextBlockFormat const *)arg1)->nonBreakableLines();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextBlockFormat_setPageBreakPolicy(QTextBlockFormat * self, PageBreakFlags flags) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  PageBreakFlags arg2 ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  arg2 = (PageBreakFlags)flags; 
  (arg1)->setPageBreakPolicy(arg2);
}


SWIGEXPORT PageBreakFlags QTextBlockFormat_pageBreakPolicy(QTextBlockFormat const * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  PageBreakFlags cresult ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  *(PageBreakFlags **)&cresult = new PageBreakFlags((const PageBreakFlags &)((QTextBlockFormat const *)arg1)->pageBreakPolicy());
  return cresult;
}


SWIGEXPORT void Delete_QTextBlockFormat(QTextBlockFormat * self) {
  QTextBlockFormat *arg1 = (QTextBlockFormat *) 0 ;
  
  arg1 = *(QTextBlockFormat **)&self; 
  delete arg1;
}


SWIGEXPORT QTextListFormat * New_QTextListFormat0() {
  QTextListFormat *result = 0 ;
  QTextListFormat * cresult ;
  
  result = (QTextListFormat *)new QTextListFormat();
  *(QTextListFormat **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextListFormat_isValid(QTextListFormat const * self) {
  QTextListFormat *arg1 = (QTextListFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextListFormat **)&self; 
  result = (bool)((QTextListFormat const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextListFormat_setStyle(QTextListFormat * self, QTextListFormat::Style style) {
  QTextListFormat *arg1 = (QTextListFormat *) 0 ;
  QTextListFormat::Style arg2 ;
  
  arg1 = *(QTextListFormat **)&self; 
  arg2 = (QTextListFormat::Style)style; 
  (arg1)->setStyle(arg2);
}


SWIGEXPORT QTextListFormat::Style QTextListFormat_style(QTextListFormat const * self) {
  QTextListFormat *arg1 = (QTextListFormat *) 0 ;
  QTextListFormat::Style result;
  QTextListFormat::Style cresult ;
  
  arg1 = *(QTextListFormat **)&self; 
  result = (QTextListFormat::Style)((QTextListFormat const *)arg1)->style();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextListFormat_setIndent(QTextListFormat * self, int indent) {
  QTextListFormat *arg1 = (QTextListFormat *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextListFormat **)&self; 
  arg2 = (int)indent; 
  (arg1)->setIndent(arg2);
}


SWIGEXPORT int QTextListFormat_indent(QTextListFormat const * self) {
  QTextListFormat *arg1 = (QTextListFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextListFormat **)&self; 
  result = (int)((QTextListFormat const *)arg1)->indent();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextListFormat_setNumberPrefix(QTextListFormat * self, QString * numberPrefix) {
  QTextListFormat *arg1 = (QTextListFormat *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextListFormat **)&self; 
  arg2 = *(QString **)&numberPrefix;
  (arg1)->setNumberPrefix((QString const &)*arg2);
}


SWIGEXPORT QString * QTextListFormat_numberPrefix(QTextListFormat const * self) {
  QTextListFormat *arg1 = (QTextListFormat *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTextListFormat **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTextListFormat const *)arg1)->numberPrefix());
  return cresult;
}


SWIGEXPORT void QTextListFormat_setNumberSuffix(QTextListFormat * self, QString * numberSuffix) {
  QTextListFormat *arg1 = (QTextListFormat *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextListFormat **)&self; 
  arg2 = *(QString **)&numberSuffix;
  (arg1)->setNumberSuffix((QString const &)*arg2);
}


SWIGEXPORT QString * QTextListFormat_numberSuffix(QTextListFormat const * self) {
  QTextListFormat *arg1 = (QTextListFormat *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTextListFormat **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTextListFormat const *)arg1)->numberSuffix());
  return cresult;
}


SWIGEXPORT void Delete_QTextListFormat(QTextListFormat * self) {
  QTextListFormat *arg1 = (QTextListFormat *) 0 ;
  
  arg1 = *(QTextListFormat **)&self; 
  delete arg1;
}


SWIGEXPORT QTextImageFormat * New_QTextImageFormat0() {
  QTextImageFormat *result = 0 ;
  QTextImageFormat * cresult ;
  
  result = (QTextImageFormat *)new QTextImageFormat();
  *(QTextImageFormat **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextImageFormat_isValid(QTextImageFormat const * self) {
  QTextImageFormat *arg1 = (QTextImageFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextImageFormat **)&self; 
  result = (bool)((QTextImageFormat const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextImageFormat_setName(QTextImageFormat * self, QString * name) {
  QTextImageFormat *arg1 = (QTextImageFormat *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTextImageFormat **)&self; 
  arg2 = *(QString **)&name;
  (arg1)->setName((QString const &)*arg2);
}


SWIGEXPORT QString * QTextImageFormat_name(QTextImageFormat const * self) {
  QTextImageFormat *arg1 = (QTextImageFormat *) 0 ;
  QString * cresult ;
  
  arg1 = *(QTextImageFormat **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QTextImageFormat const *)arg1)->name());
  return cresult;
}


SWIGEXPORT void QTextImageFormat_setWidth(QTextImageFormat * self, double width) {
  QTextImageFormat *arg1 = (QTextImageFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextImageFormat **)&self; 
  arg2 = (double)width; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT double QTextImageFormat_width(QTextImageFormat const * self) {
  QTextImageFormat *arg1 = (QTextImageFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextImageFormat **)&self; 
  result = (double)((QTextImageFormat const *)arg1)->width();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextImageFormat_setHeight(QTextImageFormat * self, double height) {
  QTextImageFormat *arg1 = (QTextImageFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextImageFormat **)&self; 
  arg2 = (double)height; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT double QTextImageFormat_height(QTextImageFormat const * self) {
  QTextImageFormat *arg1 = (QTextImageFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextImageFormat **)&self; 
  result = (double)((QTextImageFormat const *)arg1)->height();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTextImageFormat(QTextImageFormat * self) {
  QTextImageFormat *arg1 = (QTextImageFormat *) 0 ;
  
  arg1 = *(QTextImageFormat **)&self; 
  delete arg1;
}


SWIGEXPORT QTextFrameFormat * New_QTextFrameFormat0() {
  QTextFrameFormat *result = 0 ;
  QTextFrameFormat * cresult ;
  
  result = (QTextFrameFormat *)new QTextFrameFormat();
  *(QTextFrameFormat **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextFrameFormat_isValid(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  result = (bool)((QTextFrameFormat const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setPosition(QTextFrameFormat * self, QTextFrameFormat::Position f) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  QTextFrameFormat::Position arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (QTextFrameFormat::Position)f; 
  (arg1)->setPosition(arg2);
}


SWIGEXPORT QTextFrameFormat::Position QTextFrameFormat_position(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  QTextFrameFormat::Position result;
  QTextFrameFormat::Position cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  result = (QTextFrameFormat::Position)((QTextFrameFormat const *)arg1)->position();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setBorder(QTextFrameFormat * self, double border) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (double)border; 
  (arg1)->setBorder(arg2);
}


SWIGEXPORT double QTextFrameFormat_border(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  result = (double)((QTextFrameFormat const *)arg1)->border();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setBorderBrush(QTextFrameFormat * self, QBrush * brush) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  QBrush *arg2 = 0 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = *(QBrush **)&brush;
  (arg1)->setBorderBrush((QBrush const &)*arg2);
}


SWIGEXPORT QBrush * QTextFrameFormat_borderBrush(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  QBrush * cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QTextFrameFormat const *)arg1)->borderBrush());
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setBorderStyle(QTextFrameFormat * self, QTextFrameFormat::BorderStyle style) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  QTextFrameFormat::BorderStyle arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (QTextFrameFormat::BorderStyle)style; 
  (arg1)->setBorderStyle(arg2);
}


SWIGEXPORT QTextFrameFormat::BorderStyle QTextFrameFormat_borderStyle(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  QTextFrameFormat::BorderStyle result;
  QTextFrameFormat::BorderStyle cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  result = (QTextFrameFormat::BorderStyle)((QTextFrameFormat const *)arg1)->borderStyle();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setMargin(QTextFrameFormat * self, double margin) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (double)margin; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT double QTextFrameFormat_margin(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  result = (double)((QTextFrameFormat const *)arg1)->margin();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setTopMargin(QTextFrameFormat * self, double margin) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (double)margin; 
  (arg1)->setTopMargin(arg2);
}


SWIGEXPORT double QTextFrameFormat_topMargin(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  result = (double)((QTextFrameFormat const *)arg1)->topMargin();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setBottomMargin(QTextFrameFormat * self, double margin) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (double)margin; 
  (arg1)->setBottomMargin(arg2);
}


SWIGEXPORT double QTextFrameFormat_bottomMargin(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  result = (double)((QTextFrameFormat const *)arg1)->bottomMargin();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setLeftMargin(QTextFrameFormat * self, double margin) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (double)margin; 
  (arg1)->setLeftMargin(arg2);
}


SWIGEXPORT double QTextFrameFormat_leftMargin(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  result = (double)((QTextFrameFormat const *)arg1)->leftMargin();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setRightMargin(QTextFrameFormat * self, double margin) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (double)margin; 
  (arg1)->setRightMargin(arg2);
}


SWIGEXPORT double QTextFrameFormat_rightMargin(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  result = (double)((QTextFrameFormat const *)arg1)->rightMargin();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setPadding(QTextFrameFormat * self, double padding) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (double)padding; 
  (arg1)->setPadding(arg2);
}


SWIGEXPORT double QTextFrameFormat_padding(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  result = (double)((QTextFrameFormat const *)arg1)->padding();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setWidth(QTextFrameFormat * self, double width) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (double)width; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void QTextFrameFormat_setWidth1(QTextFrameFormat * self, QTextLength const & length) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  QTextLength *arg2 = 0 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = *(QTextLength **)&length;
  (arg1)->setWidth((QTextLength const &)*arg2);
}


SWIGEXPORT QTextLength * QTextFrameFormat_width(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  QTextLength * cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  *(QTextLength **)&cresult = new QTextLength((const QTextLength &)((QTextFrameFormat const *)arg1)->width());
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setHeight(QTextFrameFormat * self, double height) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (double)height; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT void QTextFrameFormat_setHeight1(QTextFrameFormat * self, QTextLength const & height) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  QTextLength *arg2 = 0 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = *(QTextLength **)&height;
  (arg1)->setHeight((QTextLength const &)*arg2);
}


SWIGEXPORT QTextLength * QTextFrameFormat_height(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  QTextLength * cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  *(QTextLength **)&cresult = new QTextLength((const QTextLength &)((QTextFrameFormat const *)arg1)->height());
  return cresult;
}


SWIGEXPORT void QTextFrameFormat_setPageBreakPolicy(QTextFrameFormat * self, PageBreakFlags flags) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  PageBreakFlags arg2 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  arg2 = (PageBreakFlags)flags; 
  (arg1)->setPageBreakPolicy(arg2);
}


SWIGEXPORT PageBreakFlags QTextFrameFormat_pageBreakPolicy(QTextFrameFormat const * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  PageBreakFlags cresult ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  *(PageBreakFlags **)&cresult = new PageBreakFlags((const PageBreakFlags &)((QTextFrameFormat const *)arg1)->pageBreakPolicy());
  return cresult;
}


SWIGEXPORT void Delete_QTextFrameFormat(QTextFrameFormat * self) {
  QTextFrameFormat *arg1 = (QTextFrameFormat *) 0 ;
  
  arg1 = *(QTextFrameFormat **)&self; 
  delete arg1;
}


SWIGEXPORT QTextTableFormat * New_QTextTableFormat0() {
  QTextTableFormat *result = 0 ;
  QTextTableFormat * cresult ;
  
  result = (QTextTableFormat *)new QTextTableFormat();
  *(QTextTableFormat **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextTableFormat_isValid(QTextTableFormat const * self) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextTableFormat **)&self; 
  result = (bool)((QTextTableFormat const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTextTableFormat_columns(QTextTableFormat const * self) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextTableFormat **)&self; 
  result = (int)((QTextTableFormat const *)arg1)->columns();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextTableFormat_setColumns(QTextTableFormat * self, int columns) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextTableFormat **)&self; 
  arg2 = (int)columns; 
  (arg1)->setColumns(arg2);
}


SWIGEXPORT void QTextTableFormat_clearColumnWidthConstraints(QTextTableFormat * self) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  
  arg1 = *(QTextTableFormat **)&self; 
  (arg1)->clearColumnWidthConstraints();
}


SWIGEXPORT double QTextTableFormat_cellSpacing(QTextTableFormat const * self) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextTableFormat **)&self; 
  result = (double)((QTextTableFormat const *)arg1)->cellSpacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextTableFormat_setCellSpacing(QTextTableFormat * self, double spacing) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextTableFormat **)&self; 
  arg2 = (double)spacing; 
  (arg1)->setCellSpacing(arg2);
}


SWIGEXPORT double QTextTableFormat_cellPadding(QTextTableFormat const * self) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextTableFormat **)&self; 
  result = (double)((QTextTableFormat const *)arg1)->cellPadding();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextTableFormat_setCellPadding(QTextTableFormat * self, double padding) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextTableFormat **)&self; 
  arg2 = (double)padding; 
  (arg1)->setCellPadding(arg2);
}


SWIGEXPORT void QTextTableFormat_setAlignment(QTextTableFormat * self, Qt::Alignment alignment) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  Qt::Alignment arg2 ;
  
  arg1 = *(QTextTableFormat **)&self; 
  arg2 = (Qt::Alignment)alignment; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT Qt::Alignment QTextTableFormat_alignment(QTextTableFormat const * self) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  Qt::Alignment cresult ;
  
  arg1 = *(QTextTableFormat **)&self; 
  *(Qt::Alignment **)&cresult = new Qt::Alignment((const Qt::Alignment &)((QTextTableFormat const *)arg1)->alignment());
  return cresult;
}


SWIGEXPORT void QTextTableFormat_setHeaderRowCount(QTextTableFormat * self, int count) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  int arg2 ;
  
  arg1 = *(QTextTableFormat **)&self; 
  arg2 = (int)count; 
  (arg1)->setHeaderRowCount(arg2);
}


SWIGEXPORT int QTextTableFormat_headerRowCount(QTextTableFormat const * self) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTextTableFormat **)&self; 
  result = (int)((QTextTableFormat const *)arg1)->headerRowCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTextTableFormat(QTextTableFormat * self) {
  QTextTableFormat *arg1 = (QTextTableFormat *) 0 ;
  
  arg1 = *(QTextTableFormat **)&self; 
  delete arg1;
}


SWIGEXPORT QTextTableCellFormat * New_QTextTableCellFormat0() {
  QTextTableCellFormat *result = 0 ;
  QTextTableCellFormat * cresult ;
  
  result = (QTextTableCellFormat *)new QTextTableCellFormat();
  *(QTextTableCellFormat **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTextTableCellFormat_isValid(QTextTableCellFormat const * self) {
  QTextTableCellFormat *arg1 = (QTextTableCellFormat *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTextTableCellFormat **)&self; 
  result = (bool)((QTextTableCellFormat const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextTableCellFormat_setTopPadding(QTextTableCellFormat * self, double padding) {
  QTextTableCellFormat *arg1 = (QTextTableCellFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextTableCellFormat **)&self; 
  arg2 = (double)padding; 
  (arg1)->setTopPadding(arg2);
}


SWIGEXPORT double QTextTableCellFormat_topPadding(QTextTableCellFormat const * self) {
  QTextTableCellFormat *arg1 = (QTextTableCellFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextTableCellFormat **)&self; 
  result = (double)((QTextTableCellFormat const *)arg1)->topPadding();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextTableCellFormat_setBottomPadding(QTextTableCellFormat * self, double padding) {
  QTextTableCellFormat *arg1 = (QTextTableCellFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextTableCellFormat **)&self; 
  arg2 = (double)padding; 
  (arg1)->setBottomPadding(arg2);
}


SWIGEXPORT double QTextTableCellFormat_bottomPadding(QTextTableCellFormat const * self) {
  QTextTableCellFormat *arg1 = (QTextTableCellFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextTableCellFormat **)&self; 
  result = (double)((QTextTableCellFormat const *)arg1)->bottomPadding();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextTableCellFormat_setLeftPadding(QTextTableCellFormat * self, double padding) {
  QTextTableCellFormat *arg1 = (QTextTableCellFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextTableCellFormat **)&self; 
  arg2 = (double)padding; 
  (arg1)->setLeftPadding(arg2);
}


SWIGEXPORT double QTextTableCellFormat_leftPadding(QTextTableCellFormat const * self) {
  QTextTableCellFormat *arg1 = (QTextTableCellFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextTableCellFormat **)&self; 
  result = (double)((QTextTableCellFormat const *)arg1)->leftPadding();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextTableCellFormat_setRightPadding(QTextTableCellFormat * self, double padding) {
  QTextTableCellFormat *arg1 = (QTextTableCellFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextTableCellFormat **)&self; 
  arg2 = (double)padding; 
  (arg1)->setRightPadding(arg2);
}


SWIGEXPORT double QTextTableCellFormat_rightPadding(QTextTableCellFormat const * self) {
  QTextTableCellFormat *arg1 = (QTextTableCellFormat *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTextTableCellFormat **)&self; 
  result = (double)((QTextTableCellFormat const *)arg1)->rightPadding();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTextTableCellFormat_setPadding(QTextTableCellFormat * self, double padding) {
  QTextTableCellFormat *arg1 = (QTextTableCellFormat *) 0 ;
  double arg2 ;
  
  arg1 = *(QTextTableCellFormat **)&self; 
  arg2 = (double)padding; 
  (arg1)->setPadding(arg2);
}


SWIGEXPORT void Delete_QTextTableCellFormat(QTextTableCellFormat * self) {
  QTextTableCellFormat *arg1 = (QTextTableCellFormat *) 0 ;
  
  arg1 = *(QTextTableCellFormat **)&self; 
  delete arg1;
}


SWIGEXPORT long Modula3_QTextCharFormatToQTextFormat(long objectRef) {
    long baseptr = 0;
    *(QTextFormat **)&baseptr = *(QTextCharFormat **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QTextBlockFormatToQTextFormat(long objectRef) {
    long baseptr = 0;
    *(QTextFormat **)&baseptr = *(QTextBlockFormat **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QTextListFormatToQTextFormat(long objectRef) {
    long baseptr = 0;
    *(QTextFormat **)&baseptr = *(QTextListFormat **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QTextImageFormatToQTextCharFormat(long objectRef) {
    long baseptr = 0;
    *(QTextCharFormat **)&baseptr = *(QTextImageFormat **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QTextFrameFormatToQTextFormat(long objectRef) {
    long baseptr = 0;
    *(QTextFormat **)&baseptr = *(QTextFrameFormat **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QTextTableFormatToQTextFrameFormat(long objectRef) {
    long baseptr = 0;
    *(QTextFrameFormat **)&baseptr = *(QTextTableFormat **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QTextTableCellFormatToQTextCharFormat(long objectRef) {
    long baseptr = 0;
    *(QTextCharFormat **)&baseptr = *(QTextTableCellFormat **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

