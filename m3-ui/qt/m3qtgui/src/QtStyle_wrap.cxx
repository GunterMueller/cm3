/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qstyle.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void Delete_QStyle(QStyle * self) {
  QStyle *arg1 = (QStyle *) 0 ;
  
  arg1 = *(QStyle **)&self; 
  delete arg1;
}


SWIGEXPORT void QStyle_polish(QStyle * self, QWidget * m3arg2) {
  QStyle *arg1 = (QStyle *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  (arg1)->polish(arg2);
}


SWIGEXPORT void QStyle_unpolish(QStyle * self, QWidget * m3arg2) {
  QStyle *arg1 = (QStyle *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  (arg1)->unpolish(arg2);
}


SWIGEXPORT void QStyle_polish1(QStyle * self, QApplication * m3arg2) {
  QStyle *arg1 = (QStyle *) 0 ;
  QApplication *arg2 = (QApplication *) 0 ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = *(QApplication **)&m3arg2; 
  (arg1)->polish(arg2);
}


SWIGEXPORT void QStyle_unpolish1(QStyle * self, QApplication * m3arg2) {
  QStyle *arg1 = (QStyle *) 0 ;
  QApplication *arg2 = (QApplication *) 0 ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = *(QApplication **)&m3arg2; 
  (arg1)->unpolish(arg2);
}


SWIGEXPORT void QStyle_polish2(QStyle * self, QPalette * m3arg2) {
  QStyle *arg1 = (QStyle *) 0 ;
  QPalette *arg2 = 0 ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = *(QPalette **)&m3arg2;
  /*
  if(!arg2) {
      //SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QPalette & reference is null");
      //RETURN ;
      return ;
    }
  */
  
  (arg1)->polish(*arg2);
}


SWIGEXPORT QRect * QStyle_itemTextRect(QStyle const * self, QFontMetrics * fm, QRect * r, int flags, bool enabled, QString * text) {
  QStyle *arg1 = (QStyle *) 0 ;
  QFontMetrics *arg2 = 0 ;
  QRect *arg3 = 0 ;
  int arg4 ;
  bool arg5 ;
  QString *arg6 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = *(QFontMetrics **)&fm;
  arg3 = *(QRect **)&r;
  arg4 = (int)flags; 
  arg5 = enabled ? true : false; 
  arg6 = *(QString **)&text;
  *(QRect **)&cresult = new QRect((const QRect &)((QStyle const *)arg1)->itemTextRect((QFontMetrics const &)*arg2,(QRect const &)*arg3,arg4,arg5,(QString const &)*arg6));
  return cresult;
}


SWIGEXPORT QRect * QStyle_itemPixmapRect(QStyle const * self, QRect * r, int flags, QPixmap * pixmap) {
  QStyle *arg1 = (QStyle *) 0 ;
  QRect *arg2 = 0 ;
  int arg3 ;
  QPixmap *arg4 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = *(QRect **)&r;
  arg3 = (int)flags; 
  arg4 = *(QPixmap **)&pixmap;
  *(QRect **)&cresult = new QRect((const QRect &)((QStyle const *)arg1)->itemPixmapRect((QRect const &)*arg2,arg3,(QPixmap const &)*arg4));
  return cresult;
}


SWIGEXPORT void QStyle_drawItemText(QStyle const * self, QPainter * painter, QRect * rect, int flags, QPalette * pal, bool enabled, QString * text, QPalette::ColorRole textRole) {
  QStyle *arg1 = (QStyle *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  QRect *arg3 = 0 ;
  int arg4 ;
  QPalette *arg5 = 0 ;
  bool arg6 ;
  QString *arg7 = 0 ;
  QPalette::ColorRole arg8 ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = *(QPainter **)&painter; 
  arg3 = *(QRect **)&rect;
  arg4 = (int)flags; 
  arg5 = *(QPalette **)&pal;
  arg6 = enabled ? true : false; 
  arg7 = *(QString **)&text;
  arg8 = (QPalette::ColorRole)textRole; 
  ((QStyle const *)arg1)->drawItemText(arg2,(QRect const &)*arg3,arg4,(QPalette const &)*arg5,arg6,(QString const &)*arg7,arg8);
}


SWIGEXPORT void QStyle_drawItemText1(QStyle const * self, QPainter * painter, QRect * rect, int flags, QPalette * pal, bool enabled, QString * text) {
  QStyle *arg1 = (QStyle *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  QRect *arg3 = 0 ;
  int arg4 ;
  QPalette *arg5 = 0 ;
  bool arg6 ;
  QString *arg7 = 0 ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = *(QPainter **)&painter; 
  arg3 = *(QRect **)&rect;
  arg4 = (int)flags; 
  arg5 = *(QPalette **)&pal;
  arg6 = enabled ? true : false; 
  arg7 = *(QString **)&text;
  ((QStyle const *)arg1)->drawItemText(arg2,(QRect const &)*arg3,arg4,(QPalette const &)*arg5,arg6,(QString const &)*arg7);
}


SWIGEXPORT void QStyle_drawItemPixmap(QStyle const * self, QPainter * painter, QRect * rect, int alignment, QPixmap * pixmap) {
  QStyle *arg1 = (QStyle *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  QRect *arg3 = 0 ;
  int arg4 ;
  QPixmap *arg5 = 0 ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = *(QPainter **)&painter; 
  arg3 = *(QRect **)&rect;
  arg4 = (int)alignment; 
  arg5 = *(QPixmap **)&pixmap;
  ((QStyle const *)arg1)->drawItemPixmap(arg2,(QRect const &)*arg3,arg4,(QPixmap const &)*arg5);
}


SWIGEXPORT QPalette * QStyle_standardPalette(QStyle const * self) {
  QStyle *arg1 = (QStyle *) 0 ;
  QPalette * cresult ;
  
  arg1 = *(QStyle **)&self; 
  *(QPalette **)&cresult = new QPalette((const QPalette &)((QStyle const *)arg1)->standardPalette());
  return cresult;
}


SWIGEXPORT QIcon * QStyle_standardIcon(QStyle const * self, QStyle::StandardPixmap standardIcon, QStyleOption * option, QWidget * widget) {
  QStyle *arg1 = (QStyle *) 0 ;
  QStyle::StandardPixmap arg2 ;
  QStyleOption *arg3 = (QStyleOption *) 0 ;
  QWidget *arg4 = (QWidget *) 0 ;
  QIcon * cresult ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = (QStyle::StandardPixmap)standardIcon; 
  arg3 = *(QStyleOption **)&option; 
  arg4 = *(QWidget **)&widget; 
  *(QIcon **)&cresult = new QIcon((const QIcon &)((QStyle const *)arg1)->standardIcon(arg2,(QStyleOption const *)arg3,(QWidget const *)arg4));
  return cresult;
}


SWIGEXPORT QIcon * QStyle_standardIcon1(QStyle const * self, QStyle::StandardPixmap standardIcon, QStyleOption * option) {
  QStyle *arg1 = (QStyle *) 0 ;
  QStyle::StandardPixmap arg2 ;
  QStyleOption *arg3 = (QStyleOption *) 0 ;
  QIcon * cresult ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = (QStyle::StandardPixmap)standardIcon; 
  arg3 = *(QStyleOption **)&option; 
  *(QIcon **)&cresult = new QIcon((const QIcon &)((QStyle const *)arg1)->standardIcon(arg2,(QStyleOption const *)arg3));
  return cresult;
}


SWIGEXPORT QIcon * QStyle_standardIcon2(QStyle const * self, QStyle::StandardPixmap standardIcon) {
  QStyle *arg1 = (QStyle *) 0 ;
  QStyle::StandardPixmap arg2 ;
  QIcon * cresult ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = (QStyle::StandardPixmap)standardIcon; 
  *(QIcon **)&cresult = new QIcon((const QIcon &)((QStyle const *)arg1)->standardIcon(arg2));
  return cresult;
}


SWIGEXPORT QRect * VisualRect(Qt::LayoutDirection direction, QRect * boundingRect, QRect * logicalRect) {
  Qt::LayoutDirection arg1 ;
  QRect *arg2 = 0 ;
  QRect *arg3 = 0 ;
  QRect * cresult ;
  
  arg1 = (Qt::LayoutDirection)direction; 
  arg2 = *(QRect **)&boundingRect;
  arg3 = *(QRect **)&logicalRect;
  *(QRect **)&cresult = new QRect((const QRect &)QStyle::visualRect(arg1,(QRect const &)*arg2,(QRect const &)*arg3));
  return cresult;
}


SWIGEXPORT QPoint * VisualPos(Qt::LayoutDirection direction, QRect * boundingRect, QPoint * logicalPos) {
  Qt::LayoutDirection arg1 ;
  QRect *arg2 = 0 ;
  QPoint *arg3 = 0 ;
  QPoint * cresult ;
  
  arg1 = (Qt::LayoutDirection)direction; 
  arg2 = *(QRect **)&boundingRect;
  arg3 = *(QPoint **)&logicalPos;
  *(QPoint **)&cresult = new QPoint((const QPoint &)QStyle::visualPos(arg1,(QRect const &)*arg2,(QPoint const &)*arg3));
  return cresult;
}


SWIGEXPORT int SliderPositionFromValue(int min, int max, int val, int space, bool upsideDown) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  int result;
  int cresult ;
  
  arg1 = (int)min; 
  arg2 = (int)max; 
  arg3 = (int)val; 
  arg4 = (int)space; 
  arg5 = upsideDown ? true : false; 
  result = (int)QStyle::sliderPositionFromValue(arg1,arg2,arg3,arg4,arg5);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int SliderPositionFromValue1(int min, int max, int val, int space) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  int cresult ;
  
  arg1 = (int)min; 
  arg2 = (int)max; 
  arg3 = (int)val; 
  arg4 = (int)space; 
  result = (int)QStyle::sliderPositionFromValue(arg1,arg2,arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int SliderValueFromPosition(int min, int max, int pos, int space, bool upsideDown) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  int result;
  int cresult ;
  
  arg1 = (int)min; 
  arg2 = (int)max; 
  arg3 = (int)pos; 
  arg4 = (int)space; 
  arg5 = upsideDown ? true : false; 
  result = (int)QStyle::sliderValueFromPosition(arg1,arg2,arg3,arg4,arg5);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int SliderValueFromPosition1(int min, int max, int pos, int space) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  int cresult ;
  
  arg1 = (int)min; 
  arg2 = (int)max; 
  arg3 = (int)pos; 
  arg4 = (int)space; 
  result = (int)QStyle::sliderValueFromPosition(arg1,arg2,arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::Alignment VisualAlignment(Qt::LayoutDirection direction, Qt::Alignment alignment) {
  Qt::LayoutDirection arg1 ;
  Qt::Alignment arg2 ;
  Qt::Alignment cresult ;
  
  arg1 = (Qt::LayoutDirection)direction; 
  arg2 = (Qt::Alignment)alignment; 
  *(Qt::Alignment **)&cresult = new Qt::Alignment((const Qt::Alignment &)QStyle::visualAlignment(arg1,arg2));
  return cresult;
}


SWIGEXPORT QRect * AlignedRect(Qt::LayoutDirection direction, Qt::Alignment alignment, QSize * size, QRect * rectangle) {
  Qt::LayoutDirection arg1 ;
  Qt::Alignment arg2 ;
  QSize *arg3 = 0 ;
  QRect *arg4 = 0 ;
  QRect * cresult ;
  
  arg1 = (Qt::LayoutDirection)direction; 
  arg2 = (Qt::Alignment)alignment; 
  arg3 = *(QSize **)&size;
  arg4 = *(QRect **)&rectangle;
  *(QRect **)&cresult = new QRect((const QRect &)QStyle::alignedRect(arg1,arg2,(QSize const &)*arg3,(QRect const &)*arg4));
  return cresult;
}


SWIGEXPORT int QStyle_layoutSpacing(QStyle const * self, QSizePolicy::ControlType control1, QSizePolicy::ControlType control2, Qt::Orientation orientation, QStyleOption * option, QWidget * widget) {
  QStyle *arg1 = (QStyle *) 0 ;
  QSizePolicy::ControlType arg2 ;
  QSizePolicy::ControlType arg3 ;
  Qt::Orientation arg4 ;
  QStyleOption *arg5 = (QStyleOption *) 0 ;
  QWidget *arg6 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = (QSizePolicy::ControlType)control1; 
  arg3 = (QSizePolicy::ControlType)control2; 
  arg4 = (Qt::Orientation)orientation; 
  arg5 = *(QStyleOption **)&option; 
  arg6 = *(QWidget **)&widget; 
  result = (int)((QStyle const *)arg1)->layoutSpacing(arg2,arg3,arg4,(QStyleOption const *)arg5,(QWidget const *)arg6);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QStyle_layoutSpacing1(QStyle const * self, QSizePolicy::ControlType control1, QSizePolicy::ControlType control2, Qt::Orientation orientation, QStyleOption * option) {
  QStyle *arg1 = (QStyle *) 0 ;
  QSizePolicy::ControlType arg2 ;
  QSizePolicy::ControlType arg3 ;
  Qt::Orientation arg4 ;
  QStyleOption *arg5 = (QStyleOption *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = (QSizePolicy::ControlType)control1; 
  arg3 = (QSizePolicy::ControlType)control2; 
  arg4 = (Qt::Orientation)orientation; 
  arg5 = *(QStyleOption **)&option; 
  result = (int)((QStyle const *)arg1)->layoutSpacing(arg2,arg3,arg4,(QStyleOption const *)arg5);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QStyle_layoutSpacing2(QStyle const * self, QSizePolicy::ControlType control1, QSizePolicy::ControlType control2, Qt::Orientation orientation) {
  QStyle *arg1 = (QStyle *) 0 ;
  QSizePolicy::ControlType arg2 ;
  QSizePolicy::ControlType arg3 ;
  Qt::Orientation arg4 ;
  int result;
  int cresult ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = (QSizePolicy::ControlType)control1; 
  arg3 = (QSizePolicy::ControlType)control2; 
  arg4 = (Qt::Orientation)orientation; 
  result = (int)((QStyle const *)arg1)->layoutSpacing(arg2,arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QStyle_combinedLayoutSpacing(QStyle const * self, QSizePolicy::ControlTypes controls1, QSizePolicy::ControlTypes controls2, Qt::Orientation orientation, QStyleOption * option, QWidget * widget) {
  QStyle *arg1 = (QStyle *) 0 ;
  QSizePolicy::ControlTypes arg2 ;
  QSizePolicy::ControlTypes arg3 ;
  Qt::Orientation arg4 ;
  QStyleOption *arg5 = (QStyleOption *) 0 ;
  QWidget *arg6 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = (QSizePolicy::ControlTypes)controls1; 
  arg3 = (QSizePolicy::ControlTypes)controls2; 
  arg4 = (Qt::Orientation)orientation; 
  arg5 = *(QStyleOption **)&option; 
  arg6 = *(QWidget **)&widget; 
  result = (int)((QStyle const *)arg1)->combinedLayoutSpacing(arg2,arg3,arg4,arg5,arg6);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QStyle_combinedLayoutSpacing1(QStyle const * self, QSizePolicy::ControlTypes controls1, QSizePolicy::ControlTypes controls2, Qt::Orientation orientation, QStyleOption * option) {
  QStyle *arg1 = (QStyle *) 0 ;
  QSizePolicy::ControlTypes arg2 ;
  QSizePolicy::ControlTypes arg3 ;
  Qt::Orientation arg4 ;
  QStyleOption *arg5 = (QStyleOption *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = (QSizePolicy::ControlTypes)controls1; 
  arg3 = (QSizePolicy::ControlTypes)controls2; 
  arg4 = (Qt::Orientation)orientation; 
  arg5 = *(QStyleOption **)&option; 
  result = (int)((QStyle const *)arg1)->combinedLayoutSpacing(arg2,arg3,arg4,arg5);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QStyle_combinedLayoutSpacing2(QStyle const * self, QSizePolicy::ControlTypes controls1, QSizePolicy::ControlTypes controls2, Qt::Orientation orientation) {
  QStyle *arg1 = (QStyle *) 0 ;
  QSizePolicy::ControlTypes arg2 ;
  QSizePolicy::ControlTypes arg3 ;
  Qt::Orientation arg4 ;
  int result;
  int cresult ;
  
  arg1 = *(QStyle **)&self; 
  arg2 = (QSizePolicy::ControlTypes)controls1; 
  arg3 = (QSizePolicy::ControlTypes)controls2; 
  arg4 = (Qt::Orientation)orientation; 
  result = (int)((QStyle const *)arg1)->combinedLayoutSpacing(arg2,arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QStyle const * QStyle_proxy(QStyle const * self) {
  QStyle *arg1 = (QStyle *) 0 ;
  QStyle *result = 0 ;
  QStyle const * cresult ;
  
  arg1 = *(QStyle **)&self; 
  result = (QStyle *)((QStyle const *)arg1)->proxy();
  *(QStyle **)&cresult = result; 
  return cresult;
}


SWIGEXPORT long Modula3_QStyleToQObject(long objectRef) {
    long baseptr = 0;
    *(QObject **)&baseptr = *(QStyle **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

