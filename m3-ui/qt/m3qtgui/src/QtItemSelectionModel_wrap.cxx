/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qitemselectionmodel.h>
#define SelectionFlags QItemSelectionModel::SelectionFlags


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QItemSelectionRange * New_QItemSelectionRange0() {
  QItemSelectionRange *result = 0 ;
  QItemSelectionRange * cresult ;
  
  result = (QItemSelectionRange *)new QItemSelectionRange();
  *(QItemSelectionRange **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QItemSelectionRange * New_QItemSelectionRange1(QItemSelectionRange const & other) {
  QItemSelectionRange *arg1 = 0 ;
  QItemSelectionRange *result = 0 ;
  QItemSelectionRange * cresult ;
  
  arg1 = *(QItemSelectionRange **)&other;
  result = (QItemSelectionRange *)new QItemSelectionRange((QItemSelectionRange const &)*arg1);
  *(QItemSelectionRange **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QItemSelectionRange * New_QItemSelectionRange2(QModelIndex * topLeft, QModelIndex * bottomRight) {
  QModelIndex *arg1 = 0 ;
  QModelIndex *arg2 = 0 ;
  QItemSelectionRange *result = 0 ;
  QItemSelectionRange * cresult ;
  
  arg1 = *(QModelIndex **)&topLeft;
  arg2 = *(QModelIndex **)&bottomRight;
  result = (QItemSelectionRange *)new QItemSelectionRange((QModelIndex const &)*arg1,(QModelIndex const &)*arg2);
  *(QItemSelectionRange **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QItemSelectionRange * New_QItemSelectionRange3(QModelIndex * index) {
  QModelIndex *arg1 = 0 ;
  QItemSelectionRange *result = 0 ;
  QItemSelectionRange * cresult ;
  
  arg1 = *(QModelIndex **)&index;
  result = (QItemSelectionRange *)new QItemSelectionRange((QModelIndex const &)*arg1);
  *(QItemSelectionRange **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QItemSelectionRange_top(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  result = (int)((QItemSelectionRange const *)arg1)->top();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QItemSelectionRange_left(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  result = (int)((QItemSelectionRange const *)arg1)->left();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QItemSelectionRange_bottom(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  result = (int)((QItemSelectionRange const *)arg1)->bottom();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QItemSelectionRange_right(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  result = (int)((QItemSelectionRange const *)arg1)->right();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QItemSelectionRange_width(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  result = (int)((QItemSelectionRange const *)arg1)->width();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QItemSelectionRange_height(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  result = (int)((QItemSelectionRange const *)arg1)->height();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QModelIndex * QItemSelectionRange_topLeft(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  QModelIndex * cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QItemSelectionRange const *)arg1)->topLeft());
  return cresult;
}


SWIGEXPORT QModelIndex * QItemSelectionRange_bottomRight(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  QModelIndex * cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QItemSelectionRange const *)arg1)->bottomRight());
  return cresult;
}


SWIGEXPORT QModelIndex * QItemSelectionRange_parent(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  QModelIndex * cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QItemSelectionRange const *)arg1)->parent());
  return cresult;
}


SWIGEXPORT QAbstractItemModel * QItemSelectionRange_model(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  QAbstractItemModel *result = 0 ;
  QAbstractItemModel * cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  result = (QAbstractItemModel *)((QItemSelectionRange const *)arg1)->model();
  *(QAbstractItemModel **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QItemSelectionRange_contains(QItemSelectionRange const * self, QModelIndex * index) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  QModelIndex *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  arg2 = *(QModelIndex **)&index;
  result = (bool)((QItemSelectionRange const *)arg1)->contains((QModelIndex const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QItemSelectionRange_contains1(QItemSelectionRange const * self, int row, int column, QModelIndex * parentIndex) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  int arg2 ;
  int arg3 ;
  QModelIndex *arg4 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  arg4 = *(QModelIndex **)&parentIndex;
  result = (bool)((QItemSelectionRange const *)arg1)->contains(arg2,arg3,(QModelIndex const &)*arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QItemSelectionRange_intersects(QItemSelectionRange const * self, QItemSelectionRange const & other) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  QItemSelectionRange *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  arg2 = *(QItemSelectionRange **)&other;
  result = (bool)((QItemSelectionRange const *)arg1)->intersects((QItemSelectionRange const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QItemSelectionRange * QItemSelectionRange_intersect(QItemSelectionRange const * self, QItemSelectionRange const & other) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  QItemSelectionRange *arg2 = 0 ;
  QItemSelectionRange * cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  arg2 = *(QItemSelectionRange **)&other;
  *(QItemSelectionRange **)&cresult = new QItemSelectionRange((const QItemSelectionRange &)((QItemSelectionRange const *)arg1)->intersect((QItemSelectionRange const &)*arg2));
  return cresult;
}


SWIGEXPORT QItemSelectionRange * QItemSelectionRange_intersected(QItemSelectionRange const * self, QItemSelectionRange const & other) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  QItemSelectionRange *arg2 = 0 ;
  QItemSelectionRange * cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  arg2 = *(QItemSelectionRange **)&other;
  *(QItemSelectionRange **)&cresult = new QItemSelectionRange((const QItemSelectionRange &)((QItemSelectionRange const *)arg1)->intersected((QItemSelectionRange const &)*arg2));
  return cresult;
}


SWIGEXPORT bool QItemSelectionRange_isValid(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  result = (bool)((QItemSelectionRange const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QItemSelectionRange_isEmpty(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  result = (bool)((QItemSelectionRange const *)arg1)->isEmpty();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QModelIndexList * QItemSelectionRange_indexes(QItemSelectionRange const * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  QModelIndexList * cresult ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  *(QModelIndexList **)&cresult = new QModelIndexList((const QModelIndexList &)((QItemSelectionRange const *)arg1)->indexes());
  return cresult;
}


SWIGEXPORT void Delete_QItemSelectionRange(QItemSelectionRange * self) {
  QItemSelectionRange *arg1 = (QItemSelectionRange *) 0 ;
  
  arg1 = *(QItemSelectionRange **)&self; 
  delete arg1;
}


SWIGEXPORT QItemSelectionModel * New_QItemSelectionModel0(QAbstractItemModel * model) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QItemSelectionModel *result = 0 ;
  QItemSelectionModel * cresult ;
  
  arg1 = *(QAbstractItemModel **)&model; 
  result = (QItemSelectionModel *)new QItemSelectionModel(arg1);
  *(QItemSelectionModel **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QItemSelectionModel * New_QItemSelectionModel1(QAbstractItemModel * model, QObject * parent) {
  QAbstractItemModel *arg1 = (QAbstractItemModel *) 0 ;
  QObject *arg2 = (QObject *) 0 ;
  QItemSelectionModel *result = 0 ;
  QItemSelectionModel * cresult ;
  
  arg1 = *(QAbstractItemModel **)&model; 
  arg2 = *(QObject **)&parent; 
  result = (QItemSelectionModel *)new QItemSelectionModel(arg1,arg2);
  *(QItemSelectionModel **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QItemSelectionModel(QItemSelectionModel * self) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  delete arg1;
}


SWIGEXPORT QModelIndex * QItemSelectionModel_currentIndex(QItemSelectionModel const * self) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  QModelIndex * cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  *(QModelIndex **)&cresult = new QModelIndex((const QModelIndex &)((QItemSelectionModel const *)arg1)->currentIndex());
  return cresult;
}


SWIGEXPORT bool QItemSelectionModel_isSelected(QItemSelectionModel const * self, QModelIndex * index) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  arg2 = *(QModelIndex **)&index;
  result = (bool)((QItemSelectionModel const *)arg1)->isSelected((QModelIndex const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QItemSelectionModel_isRowSelected(QItemSelectionModel const * self, int row, QModelIndex * parent) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  int arg2 ;
  QModelIndex *arg3 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  arg2 = (int)row; 
  arg3 = *(QModelIndex **)&parent;
  result = (bool)((QItemSelectionModel const *)arg1)->isRowSelected(arg2,(QModelIndex const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QItemSelectionModel_isColumnSelected(QItemSelectionModel const * self, int column, QModelIndex * parent) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  int arg2 ;
  QModelIndex *arg3 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  arg2 = (int)column; 
  arg3 = *(QModelIndex **)&parent;
  result = (bool)((QItemSelectionModel const *)arg1)->isColumnSelected(arg2,(QModelIndex const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QItemSelectionModel_rowIntersectsSelection(QItemSelectionModel const * self, int row, QModelIndex * parent) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  int arg2 ;
  QModelIndex *arg3 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  arg2 = (int)row; 
  arg3 = *(QModelIndex **)&parent;
  result = (bool)((QItemSelectionModel const *)arg1)->rowIntersectsSelection(arg2,(QModelIndex const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QItemSelectionModel_columnIntersectsSelection(QItemSelectionModel const * self, int column, QModelIndex * parent) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  int arg2 ;
  QModelIndex *arg3 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  arg2 = (int)column; 
  arg3 = *(QModelIndex **)&parent;
  result = (bool)((QItemSelectionModel const *)arg1)->columnIntersectsSelection(arg2,(QModelIndex const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QItemSelectionModel_hasSelection(QItemSelectionModel const * self) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  result = (bool)((QItemSelectionModel const *)arg1)->hasSelection();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QModelIndexList * QItemSelectionModel_selectedIndexes(QItemSelectionModel const * self) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  QModelIndexList * cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  *(QModelIndexList **)&cresult = new QModelIndexList((const QModelIndexList &)((QItemSelectionModel const *)arg1)->selectedIndexes());
  return cresult;
}


SWIGEXPORT QModelIndexList * QItemSelectionModel_selectedRows(QItemSelectionModel const * self, int column) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  int arg2 ;
  QModelIndexList * cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  arg2 = (int)column; 
  *(QModelIndexList **)&cresult = new QModelIndexList((const QModelIndexList &)((QItemSelectionModel const *)arg1)->selectedRows(arg2));
  return cresult;
}


SWIGEXPORT QModelIndexList * QItemSelectionModel_selectedRows1(QItemSelectionModel const * self) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  QModelIndexList * cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  *(QModelIndexList **)&cresult = new QModelIndexList((const QModelIndexList &)((QItemSelectionModel const *)arg1)->selectedRows());
  return cresult;
}


SWIGEXPORT QModelIndexList * QItemSelectionModel_selectedColumns(QItemSelectionModel const * self, int row) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  int arg2 ;
  QModelIndexList * cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  arg2 = (int)row; 
  *(QModelIndexList **)&cresult = new QModelIndexList((const QModelIndexList &)((QItemSelectionModel const *)arg1)->selectedColumns(arg2));
  return cresult;
}


SWIGEXPORT QModelIndexList * QItemSelectionModel_selectedColumns1(QItemSelectionModel const * self) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  QModelIndexList * cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  *(QModelIndexList **)&cresult = new QModelIndexList((const QModelIndexList &)((QItemSelectionModel const *)arg1)->selectedColumns());
  return cresult;
}


SWIGEXPORT QItemSelection * QItemSelectionModel_selection(QItemSelectionModel const * self) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  QItemSelection * cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  *(QItemSelection **)&cresult = new QItemSelection((const QItemSelection &)((QItemSelectionModel const *)arg1)->selection());
  return cresult;
}


SWIGEXPORT QAbstractItemModel * QItemSelectionModel_model(QItemSelectionModel const * self) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  QAbstractItemModel *result = 0 ;
  QAbstractItemModel * cresult ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  result = (QAbstractItemModel *)((QItemSelectionModel const *)arg1)->model();
  *(QAbstractItemModel **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QItemSelectionModel_setCurrentIndex(QItemSelectionModel * self, QModelIndex * index, QItemSelectionModel::SelectionFlags command) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  QItemSelectionModel::SelectionFlags arg3 ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  arg2 = *(QModelIndex **)&index;
  arg3 = (QItemSelectionModel::SelectionFlags)command; 
  (arg1)->setCurrentIndex((QModelIndex const &)*arg2,arg3);
}


SWIGEXPORT void QItemSelectionModel_select(QItemSelectionModel * self, QModelIndex * index, QItemSelectionModel::SelectionFlags command) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  QModelIndex *arg2 = 0 ;
  QItemSelectionModel::SelectionFlags arg3 ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  arg2 = *(QModelIndex **)&index;
  arg3 = (QItemSelectionModel::SelectionFlags)command; 
  (arg1)->select((QModelIndex const &)*arg2,arg3);
}


SWIGEXPORT void QItemSelectionModel_select1(QItemSelectionModel * self, QItemSelection const & selection, QItemSelectionModel::SelectionFlags command) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  QItemSelection *arg2 = 0 ;
  QItemSelectionModel::SelectionFlags arg3 ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  arg2 = *(QItemSelection **)&selection;
  arg3 = (QItemSelectionModel::SelectionFlags)command; 
  (arg1)->select((QItemSelection const &)*arg2,arg3);
}


SWIGEXPORT void QItemSelectionModel_clear(QItemSelectionModel * self) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  (arg1)->clear();
}


SWIGEXPORT void QItemSelectionModel_reset(QItemSelectionModel * self) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  (arg1)->reset();
}


SWIGEXPORT void QItemSelectionModel_clearSelection(QItemSelectionModel * self) {
  QItemSelectionModel *arg1 = (QItemSelectionModel *) 0 ;
  
  arg1 = *(QItemSelectionModel **)&self; 
  (arg1)->clearSelection();
}


SWIGEXPORT QItemSelection * New_QItemSelection0() {
  QItemSelection *result = 0 ;
  QItemSelection * cresult ;
  
  result = (QItemSelection *)new QItemSelection();
  *(QItemSelection **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QItemSelection * New_QItemSelection1(QModelIndex * topLeft, QModelIndex * bottomRight) {
  QModelIndex *arg1 = 0 ;
  QModelIndex *arg2 = 0 ;
  QItemSelection *result = 0 ;
  QItemSelection * cresult ;
  
  arg1 = *(QModelIndex **)&topLeft;
  arg2 = *(QModelIndex **)&bottomRight;
  result = (QItemSelection *)new QItemSelection((QModelIndex const &)*arg1,(QModelIndex const &)*arg2);
  *(QItemSelection **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QItemSelection_select(QItemSelection * self, QModelIndex * topLeft, QModelIndex * bottomRight) {
  QItemSelection *arg1 = (QItemSelection *) 0 ;
  QModelIndex *arg2 = 0 ;
  QModelIndex *arg3 = 0 ;
  
  arg1 = *(QItemSelection **)&self; 
  arg2 = *(QModelIndex **)&topLeft;
  arg3 = *(QModelIndex **)&bottomRight;
  (arg1)->select((QModelIndex const &)*arg2,(QModelIndex const &)*arg3);
}


SWIGEXPORT bool QItemSelection_contains(QItemSelection const * self, QModelIndex * index) {
  QItemSelection *arg1 = (QItemSelection *) 0 ;
  QModelIndex *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QItemSelection **)&self; 
  arg2 = *(QModelIndex **)&index;
  result = (bool)((QItemSelection const *)arg1)->contains((QModelIndex const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QModelIndexList * QItemSelection_indexes(QItemSelection const * self) {
  QItemSelection *arg1 = (QItemSelection *) 0 ;
  QModelIndexList * cresult ;
  
  arg1 = *(QItemSelection **)&self; 
  *(QModelIndexList **)&cresult = new QModelIndexList((const QModelIndexList &)((QItemSelection const *)arg1)->indexes());
  return cresult;
}


SWIGEXPORT void QItemSelection_merge(QItemSelection * self, QItemSelection const & other, QItemSelectionModel::SelectionFlags command) {
  QItemSelection *arg1 = (QItemSelection *) 0 ;
  QItemSelection *arg2 = 0 ;
  QItemSelectionModel::SelectionFlags arg3 ;
  
  arg1 = *(QItemSelection **)&self; 
  arg2 = *(QItemSelection **)&other;
  arg3 = (QItemSelectionModel::SelectionFlags)command; 
  (arg1)->merge((QItemSelection const &)*arg2,arg3);
}


SWIGEXPORT void Split(QItemSelectionRange const & range, QItemSelectionRange const & other, QItemSelection * result) {
  QItemSelectionRange *arg1 = 0 ;
  QItemSelectionRange *arg2 = 0 ;
  QItemSelection *arg3 = (QItemSelection *) 0 ;
  
  arg1 = *(QItemSelectionRange **)&range;
  arg2 = *(QItemSelectionRange **)&other;
  arg3 = *(QItemSelection **)&result; 
  QItemSelection::split((QItemSelectionRange const &)*arg1,(QItemSelectionRange const &)*arg2,arg3);
}


SWIGEXPORT void Delete_QItemSelection(QItemSelection * self) {
  QItemSelection *arg1 = (QItemSelection *) 0 ;
  
  arg1 = *(QItemSelection **)&self; 
  delete arg1;
}


SWIGEXPORT long Modula3_QItemSelectionModelToQObject(long objectRef) {
    long baseptr = 0;
    *(QObject **)&baseptr = *(QItemSelectionModel **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

