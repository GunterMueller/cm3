/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qwidget.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QWidget * New_QWidget0(QWidget * parent, int f) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowFlags arg2 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = (Qt::WindowFlags)f; 
  result = (QWidget *)new QWidget(arg1,arg2);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * New_QWidget1(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QWidget *)new QWidget(arg1);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * New_init_widget() {
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  result = (QWidget *)new QWidget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QWidget(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  delete arg1;
}


SWIGEXPORT int QWidget_devType(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (int)((QWidget const *)arg1)->devType();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QWidget_winId(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (int)((QWidget const *)arg1)->winId();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_createWinId(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->createWinId();
}


SWIGEXPORT int QWidget_effectiveWinId(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (int)((QWidget const *)arg1)->effectiveWinId();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QStyle * QWidget_style(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QStyle *result = 0 ;
  QStyle * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QStyle *)((QWidget const *)arg1)->style();
  *(QStyle **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setStyle(QWidget * self, QStyle * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QStyle *arg2 = (QStyle *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QStyle **)&m3arg2; 
  (arg1)->setStyle(arg2);
}


SWIGEXPORT bool QWidget_isTopLevel(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isTopLevel();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_isWindow(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isWindow();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_isModal(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isModal();
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::WindowModality QWidget_windowModality(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowModality result;
  Qt::WindowModality cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (Qt::WindowModality)((QWidget const *)arg1)->windowModality();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setWindowModality(QWidget * self, Qt::WindowModality windowModality) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowModality arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::WindowModality)windowModality; 
  (arg1)->setWindowModality(arg2);
}


SWIGEXPORT bool QWidget_isEnabled(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_isEnabledTo(QWidget const * self, QWidget * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  result = (bool)((QWidget const *)arg1)->isEnabledTo(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_isEnabledToTLW(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isEnabledToTLW();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setEnabled(QWidget * self, bool m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = m3arg2 ? true : false; 
  (arg1)->setEnabled(arg2);
}


SWIGEXPORT void QWidget_setDisabled(QWidget * self, bool m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = m3arg2 ? true : false; 
  (arg1)->setDisabled(arg2);
}


SWIGEXPORT void QWidget_setWindowModified(QWidget * self, bool m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = m3arg2 ? true : false; 
  (arg1)->setWindowModified(arg2);
}


SWIGEXPORT QRect * QWidget_frameGeometry(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QWidget const *)arg1)->frameGeometry());
  return cresult;
}


SWIGEXPORT QRect * QWidget_geometry(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRect *result = 0 ;
  QRect * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QRect *) &((QWidget const *)arg1)->geometry();
  *(QRect **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QWidget_normalGeometry(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QWidget const *)arg1)->normalGeometry());
  return cresult;
}


SWIGEXPORT int QWidget_x(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (int)((QWidget const *)arg1)->x();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QWidget_y(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (int)((QWidget const *)arg1)->y();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPoint * QWidget_pos(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPoint * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QWidget const *)arg1)->pos());
  return cresult;
}


SWIGEXPORT QSize * QWidget_frameSize(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidget const *)arg1)->frameSize());
  return cresult;
}


SWIGEXPORT QSize * QWidget_size(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidget const *)arg1)->size());
  return cresult;
}


SWIGEXPORT int QWidget_width(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (int)((QWidget const *)arg1)->width();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QWidget_height(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (int)((QWidget const *)arg1)->height();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QWidget_rect(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QWidget const *)arg1)->rect());
  return cresult;
}


SWIGEXPORT QRect * QWidget_childrenRect(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QWidget const *)arg1)->childrenRect());
  return cresult;
}


SWIGEXPORT QRegion * QWidget_childrenRegion(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRegion * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QWidget const *)arg1)->childrenRegion());
  return cresult;
}


SWIGEXPORT QSize * QWidget_minimumSize(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidget const *)arg1)->minimumSize());
  return cresult;
}


SWIGEXPORT QSize * QWidget_maximumSize(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidget const *)arg1)->maximumSize());
  return cresult;
}


SWIGEXPORT int QWidget_minimumWidth(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (int)((QWidget const *)arg1)->minimumWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QWidget_minimumHeight(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (int)((QWidget const *)arg1)->minimumHeight();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QWidget_maximumWidth(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (int)((QWidget const *)arg1)->maximumWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QWidget_maximumHeight(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (int)((QWidget const *)arg1)->maximumHeight();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setMinimumSize(QWidget * self, QSize * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QSize **)&m3arg2;
  (arg1)->setMinimumSize((QSize const &)*arg2);
}


SWIGEXPORT void QWidget_setMinimumSize1(QWidget * self, int minw, int minh) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)minw; 
  arg3 = (int)minh; 
  (arg1)->setMinimumSize(arg2,arg3);
}


SWIGEXPORT void QWidget_setMaximumSize(QWidget * self, QSize * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QSize **)&m3arg2;
  (arg1)->setMaximumSize((QSize const &)*arg2);
}


SWIGEXPORT void QWidget_setMaximumSize1(QWidget * self, int maxw, int maxh) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)maxw; 
  arg3 = (int)maxh; 
  (arg1)->setMaximumSize(arg2,arg3);
}


SWIGEXPORT void QWidget_setMinimumWidth(QWidget * self, int minw) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)minw; 
  (arg1)->setMinimumWidth(arg2);
}


SWIGEXPORT void QWidget_setMinimumHeight(QWidget * self, int minh) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)minh; 
  (arg1)->setMinimumHeight(arg2);
}


SWIGEXPORT void QWidget_setMaximumWidth(QWidget * self, int maxw) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)maxw; 
  (arg1)->setMaximumWidth(arg2);
}


SWIGEXPORT void QWidget_setMaximumHeight(QWidget * self, int maxh) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)maxh; 
  (arg1)->setMaximumHeight(arg2);
}


SWIGEXPORT QSize * QWidget_sizeIncrement(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidget const *)arg1)->sizeIncrement());
  return cresult;
}


SWIGEXPORT void QWidget_setSizeIncrement(QWidget * self, QSize * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QSize **)&m3arg2;
  (arg1)->setSizeIncrement((QSize const &)*arg2);
}


SWIGEXPORT void QWidget_setSizeIncrement1(QWidget * self, int w, int h) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  (arg1)->setSizeIncrement(arg2,arg3);
}


SWIGEXPORT QSize * QWidget_baseSize(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidget const *)arg1)->baseSize());
  return cresult;
}


SWIGEXPORT void QWidget_setBaseSize(QWidget * self, QSize * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QSize **)&m3arg2;
  (arg1)->setBaseSize((QSize const &)*arg2);
}


SWIGEXPORT void QWidget_setBaseSize1(QWidget * self, int basew, int baseh) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)basew; 
  arg3 = (int)baseh; 
  (arg1)->setBaseSize(arg2,arg3);
}


SWIGEXPORT void QWidget_setFixedSize(QWidget * self, QSize * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QSize **)&m3arg2;
  (arg1)->setFixedSize((QSize const &)*arg2);
}


SWIGEXPORT void QWidget_setFixedSize1(QWidget * self, int w, int h) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  (arg1)->setFixedSize(arg2,arg3);
}


SWIGEXPORT void QWidget_setFixedWidth(QWidget * self, int w) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)w; 
  (arg1)->setFixedWidth(arg2);
}


SWIGEXPORT void QWidget_setFixedHeight(QWidget * self, int h) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)h; 
  (arg1)->setFixedHeight(arg2);
}


SWIGEXPORT QPoint * QWidget_mapToGlobal(QWidget const * self, QPoint * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPoint *arg2 = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QPoint **)&m3arg2;
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QWidget const *)arg1)->mapToGlobal((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT QPoint * QWidget_mapFromGlobal(QWidget const * self, QPoint * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPoint *arg2 = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QPoint **)&m3arg2;
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QWidget const *)arg1)->mapFromGlobal((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT QPoint * QWidget_mapToParent(QWidget const * self, QPoint * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPoint *arg2 = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QPoint **)&m3arg2;
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QWidget const *)arg1)->mapToParent((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT QPoint * QWidget_mapFromParent(QWidget const * self, QPoint * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPoint *arg2 = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QPoint **)&m3arg2;
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QWidget const *)arg1)->mapFromParent((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT QPoint * QWidget_mapTo(QWidget const * self, QWidget * m3arg2, QPoint * m3arg3) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QPoint *arg3 = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  arg3 = *(QPoint **)&m3arg3;
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QWidget const *)arg1)->mapTo(arg2,(QPoint const &)*arg3));
  return cresult;
}


SWIGEXPORT QPoint * QWidget_mapFrom(QWidget const * self, QWidget * m3arg2, QPoint * m3arg3) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QPoint *arg3 = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  arg3 = *(QPoint **)&m3arg3;
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QWidget const *)arg1)->mapFrom(arg2,(QPoint const &)*arg3));
  return cresult;
}


SWIGEXPORT QWidget * QWidget_window(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QWidget *)((QWidget const *)arg1)->window();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QWidget_nativeParentWidget(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QWidget *)((QWidget const *)arg1)->nativeParentWidget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QWidget_topLevelWidget(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QWidget *)((QWidget const *)arg1)->topLevelWidget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPalette * QWidget_palette(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPalette *result = 0 ;
  QPalette * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QPalette *) &((QWidget const *)arg1)->palette();
  *(QPalette **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setPalette(QWidget * self, QPalette * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPalette *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QPalette **)&m3arg2;
  (arg1)->setPalette((QPalette const &)*arg2);
}


SWIGEXPORT void QWidget_setBackgroundRole(QWidget * self, QPalette::ColorRole m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPalette::ColorRole arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (QPalette::ColorRole)m3arg2; 
  (arg1)->setBackgroundRole(arg2);
}


SWIGEXPORT QPalette::ColorRole QWidget_backgroundRole(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPalette::ColorRole cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QPalette::ColorRole **)&cresult = new QPalette::ColorRole((const QPalette::ColorRole &)((QWidget const *)arg1)->backgroundRole());
  return cresult;
}


SWIGEXPORT void QWidget_setForegroundRole(QWidget * self, QPalette::ColorRole m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPalette::ColorRole arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (QPalette::ColorRole)m3arg2; 
  (arg1)->setForegroundRole(arg2);
}


SWIGEXPORT QPalette::ColorRole QWidget_foregroundRole(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPalette::ColorRole cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QPalette::ColorRole **)&cresult = new QPalette::ColorRole((const QPalette::ColorRole &)((QWidget const *)arg1)->foregroundRole());
  return cresult;
}


SWIGEXPORT QFont * QWidget_font(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QFont *result = 0 ;
  QFont * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QFont *) &((QWidget const *)arg1)->font();
  *(QFont **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setFont(QWidget * self, QFont * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QFont *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QFont **)&m3arg2;
  (arg1)->setFont((QFont const &)*arg2);
}


SWIGEXPORT QFontMetrics * QWidget_fontMetrics(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QFontMetrics * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QFontMetrics **)&cresult = new QFontMetrics((const QFontMetrics &)((QWidget const *)arg1)->fontMetrics());
  return cresult;
}


SWIGEXPORT QFontInfo * QWidget_fontInfo(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QFontInfo * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QFontInfo **)&cresult = new QFontInfo((const QFontInfo &)((QWidget const *)arg1)->fontInfo());
  return cresult;
}


SWIGEXPORT QCursor * QWidget_cursor(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QCursor * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QCursor **)&cresult = new QCursor((const QCursor &)((QWidget const *)arg1)->cursor());
  return cresult;
}


SWIGEXPORT void QWidget_setCursor(QWidget * self, QCursor * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QCursor *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QCursor **)&m3arg2;
  (arg1)->setCursor((QCursor const &)*arg2);
}


SWIGEXPORT void QWidget_unsetCursor(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->unsetCursor();
}


SWIGEXPORT void QWidget_setMouseTracking(QWidget * self, bool enable) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setMouseTracking(arg2);
}


SWIGEXPORT bool QWidget_hasMouseTracking(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->hasMouseTracking();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_underMouse(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->underMouse();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setMask(QWidget * self, QBitmap * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QBitmap *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QBitmap **)&m3arg2;
  (arg1)->setMask((QBitmap const &)*arg2);
}


SWIGEXPORT void QWidget_setMask1(QWidget * self, QRegion * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRegion *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QRegion **)&m3arg2;
  (arg1)->setMask((QRegion const &)*arg2);
}


SWIGEXPORT QRegion * QWidget_mask(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRegion * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QWidget const *)arg1)->mask());
  return cresult;
}


SWIGEXPORT void QWidget_clearMask(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->clearMask();
}


SWIGEXPORT QGraphicsEffect * QWidget_graphicsEffect(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QGraphicsEffect *result = 0 ;
  QGraphicsEffect * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QGraphicsEffect *)((QWidget const *)arg1)->graphicsEffect();
  *(QGraphicsEffect **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setGraphicsEffect(QWidget * self, QGraphicsEffect * effect) {
  QWidget *arg1 = (QWidget *) 0 ;
  QGraphicsEffect *arg2 = (QGraphicsEffect *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QGraphicsEffect **)&effect; 
  (arg1)->setGraphicsEffect(arg2);
}


SWIGEXPORT void QWidget_grabGesture(QWidget * self, Qt::GestureType type, int flags) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::GestureType arg2 ;
  Qt::GestureFlags arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::GestureType)type; 
  arg3 = (Qt::GestureFlags)flags; 
  (arg1)->grabGesture(arg2,arg3);
}


SWIGEXPORT void QWidget_grabGesture1(QWidget * self, Qt::GestureType type) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::GestureType arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::GestureType)type; 
  (arg1)->grabGesture(arg2);
}


SWIGEXPORT void QWidget_ungrabGesture(QWidget * self, Qt::GestureType type) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::GestureType arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::GestureType)type; 
  (arg1)->ungrabGesture(arg2);
}


SWIGEXPORT void QWidget_setWindowTitle(QWidget * self, QString * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QString **)&m3arg2;
  (arg1)->setWindowTitle((QString const &)*arg2);
}


SWIGEXPORT void QWidget_setStyleSheet(QWidget * self, QString * styleSheet) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QString **)&styleSheet;
  (arg1)->setStyleSheet((QString const &)*arg2);
}


SWIGEXPORT QString * QWidget_styleSheet(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QWidget const *)arg1)->styleSheet());
  return cresult;
}


SWIGEXPORT QString * QWidget_windowTitle(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QWidget const *)arg1)->windowTitle());
  return cresult;
}


SWIGEXPORT void QWidget_setWindowIcon(QWidget * self, QIcon * icon) {
  QWidget *arg1 = (QWidget *) 0 ;
  QIcon *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QIcon **)&icon;
  (arg1)->setWindowIcon((QIcon const &)*arg2);
}


SWIGEXPORT void QWidget_setWindowIconText(QWidget * self, QString * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QString **)&m3arg2;
  (arg1)->setWindowIconText((QString const &)*arg2);
}


SWIGEXPORT QString * QWidget_windowIconText(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QWidget const *)arg1)->windowIconText());
  return cresult;
}


SWIGEXPORT void QWidget_setWindowRole(QWidget * self, QString * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QString **)&m3arg2;
  (arg1)->setWindowRole((QString const &)*arg2);
}


SWIGEXPORT QString * QWidget_windowRole(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QWidget const *)arg1)->windowRole());
  return cresult;
}


SWIGEXPORT void QWidget_setWindowFilePath(QWidget * self, QString * filePath) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QString **)&filePath;
  (arg1)->setWindowFilePath((QString const &)*arg2);
}


SWIGEXPORT QString * QWidget_windowFilePath(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QWidget const *)arg1)->windowFilePath());
  return cresult;
}


SWIGEXPORT void QWidget_setWindowOpacity(QWidget * self, double level) {
  QWidget *arg1 = (QWidget *) 0 ;
  double arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (double)level; 
  (arg1)->setWindowOpacity(arg2);
}


SWIGEXPORT double QWidget_windowOpacity(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (double)((QWidget const *)arg1)->windowOpacity();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_isWindowModified(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isWindowModified();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setToolTip(QWidget * self, QString * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QString **)&m3arg2;
  (arg1)->setToolTip((QString const &)*arg2);
}


SWIGEXPORT QString * QWidget_toolTip(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QWidget const *)arg1)->toolTip());
  return cresult;
}


SWIGEXPORT void QWidget_setStatusTip(QWidget * self, QString * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QString **)&m3arg2;
  (arg1)->setStatusTip((QString const &)*arg2);
}


SWIGEXPORT QString * QWidget_statusTip(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QWidget const *)arg1)->statusTip());
  return cresult;
}


SWIGEXPORT void QWidget_setWhatsThis(QWidget * self, QString * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QString **)&m3arg2;
  (arg1)->setWhatsThis((QString const &)*arg2);
}


SWIGEXPORT QString * QWidget_whatsThis(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QWidget const *)arg1)->whatsThis());
  return cresult;
}


SWIGEXPORT QString * QWidget_accessibleName(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QWidget const *)arg1)->accessibleName());
  return cresult;
}


SWIGEXPORT void QWidget_setAccessibleName(QWidget * self, QString * name) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QString **)&name;
  (arg1)->setAccessibleName((QString const &)*arg2);
}


SWIGEXPORT QString * QWidget_accessibleDescription(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QWidget const *)arg1)->accessibleDescription());
  return cresult;
}


SWIGEXPORT void QWidget_setAccessibleDescription(QWidget * self, QString * description) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QString **)&description;
  (arg1)->setAccessibleDescription((QString const &)*arg2);
}


SWIGEXPORT void QWidget_setLayoutDirection(QWidget * self, Qt::LayoutDirection direction) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::LayoutDirection arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::LayoutDirection)direction; 
  (arg1)->setLayoutDirection(arg2);
}


SWIGEXPORT Qt::LayoutDirection QWidget_layoutDirection(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::LayoutDirection result;
  Qt::LayoutDirection cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (Qt::LayoutDirection)((QWidget const *)arg1)->layoutDirection();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_unsetLayoutDirection(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->unsetLayoutDirection();
}


SWIGEXPORT void QWidget_setLocale(QWidget * self, QLocale * locale) {
  QWidget *arg1 = (QWidget *) 0 ;
  QLocale *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QLocale **)&locale;
  (arg1)->setLocale((QLocale const &)*arg2);
}


SWIGEXPORT void QWidget_unsetLocale(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->unsetLocale();
}


SWIGEXPORT bool QWidget_isRightToLeft(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isRightToLeft();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_isLeftToRight(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isLeftToRight();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setFocus(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->setFocus();
}


SWIGEXPORT bool QWidget_isActiveWindow(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isActiveWindow();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_activateWindow(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->activateWindow();
}


SWIGEXPORT void QWidget_clearFocus(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->clearFocus();
}


SWIGEXPORT void QWidget_setFocus1(QWidget * self, Qt::FocusReason reason) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::FocusReason arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::FocusReason)reason; 
  (arg1)->setFocus(arg2);
}


SWIGEXPORT Qt::FocusPolicy QWidget_focusPolicy(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::FocusPolicy result;
  Qt::FocusPolicy cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (Qt::FocusPolicy)((QWidget const *)arg1)->focusPolicy();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setFocusPolicy(QWidget * self, Qt::FocusPolicy policy) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::FocusPolicy arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::FocusPolicy)policy; 
  (arg1)->setFocusPolicy(arg2);
}


SWIGEXPORT bool QWidget_hasFocus(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->hasFocus();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void SetTabOrder(QWidget * m3arg1, QWidget * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&m3arg1; 
  arg2 = *(QWidget **)&m3arg2; 
  QWidget::setTabOrder(arg1,arg2);
}


SWIGEXPORT void QWidget_setFocusProxy(QWidget * self, QWidget * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  (arg1)->setFocusProxy(arg2);
}


SWIGEXPORT QWidget * QWidget_focusProxy(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QWidget *)((QWidget const *)arg1)->focusProxy();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::ContextMenuPolicy QWidget_contextMenuPolicy(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::ContextMenuPolicy result;
  Qt::ContextMenuPolicy cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (Qt::ContextMenuPolicy)((QWidget const *)arg1)->contextMenuPolicy();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setContextMenuPolicy(QWidget * self, Qt::ContextMenuPolicy policy) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::ContextMenuPolicy arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::ContextMenuPolicy)policy; 
  (arg1)->setContextMenuPolicy(arg2);
}


SWIGEXPORT void QWidget_grabMouse(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->grabMouse();
}


SWIGEXPORT void QWidget_grabMouse1(QWidget * self, QCursor * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QCursor *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QCursor **)&m3arg2;
  (arg1)->grabMouse((QCursor const &)*arg2);
}


SWIGEXPORT void QWidget_releaseMouse(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->releaseMouse();
}


SWIGEXPORT void QWidget_grabKeyboard(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->grabKeyboard();
}


SWIGEXPORT void QWidget_releaseKeyboard(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->releaseKeyboard();
}


SWIGEXPORT int QWidget_grabShortcut(QWidget * self, QKeySequence * key, Qt::ShortcutContext context) {
  QWidget *arg1 = (QWidget *) 0 ;
  QKeySequence *arg2 = 0 ;
  Qt::ShortcutContext arg3 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QKeySequence **)&key;
  arg3 = (Qt::ShortcutContext)context; 
  result = (int)(arg1)->grabShortcut((QKeySequence const &)*arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QWidget_grabShortcut1(QWidget * self, QKeySequence * key) {
  QWidget *arg1 = (QWidget *) 0 ;
  QKeySequence *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QKeySequence **)&key;
  result = (int)(arg1)->grabShortcut((QKeySequence const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_releaseShortcut(QWidget * self, int id) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)id; 
  (arg1)->releaseShortcut(arg2);
}


SWIGEXPORT void QWidget_setShortcutEnabled(QWidget * self, int id, bool enable) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)id; 
  arg3 = enable ? true : false; 
  (arg1)->setShortcutEnabled(arg2,arg3);
}


SWIGEXPORT void QWidget_setShortcutEnabled1(QWidget * self, int id) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)id; 
  (arg1)->setShortcutEnabled(arg2);
}


SWIGEXPORT void QWidget_setShortcutAutoRepeat(QWidget * self, int id, bool enable) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)id; 
  arg3 = enable ? true : false; 
  (arg1)->setShortcutAutoRepeat(arg2,arg3);
}


SWIGEXPORT void QWidget_setShortcutAutoRepeat1(QWidget * self, int id) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)id; 
  (arg1)->setShortcutAutoRepeat(arg2);
}


SWIGEXPORT QWidget * MouseGrabber() {
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  result = (QWidget *)QWidget::mouseGrabber();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * KeyboardGrabber() {
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  result = (QWidget *)QWidget::keyboardGrabber();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_updatesEnabled(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->updatesEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setUpdatesEnabled(QWidget * self, bool enable) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setUpdatesEnabled(arg2);
}


SWIGEXPORT QGraphicsProxyWidget * QWidget_graphicsProxyWidget(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QGraphicsProxyWidget *result = 0 ;
  QGraphicsProxyWidget * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QGraphicsProxyWidget *)((QWidget const *)arg1)->graphicsProxyWidget();
  *(QGraphicsProxyWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_update(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->update();
}


SWIGEXPORT void QWidget_repaint(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->repaint();
}


SWIGEXPORT void QWidget_update1(QWidget * self, int x, int y, int w, int h) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  (arg1)->update(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QWidget_update2(QWidget * self, QRect * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QRect **)&m3arg2;
  (arg1)->update((QRect const &)*arg2);
}


SWIGEXPORT void QWidget_update3(QWidget * self, QRegion * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRegion *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QRegion **)&m3arg2;
  (arg1)->update((QRegion const &)*arg2);
}


SWIGEXPORT void QWidget_repaint1(QWidget * self, int x, int y, int w, int h) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  (arg1)->repaint(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QWidget_repaint2(QWidget * self, QRect * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QRect **)&m3arg2;
  (arg1)->repaint((QRect const &)*arg2);
}


SWIGEXPORT void QWidget_repaint3(QWidget * self, QRegion * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRegion *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QRegion **)&m3arg2;
  (arg1)->repaint((QRegion const &)*arg2);
}


SWIGEXPORT void QWidget_setVisible(QWidget * self, bool visible) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = visible ? true : false; 
  (arg1)->setVisible(arg2);
}


SWIGEXPORT void QWidget_setHidden(QWidget * self, bool hidden) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = hidden ? true : false; 
  (arg1)->setHidden(arg2);
}


SWIGEXPORT void QWidget_show(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->show();
}


SWIGEXPORT void QWidget_hide(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->hide();
}


SWIGEXPORT void QWidget_setShown(QWidget * self, bool shown) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = shown ? true : false; 
  (arg1)->setShown(arg2);
}


SWIGEXPORT void QWidget_showMinimized(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->showMinimized();
}


SWIGEXPORT void QWidget_showMaximized(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->showMaximized();
}


SWIGEXPORT void QWidget_showFullScreen(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->showFullScreen();
}


SWIGEXPORT void QWidget_showNormal(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->showNormal();
}


SWIGEXPORT bool QWidget_close(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)(arg1)->close();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_raise(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->raise();
}


SWIGEXPORT void QWidget_lower(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->lower();
}


SWIGEXPORT void QWidget_stackUnder(QWidget * self, QWidget * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  (arg1)->stackUnder(arg2);
}


SWIGEXPORT void QWidget_move(QWidget * self, int x, int y) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  (arg1)->move(arg2,arg3);
}


SWIGEXPORT void QWidget_move1(QWidget * self, QPoint * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QPoint **)&m3arg2;
  (arg1)->move((QPoint const &)*arg2);
}


SWIGEXPORT void QWidget_resize(QWidget * self, int w, int h) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  (arg1)->resize(arg2,arg3);
}


SWIGEXPORT void QWidget_resize1(QWidget * self, QSize * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QSize **)&m3arg2;
  (arg1)->resize((QSize const &)*arg2);
}


SWIGEXPORT void QWidget_setGeometry(QWidget * self, int x, int y, int w, int h) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  (arg1)->setGeometry(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QWidget_setGeometry1(QWidget * self, QRect * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QRect **)&m3arg2;
  (arg1)->setGeometry((QRect const &)*arg2);
}


SWIGEXPORT QByteArray * QWidget_saveGeometry(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QWidget const *)arg1)->saveGeometry());
  return cresult;
}


SWIGEXPORT bool QWidget_restoreGeometry(QWidget * self, QByteArray * geometry) {
  QWidget *arg1 = (QWidget *) 0 ;
  QByteArray *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QByteArray **)&geometry;
  result = (bool)(arg1)->restoreGeometry((QByteArray const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_adjustSize(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->adjustSize();
}


SWIGEXPORT bool QWidget_isVisible(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isVisible();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_isVisibleTo(QWidget const * self, QWidget * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  result = (bool)((QWidget const *)arg1)->isVisibleTo(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_isHidden(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isHidden();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_isMinimized(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isMinimized();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_isMaximized(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isMaximized();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_isFullScreen(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->isFullScreen();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QWidget_windowState(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowStates result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = ((QWidget const *)arg1)->windowState();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT void QWidget_setWindowState(QWidget * self, int state) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowStates arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::WindowStates)state; 
  (arg1)->setWindowState(arg2);
}


SWIGEXPORT void QWidget_overrideWindowState(QWidget * self, int state) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowStates arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::WindowStates)state; 
  (arg1)->overrideWindowState(arg2);
}


SWIGEXPORT QSize * QWidget_sizeHint(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidget const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QSize * QWidget_minimumSizeHint(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidget const *)arg1)->minimumSizeHint());
  return cresult;
}


SWIGEXPORT QSizePolicy * QWidget_sizePolicy(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSizePolicy * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QSizePolicy **)&cresult = new QSizePolicy((const QSizePolicy &)((QWidget const *)arg1)->sizePolicy());
  return cresult;
}


SWIGEXPORT void QWidget_setSizePolicy(QWidget * self, QSizePolicy * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSizePolicy arg2 ;
  QSizePolicy *argp2 ;
  
  arg1 = *(QWidget **)&self; 
  argp2 = *(QSizePolicy **)&m3arg2;
  /*
     if (!argp2) {
       return ;
     }
  */
  arg2 = *argp2; 
  (arg1)->setSizePolicy(arg2);
}


SWIGEXPORT void QWidget_setSizePolicy1(QWidget * self, QSizePolicy::Policy horizontal, QSizePolicy::Policy vertical) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSizePolicy::Policy arg2 ;
  QSizePolicy::Policy arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (QSizePolicy::Policy)horizontal; 
  arg3 = (QSizePolicy::Policy)vertical; 
  (arg1)->setSizePolicy(arg2,arg3);
}


SWIGEXPORT int QWidget_heightForWidth(QWidget const * self, int m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)m3arg2; 
  result = (int)((QWidget const *)arg1)->heightForWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRegion * QWidget_visibleRegion(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRegion * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QWidget const *)arg1)->visibleRegion());
  return cresult;
}


SWIGEXPORT void QWidget_setContentsMargins(QWidget * self, int left, int top, int right, int bottom) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)left; 
  arg3 = (int)top; 
  arg4 = (int)right; 
  arg5 = (int)bottom; 
  (arg1)->setContentsMargins(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QWidget_setContentsMargins1(QWidget * self, QMargins * margins) {
  QWidget *arg1 = (QWidget *) 0 ;
  QMargins *arg2 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QMargins **)&margins;
  (arg1)->setContentsMargins((QMargins const &)*arg2);
}


SWIGEXPORT void QWidget_getContentsMargins(QWidget const * self, int * left, int * top, int * right, int * bottom) {
  QWidget *arg1 = (QWidget *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(int **)&left; 
  arg3 = *(int **)&top; 
  arg4 = *(int **)&right; 
  arg5 = *(int **)&bottom; 
  ((QWidget const *)arg1)->getContentsMargins(arg2,arg3,arg4,arg5);
}


SWIGEXPORT QMargins * QWidget_contentsMargins(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QMargins * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QMargins **)&cresult = new QMargins((const QMargins &)((QWidget const *)arg1)->contentsMargins());
  return cresult;
}


SWIGEXPORT QRect * QWidget_contentsRect(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QWidget **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QWidget const *)arg1)->contentsRect());
  return cresult;
}


SWIGEXPORT QLayout * QWidget_layout(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QLayout *result = 0 ;
  QLayout * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QLayout *)((QWidget const *)arg1)->layout();
  *(QLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setLayout(QWidget * self, QLayout * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QLayout **)&m3arg2; 
  (arg1)->setLayout(arg2);
}


SWIGEXPORT void QWidget_updateGeometry(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  (arg1)->updateGeometry();
}


SWIGEXPORT void QWidget_setParent(QWidget * self, QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QWidget **)&parent; 
  (arg1)->setParent(arg2);
}


SWIGEXPORT void QWidget_setParent1(QWidget * self, QWidget * parent, int f) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  Qt::WindowFlags arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QWidget **)&parent; 
  arg3 = (Qt::WindowFlags)f; 
  (arg1)->setParent(arg2,arg3);
}


SWIGEXPORT void QWidget_scroll(QWidget * self, int dx, int dy) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  (arg1)->scroll(arg2,arg3);
}


SWIGEXPORT void QWidget_scroll1(QWidget * self, int dx, int dy, QRect * m3arg4) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QRect *arg4 = 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  arg4 = *(QRect **)&m3arg4;
  (arg1)->scroll(arg2,arg3,(QRect const &)*arg4);
}


SWIGEXPORT QWidget * QWidget_focusWidget(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QWidget *)((QWidget const *)arg1)->focusWidget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QWidget_nextInFocusChain(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QWidget *)((QWidget const *)arg1)->nextInFocusChain();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QWidget_previousInFocusChain(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QWidget *)((QWidget const *)arg1)->previousInFocusChain();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_acceptDrops(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->acceptDrops();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setAcceptDrops(QWidget * self, bool on) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = on ? true : false; 
  (arg1)->setAcceptDrops(arg2);
}


SWIGEXPORT void QWidget_addAction(QWidget * self, QAction * action) {
  QWidget *arg1 = (QWidget *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QAction **)&action; 
  (arg1)->addAction(arg2);
}


SWIGEXPORT void QWidget_insertAction(QWidget * self, QAction * before, QAction * action) {
  QWidget *arg1 = (QWidget *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  QAction *arg3 = (QAction *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QAction **)&before; 
  arg3 = *(QAction **)&action; 
  (arg1)->insertAction(arg2,arg3);
}


SWIGEXPORT void QWidget_removeAction(QWidget * self, QAction * action) {
  QWidget *arg1 = (QWidget *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QAction **)&action; 
  (arg1)->removeAction(arg2);
}


SWIGEXPORT QWidget * QWidget_parentWidget(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QWidget *)((QWidget const *)arg1)->parentWidget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setWindowFlags(QWidget * self, int type) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowFlags arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::WindowFlags)type; 
  (arg1)->setWindowFlags(arg2);
}


SWIGEXPORT int QWidget_windowFlags(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowFlags result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = ((QWidget const *)arg1)->windowFlags();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT void QWidget_overrideWindowFlags(QWidget * self, int type) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowFlags arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::WindowFlags)type; 
  (arg1)->overrideWindowFlags(arg2);
}


SWIGEXPORT Qt::WindowType QWidget_windowType(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowType result;
  Qt::WindowType cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (Qt::WindowType)((QWidget const *)arg1)->windowType();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * Find(int m3arg1) {
  int arg1 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = (int)m3arg1; 
  result = (QWidget *)QWidget::find(arg1);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QWidget_childAt(QWidget const * self, int x, int y) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  result = (QWidget *)((QWidget const *)arg1)->childAt(arg2,arg3);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QWidget_childAt1(QWidget const * self, QPoint * p) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPoint *arg2 = 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QPoint **)&p;
  result = (QWidget *)((QWidget const *)arg1)->childAt((QPoint const &)*arg2);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setAttribute(QWidget * self, Qt::WidgetAttribute m3arg2, bool on) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WidgetAttribute arg2 ;
  bool arg3 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::WidgetAttribute)m3arg2; 
  arg3 = on ? true : false; 
  (arg1)->setAttribute(arg2,arg3);
}


SWIGEXPORT void QWidget_setAttribute1(QWidget * self, Qt::WidgetAttribute m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WidgetAttribute arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::WidgetAttribute)m3arg2; 
  (arg1)->setAttribute(arg2);
}


SWIGEXPORT bool QWidget_testAttribute(QWidget const * self, Qt::WidgetAttribute m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WidgetAttribute arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::WidgetAttribute)m3arg2; 
  result = (bool)((QWidget const *)arg1)->testAttribute(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPaintEngine * QWidget_paintEngine(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPaintEngine *result = 0 ;
  QPaintEngine * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QPaintEngine *)((QWidget const *)arg1)->paintEngine();
  *(QPaintEngine **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_ensurePolished(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  ((QWidget const *)arg1)->ensurePolished();
}


SWIGEXPORT QInputContext * QWidget_inputContext(QWidget * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QInputContext *result = 0 ;
  QInputContext * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QInputContext *)(arg1)->inputContext();
  *(QInputContext **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setInputContext(QWidget * self, QInputContext * m3arg2) {
  QWidget *arg1 = (QWidget *) 0 ;
  QInputContext *arg2 = (QInputContext *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QInputContext **)&m3arg2; 
  (arg1)->setInputContext(arg2);
}


SWIGEXPORT bool QWidget_isAncestorOf(QWidget const * self, QWidget const * child) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QWidget **)&child; 
  result = (bool)((QWidget const *)arg1)->isAncestorOf((QWidget const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidget_autoFillBackground(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (bool)((QWidget const *)arg1)->autoFillBackground();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidget_setAutoFillBackground(QWidget * self, bool enabled) {
  QWidget *arg1 = (QWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = enabled ? true : false; 
  (arg1)->setAutoFillBackground(arg2);
}


SWIGEXPORT void QWidget_setWindowSurface(QWidget * self, QWindowSurface * surface) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWindowSurface *arg2 = (QWindowSurface *) 0 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = *(QWindowSurface **)&surface; 
  (arg1)->setWindowSurface(arg2);
}


SWIGEXPORT QWindowSurface * QWidget_windowSurface(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWindowSurface *result = 0 ;
  QWindowSurface * cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = (QWindowSurface *)((QWidget const *)arg1)->windowSurface();
  *(QWindowSurface **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QWidget_inputMethodHints(QWidget const * self) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::InputMethodHints result;
  int cresult ;
  
  arg1 = *(QWidget **)&self; 
  result = ((QWidget const *)arg1)->inputMethodHints();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT void QWidget_setInputMethodHints(QWidget * self, int hints) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::InputMethodHints arg2 ;
  
  arg1 = *(QWidget **)&self; 
  arg2 = (Qt::InputMethodHints)hints; 
  (arg1)->setInputMethodHints(arg2);
}


#ifdef __cplusplus
}
#endif

