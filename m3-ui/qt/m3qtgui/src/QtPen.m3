(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtPen;


FROM QtColor IMPORT QColor;
FROM QtBrush IMPORT QBrush;
IMPORT QtPenRaw;
FROM QtNamespace IMPORT PenCapStyle, PenStyle, PenJoinStyle;


IMPORT WeakRef;

PROCEDURE New_QPen0 (self: QPen; ): QPen =
  VAR result: ADDRESS;
  BEGIN
    result := QtPenRaw.New_QPen0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QPen);

    RETURN self;
  END New_QPen0;

PROCEDURE New_QPen1 (self: QPen; arg1: PenStyle; ): QPen =
  VAR result: ADDRESS;
  BEGIN
    result := QtPenRaw.New_QPen1(ORD(arg1));

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QPen);

    RETURN self;
  END New_QPen1;

PROCEDURE New_QPen2 (self: QPen; color: QColor; ): QPen =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(color.cxxObj, ADDRESS);
  BEGIN
    result := QtPenRaw.New_QPen2(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QPen);

    RETURN self;
  END New_QPen2;

PROCEDURE New_QPen3 (self : QPen;
                     brush: QBrush;
                     width: LONGREAL;
                     s    : PenStyle;
                     c    : PenCapStyle;
                     j    : PenJoinStyle; ): QPen =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(brush.cxxObj, ADDRESS);
  BEGIN
    result := QtPenRaw.New_QPen3(arg1tmp, width, ORD(s), ORD(c), ORD(j));

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QPen);

    RETURN self;
  END New_QPen3;

PROCEDURE New_QPen4 (self : QPen;
                     brush: QBrush;
                     width: LONGREAL;
                     s    : PenStyle;
                     c    : PenCapStyle; ): QPen =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(brush.cxxObj, ADDRESS);
  BEGIN
    result := QtPenRaw.New_QPen4(arg1tmp, width, ORD(s), ORD(c));

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QPen);

    RETURN self;
  END New_QPen4;

PROCEDURE New_QPen5
  (self: QPen; brush: QBrush; width: LONGREAL; s: PenStyle; ): QPen =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(brush.cxxObj, ADDRESS);
  BEGIN
    result := QtPenRaw.New_QPen5(arg1tmp, width, ORD(s));

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QPen);

    RETURN self;
  END New_QPen5;

PROCEDURE New_QPen6 (self: QPen; brush: QBrush; width: LONGREAL; ): QPen =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(brush.cxxObj, ADDRESS);
  BEGIN
    result := QtPenRaw.New_QPen6(arg1tmp, width);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QPen);

    RETURN self;
  END New_QPen6;

PROCEDURE New_QPen7 (self: QPen; pen: QPen; ): QPen =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(pen.cxxObj, ADDRESS);
  BEGIN
    result := QtPenRaw.New_QPen7(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QPen);

    RETURN self;
  END New_QPen7;

PROCEDURE Delete_QPen (self: QPen; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.Delete_QPen(selfAdr);
  END Delete_QPen;

PROCEDURE QPen_swap (self, other: QPen; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.QPen_swap(selfAdr, arg2tmp);
  END QPen_swap;

PROCEDURE QPen_style (self: QPen; ): PenStyle =
  VAR
    ret    : INTEGER;
    result : PenStyle;
    selfAdr: ADDRESS  := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPenRaw.QPen_style(selfAdr);
    result := VAL(ret, PenStyle);
    RETURN result;
  END QPen_style;

PROCEDURE QPen_setStyle (self: QPen; arg2: PenStyle; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.QPen_setStyle(selfAdr, ORD(arg2));
  END QPen_setStyle;

PROCEDURE QPen_dashOffset (self: QPen; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPenRaw.QPen_dashOffset(selfAdr);
  END QPen_dashOffset;

PROCEDURE QPen_setDashOffset (self: QPen; doffset: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.QPen_setDashOffset(selfAdr, doffset);
  END QPen_setDashOffset;

PROCEDURE QPen_miterLimit (self: QPen; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPenRaw.QPen_miterLimit(selfAdr);
  END QPen_miterLimit;

PROCEDURE QPen_setMiterLimit (self: QPen; limit: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.QPen_setMiterLimit(selfAdr, limit);
  END QPen_setMiterLimit;

PROCEDURE QPen_widthF (self: QPen; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPenRaw.QPen_widthF(selfAdr);
  END QPen_widthF;

PROCEDURE QPen_setWidthF (self: QPen; width: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.QPen_setWidthF(selfAdr, width);
  END QPen_setWidthF;

PROCEDURE QPen_width (self: QPen; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPenRaw.QPen_width(selfAdr);
  END QPen_width;

PROCEDURE QPen_setWidth (self: QPen; width: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.QPen_setWidth(selfAdr, width);
  END QPen_setWidth;

PROCEDURE QPen_color (self: QPen; ): QColor =
  VAR
    ret    : ADDRESS;
    result : QColor;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPenRaw.QPen_color(selfAdr);

    result := NEW(QColor);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPen_color;

PROCEDURE QPen_setColor (self: QPen; color: QColor; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(color.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.QPen_setColor(selfAdr, arg2tmp);
  END QPen_setColor;

PROCEDURE QPen_brush (self: QPen; ): QBrush =
  VAR
    ret    : ADDRESS;
    result : QBrush;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPenRaw.QPen_brush(selfAdr);

    result := NEW(QBrush);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPen_brush;

PROCEDURE QPen_setBrush (self: QPen; brush: QBrush; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(brush.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.QPen_setBrush(selfAdr, arg2tmp);
  END QPen_setBrush;

PROCEDURE QPen_isSolid (self: QPen; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPenRaw.QPen_isSolid(selfAdr);
  END QPen_isSolid;

PROCEDURE QPen_capStyle (self: QPen; ): PenCapStyle =
  VAR
    ret    : INTEGER;
    result : PenCapStyle;
    selfAdr: ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPenRaw.QPen_capStyle(selfAdr);
    result := VAL(ret, PenCapStyle);
    RETURN result;
  END QPen_capStyle;

PROCEDURE QPen_setCapStyle (self: QPen; pcs: PenCapStyle; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.QPen_setCapStyle(selfAdr, ORD(pcs));
  END QPen_setCapStyle;

PROCEDURE QPen_joinStyle (self: QPen; ): PenJoinStyle =
  VAR
    ret    : INTEGER;
    result : PenJoinStyle;
    selfAdr: ADDRESS      := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPenRaw.QPen_joinStyle(selfAdr);
    result := VAL(ret, PenJoinStyle);
    RETURN result;
  END QPen_joinStyle;

PROCEDURE QPen_setJoinStyle (self: QPen; pcs: PenJoinStyle; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.QPen_setJoinStyle(selfAdr, ORD(pcs));
  END QPen_setJoinStyle;

PROCEDURE QPen_isCosmetic (self: QPen; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPenRaw.QPen_isCosmetic(selfAdr);
  END QPen_isCosmetic;

PROCEDURE QPen_setCosmetic (self: QPen; cosmetic: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPenRaw.QPen_setCosmetic(selfAdr, cosmetic);
  END QPen_setCosmetic;

PROCEDURE QPen_isDetached (self: QPen; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPenRaw.QPen_isDetached(selfAdr);
  END QPen_isDetached;

PROCEDURE Cleanup_QPen
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QPen := ref;
  BEGIN
    Delete_QPen(obj);
  END Cleanup_QPen;

PROCEDURE Destroy_QPen (self: QPen) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QPen);
  END Destroy_QPen;

REVEAL
  QPen = QPenPublic BRANDED OBJECT
         OVERRIDES
           init_0        := New_QPen0;
           init_1        := New_QPen1;
           init_2        := New_QPen2;
           init_3        := New_QPen3;
           init_4        := New_QPen4;
           init_5        := New_QPen5;
           init_6        := New_QPen6;
           init_7        := New_QPen7;
           swap          := QPen_swap;
           style         := QPen_style;
           setStyle      := QPen_setStyle;
           dashOffset    := QPen_dashOffset;
           setDashOffset := QPen_setDashOffset;
           miterLimit    := QPen_miterLimit;
           setMiterLimit := QPen_setMiterLimit;
           widthF        := QPen_widthF;
           setWidthF     := QPen_setWidthF;
           width         := QPen_width;
           setWidth      := QPen_setWidth;
           color         := QPen_color;
           setColor      := QPen_setColor;
           brush         := QPen_brush;
           setBrush      := QPen_setBrush;
           isSolid       := QPen_isSolid;
           capStyle      := QPen_capStyle;
           setCapStyle   := QPen_setCapStyle;
           joinStyle     := QPen_joinStyle;
           setJoinStyle  := QPen_setJoinStyle;
           isCosmetic    := QPen_isCosmetic;
           setCosmetic   := QPen_setCosmetic;
           isDetached    := QPen_isDetached;
           destroyCxx    := Destroy_QPen;
         END;


BEGIN
END QtPen.
