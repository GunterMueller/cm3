/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qmainwindow.h>
#define DockOptions QMainWindow::DockOptions


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QMainWindow * New_QMainWindow0(QWidget * parent, int flags) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowFlags arg2 ;
  QMainWindow *result = 0 ;
  QMainWindow * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = (Qt::WindowFlags)flags; 
  result = (QMainWindow *)new QMainWindow(arg1,arg2);
  *(QMainWindow **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMainWindow * New_QMainWindow1(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QMainWindow *result = 0 ;
  QMainWindow * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QMainWindow *)new QMainWindow(arg1);
  *(QMainWindow **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMainWindow * New_QMainWindow2() {
  QMainWindow *result = 0 ;
  QMainWindow * cresult ;
  
  result = (QMainWindow *)new QMainWindow();
  *(QMainWindow **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QMainWindow(QMainWindow * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  delete arg1;
}


SWIGEXPORT QSize * QMainWindow_iconSize(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QMainWindow const *)arg1)->iconSize());
  return cresult;
}


SWIGEXPORT void QMainWindow_setIconSize(QMainWindow * self, QSize * iconSize) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QSize **)&iconSize;
  (arg1)->setIconSize((QSize const &)*arg2);
}


SWIGEXPORT Qt::ToolButtonStyle QMainWindow_toolButtonStyle(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  Qt::ToolButtonStyle result;
  Qt::ToolButtonStyle cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  result = (Qt::ToolButtonStyle)((QMainWindow const *)arg1)->toolButtonStyle();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QMainWindow_setToolButtonStyle(QMainWindow * self, Qt::ToolButtonStyle toolButtonStyle) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  Qt::ToolButtonStyle arg2 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = (Qt::ToolButtonStyle)toolButtonStyle; 
  (arg1)->setToolButtonStyle(arg2);
}


SWIGEXPORT bool QMainWindow_isAnimated(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  result = (bool)((QMainWindow const *)arg1)->isAnimated();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QMainWindow_isDockNestingEnabled(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  result = (bool)((QMainWindow const *)arg1)->isDockNestingEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QMainWindow_documentMode(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  result = (bool)((QMainWindow const *)arg1)->documentMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QMainWindow_setDocumentMode(QMainWindow * self, bool enabled) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  bool arg2 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = enabled ? true : false; 
  (arg1)->setDocumentMode(arg2);
}


SWIGEXPORT void QMainWindow_setDockOptions(QMainWindow * self, int options) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  DockOptions arg2 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = (DockOptions)options; 
  (arg1)->setDockOptions(arg2);
}


SWIGEXPORT int QMainWindow_dockOptions(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  DockOptions result;
  int cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  result = ((QMainWindow const *)arg1)->dockOptions();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT bool QMainWindow_isSeparator(QMainWindow const * self, QPoint * pos) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QPoint *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QPoint **)&pos;
  result = (bool)((QMainWindow const *)arg1)->isSeparator((QPoint const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QMenuBar * QMainWindow_menuBar(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QMenuBar *result = 0 ;
  QMenuBar * cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  result = (QMenuBar *)((QMainWindow const *)arg1)->menuBar();
  *(QMenuBar **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QMainWindow_setMenuBar(QMainWindow * self, QMenuBar * menubar) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QMenuBar *arg2 = (QMenuBar *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QMenuBar **)&menubar; 
  (arg1)->setMenuBar(arg2);
}


SWIGEXPORT QWidget * QMainWindow_menuWidget(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  result = (QWidget *)((QMainWindow const *)arg1)->menuWidget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QMainWindow_setMenuWidget(QMainWindow * self, QWidget * menubar) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QWidget **)&menubar; 
  (arg1)->setMenuWidget(arg2);
}


SWIGEXPORT QStatusBar * QMainWindow_statusBar(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QStatusBar *result = 0 ;
  QStatusBar * cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  result = (QStatusBar *)((QMainWindow const *)arg1)->statusBar();
  *(QStatusBar **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QMainWindow_setStatusBar(QMainWindow * self, QStatusBar * statusbar) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QStatusBar *arg2 = (QStatusBar *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QStatusBar **)&statusbar; 
  (arg1)->setStatusBar(arg2);
}


SWIGEXPORT QWidget * QMainWindow_centralWidget(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  result = (QWidget *)((QMainWindow const *)arg1)->centralWidget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QMainWindow_setCentralWidget(QMainWindow * self, QWidget * widget) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QWidget **)&widget; 
  (arg1)->setCentralWidget(arg2);
}


SWIGEXPORT void QMainWindow_setCorner(QMainWindow * self, Qt::Corner corner, Qt::DockWidgetArea area) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  Qt::Corner arg2 ;
  Qt::DockWidgetArea arg3 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = (Qt::Corner)corner; 
  arg3 = (Qt::DockWidgetArea)area; 
  (arg1)->setCorner(arg2,arg3);
}


SWIGEXPORT Qt::DockWidgetArea QMainWindow_corner(QMainWindow const * self, Qt::Corner corner) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  Qt::Corner arg2 ;
  Qt::DockWidgetArea result;
  Qt::DockWidgetArea cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = (Qt::Corner)corner; 
  result = (Qt::DockWidgetArea)((QMainWindow const *)arg1)->corner(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QMainWindow_addToolBarBreak(QMainWindow * self, Qt::ToolBarArea area) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  Qt::ToolBarArea arg2 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = (Qt::ToolBarArea)area; 
  (arg1)->addToolBarBreak(arg2);
}


SWIGEXPORT void QMainWindow_addToolBarBreak1(QMainWindow * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  (arg1)->addToolBarBreak();
}


SWIGEXPORT void QMainWindow_insertToolBarBreak(QMainWindow * self, QToolBar * before) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QToolBar *arg2 = (QToolBar *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QToolBar **)&before; 
  (arg1)->insertToolBarBreak(arg2);
}


SWIGEXPORT void QMainWindow_addToolBar(QMainWindow * self, Qt::ToolBarArea area, QToolBar * toolbar) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  Qt::ToolBarArea arg2 ;
  QToolBar *arg3 = (QToolBar *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = (Qt::ToolBarArea)area; 
  arg3 = *(QToolBar **)&toolbar; 
  (arg1)->addToolBar(arg2,arg3);
}


SWIGEXPORT void QMainWindow_addToolBar1(QMainWindow * self, QToolBar * toolbar) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QToolBar *arg2 = (QToolBar *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QToolBar **)&toolbar; 
  (arg1)->addToolBar(arg2);
}


SWIGEXPORT QToolBar * QMainWindow_addToolBar2(QMainWindow * self, QString * title) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QString *arg2 = 0 ;
  QToolBar *result = 0 ;
  QToolBar * cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QString **)&title;
  result = (QToolBar *)(arg1)->addToolBar((QString const &)*arg2);
  *(QToolBar **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QMainWindow_insertToolBar(QMainWindow * self, QToolBar * before, QToolBar * toolbar) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QToolBar *arg2 = (QToolBar *) 0 ;
  QToolBar *arg3 = (QToolBar *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QToolBar **)&before; 
  arg3 = *(QToolBar **)&toolbar; 
  (arg1)->insertToolBar(arg2,arg3);
}


SWIGEXPORT void QMainWindow_removeToolBar(QMainWindow * self, QToolBar * toolbar) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QToolBar *arg2 = (QToolBar *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QToolBar **)&toolbar; 
  (arg1)->removeToolBar(arg2);
}


SWIGEXPORT void QMainWindow_removeToolBarBreak(QMainWindow * self, QToolBar * before) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QToolBar *arg2 = (QToolBar *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QToolBar **)&before; 
  (arg1)->removeToolBarBreak(arg2);
}


SWIGEXPORT void QMainWindow_setUnifiedTitleAndToolBarOnMac(QMainWindow * self, bool set) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  bool arg2 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = set ? true : false; 
  (arg1)->setUnifiedTitleAndToolBarOnMac(arg2);
}


SWIGEXPORT bool QMainWindow_unifiedTitleAndToolBarOnMac(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  result = (bool)((QMainWindow const *)arg1)->unifiedTitleAndToolBarOnMac();
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::ToolBarArea QMainWindow_toolBarArea(QMainWindow const * self, QToolBar * toolbar) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QToolBar *arg2 = (QToolBar *) 0 ;
  Qt::ToolBarArea result;
  Qt::ToolBarArea cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QToolBar **)&toolbar; 
  result = (Qt::ToolBarArea)((QMainWindow const *)arg1)->toolBarArea(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QMainWindow_toolBarBreak(QMainWindow const * self, QToolBar * toolbar) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QToolBar *arg2 = (QToolBar *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QToolBar **)&toolbar; 
  result = (bool)((QMainWindow const *)arg1)->toolBarBreak(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QMainWindow_addDockWidget(QMainWindow * self, Qt::DockWidgetArea area, QDockWidget * dockwidget) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  Qt::DockWidgetArea arg2 ;
  QDockWidget *arg3 = (QDockWidget *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = (Qt::DockWidgetArea)area; 
  arg3 = *(QDockWidget **)&dockwidget; 
  (arg1)->addDockWidget(arg2,arg3);
}


SWIGEXPORT void QMainWindow_addDockWidget1(QMainWindow * self, Qt::DockWidgetArea area, QDockWidget * dockwidget, Qt::Orientation orientation) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  Qt::DockWidgetArea arg2 ;
  QDockWidget *arg3 = (QDockWidget *) 0 ;
  Qt::Orientation arg4 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = (Qt::DockWidgetArea)area; 
  arg3 = *(QDockWidget **)&dockwidget; 
  arg4 = (Qt::Orientation)orientation; 
  (arg1)->addDockWidget(arg2,arg3,arg4);
}


SWIGEXPORT void QMainWindow_splitDockWidget(QMainWindow * self, QDockWidget * after, QDockWidget * dockwidget, Qt::Orientation orientation) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QDockWidget *arg2 = (QDockWidget *) 0 ;
  QDockWidget *arg3 = (QDockWidget *) 0 ;
  Qt::Orientation arg4 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QDockWidget **)&after; 
  arg3 = *(QDockWidget **)&dockwidget; 
  arg4 = (Qt::Orientation)orientation; 
  (arg1)->splitDockWidget(arg2,arg3,arg4);
}


SWIGEXPORT void QMainWindow_tabifyDockWidget(QMainWindow * self, QDockWidget * first, QDockWidget * second) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QDockWidget *arg2 = (QDockWidget *) 0 ;
  QDockWidget *arg3 = (QDockWidget *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QDockWidget **)&first; 
  arg3 = *(QDockWidget **)&second; 
  (arg1)->tabifyDockWidget(arg2,arg3);
}


SWIGEXPORT void QMainWindow_removeDockWidget(QMainWindow * self, QDockWidget * dockwidget) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QDockWidget *arg2 = (QDockWidget *) 0 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QDockWidget **)&dockwidget; 
  (arg1)->removeDockWidget(arg2);
}


SWIGEXPORT bool QMainWindow_restoreDockWidget(QMainWindow * self, QDockWidget * dockwidget) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QDockWidget *arg2 = (QDockWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QDockWidget **)&dockwidget; 
  result = (bool)(arg1)->restoreDockWidget(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::DockWidgetArea QMainWindow_dockWidgetArea(QMainWindow const * self, QDockWidget * dockwidget) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QDockWidget *arg2 = (QDockWidget *) 0 ;
  Qt::DockWidgetArea result;
  Qt::DockWidgetArea cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QDockWidget **)&dockwidget; 
  result = (Qt::DockWidgetArea)((QMainWindow const *)arg1)->dockWidgetArea(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * QMainWindow_saveState(QMainWindow const * self, int version) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  int arg2 ;
  QByteArray * cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = (int)version; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QMainWindow const *)arg1)->saveState(arg2));
  return cresult;
}


SWIGEXPORT QByteArray * QMainWindow_saveState1(QMainWindow const * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QMainWindow const *)arg1)->saveState());
  return cresult;
}


SWIGEXPORT bool QMainWindow_restoreState(QMainWindow * self, QByteArray * state, int version) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QByteArray *arg2 = 0 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QByteArray **)&state;
  arg3 = (int)version; 
  result = (bool)(arg1)->restoreState((QByteArray const &)*arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QMainWindow_restoreState1(QMainWindow * self, QByteArray * state) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QByteArray *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = *(QByteArray **)&state;
  result = (bool)(arg1)->restoreState((QByteArray const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QMenu * QMainWindow_createPopupMenu(QMainWindow * self) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  QMenu *result = 0 ;
  QMenu * cresult ;
  
  arg1 = *(QMainWindow **)&self; 
  result = (QMenu *)(arg1)->createPopupMenu();
  *(QMenu **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QMainWindow_setAnimated(QMainWindow * self, bool enabled) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  bool arg2 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = enabled ? true : false; 
  (arg1)->setAnimated(arg2);
}


SWIGEXPORT void QMainWindow_setDockNestingEnabled(QMainWindow * self, bool enabled) {
  QMainWindow *arg1 = (QMainWindow *) 0 ;
  bool arg2 ;
  
  arg1 = *(QMainWindow **)&self; 
  arg2 = enabled ? true : false; 
  (arg1)->setDockNestingEnabled(arg2);
}


#ifdef __cplusplus
}
#endif

