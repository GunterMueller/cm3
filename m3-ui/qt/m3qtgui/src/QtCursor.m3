(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtCursor;


IMPORT QtCursorRaw;
FROM QtPixmap IMPORT QPixmap;
FROM QtBitmap IMPORT QBitmap;
FROM QtPoint IMPORT QPoint;
FROM QtNamespace IMPORT CursorShape;


IMPORT WeakRef;

PROCEDURE New_QCursor0 (self: QCursor; ): QCursor =
  VAR result: ADDRESS;
  BEGIN
    result := QtCursorRaw.New_QCursor0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QCursor);

    RETURN self;
  END New_QCursor0;

PROCEDURE New_QCursor1 (self: QCursor; shape: CursorShape; ): QCursor =
  VAR result: ADDRESS;
  BEGIN
    result := QtCursorRaw.New_QCursor1(ORD(shape));

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QCursor);

    RETURN self;
  END New_QCursor1;

PROCEDURE New_QCursor2
  (self: QCursor; bitmap, mask: QBitmap; hotX, hotY: INTEGER; ): QCursor =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(bitmap.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(mask.cxxObj, ADDRESS);
  BEGIN
    result := QtCursorRaw.New_QCursor2(arg1tmp, arg2tmp, hotX, hotY);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QCursor);

    RETURN self;
  END New_QCursor2;

PROCEDURE New_QCursor3
  (self: QCursor; bitmap, mask: QBitmap; hotX: INTEGER; ): QCursor =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(bitmap.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(mask.cxxObj, ADDRESS);
  BEGIN
    result := QtCursorRaw.New_QCursor3(arg1tmp, arg2tmp, hotX);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QCursor);

    RETURN self;
  END New_QCursor3;

PROCEDURE New_QCursor4 (self: QCursor; bitmap, mask: QBitmap; ): QCursor =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(bitmap.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(mask.cxxObj, ADDRESS);
  BEGIN
    result := QtCursorRaw.New_QCursor4(arg1tmp, arg2tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QCursor);

    RETURN self;
  END New_QCursor4;

PROCEDURE New_QCursor5
  (self: QCursor; pixmap: QPixmap; hotX, hotY: INTEGER; ): QCursor =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(pixmap.cxxObj, ADDRESS);
  BEGIN
    result := QtCursorRaw.New_QCursor5(arg1tmp, hotX, hotY);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QCursor);

    RETURN self;
  END New_QCursor5;

PROCEDURE New_QCursor6 (self: QCursor; pixmap: QPixmap; hotX: INTEGER; ):
  QCursor =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(pixmap.cxxObj, ADDRESS);
  BEGIN
    result := QtCursorRaw.New_QCursor6(arg1tmp, hotX);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QCursor);

    RETURN self;
  END New_QCursor6;

PROCEDURE New_QCursor7 (self: QCursor; pixmap: QPixmap; ): QCursor =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(pixmap.cxxObj, ADDRESS);
  BEGIN
    result := QtCursorRaw.New_QCursor7(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QCursor);

    RETURN self;
  END New_QCursor7;

PROCEDURE New_QCursor8 (self: QCursor; cursor: QCursor; ): QCursor =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(cursor.cxxObj, ADDRESS);
  BEGIN
    result := QtCursorRaw.New_QCursor8(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QCursor);

    RETURN self;
  END New_QCursor8;

PROCEDURE Delete_QCursor (self: QCursor; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtCursorRaw.Delete_QCursor(selfAdr);
  END Delete_QCursor;

PROCEDURE QCursor_shape (self: QCursor; ): CursorShape =
  VAR
    ret    : INTEGER;
    result : CursorShape;
    selfAdr: ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtCursorRaw.QCursor_shape(selfAdr);
    result := VAL(ret, CursorShape);
    RETURN result;
  END QCursor_shape;

PROCEDURE QCursor_setShape (self: QCursor; newShape: CursorShape; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtCursorRaw.QCursor_setShape(selfAdr, ORD(newShape));
  END QCursor_setShape;

PROCEDURE QCursor_bitmap (self: QCursor; ): QBitmap =
  VAR
    ret    : ADDRESS;
    result : QBitmap;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtCursorRaw.QCursor_bitmap(selfAdr);

    result := NEW(QBitmap);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QCursor_bitmap;

PROCEDURE QCursor_mask (self: QCursor; ): QBitmap =
  VAR
    ret    : ADDRESS;
    result : QBitmap;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtCursorRaw.QCursor_mask(selfAdr);

    result := NEW(QBitmap);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QCursor_mask;

PROCEDURE QCursor_pixmap (self: QCursor; ): QPixmap =
  VAR
    ret    : ADDRESS;
    result : QPixmap;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtCursorRaw.QCursor_pixmap(selfAdr);

    result := NEW(QPixmap);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QCursor_pixmap;

PROCEDURE QCursor_hotSpot (self: QCursor; ): QPoint =
  VAR
    ret    : ADDRESS;
    result : QPoint;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtCursorRaw.QCursor_hotSpot(selfAdr);

    result := NEW(QPoint);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QCursor_hotSpot;

PROCEDURE Pos (): QPoint =
  VAR
    ret   : ADDRESS;
    result: QPoint;
  BEGIN
    ret := QtCursorRaw.Pos();

    result := NEW(QPoint);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END Pos;

PROCEDURE SetPos (x, y: INTEGER; ) =
  BEGIN
    QtCursorRaw.SetPos(x, y);
  END SetPos;

PROCEDURE SetPos1 (p: QPoint; ) =
  VAR arg1tmp := LOOPHOLE(p.cxxObj, ADDRESS);
  BEGIN
    QtCursorRaw.SetPos1(arg1tmp);
  END SetPos1;

PROCEDURE Cleanup_QCursor
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QCursor := ref;
  BEGIN
    Delete_QCursor(obj);
  END Cleanup_QCursor;

PROCEDURE Destroy_QCursor (self: QCursor) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QCursor);
  END Destroy_QCursor;

REVEAL
  QCursor = QCursorPublic BRANDED OBJECT
            OVERRIDES
              init_0     := New_QCursor0;
              init_1     := New_QCursor1;
              init_2     := New_QCursor2;
              init_3     := New_QCursor3;
              init_4     := New_QCursor4;
              init_5     := New_QCursor5;
              init_6     := New_QCursor6;
              init_7     := New_QCursor7;
              init_8     := New_QCursor8;
              shape      := QCursor_shape;
              setShape   := QCursor_setShape;
              bitmap     := QCursor_bitmap;
              mask       := QCursor_mask;
              pixmap     := QCursor_pixmap;
              hotSpot    := QCursor_hotSpot;
              destroyCxx := Destroy_QCursor;
            END;


BEGIN
END QtCursor.
