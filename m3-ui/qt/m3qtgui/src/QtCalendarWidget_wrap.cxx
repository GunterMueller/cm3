/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qcalendarwidget.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QCalendarWidget * New_QCalendarWidget0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QCalendarWidget *result = 0 ;
  QCalendarWidget * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QCalendarWidget *)new QCalendarWidget(arg1);
  *(QCalendarWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QCalendarWidget * New_QCalendarWidget1() {
  QCalendarWidget *result = 0 ;
  QCalendarWidget * cresult ;
  
  result = (QCalendarWidget *)new QCalendarWidget();
  *(QCalendarWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QCalendarWidget(QCalendarWidget * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  delete arg1;
}


SWIGEXPORT QSize * QCalendarWidget_sizeHint(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QCalendarWidget const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QSize * QCalendarWidget_minimumSizeHint(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QCalendarWidget const *)arg1)->minimumSizeHint());
  return cresult;
}


SWIGEXPORT QDate * QCalendarWidget_selectedDate(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QDate * cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  *(QDate **)&cresult = new QDate((const QDate &)((QCalendarWidget const *)arg1)->selectedDate());
  return cresult;
}


SWIGEXPORT int QCalendarWidget_yearShown(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  result = (int)((QCalendarWidget const *)arg1)->yearShown();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QCalendarWidget_monthShown(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  result = (int)((QCalendarWidget const *)arg1)->monthShown();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QDate * QCalendarWidget_minimumDate(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QDate * cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  *(QDate **)&cresult = new QDate((const QDate &)((QCalendarWidget const *)arg1)->minimumDate());
  return cresult;
}


SWIGEXPORT void QCalendarWidget_setMinimumDate(QCalendarWidget * self, QDate * date) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QDate *arg2 = 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = *(QDate **)&date;
  (arg1)->setMinimumDate((QDate const &)*arg2);
}


SWIGEXPORT QDate * QCalendarWidget_maximumDate(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QDate * cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  *(QDate **)&cresult = new QDate((const QDate &)((QCalendarWidget const *)arg1)->maximumDate());
  return cresult;
}


SWIGEXPORT void QCalendarWidget_setMaximumDate(QCalendarWidget * self, QDate * date) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QDate *arg2 = 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = *(QDate **)&date;
  (arg1)->setMaximumDate((QDate const &)*arg2);
}


SWIGEXPORT Qt::DayOfWeek QCalendarWidget_firstDayOfWeek(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  Qt::DayOfWeek result;
  Qt::DayOfWeek cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  result = (Qt::DayOfWeek)((QCalendarWidget const *)arg1)->firstDayOfWeek();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QCalendarWidget_setFirstDayOfWeek(QCalendarWidget * self, Qt::DayOfWeek dayOfWeek) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  Qt::DayOfWeek arg2 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = (Qt::DayOfWeek)dayOfWeek; 
  (arg1)->setFirstDayOfWeek(arg2);
}


SWIGEXPORT bool QCalendarWidget_isHeaderVisible(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  result = (bool)((QCalendarWidget const *)arg1)->isHeaderVisible();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QCalendarWidget_setHeaderVisible(QCalendarWidget * self, bool show) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = show ? true : false; 
  (arg1)->setHeaderVisible(arg2);
}


SWIGEXPORT bool QCalendarWidget_isNavigationBarVisible(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  result = (bool)((QCalendarWidget const *)arg1)->isNavigationBarVisible();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QCalendarWidget_isGridVisible(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  result = (bool)((QCalendarWidget const *)arg1)->isGridVisible();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QCalendarWidget::SelectionMode QCalendarWidget_selectionMode(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QCalendarWidget::SelectionMode result;
  QCalendarWidget::SelectionMode cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  result = (QCalendarWidget::SelectionMode)((QCalendarWidget const *)arg1)->selectionMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QCalendarWidget_setSelectionMode(QCalendarWidget * self, QCalendarWidget::SelectionMode mode) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QCalendarWidget::SelectionMode arg2 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = (QCalendarWidget::SelectionMode)mode; 
  (arg1)->setSelectionMode(arg2);
}


SWIGEXPORT QCalendarWidget::HorizontalHeaderFormat QCalendarWidget_horizontalHeaderFormat(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QCalendarWidget::HorizontalHeaderFormat result;
  QCalendarWidget::HorizontalHeaderFormat cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  result = (QCalendarWidget::HorizontalHeaderFormat)((QCalendarWidget const *)arg1)->horizontalHeaderFormat();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QCalendarWidget_setHorizontalHeaderFormat(QCalendarWidget * self, QCalendarWidget::HorizontalHeaderFormat format) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QCalendarWidget::HorizontalHeaderFormat arg2 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = (QCalendarWidget::HorizontalHeaderFormat)format; 
  (arg1)->setHorizontalHeaderFormat(arg2);
}


SWIGEXPORT QCalendarWidget::VerticalHeaderFormat QCalendarWidget_verticalHeaderFormat(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QCalendarWidget::VerticalHeaderFormat result;
  QCalendarWidget::VerticalHeaderFormat cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  result = (QCalendarWidget::VerticalHeaderFormat)((QCalendarWidget const *)arg1)->verticalHeaderFormat();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QCalendarWidget_setVerticalHeaderFormat(QCalendarWidget * self, QCalendarWidget::VerticalHeaderFormat format) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QCalendarWidget::VerticalHeaderFormat arg2 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = (QCalendarWidget::VerticalHeaderFormat)format; 
  (arg1)->setVerticalHeaderFormat(arg2);
}


SWIGEXPORT void QCalendarWidget_setHeaderTextFormat(QCalendarWidget * self, QTextCharFormat * format) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QTextCharFormat *arg2 = 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = *(QTextCharFormat **)&format;
  (arg1)->setHeaderTextFormat((QTextCharFormat const &)*arg2);
}


SWIGEXPORT void QCalendarWidget_setWeekdayTextFormat(QCalendarWidget * self, Qt::DayOfWeek dayOfWeek, QTextCharFormat * format) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  Qt::DayOfWeek arg2 ;
  QTextCharFormat *arg3 = 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = (Qt::DayOfWeek)dayOfWeek; 
  arg3 = *(QTextCharFormat **)&format;
  (arg1)->setWeekdayTextFormat(arg2,(QTextCharFormat const &)*arg3);
}


SWIGEXPORT void QCalendarWidget_setDateTextFormat(QCalendarWidget * self, QDate * date, QTextCharFormat * format) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QDate *arg2 = 0 ;
  QTextCharFormat *arg3 = 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = *(QDate **)&date;
  arg3 = *(QTextCharFormat **)&format;
  (arg1)->setDateTextFormat((QDate const &)*arg2,(QTextCharFormat const &)*arg3);
}


SWIGEXPORT bool QCalendarWidget_isDateEditEnabled(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  result = (bool)((QCalendarWidget const *)arg1)->isDateEditEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QCalendarWidget_setDateEditEnabled(QCalendarWidget * self, bool enable) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setDateEditEnabled(arg2);
}


SWIGEXPORT int QCalendarWidget_dateEditAcceptDelay(QCalendarWidget const * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QCalendarWidget **)&self; 
  result = (int)((QCalendarWidget const *)arg1)->dateEditAcceptDelay();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QCalendarWidget_setDateEditAcceptDelay(QCalendarWidget * self, int delay) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = (int)delay; 
  (arg1)->setDateEditAcceptDelay(arg2);
}


SWIGEXPORT void QCalendarWidget_setSelectedDate(QCalendarWidget * self, QDate * date) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QDate *arg2 = 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = *(QDate **)&date;
  (arg1)->setSelectedDate((QDate const &)*arg2);
}


SWIGEXPORT void QCalendarWidget_setDateRange(QCalendarWidget * self, QDate * min, QDate * max) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  QDate *arg2 = 0 ;
  QDate *arg3 = 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = *(QDate **)&min;
  arg3 = *(QDate **)&max;
  (arg1)->setDateRange((QDate const &)*arg2,(QDate const &)*arg3);
}


SWIGEXPORT void QCalendarWidget_setCurrentPage(QCalendarWidget * self, int year, int month) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = (int)year; 
  arg3 = (int)month; 
  (arg1)->setCurrentPage(arg2,arg3);
}


SWIGEXPORT void QCalendarWidget_setGridVisible(QCalendarWidget * self, bool show) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = show ? true : false; 
  (arg1)->setGridVisible(arg2);
}


SWIGEXPORT void QCalendarWidget_setNavigationBarVisible(QCalendarWidget * self, bool visible) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  arg2 = visible ? true : false; 
  (arg1)->setNavigationBarVisible(arg2);
}


SWIGEXPORT void QCalendarWidget_showNextMonth(QCalendarWidget * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  (arg1)->showNextMonth();
}


SWIGEXPORT void QCalendarWidget_showPreviousMonth(QCalendarWidget * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  (arg1)->showPreviousMonth();
}


SWIGEXPORT void QCalendarWidget_showNextYear(QCalendarWidget * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  (arg1)->showNextYear();
}


SWIGEXPORT void QCalendarWidget_showPreviousYear(QCalendarWidget * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  (arg1)->showPreviousYear();
}


SWIGEXPORT void QCalendarWidget_showSelectedDate(QCalendarWidget * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  (arg1)->showSelectedDate();
}


SWIGEXPORT void QCalendarWidget_showToday(QCalendarWidget * self) {
  QCalendarWidget *arg1 = (QCalendarWidget *) 0 ;
  
  arg1 = *(QCalendarWidget **)&self; 
  (arg1)->showToday();
}


SWIGEXPORT long Modula3_QCalendarWidgetToQWidget(long objectRef) {
    long baseptr = 0;
    *(QWidget **)&baseptr = *(QCalendarWidget **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

