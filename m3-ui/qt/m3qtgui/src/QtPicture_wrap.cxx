/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qpicture.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QPicture * New_QPicture0(int formatVersion) {
  int arg1 ;
  QPicture *result = 0 ;
  QPicture * cresult ;
  
  arg1 = (int)formatVersion; 
  result = (QPicture *)new QPicture(arg1);
  *(QPicture **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPicture * New_QPicture1() {
  QPicture *result = 0 ;
  QPicture * cresult ;
  
  result = (QPicture *)new QPicture();
  *(QPicture **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPicture * New_QPicture2(QPicture * m3arg1) {
  QPicture *arg1 = 0 ;
  QPicture *result = 0 ;
  QPicture * cresult ;
  
  arg1 = *(QPicture **)&m3arg1;
  result = (QPicture *)new QPicture((QPicture const &)*arg1);
  *(QPicture **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QPicture(QPicture * self) {
  QPicture *arg1 = (QPicture *) 0 ;
  
  arg1 = *(QPicture **)&self; 
  delete arg1;
}


SWIGEXPORT bool QPicture_isNull(QPicture const * self) {
  QPicture *arg1 = (QPicture *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPicture **)&self; 
  result = (bool)((QPicture const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QPicture_devType(QPicture const * self) {
  QPicture *arg1 = (QPicture *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPicture **)&self; 
  result = (int)((QPicture const *)arg1)->devType();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned int QPicture_size(QPicture const * self) {
  QPicture *arg1 = (QPicture *) 0 ;
  unsigned int result;
  unsigned int cresult ;
  
  arg1 = *(QPicture **)&self; 
  result = (unsigned int)((QPicture const *)arg1)->size();
  cresult = result; 
  return cresult;
}


SWIGEXPORT char * QPicture_data(QPicture const * self) {
  QPicture *arg1 = (QPicture *) 0 ;
  char *result = 0 ;
  char * cresult ;
  
  arg1 = *(QPicture **)&self; 
  result = (char *)((QPicture const *)arg1)->data();
  *(char **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QPicture_setData(QPicture * self, char * data, unsigned int size) {
  QPicture *arg1 = (QPicture *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = *(QPicture **)&self; 
  {
    arg2 = data;
  }
  arg3 = (unsigned int)size; 
  (arg1)->setData((char const *)arg2,arg3);
}


SWIGEXPORT bool QPicture_play(QPicture * self, QPainter * p) {
  QPicture *arg1 = (QPicture *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPicture **)&self; 
  arg2 = *(QPainter **)&p; 
  result = (bool)(arg1)->play(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPicture_load(QPicture * self, QIODevice * dev, char * format) {
  QPicture *arg1 = (QPicture *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPicture **)&self; 
  arg2 = *(QIODevice **)&dev; 
  {
    arg3 = format;
  }
  result = (bool)(arg1)->load(arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPicture_load1(QPicture * self, QIODevice * dev) {
  QPicture *arg1 = (QPicture *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPicture **)&self; 
  arg2 = *(QIODevice **)&dev; 
  result = (bool)(arg1)->load(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPicture_load2(QPicture * self, QString * fileName, char * format) {
  QPicture *arg1 = (QPicture *) 0 ;
  QString *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPicture **)&self; 
  arg2 = *(QString **)&fileName;
  {
    arg3 = format;
  }
  result = (bool)(arg1)->load((QString const &)*arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPicture_load3(QPicture * self, QString * fileName) {
  QPicture *arg1 = (QPicture *) 0 ;
  QString *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPicture **)&self; 
  arg2 = *(QString **)&fileName;
  result = (bool)(arg1)->load((QString const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPicture_save(QPicture * self, QIODevice * dev, char * format) {
  QPicture *arg1 = (QPicture *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPicture **)&self; 
  arg2 = *(QIODevice **)&dev; 
  {
    arg3 = format;
  }
  result = (bool)(arg1)->save(arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPicture_save1(QPicture * self, QIODevice * dev) {
  QPicture *arg1 = (QPicture *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPicture **)&self; 
  arg2 = *(QIODevice **)&dev; 
  result = (bool)(arg1)->save(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPicture_save2(QPicture * self, QString * fileName, char * format) {
  QPicture *arg1 = (QPicture *) 0 ;
  QString *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPicture **)&self; 
  arg2 = *(QString **)&fileName;
  {
    arg3 = format;
  }
  result = (bool)(arg1)->save((QString const &)*arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPicture_save3(QPicture * self, QString * fileName) {
  QPicture *arg1 = (QPicture *) 0 ;
  QString *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPicture **)&self; 
  arg2 = *(QString **)&fileName;
  result = (bool)(arg1)->save((QString const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QPicture_boundingRect(QPicture const * self) {
  QPicture *arg1 = (QPicture *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QPicture **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QPicture const *)arg1)->boundingRect());
  return cresult;
}


SWIGEXPORT void QPicture_setBoundingRect(QPicture * self, QRect * r) {
  QPicture *arg1 = (QPicture *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QPicture **)&self; 
  arg2 = *(QRect **)&r;
  (arg1)->setBoundingRect((QRect const &)*arg2);
}


SWIGEXPORT void QPicture_swap(QPicture * self, QPicture & other) {
  QPicture *arg1 = (QPicture *) 0 ;
  QPicture *arg2 = 0 ;
  
  arg1 = *(QPicture **)&self; 
  arg2 = *(QPicture **)&other;
  /*
  if(!arg2) {
      //SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QPicture & reference is null");
      //RETURN ;
      return ;
    }
  */
  
  (arg1)->swap(*arg2);
}


SWIGEXPORT void QPicture_detach(QPicture * self) {
  QPicture *arg1 = (QPicture *) 0 ;
  
  arg1 = *(QPicture **)&self; 
  (arg1)->detach();
}


SWIGEXPORT bool QPicture_isDetached(QPicture const * self) {
  QPicture *arg1 = (QPicture *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPicture **)&self; 
  result = (bool)((QPicture const *)arg1)->isDetached();
  cresult = result; 
  return cresult;
}


SWIGEXPORT char * PicFormat(QString * fileName) {
  QString *arg1 = 0 ;
  char *result = 0 ;
  char * cresult ;
  
  arg1 = *(QString **)&fileName;
  result = (char *)QPicture::pictureFormat((QString const &)*arg1);
  *(char **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPaintEngine * QPicture_paintEngine(QPicture const * self) {
  QPicture *arg1 = (QPicture *) 0 ;
  QPaintEngine *result = 0 ;
  QPaintEngine * cresult ;
  
  arg1 = *(QPicture **)&self; 
  result = (QPaintEngine *)((QPicture const *)arg1)->paintEngine();
  *(QPaintEngine **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPicture::DataPtr & QPicture_data_ptr(QPicture * self) {
  QPicture *arg1 = (QPicture *) 0 ;
  QPicture::DataPtr *result = 0 ;
  QPicture::DataPtr * cresult ;
  
  arg1 = *(QPicture **)&self; 
  result = (QPicture::DataPtr *) &(arg1)->data_ptr();
  *(QPicture::DataPtr **)&cresult = result; 
  return *cresult;
}


SWIGEXPORT QPictureIO * New_QPictureIO0() {
  QPictureIO *result = 0 ;
  QPictureIO * cresult ;
  
  result = (QPictureIO *)new QPictureIO();
  *(QPictureIO **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPictureIO * New_QPictureIO1(QIODevice * ioDevice, char * format) {
  QIODevice *arg1 = (QIODevice *) 0 ;
  char *arg2 = (char *) 0 ;
  QPictureIO *result = 0 ;
  QPictureIO * cresult ;
  
  arg1 = *(QIODevice **)&ioDevice; 
  {
    arg2 = format;
  }
  result = (QPictureIO *)new QPictureIO(arg1,(char const *)arg2);
  *(QPictureIO **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPictureIO * New_QPictureIO2(QString * fileName, char * format) {
  QString *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  QPictureIO *result = 0 ;
  QPictureIO * cresult ;
  
  arg1 = *(QString **)&fileName;
  {
    arg2 = format;
  }
  result = (QPictureIO *)new QPictureIO((QString const &)*arg1,(char const *)arg2);
  *(QPictureIO **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QPictureIO(QPictureIO * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  
  arg1 = *(QPictureIO **)&self; 
  delete arg1;
}


SWIGEXPORT QPicture * QPictureIO_picture(QPictureIO const * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  QPicture *result = 0 ;
  QPicture * cresult ;
  
  arg1 = *(QPictureIO **)&self; 
  result = (QPicture *) &((QPictureIO const *)arg1)->picture();
  *(QPicture **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QPictureIO_status(QPictureIO const * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPictureIO **)&self; 
  result = (int)((QPictureIO const *)arg1)->status();
  cresult = result; 
  return cresult;
}


SWIGEXPORT char * QPictureIO_format(QPictureIO const * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  char *result = 0 ;
  char * cresult ;
  
  arg1 = *(QPictureIO **)&self; 
  result = (char *)((QPictureIO const *)arg1)->format();
  *(char **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QIODevice * QPictureIO_ioDevice(QPictureIO const * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  QIODevice *result = 0 ;
  QIODevice * cresult ;
  
  arg1 = *(QPictureIO **)&self; 
  result = (QIODevice *)((QPictureIO const *)arg1)->ioDevice();
  *(QIODevice **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QString * QPictureIO_fileName(QPictureIO const * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  QString * cresult ;
  
  arg1 = *(QPictureIO **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QPictureIO const *)arg1)->fileName());
  return cresult;
}


SWIGEXPORT int QPictureIO_quality(QPictureIO const * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPictureIO **)&self; 
  result = (int)((QPictureIO const *)arg1)->quality();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * QPictureIO_description(QPictureIO const * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  QString * cresult ;
  
  arg1 = *(QPictureIO **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QPictureIO const *)arg1)->description());
  return cresult;
}


SWIGEXPORT char * QPictureIO_parameters(QPictureIO const * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  char *result = 0 ;
  char * cresult ;
  
  arg1 = *(QPictureIO **)&self; 
  result = (char *)((QPictureIO const *)arg1)->parameters();
  *(char **)&cresult = result; 
  return cresult;
}


SWIGEXPORT float QPictureIO_gamma(QPictureIO const * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  float result;
  float cresult ;
  
  arg1 = *(QPictureIO **)&self; 
  result = (float)((QPictureIO const *)arg1)->gamma();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPictureIO_setPicture(QPictureIO * self, QPicture * m3arg2) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  QPicture *arg2 = 0 ;
  
  arg1 = *(QPictureIO **)&self; 
  arg2 = *(QPicture **)&m3arg2;
  (arg1)->setPicture((QPicture const &)*arg2);
}


SWIGEXPORT void QPictureIO_setStatus(QPictureIO * self, int m3arg2) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  int arg2 ;
  
  arg1 = *(QPictureIO **)&self; 
  arg2 = (int)m3arg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT void QPictureIO_setFormat(QPictureIO * self, char * m3arg2) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(QPictureIO **)&self; 
  {
    arg2 = m3arg2;
  }
  (arg1)->setFormat((char const *)arg2);
}


SWIGEXPORT void QPictureIO_setIODevice(QPictureIO * self, QIODevice * m3arg2) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  
  arg1 = *(QPictureIO **)&self; 
  arg2 = *(QIODevice **)&m3arg2; 
  (arg1)->setIODevice(arg2);
}


SWIGEXPORT void QPictureIO_setFileName(QPictureIO * self, QString * m3arg2) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QPictureIO **)&self; 
  arg2 = *(QString **)&m3arg2;
  (arg1)->setFileName((QString const &)*arg2);
}


SWIGEXPORT void QPictureIO_setQuality(QPictureIO * self, int m3arg2) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  int arg2 ;
  
  arg1 = *(QPictureIO **)&self; 
  arg2 = (int)m3arg2; 
  (arg1)->setQuality(arg2);
}


SWIGEXPORT void QPictureIO_setDescription(QPictureIO * self, QString * m3arg2) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QPictureIO **)&self; 
  arg2 = *(QString **)&m3arg2;
  (arg1)->setDescription((QString const &)*arg2);
}


SWIGEXPORT void QPictureIO_setParameters(QPictureIO * self, char * m3arg2) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = *(QPictureIO **)&self; 
  {
    arg2 = m3arg2;
  }
  (arg1)->setParameters((char const *)arg2);
}


SWIGEXPORT void QPictureIO_setGamma(QPictureIO * self, float m3arg2) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  float arg2 ;
  
  arg1 = *(QPictureIO **)&self; 
  arg2 = (float)m3arg2; 
  (arg1)->setGamma(arg2);
}


SWIGEXPORT bool QPictureIO_read(QPictureIO * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPictureIO **)&self; 
  result = (bool)(arg1)->read();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPictureIO_write(QPictureIO * self) {
  QPictureIO *arg1 = (QPictureIO *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPictureIO **)&self; 
  result = (bool)(arg1)->write();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * PictureFormat(QString * fileName) {
  QString *arg1 = 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QString **)&fileName;
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)QPictureIO::pictureFormat((QString const &)*arg1));
  return cresult;
}


SWIGEXPORT QByteArray * PictureFormat1(QIODevice * m3arg1) {
  QIODevice *arg1 = (QIODevice *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QIODevice **)&m3arg1; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)QPictureIO::pictureFormat(arg1));
  return cresult;
}


SWIGEXPORT long Modula3_QPictureToQPaintDevice(long objectRef) {
    long baseptr = 0;
    *(QPaintDevice **)&baseptr = *(QPicture **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

