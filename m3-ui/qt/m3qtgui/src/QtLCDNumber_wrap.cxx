/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qlcdnumber.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QLCDNumber * New_QLCDNumber0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QLCDNumber *result = 0 ;
  QLCDNumber * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QLCDNumber *)new QLCDNumber(arg1);
  *(QLCDNumber **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLCDNumber * New_QLCDNumber1() {
  QLCDNumber *result = 0 ;
  QLCDNumber * cresult ;
  
  result = (QLCDNumber *)new QLCDNumber();
  *(QLCDNumber **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLCDNumber * New_QLCDNumber2(unsigned int numDigits, QWidget * parent) {
  unsigned int arg1 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QLCDNumber *result = 0 ;
  QLCDNumber * cresult ;
  
  arg1 = (unsigned int)numDigits; 
  arg2 = *(QWidget **)&parent; 
  result = (QLCDNumber *)new QLCDNumber(arg1,arg2);
  *(QLCDNumber **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLCDNumber * New_QLCDNumber3(unsigned int numDigits) {
  unsigned int arg1 ;
  QLCDNumber *result = 0 ;
  QLCDNumber * cresult ;
  
  arg1 = (unsigned int)numDigits; 
  result = (QLCDNumber *)new QLCDNumber(arg1);
  *(QLCDNumber **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QLCDNumber(QLCDNumber * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  
  arg1 = *(QLCDNumber **)&self; 
  delete arg1;
}


SWIGEXPORT bool QLCDNumber_smallDecimalPoint(QLCDNumber const * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLCDNumber **)&self; 
  result = (bool)((QLCDNumber const *)arg1)->smallDecimalPoint();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QLCDNumber_digitCount(QLCDNumber const * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QLCDNumber **)&self; 
  result = (int)((QLCDNumber const *)arg1)->digitCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QLCDNumber_setDigitCount(QLCDNumber * self, int nDigits) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  int arg2 ;
  
  arg1 = *(QLCDNumber **)&self; 
  arg2 = (int)nDigits; 
  (arg1)->setDigitCount(arg2);
}


SWIGEXPORT bool QLCDNumber_checkOverflow(QLCDNumber const * self, double num) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  double arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLCDNumber **)&self; 
  arg2 = (double)num; 
  result = (bool)((QLCDNumber const *)arg1)->checkOverflow(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QLCDNumber_checkOverflow1(QLCDNumber const * self, int num) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLCDNumber **)&self; 
  arg2 = (int)num; 
  result = (bool)((QLCDNumber const *)arg1)->checkOverflow(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QLCDNumber::Mode QLCDNumber_mode(QLCDNumber const * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  QLCDNumber::Mode result;
  QLCDNumber::Mode cresult ;
  
  arg1 = *(QLCDNumber **)&self; 
  result = (QLCDNumber::Mode)((QLCDNumber const *)arg1)->mode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QLCDNumber_setMode(QLCDNumber * self, QLCDNumber::Mode m3arg2) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  QLCDNumber::Mode arg2 ;
  
  arg1 = *(QLCDNumber **)&self; 
  arg2 = (QLCDNumber::Mode)m3arg2; 
  (arg1)->setMode(arg2);
}


SWIGEXPORT QLCDNumber::SegmentStyle QLCDNumber_segmentStyle(QLCDNumber const * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  QLCDNumber::SegmentStyle result;
  QLCDNumber::SegmentStyle cresult ;
  
  arg1 = *(QLCDNumber **)&self; 
  result = (QLCDNumber::SegmentStyle)((QLCDNumber const *)arg1)->segmentStyle();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QLCDNumber_setSegmentStyle(QLCDNumber * self, QLCDNumber::SegmentStyle m3arg2) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  QLCDNumber::SegmentStyle arg2 ;
  
  arg1 = *(QLCDNumber **)&self; 
  arg2 = (QLCDNumber::SegmentStyle)m3arg2; 
  (arg1)->setSegmentStyle(arg2);
}


SWIGEXPORT double QLCDNumber_value(QLCDNumber const * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QLCDNumber **)&self; 
  result = (double)((QLCDNumber const *)arg1)->value();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QLCDNumber_intValue(QLCDNumber const * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QLCDNumber **)&self; 
  result = (int)((QLCDNumber const *)arg1)->intValue();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QLCDNumber_sizeHint(QLCDNumber const * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QLCDNumber **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QLCDNumber const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT void QLCDNumber_display(QLCDNumber * self, QString * str) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QLCDNumber **)&self; 
  arg2 = *(QString **)&str;
  (arg1)->display((QString const &)*arg2);
}


SWIGEXPORT void QLCDNumber_display1(QLCDNumber * self, int num) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  int arg2 ;
  
  arg1 = *(QLCDNumber **)&self; 
  arg2 = (int)num; 
  (arg1)->display(arg2);
}


SWIGEXPORT void QLCDNumber_display2(QLCDNumber * self, double num) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  double arg2 ;
  
  arg1 = *(QLCDNumber **)&self; 
  arg2 = (double)num; 
  (arg1)->display(arg2);
}


SWIGEXPORT void QLCDNumber_setHexMode(QLCDNumber * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  
  arg1 = *(QLCDNumber **)&self; 
  (arg1)->setHexMode();
}


SWIGEXPORT void QLCDNumber_setDecMode(QLCDNumber * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  
  arg1 = *(QLCDNumber **)&self; 
  (arg1)->setDecMode();
}


SWIGEXPORT void QLCDNumber_setOctMode(QLCDNumber * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  
  arg1 = *(QLCDNumber **)&self; 
  (arg1)->setOctMode();
}


SWIGEXPORT void QLCDNumber_setBinMode(QLCDNumber * self) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  
  arg1 = *(QLCDNumber **)&self; 
  (arg1)->setBinMode();
}


SWIGEXPORT void QLCDNumber_setSmallDecimalPoint(QLCDNumber * self, bool m3arg2) {
  QLCDNumber *arg1 = (QLCDNumber *) 0 ;
  bool arg2 ;
  
  arg1 = *(QLCDNumber **)&self; 
  arg2 = m3arg2 ? true : false; 
  (arg1)->setSmallDecimalPoint(arg2);
}


SWIGEXPORT long Modula3_QLCDNumberToQFrame(long objectRef) {
    long baseptr = 0;
    *(QFrame **)&baseptr = *(QLCDNumber **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

