(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtTextEdit;


FROM QtFont IMPORT QFont;
FROM QGuiStubs IMPORT WrapMode, FindFlags, MoveOperation, MoveMode,
                      QTextDocument, QTextCursor;
FROM QtColor IMPORT QColor;
IMPORT QtTextEditRaw;
FROM QtWidget IMPORT QWidget;
FROM QtString IMPORT QString;
FROM QtTextFormat IMPORT QTextCharFormat;
FROM QtMenu IMPORT QMenu;
FROM QtPoint IMPORT QPoint;
FROM QtNamespace IMPORT AlignmentFlag, TextInteractionFlags;
FROM QtRect IMPORT QRect;


IMPORT WeakRef;
FROM QtByteArray IMPORT QByteArray;

PROCEDURE New_QTextEdit0 (self: QTextEdit; parent: QWidget; ): QTextEdit =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(parent.cxxObj, ADDRESS);
  BEGIN
    result := QtTextEditRaw.New_QTextEdit0(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextEdit);

    RETURN self;
  END New_QTextEdit0;

PROCEDURE New_QTextEdit1 (self: QTextEdit; ): QTextEdit =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextEditRaw.New_QTextEdit1();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextEdit);

    RETURN self;
  END New_QTextEdit1;

PROCEDURE New_QTextEdit2 (self: QTextEdit; text: TEXT; parent: QWidget; ):
  QTextEdit =
  VAR
    result   : ADDRESS;
    qstr_text          := NEW(QString).initQString(text);
    arg1tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
    arg2tmp            := LOOPHOLE(parent.cxxObj, ADDRESS);
  BEGIN
    result := QtTextEditRaw.New_QTextEdit2(arg1tmp, arg2tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextEdit);

    RETURN self;
  END New_QTextEdit2;

PROCEDURE New_QTextEdit3 (self: QTextEdit; text: TEXT; ): QTextEdit =
  VAR
    result   : ADDRESS;
    qstr_text          := NEW(QString).initQString(text);
    arg1tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    result := QtTextEditRaw.New_QTextEdit3(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextEdit);

    RETURN self;
  END New_QTextEdit3;

PROCEDURE Delete_QTextEdit (self: QTextEdit; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.Delete_QTextEdit(selfAdr);
  END Delete_QTextEdit;

PROCEDURE QTextEdit_setDocument
  (self: QTextEdit; document: QTextDocument; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(document.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setDocument(selfAdr, arg2tmp);
  END QTextEdit_setDocument;

PROCEDURE QTextEdit_document (self: QTextEdit; ): QTextDocument =
  VAR
    ret    : ADDRESS;
    result : QTextDocument;
    selfAdr: ADDRESS       := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_document(selfAdr);

    result := NEW(QTextDocument);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextEdit_document;

PROCEDURE QTextEdit_setTextCursor
  (self: QTextEdit; cursor: QTextCursor; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(cursor.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setTextCursor(selfAdr, arg2tmp);
  END QTextEdit_setTextCursor;

PROCEDURE QTextEdit_textCursor (self: QTextEdit; ): QTextCursor =
  VAR
    ret    : ADDRESS;
    result : QTextCursor;
    selfAdr: ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_textCursor(selfAdr);

    result := NEW(QTextCursor);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextEdit_textCursor;

PROCEDURE QTextEdit_isReadOnly (self: QTextEdit; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_isReadOnly(selfAdr);
  END QTextEdit_isReadOnly;

PROCEDURE QTextEdit_setReadOnly (self: QTextEdit; ro: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setReadOnly(selfAdr, ro);
  END QTextEdit_setReadOnly;

PROCEDURE QTextEdit_setTextInteractionFlags
  (self: QTextEdit; flags: TextInteractionFlags; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setTextInteractionFlags(selfAdr, ORD(flags));
  END QTextEdit_setTextInteractionFlags;

PROCEDURE QTextEdit_textInteractionFlags (self: QTextEdit; ):
  TextInteractionFlags =
  VAR
    ret    : INTEGER;
    result : TextInteractionFlags;
    selfAdr: ADDRESS              := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_textInteractionFlags(selfAdr);
    result := VAL(ret, TextInteractionFlags);
    RETURN result;
  END QTextEdit_textInteractionFlags;

PROCEDURE QTextEdit_fontPointSize (self: QTextEdit; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_fontPointSize(selfAdr);
  END QTextEdit_fontPointSize;

PROCEDURE QTextEdit_fontFamily (self: QTextEdit; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_fontFamily(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextEdit_fontFamily;

PROCEDURE QTextEdit_fontWeight (self: QTextEdit; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_fontWeight(selfAdr);
  END QTextEdit_fontWeight;

PROCEDURE QTextEdit_fontUnderline (self: QTextEdit; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_fontUnderline(selfAdr);
  END QTextEdit_fontUnderline;

PROCEDURE QTextEdit_fontItalic (self: QTextEdit; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_fontItalic(selfAdr);
  END QTextEdit_fontItalic;

PROCEDURE QTextEdit_textColor (self: QTextEdit; ): QColor =
  VAR
    ret    : ADDRESS;
    result : QColor;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_textColor(selfAdr);

    result := NEW(QColor);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextEdit_textColor;

PROCEDURE QTextEdit_textBackgroundColor (self: QTextEdit; ): QColor =
  VAR
    ret    : ADDRESS;
    result : QColor;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_textBackgroundColor(selfAdr);

    result := NEW(QColor);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextEdit_textBackgroundColor;

PROCEDURE QTextEdit_currentFont (self: QTextEdit; ): QFont =
  VAR
    ret    : ADDRESS;
    result : QFont;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_currentFont(selfAdr);

    result := NEW(QFont);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextEdit_currentFont;

PROCEDURE QTextEdit_alignment (self: QTextEdit; ): AlignmentFlag =
  VAR
    ret    : INTEGER;
    result : AlignmentFlag;
    selfAdr: ADDRESS       := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_alignment(selfAdr);
    result := VAL(ret, AlignmentFlag);
    RETURN result;
  END QTextEdit_alignment;

PROCEDURE QTextEdit_mergeCurrentCharFormat
  (self: QTextEdit; modifier: QTextCharFormat; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(modifier.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_mergeCurrentCharFormat(selfAdr, arg2tmp);
  END QTextEdit_mergeCurrentCharFormat;

PROCEDURE QTextEdit_setCurrentCharFormat
  (self: QTextEdit; format: QTextCharFormat; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(format.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setCurrentCharFormat(selfAdr, arg2tmp);
  END QTextEdit_setCurrentCharFormat;

PROCEDURE QTextEdit_currentCharFormat (self: QTextEdit; ):
  QTextCharFormat =
  VAR
    ret    : ADDRESS;
    result : QTextCharFormat;
    selfAdr: ADDRESS         := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_currentCharFormat(selfAdr);

    result := NEW(QTextCharFormat);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextEdit_currentCharFormat;

PROCEDURE QTextEdit_autoFormatting (self: QTextEdit; ): AutoFormatting =
  VAR
    ret    : INTEGER;
    result : AutoFormatting;
    selfAdr: ADDRESS        := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_autoFormatting(selfAdr);
    result := VAL(ret, AutoFormatting);
    RETURN result;
  END QTextEdit_autoFormatting;

PROCEDURE QTextEdit_setAutoFormatting
  (self: QTextEdit; features: AutoFormatting; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setAutoFormatting(selfAdr, ORD(features));
  END QTextEdit_setAutoFormatting;

PROCEDURE QTextEdit_tabChangesFocus (self: QTextEdit; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_tabChangesFocus(selfAdr);
  END QTextEdit_tabChangesFocus;

PROCEDURE QTextEdit_setTabChangesFocus (self: QTextEdit; b: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setTabChangesFocus(selfAdr, b);
  END QTextEdit_setTabChangesFocus;

PROCEDURE QTextEdit_setDocumentTitle (self: QTextEdit; title: TEXT; ) =
  VAR
    selfAdr   : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_title          := NEW(QString).initQString(title);
    arg2tmp             := LOOPHOLE(qstr_title.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setDocumentTitle(selfAdr, arg2tmp);
  END QTextEdit_setDocumentTitle;

PROCEDURE QTextEdit_documentTitle (self: QTextEdit; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_documentTitle(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextEdit_documentTitle;

PROCEDURE QTextEdit_isUndoRedoEnabled (self: QTextEdit; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_isUndoRedoEnabled(selfAdr);
  END QTextEdit_isUndoRedoEnabled;

PROCEDURE QTextEdit_setUndoRedoEnabled
  (self: QTextEdit; enable: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setUndoRedoEnabled(selfAdr, enable);
  END QTextEdit_setUndoRedoEnabled;

PROCEDURE QTextEdit_lineWrapMode (self: QTextEdit; ): LineWrapMode =
  VAR
    ret    : INTEGER;
    result : LineWrapMode;
    selfAdr: ADDRESS      := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_lineWrapMode(selfAdr);
    result := VAL(ret, LineWrapMode);
    RETURN result;
  END QTextEdit_lineWrapMode;

PROCEDURE QTextEdit_setLineWrapMode
  (self: QTextEdit; mode: LineWrapMode; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setLineWrapMode(selfAdr, ORD(mode));
  END QTextEdit_setLineWrapMode;

PROCEDURE QTextEdit_lineWrapColumnOrWidth (self: QTextEdit; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_lineWrapColumnOrWidth(selfAdr);
  END QTextEdit_lineWrapColumnOrWidth;

PROCEDURE QTextEdit_setLineWrapColumnOrWidth
  (self: QTextEdit; w: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setLineWrapColumnOrWidth(selfAdr, w);
  END QTextEdit_setLineWrapColumnOrWidth;

PROCEDURE QTextEdit_wordWrapMode (self: QTextEdit; ): WrapMode =
  VAR
    ret    : INTEGER;
    result : WrapMode;
    selfAdr: ADDRESS  := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_wordWrapMode(selfAdr);
    result := VAL(ret, WrapMode);
    RETURN result;
  END QTextEdit_wordWrapMode;

PROCEDURE QTextEdit_setWordWrapMode (self: QTextEdit; policy: WrapMode; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setWordWrapMode(selfAdr, ORD(policy));
  END QTextEdit_setWordWrapMode;

PROCEDURE QTextEdit_find
  (self: QTextEdit; exp: TEXT; options: FindFlags; ): BOOLEAN =
  VAR
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_exp          := NEW(QString).initQString(exp);
    arg2tmp           := LOOPHOLE(qstr_exp.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_find(selfAdr, arg2tmp, ORD(options));
  END QTextEdit_find;

PROCEDURE QTextEdit_find1 (self: QTextEdit; exp: TEXT; ): BOOLEAN =
  VAR
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_exp          := NEW(QString).initQString(exp);
    arg2tmp           := LOOPHOLE(qstr_exp.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_find1(selfAdr, arg2tmp);
  END QTextEdit_find1;

PROCEDURE QTextEdit_toPlainText (self: QTextEdit; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_toPlainText(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextEdit_toPlainText;

PROCEDURE QTextEdit_toHtml (self: QTextEdit; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_toHtml(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextEdit_toHtml;

PROCEDURE QTextEdit_ensureCursorVisible (self: QTextEdit; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_ensureCursorVisible(selfAdr);
  END QTextEdit_ensureCursorVisible;

PROCEDURE QTextEdit_createStandardContextMenu (self: QTextEdit; ): QMenu =
  VAR
    ret    : ADDRESS;
    result : QMenu;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_createStandardContextMenu(selfAdr);

    result := NEW(QMenu);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextEdit_createStandardContextMenu;

PROCEDURE QTextEdit_createStandardContextMenu1
  (self: QTextEdit; position: QPoint; ): QMenu =
  VAR
    ret    : ADDRESS;
    result : QMenu;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(position.cxxObj, ADDRESS);
  BEGIN
    ret :=
      QtTextEditRaw.QTextEdit_createStandardContextMenu1(selfAdr, arg2tmp);

    result := NEW(QMenu);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextEdit_createStandardContextMenu1;

PROCEDURE QTextEdit_cursorForPosition (self: QTextEdit; pos: QPoint; ):
  QTextCursor =
  VAR
    ret    : ADDRESS;
    result : QTextCursor;
    selfAdr: ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp              := LOOPHOLE(pos.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_cursorForPosition(selfAdr, arg2tmp);

    result := NEW(QTextCursor);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextEdit_cursorForPosition;

PROCEDURE QTextEdit_cursorRect (self: QTextEdit; cursor: QTextCursor; ):
  QRect =
  VAR
    ret    : ADDRESS;
    result : QRect;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(cursor.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_cursorRect(selfAdr, arg2tmp);

    result := NEW(QRect);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextEdit_cursorRect;

PROCEDURE QTextEdit_cursorRect1 (self: QTextEdit; ): QRect =
  VAR
    ret    : ADDRESS;
    result : QRect;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_cursorRect1(selfAdr);

    result := NEW(QRect);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextEdit_cursorRect1;

PROCEDURE QTextEdit_anchorAt (self: QTextEdit; pos: QPoint; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp             := LOOPHOLE(pos.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextEditRaw.QTextEdit_anchorAt(selfAdr, arg2tmp);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextEdit_anchorAt;

PROCEDURE QTextEdit_overwriteMode (self: QTextEdit; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_overwriteMode(selfAdr);
  END QTextEdit_overwriteMode;

PROCEDURE QTextEdit_setOverwriteMode
  (self: QTextEdit; overwrite: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setOverwriteMode(selfAdr, overwrite);
  END QTextEdit_setOverwriteMode;

PROCEDURE QTextEdit_tabStopWidth (self: QTextEdit; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_tabStopWidth(selfAdr);
  END QTextEdit_tabStopWidth;

PROCEDURE QTextEdit_setTabStopWidth (self: QTextEdit; width: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setTabStopWidth(selfAdr, width);
  END QTextEdit_setTabStopWidth;

PROCEDURE QTextEdit_cursorWidth (self: QTextEdit; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_cursorWidth(selfAdr);
  END QTextEdit_cursorWidth;

PROCEDURE QTextEdit_setCursorWidth (self: QTextEdit; width: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setCursorWidth(selfAdr, width);
  END QTextEdit_setCursorWidth;

PROCEDURE QTextEdit_acceptRichText (self: QTextEdit; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_acceptRichText(selfAdr);
  END QTextEdit_acceptRichText;

PROCEDURE QTextEdit_setAcceptRichText
  (self: QTextEdit; accept: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setAcceptRichText(selfAdr, accept);
  END QTextEdit_setAcceptRichText;

PROCEDURE QTextEdit_moveCursor
  (self: QTextEdit; operation: MoveOperation; mode: MoveMode; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_moveCursor(selfAdr, ORD(operation), ORD(mode));
  END QTextEdit_moveCursor;

PROCEDURE QTextEdit_moveCursor1
  (self: QTextEdit; operation: MoveOperation; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_moveCursor1(selfAdr, ORD(operation));
  END QTextEdit_moveCursor1;

PROCEDURE QTextEdit_canPaste (self: QTextEdit; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextEditRaw.QTextEdit_canPaste(selfAdr);
  END QTextEdit_canPaste;

PROCEDURE QTextEdit_setFontPointSize (self: QTextEdit; s: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setFontPointSize(selfAdr, s);
  END QTextEdit_setFontPointSize;

PROCEDURE QTextEdit_setFontFamily (self: QTextEdit; fontFamily: TEXT; ) =
  VAR
    selfAdr        : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_fontFamily          := NEW(QString).initQString(fontFamily);
    arg2tmp                  := LOOPHOLE(qstr_fontFamily.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setFontFamily(selfAdr, arg2tmp);
  END QTextEdit_setFontFamily;

PROCEDURE QTextEdit_setFontWeight (self: QTextEdit; w: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setFontWeight(selfAdr, w);
  END QTextEdit_setFontWeight;

PROCEDURE QTextEdit_setFontUnderline (self: QTextEdit; b: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setFontUnderline(selfAdr, b);
  END QTextEdit_setFontUnderline;

PROCEDURE QTextEdit_setFontItalic (self: QTextEdit; b: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setFontItalic(selfAdr, b);
  END QTextEdit_setFontItalic;

PROCEDURE QTextEdit_setTextColor (self: QTextEdit; c: QColor; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(c.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setTextColor(selfAdr, arg2tmp);
  END QTextEdit_setTextColor;

PROCEDURE QTextEdit_setTextBackgroundColor (self: QTextEdit; c: QColor; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(c.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setTextBackgroundColor(selfAdr, arg2tmp);
  END QTextEdit_setTextBackgroundColor;

PROCEDURE QTextEdit_setCurrentFont (self: QTextEdit; f: QFont; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(f.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setCurrentFont(selfAdr, arg2tmp);
  END QTextEdit_setCurrentFont;

PROCEDURE QTextEdit_setAlignment (self: QTextEdit; a: AlignmentFlag; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setAlignment(selfAdr, ORD(a));
  END QTextEdit_setAlignment;

PROCEDURE QTextEdit_setPlainText (self: QTextEdit; text: TEXT; ) =
  VAR
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_text          := NEW(QString).initQString(text);
    arg2tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setPlainText(selfAdr, arg2tmp);
  END QTextEdit_setPlainText;

PROCEDURE QTextEdit_setHtml (self: QTextEdit; text: TEXT; ) =
  VAR
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_text          := NEW(QString).initQString(text);
    arg2tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setHtml(selfAdr, arg2tmp);
  END QTextEdit_setHtml;

PROCEDURE QTextEdit_setText (self: QTextEdit; text: TEXT; ) =
  VAR
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_text          := NEW(QString).initQString(text);
    arg2tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_setText(selfAdr, arg2tmp);
  END QTextEdit_setText;

PROCEDURE QTextEdit_cut (self: QTextEdit; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_cut(selfAdr);
  END QTextEdit_cut;

PROCEDURE QTextEdit_copy (self: QTextEdit; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_copy(selfAdr);
  END QTextEdit_copy;

PROCEDURE QTextEdit_paste (self: QTextEdit; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_paste(selfAdr);
  END QTextEdit_paste;

PROCEDURE QTextEdit_undo (self: QTextEdit; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_undo(selfAdr);
  END QTextEdit_undo;

PROCEDURE QTextEdit_redo (self: QTextEdit; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_redo(selfAdr);
  END QTextEdit_redo;

PROCEDURE QTextEdit_clear (self: QTextEdit; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_clear(selfAdr);
  END QTextEdit_clear;

PROCEDURE QTextEdit_selectAll (self: QTextEdit; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_selectAll(selfAdr);
  END QTextEdit_selectAll;

PROCEDURE QTextEdit_insertPlainText (self: QTextEdit; text: TEXT; ) =
  VAR
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_text          := NEW(QString).initQString(text);
    arg2tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_insertPlainText(selfAdr, arg2tmp);
  END QTextEdit_insertPlainText;

PROCEDURE QTextEdit_insertHtml (self: QTextEdit; text: TEXT; ) =
  VAR
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_text          := NEW(QString).initQString(text);
    arg2tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_insertHtml(selfAdr, arg2tmp);
  END QTextEdit_insertHtml;

PROCEDURE QTextEdit_append (self: QTextEdit; text: TEXT; ) =
  VAR
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_text          := NEW(QString).initQString(text);
    arg2tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_append(selfAdr, arg2tmp);
  END QTextEdit_append;

PROCEDURE QTextEdit_scrollToAnchor (self: QTextEdit; name: TEXT; ) =
  VAR
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_name          := NEW(QString).initQString(name);
    arg2tmp            := LOOPHOLE(qstr_name.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_scrollToAnchor(selfAdr, arg2tmp);
  END QTextEdit_scrollToAnchor;

PROCEDURE QTextEdit_zoomIn (self: QTextEdit; range: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_zoomIn(selfAdr, range);
  END QTextEdit_zoomIn;

PROCEDURE QTextEdit_zoomIn1 (self: QTextEdit; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_zoomIn1(selfAdr);
  END QTextEdit_zoomIn1;

PROCEDURE QTextEdit_zoomOut (self: QTextEdit; range: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_zoomOut(selfAdr, range);
  END QTextEdit_zoomOut;

PROCEDURE QTextEdit_zoomOut1 (self: QTextEdit; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextEditRaw.QTextEdit_zoomOut1(selfAdr);
  END QTextEdit_zoomOut1;

PROCEDURE Cleanup_QTextEdit
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTextEdit := ref;
  BEGIN
    Delete_QTextEdit(obj);
  END Cleanup_QTextEdit;

PROCEDURE Destroy_QTextEdit (self: QTextEdit) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTextEdit);
  END Destroy_QTextEdit;

REVEAL
  QTextEdit =
    QTextEditPublic BRANDED OBJECT
    OVERRIDES
      init_0                     := New_QTextEdit0;
      init_1                     := New_QTextEdit1;
      init_2                     := New_QTextEdit2;
      init_3                     := New_QTextEdit3;
      setDocument                := QTextEdit_setDocument;
      document                   := QTextEdit_document;
      setTextCursor              := QTextEdit_setTextCursor;
      textCursor                 := QTextEdit_textCursor;
      isReadOnly                 := QTextEdit_isReadOnly;
      setReadOnly                := QTextEdit_setReadOnly;
      setTextInteractionFlags    := QTextEdit_setTextInteractionFlags;
      textInteractionFlags       := QTextEdit_textInteractionFlags;
      fontPointSize              := QTextEdit_fontPointSize;
      fontFamily                 := QTextEdit_fontFamily;
      fontWeight                 := QTextEdit_fontWeight;
      fontUnderline              := QTextEdit_fontUnderline;
      fontItalic                 := QTextEdit_fontItalic;
      textColor                  := QTextEdit_textColor;
      textBackgroundColor        := QTextEdit_textBackgroundColor;
      currentFont                := QTextEdit_currentFont;
      alignment                  := QTextEdit_alignment;
      mergeCurrentCharFormat     := QTextEdit_mergeCurrentCharFormat;
      setCurrentCharFormat       := QTextEdit_setCurrentCharFormat;
      currentCharFormat          := QTextEdit_currentCharFormat;
      autoFormatting             := QTextEdit_autoFormatting;
      setAutoFormatting          := QTextEdit_setAutoFormatting;
      tabChangesFocus            := QTextEdit_tabChangesFocus;
      setTabChangesFocus         := QTextEdit_setTabChangesFocus;
      setDocumentTitle           := QTextEdit_setDocumentTitle;
      documentTitle              := QTextEdit_documentTitle;
      isUndoRedoEnabled          := QTextEdit_isUndoRedoEnabled;
      setUndoRedoEnabled         := QTextEdit_setUndoRedoEnabled;
      lineWrapMode               := QTextEdit_lineWrapMode;
      setLineWrapMode            := QTextEdit_setLineWrapMode;
      lineWrapColumnOrWidth      := QTextEdit_lineWrapColumnOrWidth;
      setLineWrapColumnOrWidth   := QTextEdit_setLineWrapColumnOrWidth;
      wordWrapMode               := QTextEdit_wordWrapMode;
      setWordWrapMode            := QTextEdit_setWordWrapMode;
      find                       := QTextEdit_find;
      find1                      := QTextEdit_find1;
      toPlainText                := QTextEdit_toPlainText;
      toHtml                     := QTextEdit_toHtml;
      ensureCursorVisible        := QTextEdit_ensureCursorVisible;
      createStandardContextMenu  := QTextEdit_createStandardContextMenu;
      createStandardContextMenu1 := QTextEdit_createStandardContextMenu1;
      cursorForPosition          := QTextEdit_cursorForPosition;
      cursorRect                 := QTextEdit_cursorRect;
      cursorRect1                := QTextEdit_cursorRect1;
      anchorAt                   := QTextEdit_anchorAt;
      overwriteMode              := QTextEdit_overwriteMode;
      setOverwriteMode           := QTextEdit_setOverwriteMode;
      tabStopWidth               := QTextEdit_tabStopWidth;
      setTabStopWidth            := QTextEdit_setTabStopWidth;
      cursorWidth                := QTextEdit_cursorWidth;
      setCursorWidth             := QTextEdit_setCursorWidth;
      acceptRichText             := QTextEdit_acceptRichText;
      setAcceptRichText          := QTextEdit_setAcceptRichText;
      moveCursor                 := QTextEdit_moveCursor;
      moveCursor1                := QTextEdit_moveCursor1;
      canPaste                   := QTextEdit_canPaste;
      setFontPointSize           := QTextEdit_setFontPointSize;
      setFontFamily              := QTextEdit_setFontFamily;
      setFontWeight              := QTextEdit_setFontWeight;
      setFontUnderline           := QTextEdit_setFontUnderline;
      setFontItalic              := QTextEdit_setFontItalic;
      setTextColor               := QTextEdit_setTextColor;
      setTextBackgroundColor     := QTextEdit_setTextBackgroundColor;
      setCurrentFont             := QTextEdit_setCurrentFont;
      setAlignment               := QTextEdit_setAlignment;
      setPlainText               := QTextEdit_setPlainText;
      setHtml                    := QTextEdit_setHtml;
      setText                    := QTextEdit_setText;
      cut                        := QTextEdit_cut;
      copy                       := QTextEdit_copy;
      paste                      := QTextEdit_paste;
      undo                       := QTextEdit_undo;
      redo                       := QTextEdit_redo;
      clear                      := QTextEdit_clear;
      selectAll                  := QTextEdit_selectAll;
      insertPlainText            := QTextEdit_insertPlainText;
      insertHtml                 := QTextEdit_insertHtml;
      append                     := QTextEdit_append;
      scrollToAnchor             := QTextEdit_scrollToAnchor;
      zoomIn                     := QTextEdit_zoomIn;
      zoomIn1                    := QTextEdit_zoomIn1;
      zoomOut                    := QTextEdit_zoomOut;
      zoomOut1                   := QTextEdit_zoomOut1;
      destroyCxx                 := Destroy_QTextEdit;
    END;


BEGIN
END QtTextEdit.
