/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qtoolbox.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QToolBox * New_QToolBox0(QWidget * parent, Qt::WindowFlags f) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowFlags arg2 ;
  QToolBox *result = 0 ;
  QToolBox * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = (Qt::WindowFlags)f; 
  result = (QToolBox *)new QToolBox(arg1,arg2);
  *(QToolBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QToolBox * New_QToolBox1(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QToolBox *result = 0 ;
  QToolBox * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QToolBox *)new QToolBox(arg1);
  *(QToolBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QToolBox * New_QToolBox2() {
  QToolBox *result = 0 ;
  QToolBox * cresult ;
  
  result = (QToolBox *)new QToolBox();
  *(QToolBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QToolBox(QToolBox * self) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  
  arg1 = *(QToolBox **)&self; 
  delete arg1;
}


SWIGEXPORT int QToolBox_addItem(QToolBox * self, QWidget * widget, QString * text) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QString *arg3 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = *(QWidget **)&widget; 
  arg3 = *(QString **)&text;
  result = (int)(arg1)->addItem(arg2,(QString const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QToolBox_addItem1(QToolBox * self, QWidget * widget, QIcon * icon, QString * text) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QIcon *arg3 = 0 ;
  QString *arg4 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = *(QWidget **)&widget; 
  arg3 = *(QIcon **)&icon;
  arg4 = *(QString **)&text;
  result = (int)(arg1)->addItem(arg2,(QIcon const &)*arg3,(QString const &)*arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QToolBox_insertItem(QToolBox * self, int index, QWidget * widget, QString * text) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  QWidget *arg3 = (QWidget *) 0 ;
  QString *arg4 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  arg3 = *(QWidget **)&widget; 
  arg4 = *(QString **)&text;
  result = (int)(arg1)->insertItem(arg2,arg3,(QString const &)*arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QToolBox_insertItem1(QToolBox * self, int index, QWidget * widget, QIcon * icon, QString * text) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  QWidget *arg3 = (QWidget *) 0 ;
  QIcon *arg4 = 0 ;
  QString *arg5 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  arg3 = *(QWidget **)&widget; 
  arg4 = *(QIcon **)&icon;
  arg5 = *(QString **)&text;
  result = (int)(arg1)->insertItem(arg2,arg3,(QIcon const &)*arg4,(QString const &)*arg5);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QToolBox_removeItem(QToolBox * self, int index) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  (arg1)->removeItem(arg2);
}


SWIGEXPORT void QToolBox_setItemEnabled(QToolBox * self, int index, bool enabled) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  arg3 = enabled ? true : false; 
  (arg1)->setItemEnabled(arg2,arg3);
}


SWIGEXPORT bool QToolBox_isItemEnabled(QToolBox const * self, int index) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  result = (bool)((QToolBox const *)arg1)->isItemEnabled(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QToolBox_setItemText(QToolBox * self, int index, QString * text) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  arg3 = *(QString **)&text;
  (arg1)->setItemText(arg2,(QString const &)*arg3);
}


SWIGEXPORT QString *  QToolBox_itemText(QToolBox const * self, int index) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  QString *  cresult ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  *(QString **)&cresult = new QString((const QString &)((QToolBox const *)arg1)->itemText(arg2));
  return cresult;
}


SWIGEXPORT void QToolBox_setItemIcon(QToolBox * self, int index, QIcon * icon) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  QIcon *arg3 = 0 ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  arg3 = *(QIcon **)&icon;
  (arg1)->setItemIcon(arg2,(QIcon const &)*arg3);
}


SWIGEXPORT QIcon * QToolBox_itemIcon(QToolBox const * self, int index) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  QIcon * cresult ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  *(QIcon **)&cresult = new QIcon((const QIcon &)((QToolBox const *)arg1)->itemIcon(arg2));
  return cresult;
}


SWIGEXPORT void QToolBox_setItemToolTip(QToolBox * self, int index, QString * toolTip) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  arg3 = *(QString **)&toolTip;
  (arg1)->setItemToolTip(arg2,(QString const &)*arg3);
}


SWIGEXPORT QString *  QToolBox_itemToolTip(QToolBox const * self, int index) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  QString *  cresult ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  *(QString **)&cresult = new QString((const QString &)((QToolBox const *)arg1)->itemToolTip(arg2));
  return cresult;
}


SWIGEXPORT int QToolBox_currentIndex(QToolBox const * self) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QToolBox **)&self; 
  result = (int)((QToolBox const *)arg1)->currentIndex();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QToolBox_currentWidget(QToolBox const * self) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QToolBox **)&self; 
  result = (QWidget *)((QToolBox const *)arg1)->currentWidget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QToolBox_widget(QToolBox const * self, int index) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  result = (QWidget *)((QToolBox const *)arg1)->widget(arg2);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QToolBox_indexOf(QToolBox const * self, QWidget * widget) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = *(QWidget **)&widget; 
  result = (int)((QToolBox const *)arg1)->indexOf(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QToolBox_count(QToolBox const * self) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QToolBox **)&self; 
  result = (int)((QToolBox const *)arg1)->count();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QToolBox_setCurrentIndex(QToolBox * self, int index) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  int arg2 ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = (int)index; 
  (arg1)->setCurrentIndex(arg2);
}


SWIGEXPORT void QToolBox_setCurrentWidget(QToolBox * self, QWidget * widget) {
  QToolBox *arg1 = (QToolBox *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QToolBox **)&self; 
  arg2 = *(QWidget **)&widget; 
  (arg1)->setCurrentWidget(arg2);
}


SWIGEXPORT long Modula3_QToolBoxToQFrame(long objectRef) {
    long baseptr = 0;
    *(QFrame **)&baseptr = *(QToolBox **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

