/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qimage.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QImage * New_QImage0() {
  QImage *result = 0 ;
  QImage * cresult ;
  
  result = (QImage *)new QImage();
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * New_QImage1(QSize * size, QImage::Format format) {
  QSize *arg1 = 0 ;
  QImage::Format arg2 ;
  QImage *result = 0 ;
  QImage * cresult ;
  
  arg1 = *(QSize **)&size;
  arg2 = (QImage::Format)format; 
  result = (QImage *)new QImage((QSize const &)*arg1,arg2);
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * New_QImage2(int width, int height, QImage::Format format) {
  int arg1 ;
  int arg2 ;
  QImage::Format arg3 ;
  QImage *result = 0 ;
  QImage * cresult ;
  
  arg1 = (int)width; 
  arg2 = (int)height; 
  arg3 = (QImage::Format)format; 
  result = (QImage *)new QImage(arg1,arg2,arg3);
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * New_QImage3(unsigned char * data, int width, int height, QImage::Format format) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  int arg3 ;
  QImage::Format arg4 ;
  QImage *result = 0 ;
  QImage * cresult ;
  
  arg1 = *(unsigned char **)&data; 
  arg2 = (int)width; 
  arg3 = (int)height; 
  arg4 = (QImage::Format)format; 
  result = (QImage *)new QImage(arg1,arg2,arg3,arg4);
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * New_QImage4(unsigned char const * data, int width, int height, QImage::Format format) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  int arg3 ;
  QImage::Format arg4 ;
  QImage *result = 0 ;
  QImage * cresult ;
  
  arg1 = *(unsigned char **)&data; 
  arg2 = (int)width; 
  arg3 = (int)height; 
  arg4 = (QImage::Format)format; 
  result = (QImage *)new QImage((unsigned char const *)arg1,arg2,arg3,arg4);
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * New_QImage5(unsigned char * data, int width, int height, int bytesPerLine, QImage::Format format) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QImage::Format arg5 ;
  QImage *result = 0 ;
  QImage * cresult ;
  
  arg1 = *(unsigned char **)&data; 
  arg2 = (int)width; 
  arg3 = (int)height; 
  arg4 = (int)bytesPerLine; 
  arg5 = (QImage::Format)format; 
  result = (QImage *)new QImage(arg1,arg2,arg3,arg4,arg5);
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * New_QImage6(unsigned char const * data, int width, int height, int bytesPerLine, QImage::Format format) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QImage::Format arg5 ;
  QImage *result = 0 ;
  QImage * cresult ;
  
  arg1 = *(unsigned char **)&data; 
  arg2 = (int)width; 
  arg3 = (int)height; 
  arg4 = (int)bytesPerLine; 
  arg5 = (QImage::Format)format; 
  result = (QImage *)new QImage((unsigned char const *)arg1,arg2,arg3,arg4,arg5);
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * New_QImage7(QString * fileName, char * format) {
  QString *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  QImage *result = 0 ;
  QImage * cresult ;
  
  arg1 = *(QString **)&fileName;
  {
    arg2 = format;
  }
  result = (QImage *)new QImage((QString const &)*arg1,(char const *)arg2);
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * New_QImage8(QString * fileName) {
  QString *arg1 = 0 ;
  QImage *result = 0 ;
  QImage * cresult ;
  
  arg1 = *(QString **)&fileName;
  result = (QImage *)new QImage((QString const &)*arg1);
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * New_QImage9(char * fileName, char * format) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  QImage *result = 0 ;
  QImage * cresult ;
  
  {
    arg1 = fileName;
  }
  {
    arg2 = format;
  }
  result = (QImage *)new QImage((char const *)arg1,(char const *)arg2);
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * New_QImage10(char * fileName) {
  char *arg1 = (char *) 0 ;
  QImage *result = 0 ;
  QImage * cresult ;
  
  {
    arg1 = fileName;
  }
  result = (QImage *)new QImage((char const *)arg1);
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * New_QImage11(QImage const & m3arg1) {
  QImage *arg1 = 0 ;
  QImage *result = 0 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&m3arg1;
  result = (QImage *)new QImage((QImage const &)*arg1);
  *(QImage **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QImage(QImage * self) {
  QImage *arg1 = (QImage *) 0 ;
  
  arg1 = *(QImage **)&self; 
  delete arg1;
}


SWIGEXPORT bool QImage_isNull(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (bool)((QImage const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QImage_devType(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (int)((QImage const *)arg1)->devType();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QImage_detach(QImage * self) {
  QImage *arg1 = (QImage *) 0 ;
  
  arg1 = *(QImage **)&self; 
  (arg1)->detach();
}


SWIGEXPORT bool QImage_isDetached(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (bool)((QImage const *)arg1)->isDetached();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * QImage_copy(QImage const * self, QRect * rect) {
  QImage *arg1 = (QImage *) 0 ;
  QRect *arg2 = 0 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QRect **)&rect;
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->copy((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QImage * QImage_copy1(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->copy());
  return cresult;
}


SWIGEXPORT QImage * QImage_copy2(QImage const * self, int x, int y, int w, int h) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->copy(arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QImage::Format QImage_format(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  QImage::Format result;
  QImage::Format cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (QImage::Format)((QImage const *)arg1)->format();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * QImage_convertToFormat(QImage const * self, QImage::Format f, Qt::ImageConversionFlags flags) {
  QImage *arg1 = (QImage *) 0 ;
  QImage::Format arg2 ;
  Qt::ImageConversionFlags arg3 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (QImage::Format)f; 
  arg3 = (Qt::ImageConversionFlags)flags; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->convertToFormat(arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QImage_convertToFormat1(QImage const * self, QImage::Format f) {
  QImage *arg1 = (QImage *) 0 ;
  QImage::Format arg2 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (QImage::Format)f; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->convertToFormat(arg2));
  return cresult;
}


SWIGEXPORT int QImage_width(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (int)((QImage const *)arg1)->width();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QImage_height(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (int)((QImage const *)arg1)->height();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QImage_size(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QImage **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QImage const *)arg1)->size());
  return cresult;
}


SWIGEXPORT QRect * QImage_rect(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QImage **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QImage const *)arg1)->rect());
  return cresult;
}


SWIGEXPORT int QImage_depth(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (int)((QImage const *)arg1)->depth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QImage_colorCount(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (int)((QImage const *)arg1)->colorCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRgb * QImage_color(QImage const * self, int i) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  QRgb * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)i; 
  *(QRgb **)&cresult = new QRgb((const QRgb &)((QImage const *)arg1)->color(arg2));
  return cresult;
}


SWIGEXPORT void QImage_setColor(QImage * self, int i, QRgb * c) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  QRgb arg3 ;
  QRgb *argp3 ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)i; 
  argp3 = *(QRgb **)&c;
  /*
     if (!argp3) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QRgb");
       //RETURN ;
       return ;
     }
  */
  arg3 = *argp3; 
  (arg1)->setColor(arg2,arg3);
}


SWIGEXPORT void QImage_setColorCount(QImage * self, int m3arg2) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)m3arg2; 
  (arg1)->setColorCount(arg2);
}


SWIGEXPORT bool QImage_allGray(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (bool)((QImage const *)arg1)->allGray();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_isGrayscale(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (bool)((QImage const *)arg1)->isGrayscale();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned char * QImage_bits(QImage * self) {
  QImage *arg1 = (QImage *) 0 ;
  unsigned char *result = 0 ;
  unsigned char * cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (unsigned char *)(arg1)->bits();
  *(unsigned char **)&cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned char const * QImage_bits1(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  unsigned char *result = 0 ;
  unsigned char const * cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (unsigned char *)((QImage const *)arg1)->bits();
  *(unsigned char **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QImage_byteCount(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (int)((QImage const *)arg1)->byteCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned char * QImage_scanLine(QImage * self, int m3arg2) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  unsigned char * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)m3arg2; 
  result = (unsigned char *)(arg1)->scanLine(arg2);
  *(unsigned char **)&cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned char const * QImage_scanLine1(QImage const * self, int m3arg2) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  unsigned char const * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)m3arg2; 
  result = (unsigned char *)((QImage const *)arg1)->scanLine(arg2);
  *(unsigned char **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QImage_bytesPerLine(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (int)((QImage const *)arg1)->bytesPerLine();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_valid(QImage const * self, int x, int y) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  result = (bool)((QImage const *)arg1)->valid(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_valid1(QImage const * self, QPoint * pt) {
  QImage *arg1 = (QImage *) 0 ;
  QPoint *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QPoint **)&pt;
  result = (bool)((QImage const *)arg1)->valid((QPoint const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QImage_pixelIndex(QImage const * self, int x, int y) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  result = (int)((QImage const *)arg1)->pixelIndex(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QImage_pixelIndex1(QImage const * self, QPoint * pt) {
  QImage *arg1 = (QImage *) 0 ;
  QPoint *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QPoint **)&pt;
  result = (int)((QImage const *)arg1)->pixelIndex((QPoint const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRgb * QImage_pixel(QImage const * self, int x, int y) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  int arg3 ;
  QRgb * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  *(QRgb **)&cresult = new QRgb((const QRgb &)((QImage const *)arg1)->pixel(arg2,arg3));
  return cresult;
}


SWIGEXPORT QRgb * QImage_pixel1(QImage const * self, QPoint * pt) {
  QImage *arg1 = (QImage *) 0 ;
  QPoint *arg2 = 0 ;
  QRgb * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QPoint **)&pt;
  *(QRgb **)&cresult = new QRgb((const QRgb &)((QImage const *)arg1)->pixel((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT void QImage_setPixel(QImage * self, int x, int y, unsigned int index_or_rgb) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (unsigned int)index_or_rgb; 
  (arg1)->setPixel(arg2,arg3,arg4);
}


SWIGEXPORT void QImage_setPixel1(QImage * self, QPoint * pt, unsigned int index_or_rgb) {
  QImage *arg1 = (QImage *) 0 ;
  QPoint *arg2 = 0 ;
  unsigned int arg3 ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QPoint **)&pt;
  arg3 = (unsigned int)index_or_rgb; 
  (arg1)->setPixel((QPoint const &)*arg2,arg3);
}


SWIGEXPORT void QImage_fill(QImage * self, unsigned int pixel) {
  QImage *arg1 = (QImage *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (unsigned int)pixel; 
  (arg1)->fill(arg2);
}


SWIGEXPORT bool QImage_hasAlphaChannel(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (bool)((QImage const *)arg1)->hasAlphaChannel();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QImage_setAlphaChannel(QImage * self, QImage const & alphaChannel) {
  QImage *arg1 = (QImage *) 0 ;
  QImage *arg2 = 0 ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QImage **)&alphaChannel;
  (arg1)->setAlphaChannel((QImage const &)*arg2);
}


SWIGEXPORT QImage * QImage_alphaChannel(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->alphaChannel());
  return cresult;
}


SWIGEXPORT QImage * QImage_createAlphaMask(QImage const * self, Qt::ImageConversionFlags flags) {
  QImage *arg1 = (QImage *) 0 ;
  Qt::ImageConversionFlags arg2 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (Qt::ImageConversionFlags)flags; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->createAlphaMask(arg2));
  return cresult;
}


SWIGEXPORT QImage * QImage_createAlphaMask1(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->createAlphaMask());
  return cresult;
}


SWIGEXPORT QImage * QImage_createHeuristicMask(QImage const * self, bool clipTight) {
  QImage *arg1 = (QImage *) 0 ;
  bool arg2 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = clipTight ? true : false; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->createHeuristicMask(arg2));
  return cresult;
}


SWIGEXPORT QImage * QImage_createHeuristicMask1(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->createHeuristicMask());
  return cresult;
}


SWIGEXPORT QImage * QImage_createMaskFromColor(QImage const * self, QRgb * color, Qt::MaskMode mode) {
  QImage *arg1 = (QImage *) 0 ;
  QRgb arg2 ;
  Qt::MaskMode arg3 ;
  QRgb *argp2 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  argp2 = *(QRgb **)&color;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QRgb");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  arg3 = (Qt::MaskMode)mode; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->createMaskFromColor(arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QImage_createMaskFromColor1(QImage const * self, QRgb * color) {
  QImage *arg1 = (QImage *) 0 ;
  QRgb arg2 ;
  QRgb *argp2 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  argp2 = *(QRgb **)&color;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QRgb");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->createMaskFromColor(arg2));
  return cresult;
}


SWIGEXPORT QImage * QImage_scaled(QImage const * self, int w, int h, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  int arg3 ;
  Qt::AspectRatioMode arg4 ;
  Qt::TransformationMode arg5 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  arg4 = (Qt::AspectRatioMode)aspectMode; 
  arg5 = (Qt::TransformationMode)mode; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->scaled(arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QImage * QImage_scaled1(QImage const * self, int w, int h, Qt::AspectRatioMode aspectMode) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  int arg3 ;
  Qt::AspectRatioMode arg4 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  arg4 = (Qt::AspectRatioMode)aspectMode; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->scaled(arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QImage * QImage_scaled2(QImage const * self, int w, int h) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  int arg3 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->scaled(arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QImage_scaled3(QImage const * self, QSize * s, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  QImage *arg1 = (QImage *) 0 ;
  QSize *arg2 = 0 ;
  Qt::AspectRatioMode arg3 ;
  Qt::TransformationMode arg4 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QSize **)&s;
  arg3 = (Qt::AspectRatioMode)aspectMode; 
  arg4 = (Qt::TransformationMode)mode; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->scaled((QSize const &)*arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QImage * QImage_scaled4(QImage const * self, QSize * s, Qt::AspectRatioMode aspectMode) {
  QImage *arg1 = (QImage *) 0 ;
  QSize *arg2 = 0 ;
  Qt::AspectRatioMode arg3 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QSize **)&s;
  arg3 = (Qt::AspectRatioMode)aspectMode; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->scaled((QSize const &)*arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QImage_scaled5(QImage const * self, QSize * s) {
  QImage *arg1 = (QImage *) 0 ;
  QSize *arg2 = 0 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QSize **)&s;
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->scaled((QSize const &)*arg2));
  return cresult;
}


SWIGEXPORT QImage * QImage_scaledToWidth(QImage const * self, int w, Qt::TransformationMode mode) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  Qt::TransformationMode arg3 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)w; 
  arg3 = (Qt::TransformationMode)mode; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->scaledToWidth(arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QImage_scaledToWidth1(QImage const * self, int w) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)w; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->scaledToWidth(arg2));
  return cresult;
}


SWIGEXPORT QImage * QImage_scaledToHeight(QImage const * self, int h, Qt::TransformationMode mode) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  Qt::TransformationMode arg3 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)h; 
  arg3 = (Qt::TransformationMode)mode; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->scaledToHeight(arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QImage_scaledToHeight1(QImage const * self, int h) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)h; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->scaledToHeight(arg2));
  return cresult;
}


SWIGEXPORT QImage * QImage_transformed(QImage const * self, QMatrix * matrix, Qt::TransformationMode mode) {
  QImage *arg1 = (QImage *) 0 ;
  QMatrix *arg2 = 0 ;
  Qt::TransformationMode arg3 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QMatrix **)&matrix;
  arg3 = (Qt::TransformationMode)mode; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->transformed((QMatrix const &)*arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QImage_transformed1(QImage const * self, QMatrix * matrix) {
  QImage *arg1 = (QImage *) 0 ;
  QMatrix *arg2 = 0 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QMatrix **)&matrix;
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->transformed((QMatrix const &)*arg2));
  return cresult;
}


SWIGEXPORT QMatrix * Image_TrueMatrix(QMatrix * m3arg1, int w, int h) {
  QMatrix *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  QMatrix * cresult ;
  
  arg1 = *(QMatrix **)&m3arg1;
  arg2 = (int)w; 
  arg3 = (int)h; 
  *(QMatrix **)&cresult = new QMatrix((const QMatrix &)QImage::trueMatrix((QMatrix const &)*arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QImage_transformed2(QImage const * self, QTransform * matrix, Qt::TransformationMode mode) {
  QImage *arg1 = (QImage *) 0 ;
  QTransform *arg2 = 0 ;
  Qt::TransformationMode arg3 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QTransform **)&matrix;
  arg3 = (Qt::TransformationMode)mode; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->transformed((QTransform const &)*arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QImage_transformed3(QImage const * self, QTransform * matrix) {
  QImage *arg1 = (QImage *) 0 ;
  QTransform *arg2 = 0 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QTransform **)&matrix;
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->transformed((QTransform const &)*arg2));
  return cresult;
}


SWIGEXPORT QTransform * Image_TrueMatrix1(QTransform * m3arg1, int w, int h) {
  QTransform *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&m3arg1;
  arg2 = (int)w; 
  arg3 = (int)h; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)QImage::trueMatrix((QTransform const &)*arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QImage_mirrored(QImage const * self, bool horizontally, bool vertically) {
  QImage *arg1 = (QImage *) 0 ;
  bool arg2 ;
  bool arg3 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = horizontally ? true : false; 
  arg3 = vertically ? true : false; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->mirrored(arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QImage_mirrored1(QImage const * self, bool horizontally) {
  QImage *arg1 = (QImage *) 0 ;
  bool arg2 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = horizontally ? true : false; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->mirrored(arg2));
  return cresult;
}


SWIGEXPORT QImage * QImage_mirrored2(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->mirrored());
  return cresult;
}


SWIGEXPORT QImage * QImage_rgbSwapped(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  QImage * cresult ;
  
  arg1 = *(QImage **)&self; 
  *(QImage **)&cresult = new QImage((const QImage &)((QImage const *)arg1)->rgbSwapped());
  return cresult;
}


SWIGEXPORT void QImage_invertPixels(QImage * self, QImage::InvertMode m3arg2) {
  QImage *arg1 = (QImage *) 0 ;
  QImage::InvertMode arg2 ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (QImage::InvertMode)m3arg2; 
  (arg1)->invertPixels(arg2);
}


SWIGEXPORT void QImage_invertPixels1(QImage * self) {
  QImage *arg1 = (QImage *) 0 ;
  
  arg1 = *(QImage **)&self; 
  (arg1)->invertPixels();
}


SWIGEXPORT bool QImage_load(QImage * self, QIODevice * device, char * format) {
  QImage *arg1 = (QImage *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QIODevice **)&device; 
  {
    arg3 = format;
  }
  result = (bool)(arg1)->load(arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_load1(QImage * self, QString * fileName, char * format) {
  QImage *arg1 = (QImage *) 0 ;
  QString *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QString **)&fileName;
  {
    arg3 = format;
  }
  result = (bool)(arg1)->load((QString const &)*arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_load2(QImage * self, QString * fileName) {
  QImage *arg1 = (QImage *) 0 ;
  QString *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QString **)&fileName;
  result = (bool)(arg1)->load((QString const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_loadFromData(QImage * self, unsigned char const * buf, int len, char * format) {
  QImage *arg1 = (QImage *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(unsigned char **)&buf; 
  arg3 = (int)len; 
  {
    arg4 = format;
  }
  result = (bool)(arg1)->loadFromData((unsigned char const *)arg2,arg3,(char const *)arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_loadFromData1(QImage * self, unsigned char const * buf, int len) {
  QImage *arg1 = (QImage *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(unsigned char **)&buf; 
  arg3 = (int)len; 
  result = (bool)(arg1)->loadFromData((unsigned char const *)arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_loadFromData2(QImage * self, QByteArray * data, char * aformat) {
  QImage *arg1 = (QImage *) 0 ;
  QByteArray *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QByteArray **)&data;
  {
    arg3 = aformat;
  }
  result = (bool)(arg1)->loadFromData((QByteArray const &)*arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_loadFromData3(QImage * self, QByteArray * data) {
  QImage *arg1 = (QImage *) 0 ;
  QByteArray *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QByteArray **)&data;
  result = (bool)(arg1)->loadFromData((QByteArray const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_save(QImage const * self, QString * fileName, char * format, int quality) {
  QImage *arg1 = (QImage *) 0 ;
  QString *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QString **)&fileName;
  {
    arg3 = format;
  }
  arg4 = (int)quality; 
  result = (bool)((QImage const *)arg1)->save((QString const &)*arg2,(char const *)arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_save1(QImage const * self, QString * fileName, char * format) {
  QImage *arg1 = (QImage *) 0 ;
  QString *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QString **)&fileName;
  {
    arg3 = format;
  }
  result = (bool)((QImage const *)arg1)->save((QString const &)*arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_save2(QImage const * self, QString * fileName) {
  QImage *arg1 = (QImage *) 0 ;
  QString *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QString **)&fileName;
  result = (bool)((QImage const *)arg1)->save((QString const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_save3(QImage const * self, QIODevice * device, char * format, int quality) {
  QImage *arg1 = (QImage *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QIODevice **)&device; 
  {
    arg3 = format;
  }
  arg4 = (int)quality; 
  result = (bool)((QImage const *)arg1)->save(arg2,(char const *)arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_save4(QImage const * self, QIODevice * device, char * format) {
  QImage *arg1 = (QImage *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QIODevice **)&device; 
  {
    arg3 = format;
  }
  result = (bool)((QImage const *)arg1)->save(arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QImage_save5(QImage const * self, QIODevice * device) {
  QImage *arg1 = (QImage *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QIODevice **)&device; 
  result = (bool)((QImage const *)arg1)->save(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QImage * Image_FromData(unsigned char const * data, int size, char * format) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  QImage * cresult ;
  
  arg1 = *(unsigned char **)&data; 
  arg2 = (int)size; 
  {
    arg3 = format;
  }
  *(QImage **)&cresult = new QImage((const QImage &)QImage::fromData((unsigned char const *)arg1,arg2,(char const *)arg3));
  return cresult;
}


SWIGEXPORT QImage * Image_FromData1(unsigned char const * data, int size) {
  unsigned char *arg1 = (unsigned char *) 0 ;
  int arg2 ;
  QImage * cresult ;
  
  arg1 = *(unsigned char **)&data; 
  arg2 = (int)size; 
  *(QImage **)&cresult = new QImage((const QImage &)QImage::fromData((unsigned char const *)arg1,arg2));
  return cresult;
}


SWIGEXPORT QImage * Image_FromData2(QByteArray * data, char * format) {
  QByteArray *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  QImage * cresult ;
  
  arg1 = *(QByteArray **)&data;
  {
    arg2 = format;
  }
  *(QImage **)&cresult = new QImage((const QImage &)QImage::fromData((QByteArray const &)*arg1,(char const *)arg2));
  return cresult;
}


SWIGEXPORT QImage * Image_FromData3(QByteArray * data) {
  QByteArray *arg1 = 0 ;
  QImage * cresult ;
  
  arg1 = *(QByteArray **)&data;
  *(QImage **)&cresult = new QImage((const QImage &)QImage::fromData((QByteArray const &)*arg1));
  return cresult;
}


SWIGEXPORT int QImage_serialNumber(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (int)((QImage const *)arg1)->serialNumber();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned long QImage_cacheKey(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  unsigned long result;
  unsigned long cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (unsigned long)((QImage const *)arg1)->cacheKey();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPaintEngine * QImage_paintEngine(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  QPaintEngine *result = 0 ;
  QPaintEngine * cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (QPaintEngine *)((QImage const *)arg1)->paintEngine();
  *(QPaintEngine **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QImage_dotsPerMeterX(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (int)((QImage const *)arg1)->dotsPerMeterX();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QImage_dotsPerMeterY(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (int)((QImage const *)arg1)->dotsPerMeterY();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QImage_setDotsPerMeterX(QImage * self, int m3arg2) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)m3arg2; 
  (arg1)->setDotsPerMeterX(arg2);
}


SWIGEXPORT void QImage_setDotsPerMeterY(QImage * self, int m3arg2) {
  QImage *arg1 = (QImage *) 0 ;
  int arg2 ;
  
  arg1 = *(QImage **)&self; 
  arg2 = (int)m3arg2; 
  (arg1)->setDotsPerMeterY(arg2);
}


SWIGEXPORT QPoint * QImage_offset(QImage const * self) {
  QImage *arg1 = (QImage *) 0 ;
  QPoint * cresult ;
  
  arg1 = *(QImage **)&self; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QImage const *)arg1)->offset());
  return cresult;
}


SWIGEXPORT void QImage_setOffset(QImage * self, QPoint * m3arg2) {
  QImage *arg1 = (QImage *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QImage **)&self; 
  arg2 = *(QPoint **)&m3arg2;
  (arg1)->setOffset((QPoint const &)*arg2);
}


SWIGEXPORT QImage::DataPtr & QImage_data_ptr(QImage * self) {
  QImage *arg1 = (QImage *) 0 ;
  QImage::DataPtr *result = 0 ;
  QImage::DataPtr * cresult ;
  
  arg1 = *(QImage **)&self; 
  result = (QImage::DataPtr *) &(arg1)->data_ptr();
  *(QImage::DataPtr **)&cresult = result; 
  return *cresult;
}


SWIGEXPORT long Modula3_QImageToQPaintDevice(long objectRef) {
    long baseptr = 0;
    *(QPaintDevice **)&baseptr = *(QImage **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

