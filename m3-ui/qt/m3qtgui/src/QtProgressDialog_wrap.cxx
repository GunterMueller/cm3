/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qprogressdialog.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QProgressDialog * New_QProgressDialog0(QWidget * parent, Qt::WindowFlags flags) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowFlags arg2 ;
  QProgressDialog *result = 0 ;
  QProgressDialog * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = (Qt::WindowFlags)flags; 
  result = (QProgressDialog *)new QProgressDialog(arg1,arg2);
  *(QProgressDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QProgressDialog * New_QProgressDialog1(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QProgressDialog *result = 0 ;
  QProgressDialog * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QProgressDialog *)new QProgressDialog(arg1);
  *(QProgressDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QProgressDialog * New_QProgressDialog2() {
  QProgressDialog *result = 0 ;
  QProgressDialog * cresult ;
  
  result = (QProgressDialog *)new QProgressDialog();
  *(QProgressDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QProgressDialog * New_QProgressDialog3(QString * labelText, QString * cancelButtonText, int minimum, int maximum, QWidget * parent, Qt::WindowFlags flags) {
  QString *arg1 = 0 ;
  QString *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  QWidget *arg5 = (QWidget *) 0 ;
  Qt::WindowFlags arg6 ;
  QProgressDialog *result = 0 ;
  QProgressDialog * cresult ;
  
  arg1 = *(QString **)&labelText;
  arg2 = *(QString **)&cancelButtonText;
  arg3 = (int)minimum; 
  arg4 = (int)maximum; 
  arg5 = *(QWidget **)&parent; 
  arg6 = (Qt::WindowFlags)flags; 
  result = (QProgressDialog *)new QProgressDialog((QString const &)*arg1,(QString const &)*arg2,arg3,arg4,arg5,arg6);
  *(QProgressDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QProgressDialog * New_QProgressDialog4(QString * labelText, QString * cancelButtonText, int minimum, int maximum, QWidget * parent) {
  QString *arg1 = 0 ;
  QString *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  QWidget *arg5 = (QWidget *) 0 ;
  QProgressDialog *result = 0 ;
  QProgressDialog * cresult ;
  
  arg1 = *(QString **)&labelText;
  arg2 = *(QString **)&cancelButtonText;
  arg3 = (int)minimum; 
  arg4 = (int)maximum; 
  arg5 = *(QWidget **)&parent; 
  result = (QProgressDialog *)new QProgressDialog((QString const &)*arg1,(QString const &)*arg2,arg3,arg4,arg5);
  *(QProgressDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QProgressDialog * New_QProgressDialog5(QString * labelText, QString * cancelButtonText, int minimum, int maximum) {
  QString *arg1 = 0 ;
  QString *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  QProgressDialog *result = 0 ;
  QProgressDialog * cresult ;
  
  arg1 = *(QString **)&labelText;
  arg2 = *(QString **)&cancelButtonText;
  arg3 = (int)minimum; 
  arg4 = (int)maximum; 
  result = (QProgressDialog *)new QProgressDialog((QString const &)*arg1,(QString const &)*arg2,arg3,arg4);
  *(QProgressDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QProgressDialog(QProgressDialog * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  
  arg1 = *(QProgressDialog **)&self; 
  delete arg1;
}


SWIGEXPORT void QProgressDialog_setLabel(QProgressDialog * self, QLabel * label) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  QLabel *arg2 = (QLabel *) 0 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = *(QLabel **)&label; 
  (arg1)->setLabel(arg2);
}


SWIGEXPORT void QProgressDialog_setCancelButton(QProgressDialog * self, QPushButton * button) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  QPushButton *arg2 = (QPushButton *) 0 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = *(QPushButton **)&button; 
  (arg1)->setCancelButton(arg2);
}


SWIGEXPORT void QProgressDialog_setBar(QProgressDialog * self, QProgressBar * bar) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  QProgressBar *arg2 = (QProgressBar *) 0 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = *(QProgressBar **)&bar; 
  (arg1)->setBar(arg2);
}


SWIGEXPORT bool QProgressDialog_wasCanceled(QProgressDialog const * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QProgressDialog **)&self; 
  result = (bool)((QProgressDialog const *)arg1)->wasCanceled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QProgressDialog_minimum(QProgressDialog const * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QProgressDialog **)&self; 
  result = (int)((QProgressDialog const *)arg1)->minimum();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QProgressDialog_maximum(QProgressDialog const * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QProgressDialog **)&self; 
  result = (int)((QProgressDialog const *)arg1)->maximum();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QProgressDialog_value(QProgressDialog const * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QProgressDialog **)&self; 
  result = (int)((QProgressDialog const *)arg1)->value();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QProgressDialog_sizeHint(QProgressDialog const * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QProgressDialog **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QProgressDialog const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QString * QProgressDialog_labelText(QProgressDialog const * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  QString * cresult ;
  
  arg1 = *(QProgressDialog **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QProgressDialog const *)arg1)->labelText());
  return cresult;
}


SWIGEXPORT int QProgressDialog_minimumDuration(QProgressDialog const * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QProgressDialog **)&self; 
  result = (int)((QProgressDialog const *)arg1)->minimumDuration();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QProgressDialog_setAutoReset(QProgressDialog * self, bool reset) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  bool arg2 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = reset ? true : false; 
  (arg1)->setAutoReset(arg2);
}


SWIGEXPORT bool QProgressDialog_autoReset(QProgressDialog const * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QProgressDialog **)&self; 
  result = (bool)((QProgressDialog const *)arg1)->autoReset();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QProgressDialog_setAutoClose(QProgressDialog * self, bool close) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  bool arg2 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = close ? true : false; 
  (arg1)->setAutoClose(arg2);
}


SWIGEXPORT bool QProgressDialog_autoClose(QProgressDialog const * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QProgressDialog **)&self; 
  result = (bool)((QProgressDialog const *)arg1)->autoClose();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QProgressDialog_open0_0(QProgressDialog * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  
  arg1 = *(QProgressDialog **)&self; 
  (arg1)->open();
}


SWIGEXPORT void QProgressDialog_open1(QProgressDialog * self, QObject * receiver, char * member) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  QObject *arg2 = (QObject *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = *(QObject **)&receiver; 
  {
    arg3 = member;
  }
  (arg1)->open(arg2,(char const *)arg3);
}


SWIGEXPORT void QProgressDialog_cancel(QProgressDialog * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  
  arg1 = *(QProgressDialog **)&self; 
  (arg1)->cancel();
}


SWIGEXPORT void QProgressDialog_reset(QProgressDialog * self) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  
  arg1 = *(QProgressDialog **)&self; 
  (arg1)->reset();
}


SWIGEXPORT void QProgressDialog_setMaximum(QProgressDialog * self, int maximum) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  int arg2 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = (int)maximum; 
  (arg1)->setMaximum(arg2);
}


SWIGEXPORT void QProgressDialog_setMinimum(QProgressDialog * self, int minimum) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  int arg2 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = (int)minimum; 
  (arg1)->setMinimum(arg2);
}


SWIGEXPORT void QProgressDialog_setRange(QProgressDialog * self, int minimum, int maximum) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = (int)minimum; 
  arg3 = (int)maximum; 
  (arg1)->setRange(arg2,arg3);
}


SWIGEXPORT void QProgressDialog_setValue(QProgressDialog * self, int progress) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  int arg2 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = (int)progress; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT void QProgressDialog_setLabelText(QProgressDialog * self, QString * text) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->setLabelText((QString const &)*arg2);
}


SWIGEXPORT void QProgressDialog_setCancelButtonText(QProgressDialog * self, QString * text) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->setCancelButtonText((QString const &)*arg2);
}


SWIGEXPORT void QProgressDialog_setMinimumDuration(QProgressDialog * self, int ms) {
  QProgressDialog *arg1 = (QProgressDialog *) 0 ;
  int arg2 ;
  
  arg1 = *(QProgressDialog **)&self; 
  arg2 = (int)ms; 
  (arg1)->setMinimumDuration(arg2);
}


SWIGEXPORT long Modula3_QProgressDialogToQDialog(long objectRef) {
    long baseptr = 0;
    *(QDialog **)&baseptr = *(QProgressDialog **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

