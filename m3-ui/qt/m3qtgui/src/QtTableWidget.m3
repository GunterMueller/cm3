(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtTableWidget;


FROM QtPoint IMPORT QPoint;
FROM QtNamespace IMPORT ItemFlags, CheckState, SortOrder;
FROM QtColor IMPORT QColor;
FROM QtFont IMPORT QFont;
FROM QtAbstractItemView IMPORT ScrollHint;
FROM QtSize IMPORT QSize;
FROM QtRect IMPORT QRect;
FROM QtIcon IMPORT QIcon;
FROM QtString IMPORT QString;
FROM QtWidget IMPORT QWidget;
FROM QtStringList IMPORT QStringList;
FROM QtItemSelectionModel IMPORT SelectionFlags;
FROM QtBrush IMPORT QBrush;
IMPORT QtTableWidgetRaw;


IMPORT WeakRef;
FROM QtByteArray IMPORT QByteArray;

PROCEDURE New_QTableWidgetSelectionRange0
  (self: QTableWidgetSelectionRange; ): QTableWidgetSelectionRange =
  VAR result: ADDRESS;
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidgetSelectionRange0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetSelectionRange);

    RETURN self;
  END New_QTableWidgetSelectionRange0;

PROCEDURE New_QTableWidgetSelectionRange1
  (self: QTableWidgetSelectionRange; top, left, bottom, right: INTEGER; ):
  QTableWidgetSelectionRange =
  VAR result: ADDRESS;
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidgetSelectionRange1(
                top, left, bottom, right);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetSelectionRange);

    RETURN self;
  END New_QTableWidgetSelectionRange1;

PROCEDURE New_QTableWidgetSelectionRange2
  (self: QTableWidgetSelectionRange; other: QTableWidgetSelectionRange; ):
  QTableWidgetSelectionRange =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidgetSelectionRange2(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetSelectionRange);

    RETURN self;
  END New_QTableWidgetSelectionRange2;

PROCEDURE Delete_QTableWidgetSelectionRange
  (self: QTableWidgetSelectionRange; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.Delete_QTableWidgetSelectionRange(selfAdr);
  END Delete_QTableWidgetSelectionRange;

PROCEDURE QTableWidgetSelectionRange_topRow
  (self: QTableWidgetSelectionRange; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidgetSelectionRange_topRow(selfAdr);
  END QTableWidgetSelectionRange_topRow;

PROCEDURE QTableWidgetSelectionRange_bottomRow
  (self: QTableWidgetSelectionRange; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidgetSelectionRange_bottomRow(selfAdr);
  END QTableWidgetSelectionRange_bottomRow;

PROCEDURE QTableWidgetSelectionRange_leftColumn
  (self: QTableWidgetSelectionRange; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidgetSelectionRange_leftColumn(selfAdr);
  END QTableWidgetSelectionRange_leftColumn;

PROCEDURE QTableWidgetSelectionRange_rightColumn
  (self: QTableWidgetSelectionRange; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN
      QtTableWidgetRaw.QTableWidgetSelectionRange_rightColumn(selfAdr);
  END QTableWidgetSelectionRange_rightColumn;

PROCEDURE QTableWidgetSelectionRange_rowCount
  (self: QTableWidgetSelectionRange; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidgetSelectionRange_rowCount(selfAdr);
  END QTableWidgetSelectionRange_rowCount;

PROCEDURE QTableWidgetSelectionRange_columnCount
  (self: QTableWidgetSelectionRange; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN
      QtTableWidgetRaw.QTableWidgetSelectionRange_columnCount(selfAdr);
  END QTableWidgetSelectionRange_columnCount;

PROCEDURE Cleanup_QTableWidgetSelectionRange
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTableWidgetSelectionRange := ref;
  BEGIN
    Delete_QTableWidgetSelectionRange(obj);
  END Cleanup_QTableWidgetSelectionRange;

PROCEDURE Destroy_QTableWidgetSelectionRange
  (self: QTableWidgetSelectionRange) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetSelectionRange);
  END Destroy_QTableWidgetSelectionRange;

REVEAL
  QTableWidgetSelectionRange =
    QTableWidgetSelectionRangePublic BRANDED OBJECT
    OVERRIDES
      init_0      := New_QTableWidgetSelectionRange0;
      init_1      := New_QTableWidgetSelectionRange1;
      init_2      := New_QTableWidgetSelectionRange2;
      topRow      := QTableWidgetSelectionRange_topRow;
      bottomRow   := QTableWidgetSelectionRange_bottomRow;
      leftColumn  := QTableWidgetSelectionRange_leftColumn;
      rightColumn := QTableWidgetSelectionRange_rightColumn;
      rowCount    := QTableWidgetSelectionRange_rowCount;
      columnCount := QTableWidgetSelectionRange_columnCount;
      destroyCxx  := Destroy_QTableWidgetSelectionRange;
    END;

PROCEDURE New_QTableWidgetItem0 (self: QTableWidgetItem; type: INTEGER; ):
  QTableWidgetItem =
  VAR result: ADDRESS;
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidgetItem0(type);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetItem);

    RETURN self;
  END New_QTableWidgetItem0;

PROCEDURE New_QTableWidgetItem1 (self: QTableWidgetItem; ):
  QTableWidgetItem =
  VAR result: ADDRESS;
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidgetItem1();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetItem);

    RETURN self;
  END New_QTableWidgetItem1;

PROCEDURE New_QTableWidgetItem2
  (self: QTableWidgetItem; text: TEXT; type: INTEGER; ): QTableWidgetItem =
  VAR
    result   : ADDRESS;
    qstr_text          := NEW(QString).initQString(text);
    arg1tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidgetItem2(arg1tmp, type);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetItem);

    RETURN self;
  END New_QTableWidgetItem2;

PROCEDURE New_QTableWidgetItem3 (self: QTableWidgetItem; text: TEXT; ):
  QTableWidgetItem =
  VAR
    result   : ADDRESS;
    qstr_text          := NEW(QString).initQString(text);
    arg1tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidgetItem3(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetItem);

    RETURN self;
  END New_QTableWidgetItem3;

PROCEDURE New_QTableWidgetItem4
  (self: QTableWidgetItem; icon: QIcon; text: TEXT; type: INTEGER; ):
  QTableWidgetItem =
  VAR
    result   : ADDRESS;
    arg1tmp            := LOOPHOLE(icon.cxxObj, ADDRESS);
    qstr_text          := NEW(QString).initQString(text);
    arg2tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    result :=
      QtTableWidgetRaw.New_QTableWidgetItem4(arg1tmp, arg2tmp, type);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetItem);

    RETURN self;
  END New_QTableWidgetItem4;

PROCEDURE New_QTableWidgetItem5
  (self: QTableWidgetItem; icon: QIcon; text: TEXT; ): QTableWidgetItem =
  VAR
    result   : ADDRESS;
    arg1tmp            := LOOPHOLE(icon.cxxObj, ADDRESS);
    qstr_text          := NEW(QString).initQString(text);
    arg2tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidgetItem5(arg1tmp, arg2tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetItem);

    RETURN self;
  END New_QTableWidgetItem5;

PROCEDURE New_QTableWidgetItem6
  (self: QTableWidgetItem; other: QTableWidgetItem; ): QTableWidgetItem =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidgetItem6(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetItem);

    RETURN self;
  END New_QTableWidgetItem6;

PROCEDURE Delete_QTableWidgetItem (self: QTableWidgetItem; ) =
  VAR arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.Delete_QTableWidgetItem(arg1tmp);
  END Delete_QTableWidgetItem;

PROCEDURE QTableWidgetItem_clone (self: QTableWidgetItem; ):
  QTableWidgetItem =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    result := QtTableWidgetRaw.QTableWidgetItem_clone(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetItem);

    RETURN self;
  END QTableWidgetItem_clone;

PROCEDURE QTableWidgetItem_tableWidget (self: QTableWidgetItem; ):
  QTableWidget =
  VAR
    ret    : ADDRESS;
    result : QTableWidget;
    arg1tmp               := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_tableWidget(arg1tmp);

    result := NEW(QTableWidget);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidgetItem_tableWidget;

PROCEDURE QTableWidgetItem_row (self: QTableWidgetItem; ): INTEGER =
  VAR arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidgetItem_row(arg1tmp);
  END QTableWidgetItem_row;

PROCEDURE QTableWidgetItem_column (self: QTableWidgetItem; ): INTEGER =
  VAR arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidgetItem_column(arg1tmp);
  END QTableWidgetItem_column;

PROCEDURE QTableWidgetItem_setSelected
  (self: QTableWidgetItem; select: BOOLEAN; ) =
  VAR arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setSelected(arg1tmp, select);
  END QTableWidgetItem_setSelected;

PROCEDURE QTableWidgetItem_isSelected (self: QTableWidgetItem; ): BOOLEAN =
  VAR arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidgetItem_isSelected(arg1tmp);
  END QTableWidgetItem_isSelected;

PROCEDURE QTableWidgetItem_flags (self: QTableWidgetItem; ): ItemFlags =
  VAR
    ret    : INTEGER;
    result : ItemFlags;
    arg1tmp            := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_flags(arg1tmp);
    result := VAL(ret, ItemFlags);
    RETURN result;
  END QTableWidgetItem_flags;

PROCEDURE QTableWidgetItem_setFlags
  (self: QTableWidgetItem; flags: ItemFlags; ) =
  VAR arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setFlags(arg1tmp, ORD(flags));
  END QTableWidgetItem_setFlags;

PROCEDURE QTableWidgetItem_text (self: QTableWidgetItem; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    arg1tmp             := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_text(arg1tmp);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTableWidgetItem_text;

PROCEDURE QTableWidgetItem_setText (self: QTableWidgetItem; text: TEXT; ) =
  VAR
    arg1tmp   := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_text := NEW(QString).initQString(text);
    arg2tmp   := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setText(arg1tmp, arg2tmp);
  END QTableWidgetItem_setText;

PROCEDURE QTableWidgetItem_icon (self: QTableWidgetItem; ): QIcon =
  VAR
    ret    : ADDRESS;
    result : QIcon;
    arg1tmp          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_icon(arg1tmp);

    result := NEW(QIcon);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidgetItem_icon;

PROCEDURE QTableWidgetItem_setIcon
  (self: QTableWidgetItem; icon: QIcon; ) =
  VAR
    arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp := LOOPHOLE(icon.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setIcon(arg1tmp, arg2tmp);
  END QTableWidgetItem_setIcon;

PROCEDURE QTableWidgetItem_statusTip (self: QTableWidgetItem; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    arg1tmp             := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_statusTip(arg1tmp);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTableWidgetItem_statusTip;

PROCEDURE QTableWidgetItem_setStatusTip
  (self: QTableWidgetItem; statusTip: TEXT; ) =
  VAR
    arg1tmp        := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_statusTip := NEW(QString).initQString(statusTip);
    arg2tmp        := LOOPHOLE(qstr_statusTip.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setStatusTip(arg1tmp, arg2tmp);
  END QTableWidgetItem_setStatusTip;

PROCEDURE QTableWidgetItem_toolTip (self: QTableWidgetItem; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    arg1tmp             := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_toolTip(arg1tmp);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTableWidgetItem_toolTip;

PROCEDURE QTableWidgetItem_setToolTip
  (self: QTableWidgetItem; toolTip: TEXT; ) =
  VAR
    arg1tmp      := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_toolTip := NEW(QString).initQString(toolTip);
    arg2tmp      := LOOPHOLE(qstr_toolTip.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setToolTip(arg1tmp, arg2tmp);
  END QTableWidgetItem_setToolTip;

PROCEDURE QTableWidgetItem_whatsThis (self: QTableWidgetItem; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    arg1tmp             := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_whatsThis(arg1tmp);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTableWidgetItem_whatsThis;

PROCEDURE QTableWidgetItem_setWhatsThis
  (self: QTableWidgetItem; whatsThis: TEXT; ) =
  VAR
    arg1tmp        := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_whatsThis := NEW(QString).initQString(whatsThis);
    arg2tmp        := LOOPHOLE(qstr_whatsThis.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setWhatsThis(arg1tmp, arg2tmp);
  END QTableWidgetItem_setWhatsThis;

PROCEDURE QTableWidgetItem_font (self: QTableWidgetItem; ): QFont =
  VAR
    ret    : ADDRESS;
    result : QFont;
    arg1tmp          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_font(arg1tmp);

    result := NEW(QFont);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidgetItem_font;

PROCEDURE QTableWidgetItem_setFont
  (self: QTableWidgetItem; font: QFont; ) =
  VAR
    arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp := LOOPHOLE(font.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setFont(arg1tmp, arg2tmp);
  END QTableWidgetItem_setFont;

PROCEDURE QTableWidgetItem_textAlignment (self: QTableWidgetItem; ):
  INTEGER =
  VAR arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidgetItem_textAlignment(arg1tmp);
  END QTableWidgetItem_textAlignment;

PROCEDURE QTableWidgetItem_setTextAlignment
  (self: QTableWidgetItem; alignment: INTEGER; ) =
  VAR arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setTextAlignment(arg1tmp, alignment);
  END QTableWidgetItem_setTextAlignment;

PROCEDURE QTableWidgetItem_backgroundColor (self: QTableWidgetItem; ):
  QColor =
  VAR
    ret    : ADDRESS;
    result : QColor;
    arg1tmp          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_backgroundColor(arg1tmp);

    result := NEW(QColor);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidgetItem_backgroundColor;

PROCEDURE QTableWidgetItem_setBackgroundColor
  (self: QTableWidgetItem; color: QColor; ) =
  VAR
    arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp := LOOPHOLE(color.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setBackgroundColor(arg1tmp, arg2tmp);
  END QTableWidgetItem_setBackgroundColor;

PROCEDURE QTableWidgetItem_background (self: QTableWidgetItem; ): QBrush =
  VAR
    ret    : ADDRESS;
    result : QBrush;
    arg1tmp          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_background(arg1tmp);

    result := NEW(QBrush);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidgetItem_background;

PROCEDURE QTableWidgetItem_setBackground
  (self: QTableWidgetItem; brush: QBrush; ) =
  VAR
    arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp := LOOPHOLE(brush.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setBackground(arg1tmp, arg2tmp);
  END QTableWidgetItem_setBackground;

PROCEDURE QTableWidgetItem_textColor (self: QTableWidgetItem; ): QColor =
  VAR
    ret    : ADDRESS;
    result : QColor;
    arg1tmp          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_textColor(arg1tmp);

    result := NEW(QColor);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidgetItem_textColor;

PROCEDURE QTableWidgetItem_setTextColor
  (self: QTableWidgetItem; color: QColor; ) =
  VAR
    arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp := LOOPHOLE(color.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setTextColor(arg1tmp, arg2tmp);
  END QTableWidgetItem_setTextColor;

PROCEDURE QTableWidgetItem_foreground (self: QTableWidgetItem; ): QBrush =
  VAR
    ret    : ADDRESS;
    result : QBrush;
    arg1tmp          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_foreground(arg1tmp);

    result := NEW(QBrush);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidgetItem_foreground;

PROCEDURE QTableWidgetItem_setForeground
  (self: QTableWidgetItem; brush: QBrush; ) =
  VAR
    arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp := LOOPHOLE(brush.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setForeground(arg1tmp, arg2tmp);
  END QTableWidgetItem_setForeground;

PROCEDURE QTableWidgetItem_checkState (self: QTableWidgetItem; ):
  CheckState =
  VAR
    ret    : INTEGER;
    result : CheckState;
    arg1tmp             := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_checkState(arg1tmp);
    result := VAL(ret, CheckState);
    RETURN result;
  END QTableWidgetItem_checkState;

PROCEDURE QTableWidgetItem_setCheckState
  (self: QTableWidgetItem; state: CheckState; ) =
  VAR arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setCheckState(arg1tmp, ORD(state));
  END QTableWidgetItem_setCheckState;

PROCEDURE QTableWidgetItem_sizeHint (self: QTableWidgetItem; ): QSize =
  VAR
    ret    : ADDRESS;
    result : QSize;
    arg1tmp          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidgetItem_sizeHint(arg1tmp);

    result := NEW(QSize);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidgetItem_sizeHint;

PROCEDURE QTableWidgetItem_setSizeHint
  (self: QTableWidgetItem; size: QSize; ) =
  VAR
    arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp := LOOPHOLE(size.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidgetItem_setSizeHint(arg1tmp, arg2tmp);
  END QTableWidgetItem_setSizeHint;

PROCEDURE QTableWidgetItem_type (self: QTableWidgetItem; ): INTEGER =
  VAR arg1tmp := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidgetItem_type(arg1tmp);
  END QTableWidgetItem_type;

PROCEDURE Cleanup_QTableWidgetItem
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTableWidgetItem := ref;
  BEGIN
    Delete_QTableWidgetItem(obj);
  END Cleanup_QTableWidgetItem;

PROCEDURE Destroy_QTableWidgetItem (self: QTableWidgetItem) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidgetItem);
  END Destroy_QTableWidgetItem;

REVEAL
  QTableWidgetItem =
    QTableWidgetItemPublic BRANDED OBJECT
    OVERRIDES
      init_0             := New_QTableWidgetItem0;
      init_1             := New_QTableWidgetItem1;
      init_2             := New_QTableWidgetItem2;
      init_3             := New_QTableWidgetItem3;
      init_4             := New_QTableWidgetItem4;
      init_5             := New_QTableWidgetItem5;
      init_6             := New_QTableWidgetItem6;
      clone              := QTableWidgetItem_clone;
      tableWidget        := QTableWidgetItem_tableWidget;
      row                := QTableWidgetItem_row;
      column             := QTableWidgetItem_column;
      setSelected        := QTableWidgetItem_setSelected;
      isSelected         := QTableWidgetItem_isSelected;
      flags              := QTableWidgetItem_flags;
      setFlags           := QTableWidgetItem_setFlags;
      text               := QTableWidgetItem_text;
      setText            := QTableWidgetItem_setText;
      icon               := QTableWidgetItem_icon;
      setIcon            := QTableWidgetItem_setIcon;
      statusTip          := QTableWidgetItem_statusTip;
      setStatusTip       := QTableWidgetItem_setStatusTip;
      toolTip            := QTableWidgetItem_toolTip;
      setToolTip         := QTableWidgetItem_setToolTip;
      whatsThis          := QTableWidgetItem_whatsThis;
      setWhatsThis       := QTableWidgetItem_setWhatsThis;
      font               := QTableWidgetItem_font;
      setFont            := QTableWidgetItem_setFont;
      textAlignment      := QTableWidgetItem_textAlignment;
      setTextAlignment   := QTableWidgetItem_setTextAlignment;
      backgroundColor    := QTableWidgetItem_backgroundColor;
      setBackgroundColor := QTableWidgetItem_setBackgroundColor;
      background         := QTableWidgetItem_background;
      setBackground      := QTableWidgetItem_setBackground;
      textColor          := QTableWidgetItem_textColor;
      setTextColor       := QTableWidgetItem_setTextColor;
      foreground         := QTableWidgetItem_foreground;
      setForeground      := QTableWidgetItem_setForeground;
      checkState         := QTableWidgetItem_checkState;
      setCheckState      := QTableWidgetItem_setCheckState;
      sizeHint           := QTableWidgetItem_sizeHint;
      setSizeHint        := QTableWidgetItem_setSizeHint;
      type               := QTableWidgetItem_type;
      destroyCxx         := Destroy_QTableWidgetItem;
    END;

PROCEDURE New_QTableWidget0 (self: QTableWidget; parent: QWidget; ):
  QTableWidget =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(parent.cxxObj, ADDRESS);
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidget0(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidget);

    RETURN self;
  END New_QTableWidget0;

PROCEDURE New_QTableWidget1 (self: QTableWidget; ): QTableWidget =
  VAR result: ADDRESS;
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidget1();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidget);

    RETURN self;
  END New_QTableWidget1;

PROCEDURE New_QTableWidget2
  (self: QTableWidget; rows, columns: INTEGER; parent: QWidget; ):
  QTableWidget =
  VAR
    result : ADDRESS;
    arg3tmp          := LOOPHOLE(parent.cxxObj, ADDRESS);
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidget2(rows, columns, arg3tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidget);

    RETURN self;
  END New_QTableWidget2;

PROCEDURE New_QTableWidget3 (self: QTableWidget; rows, columns: INTEGER; ):
  QTableWidget =
  VAR result: ADDRESS;
  BEGIN
    result := QtTableWidgetRaw.New_QTableWidget3(rows, columns);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidget);

    RETURN self;
  END New_QTableWidget3;

PROCEDURE Delete_QTableWidget (self: QTableWidget; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.Delete_QTableWidget(selfAdr);
  END Delete_QTableWidget;

PROCEDURE QTableWidget_setRowCount (self: QTableWidget; rows: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setRowCount(selfAdr, rows);
  END QTableWidget_setRowCount;

PROCEDURE QTableWidget_rowCount (self: QTableWidget; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidget_rowCount(selfAdr);
  END QTableWidget_rowCount;

PROCEDURE QTableWidget_setColumnCount
  (self: QTableWidget; columns: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setColumnCount(selfAdr, columns);
  END QTableWidget_setColumnCount;

PROCEDURE QTableWidget_columnCount (self: QTableWidget; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidget_columnCount(selfAdr);
  END QTableWidget_columnCount;

PROCEDURE QTableWidget_row (self: QTableWidget; item: QTableWidgetItem; ):
  INTEGER =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidget_row(selfAdr, arg2tmp);
  END QTableWidget_row;

PROCEDURE QTableWidget_column
  (self: QTableWidget; item: QTableWidgetItem; ): INTEGER =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidget_column(selfAdr, arg2tmp);
  END QTableWidget_column;

PROCEDURE QTableWidget_item (self: QTableWidget; row, column: INTEGER; ):
  QTableWidgetItem =
  VAR
    ret    : ADDRESS;
    result : QTableWidgetItem;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidget_item(selfAdr, row, column);

    result := NEW(QTableWidgetItem);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_item;

PROCEDURE QTableWidget_setItem
  (self: QTableWidget; row, column: INTEGER; item: QTableWidgetItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setItem(selfAdr, row, column, arg4tmp);
  END QTableWidget_setItem;

PROCEDURE QTableWidget_takeItem
  (self: QTableWidget; row, column: INTEGER; ): QTableWidgetItem =
  VAR
    ret    : ADDRESS;
    result : QTableWidgetItem;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidget_takeItem(selfAdr, row, column);

    result := NEW(QTableWidgetItem);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_takeItem;

PROCEDURE QTableWidget_verticalHeaderItem
  (self: QTableWidget; row: INTEGER; ): QTableWidgetItem =
  VAR
    ret    : ADDRESS;
    result : QTableWidgetItem;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidget_verticalHeaderItem(selfAdr, row);

    result := NEW(QTableWidgetItem);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_verticalHeaderItem;

PROCEDURE QTableWidget_setVerticalHeaderItem
  (self: QTableWidget; row: INTEGER; item: QTableWidgetItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setVerticalHeaderItem(
      selfAdr, row, arg3tmp);
  END QTableWidget_setVerticalHeaderItem;

PROCEDURE QTableWidget_takeVerticalHeaderItem
  (self: QTableWidget; row: INTEGER; ): QTableWidgetItem =
  VAR
    ret    : ADDRESS;
    result : QTableWidgetItem;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret :=
      QtTableWidgetRaw.QTableWidget_takeVerticalHeaderItem(selfAdr, row);

    result := NEW(QTableWidgetItem);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_takeVerticalHeaderItem;

PROCEDURE QTableWidget_horizontalHeaderItem
  (self: QTableWidget; column: INTEGER; ): QTableWidgetItem =
  VAR
    ret    : ADDRESS;
    result : QTableWidgetItem;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret :=
      QtTableWidgetRaw.QTableWidget_horizontalHeaderItem(selfAdr, column);

    result := NEW(QTableWidgetItem);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_horizontalHeaderItem;

PROCEDURE QTableWidget_setHorizontalHeaderItem
  (self: QTableWidget; column: INTEGER; item: QTableWidgetItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setHorizontalHeaderItem(
      selfAdr, column, arg3tmp);
  END QTableWidget_setHorizontalHeaderItem;

PROCEDURE QTableWidget_takeHorizontalHeaderItem
  (self: QTableWidget; column: INTEGER; ): QTableWidgetItem =
  VAR
    ret    : ADDRESS;
    result : QTableWidgetItem;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidget_takeHorizontalHeaderItem(
             selfAdr, column);

    result := NEW(QTableWidgetItem);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_takeHorizontalHeaderItem;

PROCEDURE QTableWidget_setVerticalHeaderLabels
  (self: QTableWidget; labels: QStringList; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(labels.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setVerticalHeaderLabels(selfAdr, arg2tmp);
  END QTableWidget_setVerticalHeaderLabels;

PROCEDURE QTableWidget_setHorizontalHeaderLabels
  (self: QTableWidget; labels: QStringList; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(labels.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setHorizontalHeaderLabels(
      selfAdr, arg2tmp);
  END QTableWidget_setHorizontalHeaderLabels;

PROCEDURE QTableWidget_currentRow (self: QTableWidget; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidget_currentRow(selfAdr);
  END QTableWidget_currentRow;

PROCEDURE QTableWidget_currentColumn (self: QTableWidget; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidget_currentColumn(selfAdr);
  END QTableWidget_currentColumn;

PROCEDURE QTableWidget_currentItem (self: QTableWidget; ):
  QTableWidgetItem =
  VAR
    ret    : ADDRESS;
    result : QTableWidgetItem;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidget_currentItem(selfAdr);

    result := NEW(QTableWidgetItem);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_currentItem;

PROCEDURE QTableWidget_setCurrentItem
  (self: QTableWidget; item: QTableWidgetItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setCurrentItem(selfAdr, arg2tmp);
  END QTableWidget_setCurrentItem;

PROCEDURE QTableWidget_setCurrentItem1
  (self: QTableWidget; item: QTableWidgetItem; command: SelectionFlags; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setCurrentItem1(
      selfAdr, arg2tmp, ORD(command));
  END QTableWidget_setCurrentItem1;

PROCEDURE QTableWidget_setCurrentCell
  (self: QTableWidget; row, column: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setCurrentCell(selfAdr, row, column);
  END QTableWidget_setCurrentCell;

PROCEDURE QTableWidget_setCurrentCell1
  (self: QTableWidget; row, column: INTEGER; command: SelectionFlags; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setCurrentCell1(
      selfAdr, row, column, ORD(command));
  END QTableWidget_setCurrentCell1;

PROCEDURE QTableWidget_sortItems
  (self: QTableWidget; column: INTEGER; order: SortOrder; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_sortItems(selfAdr, column, ORD(order));
  END QTableWidget_sortItems;

PROCEDURE QTableWidget_sortItems1 (self: QTableWidget; column: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_sortItems1(selfAdr, column);
  END QTableWidget_sortItems1;

PROCEDURE QTableWidget_setSortingEnabled
  (self: QTableWidget; enable: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setSortingEnabled(selfAdr, enable);
  END QTableWidget_setSortingEnabled;

PROCEDURE QTableWidget_isSortingEnabled (self: QTableWidget; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidget_isSortingEnabled(selfAdr);
  END QTableWidget_isSortingEnabled;

PROCEDURE QTableWidget_editItem
  (self: QTableWidget; item: QTableWidgetItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_editItem(selfAdr, arg2tmp);
  END QTableWidget_editItem;

PROCEDURE QTableWidget_openPersistentEditor
  (self: QTableWidget; item: QTableWidgetItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_openPersistentEditor(selfAdr, arg2tmp);
  END QTableWidget_openPersistentEditor;

PROCEDURE QTableWidget_closePersistentEditor
  (self: QTableWidget; item: QTableWidgetItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_closePersistentEditor(selfAdr, arg2tmp);
  END QTableWidget_closePersistentEditor;

PROCEDURE QTableWidget_cellWidget
  (self: QTableWidget; row, column: INTEGER; ): QWidget =
  VAR
    ret    : ADDRESS;
    result : QWidget;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidget_cellWidget(selfAdr, row, column);

    result := NEW(QWidget);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_cellWidget;

PROCEDURE QTableWidget_setCellWidget
  (self: QTableWidget; row, column: INTEGER; widget: QWidget; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(widget.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setCellWidget(
      selfAdr, row, column, arg4tmp);
  END QTableWidget_setCellWidget;

PROCEDURE QTableWidget_removeCellWidget
  (self: QTableWidget; row, column: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_removeCellWidget(selfAdr, row, column);
  END QTableWidget_removeCellWidget;

PROCEDURE QTableWidget_isItemSelected
  (self: QTableWidget; item: QTableWidgetItem; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidget_isItemSelected(selfAdr, arg2tmp);
  END QTableWidget_isItemSelected;

PROCEDURE QTableWidget_setItemSelected
  (self: QTableWidget; item: QTableWidgetItem; select: BOOLEAN; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setItemSelected(selfAdr, arg2tmp, select);
  END QTableWidget_setItemSelected;

PROCEDURE QTableWidget_setRangeSelected
  (self: QTableWidget; range: QTableWidgetSelectionRange; select: BOOLEAN; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(range.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setRangeSelected(
      selfAdr, arg2tmp, select);
  END QTableWidget_setRangeSelected;

PROCEDURE QTableWidget_visualRow
  (self: QTableWidget; logicalRow: INTEGER; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTableWidgetRaw.QTableWidget_visualRow(selfAdr, logicalRow);
  END QTableWidget_visualRow;

PROCEDURE QTableWidget_visualColumn
  (self: QTableWidget; logicalColumn: INTEGER; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN
      QtTableWidgetRaw.QTableWidget_visualColumn(selfAdr, logicalColumn);
  END QTableWidget_visualColumn;

PROCEDURE QTableWidget_itemAt (self: QTableWidget; p: QPoint; ):
  QTableWidgetItem =
  VAR
    ret    : ADDRESS;
    result : QTableWidgetItem;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp                   := LOOPHOLE(p.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidget_itemAt(selfAdr, arg2tmp);

    result := NEW(QTableWidgetItem);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_itemAt;

PROCEDURE QTableWidget_itemAt1 (self: QTableWidget; x, y: INTEGER; ):
  QTableWidgetItem =
  VAR
    ret    : ADDRESS;
    result : QTableWidgetItem;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidget_itemAt1(selfAdr, x, y);

    result := NEW(QTableWidgetItem);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_itemAt1;

PROCEDURE QTableWidget_visualItemRect
  (self: QTableWidget; item: QTableWidgetItem; ): QRect =
  VAR
    ret    : ADDRESS;
    result : QRect;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidget_visualItemRect(selfAdr, arg2tmp);

    result := NEW(QRect);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_visualItemRect;

PROCEDURE QTableWidget_itemPrototype (self: QTableWidget; ):
  QTableWidgetItem =
  VAR
    ret    : ADDRESS;
    result : QTableWidgetItem;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTableWidgetRaw.QTableWidget_itemPrototype(selfAdr);

    result := NEW(QTableWidgetItem);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTableWidget_itemPrototype;

PROCEDURE QTableWidget_setItemPrototype
  (self: QTableWidget; item: QTableWidgetItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_setItemPrototype(selfAdr, arg2tmp);
  END QTableWidget_setItemPrototype;

PROCEDURE QTableWidget_scrollToItem
  (self: QTableWidget; item: QTableWidgetItem; hint: ScrollHint; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_scrollToItem(selfAdr, arg2tmp, ORD(hint));
  END QTableWidget_scrollToItem;

PROCEDURE QTableWidget_scrollToItem1
  (self: QTableWidget; item: QTableWidgetItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(item.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_scrollToItem1(selfAdr, arg2tmp);
  END QTableWidget_scrollToItem1;

PROCEDURE QTableWidget_insertRow (self: QTableWidget; row: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_insertRow(selfAdr, row);
  END QTableWidget_insertRow;

PROCEDURE QTableWidget_insertColumn
  (self: QTableWidget; column: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_insertColumn(selfAdr, column);
  END QTableWidget_insertColumn;

PROCEDURE QTableWidget_removeRow (self: QTableWidget; row: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_removeRow(selfAdr, row);
  END QTableWidget_removeRow;

PROCEDURE QTableWidget_removeColumn
  (self: QTableWidget; column: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_removeColumn(selfAdr, column);
  END QTableWidget_removeColumn;

PROCEDURE QTableWidget_clear (self: QTableWidget; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_clear(selfAdr);
  END QTableWidget_clear;

PROCEDURE QTableWidget_clearContents (self: QTableWidget; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTableWidgetRaw.QTableWidget_clearContents(selfAdr);
  END QTableWidget_clearContents;

PROCEDURE Cleanup_QTableWidget
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTableWidget := ref;
  BEGIN
    Delete_QTableWidget(obj);
  END Cleanup_QTableWidget;

PROCEDURE Destroy_QTableWidget (self: QTableWidget) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTableWidget);
  END Destroy_QTableWidget;

REVEAL
  QTableWidget =
    QTableWidgetPublic BRANDED OBJECT
    OVERRIDES
      init_0                    := New_QTableWidget0;
      init_1                    := New_QTableWidget1;
      init_2                    := New_QTableWidget2;
      init_3                    := New_QTableWidget3;
      setRowCount               := QTableWidget_setRowCount;
      rowCount                  := QTableWidget_rowCount;
      setColumnCount            := QTableWidget_setColumnCount;
      columnCount               := QTableWidget_columnCount;
      row                       := QTableWidget_row;
      column                    := QTableWidget_column;
      item                      := QTableWidget_item;
      setItem                   := QTableWidget_setItem;
      takeItem                  := QTableWidget_takeItem;
      verticalHeaderItem        := QTableWidget_verticalHeaderItem;
      setVerticalHeaderItem     := QTableWidget_setVerticalHeaderItem;
      takeVerticalHeaderItem    := QTableWidget_takeVerticalHeaderItem;
      horizontalHeaderItem      := QTableWidget_horizontalHeaderItem;
      setHorizontalHeaderItem   := QTableWidget_setHorizontalHeaderItem;
      takeHorizontalHeaderItem  := QTableWidget_takeHorizontalHeaderItem;
      setVerticalHeaderLabels   := QTableWidget_setVerticalHeaderLabels;
      setHorizontalHeaderLabels := QTableWidget_setHorizontalHeaderLabels;
      currentRow                := QTableWidget_currentRow;
      currentColumn             := QTableWidget_currentColumn;
      currentItem               := QTableWidget_currentItem;
      setCurrentItem            := QTableWidget_setCurrentItem;
      setCurrentItem1           := QTableWidget_setCurrentItem1;
      setCurrentCell            := QTableWidget_setCurrentCell;
      setCurrentCell1           := QTableWidget_setCurrentCell1;
      sortItems                 := QTableWidget_sortItems;
      sortItems1                := QTableWidget_sortItems1;
      setSortingEnabled         := QTableWidget_setSortingEnabled;
      isSortingEnabled          := QTableWidget_isSortingEnabled;
      editItem                  := QTableWidget_editItem;
      openPersistentEditor      := QTableWidget_openPersistentEditor;
      closePersistentEditor     := QTableWidget_closePersistentEditor;
      cellWidget                := QTableWidget_cellWidget;
      setCellWidget             := QTableWidget_setCellWidget;
      removeCellWidget          := QTableWidget_removeCellWidget;
      isItemSelected            := QTableWidget_isItemSelected;
      setItemSelected           := QTableWidget_setItemSelected;
      setRangeSelected          := QTableWidget_setRangeSelected;
      visualRow                 := QTableWidget_visualRow;
      visualColumn              := QTableWidget_visualColumn;
      itemAt                    := QTableWidget_itemAt;
      itemAt1                   := QTableWidget_itemAt1;
      visualItemRect            := QTableWidget_visualItemRect;
      itemPrototype             := QTableWidget_itemPrototype;
      setItemPrototype          := QTableWidget_setItemPrototype;
      scrollToItem              := QTableWidget_scrollToItem;
      scrollToItem1             := QTableWidget_scrollToItem1;
      insertRow                 := QTableWidget_insertRow;
      insertColumn              := QTableWidget_insertColumn;
      removeRow                 := QTableWidget_removeRow;
      removeColumn              := QTableWidget_removeColumn;
      clear                     := QTableWidget_clear;
      clearContents             := QTableWidget_clearContents;
      destroyCxx                := Destroy_QTableWidget;
    END;


BEGIN
END QtTableWidget.
