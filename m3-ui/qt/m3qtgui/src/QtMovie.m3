(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtMovie;


FROM QtImage IMPORT QImage;
FROM QtSize IMPORT QSize;
FROM QtByteArray IMPORT QByteArray;
FROM QtObject IMPORT QObject;
FROM QGuiStubs IMPORT QIODevice;
FROM QtColor IMPORT QColor;
IMPORT QtMovieRaw;
FROM QtRect IMPORT QRect;


IMPORT WeakRef;
FROM QtString IMPORT QString;

PROCEDURE New_QMovie0 (self:QMovie; parent: QObject;
): QMovie =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
result := QtMovieRaw.New_QMovie0(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QMovie);

RETURN self;
END New_QMovie0;

PROCEDURE New_QMovie1 (self:QMovie;): QMovie =
VAR
result : ADDRESS;
BEGIN
result := QtMovieRaw.New_QMovie1();

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QMovie);

RETURN self;
END New_QMovie1;

PROCEDURE New_QMovie2 (self:QMovie; device: QIODevice;
 format: QByteArray;
 parent: QObject;
): QMovie =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(device.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(format.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
result := QtMovieRaw.New_QMovie2(arg1tmp, arg2tmp, arg3tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QMovie);

RETURN self;
END New_QMovie2;

PROCEDURE New_QMovie3 (self:QMovie; device: QIODevice;
 format: QByteArray;
): QMovie =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(device.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(format.cxxObj,ADDRESS);
BEGIN
result := QtMovieRaw.New_QMovie3(arg1tmp, arg2tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QMovie);

RETURN self;
END New_QMovie3;

PROCEDURE New_QMovie4 (self:QMovie; device: QIODevice;
): QMovie =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(device.cxxObj,ADDRESS);
BEGIN
result := QtMovieRaw.New_QMovie4(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QMovie);

RETURN self;
END New_QMovie4;

PROCEDURE New_QMovie5 (self:QMovie; fileName: TEXT;
 format: QByteArray;
 parent: QObject;
): QMovie =
VAR
result : ADDRESS;
qstr_fileName := NEW(QString).initQString(fileName);
arg1tmp :=  LOOPHOLE(qstr_fileName.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(format.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
result := QtMovieRaw.New_QMovie5(arg1tmp, arg2tmp, arg3tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QMovie);

RETURN self;
END New_QMovie5;

PROCEDURE New_QMovie6 (self:QMovie; fileName: TEXT;
 format: QByteArray;
): QMovie =
VAR
result : ADDRESS;
qstr_fileName := NEW(QString).initQString(fileName);
arg1tmp :=  LOOPHOLE(qstr_fileName.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(format.cxxObj,ADDRESS);
BEGIN
result := QtMovieRaw.New_QMovie6(arg1tmp, arg2tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QMovie);

RETURN self;
END New_QMovie6;

PROCEDURE New_QMovie7 (self:QMovie; fileName: TEXT;
): QMovie =
VAR
result : ADDRESS;
qstr_fileName := NEW(QString).initQString(fileName);
arg1tmp :=  LOOPHOLE(qstr_fileName.cxxObj,ADDRESS);
BEGIN
result := QtMovieRaw.New_QMovie7(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QMovie);

RETURN self;
END New_QMovie7;

PROCEDURE Delete_QMovie ( self: QMovie;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtMovieRaw.Delete_QMovie(selfAdr);
END Delete_QMovie;

PROCEDURE QMovie_setDevice ( self: QMovie;
 device: QIODevice;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(device.cxxObj,ADDRESS);
BEGIN
QtMovieRaw.QMovie_setDevice(selfAdr, arg2tmp);
END QMovie_setDevice;

PROCEDURE QMovie_device ( self: QMovie;
): QIODevice =
VAR
ret:ADDRESS; result : QIODevice;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtMovieRaw.QMovie_device(selfAdr);

  result := NEW(QIODevice);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QMovie_device;

PROCEDURE QMovie_setFileName ( self: QMovie;
 fileName: TEXT;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
qstr_fileName := NEW(QString).initQString(fileName);
arg2tmp :=  LOOPHOLE(qstr_fileName.cxxObj,ADDRESS);
BEGIN
QtMovieRaw.QMovie_setFileName(selfAdr, arg2tmp);
END QMovie_setFileName;

PROCEDURE QMovie_fileName ( self: QMovie;
): TEXT =
VAR
ret : ADDRESS;
qstr := NEW(QString);
ba : QByteArray;
result : TEXT;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtMovieRaw.QMovie_fileName(selfAdr);

  qstr.cxxObj := ret;
  ba := qstr.toLocal8Bit();
  result := ba.data();

RETURN result;
END QMovie_fileName;

PROCEDURE QMovie_setFormat ( self: QMovie;
 format: QByteArray;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(format.cxxObj,ADDRESS);
BEGIN
QtMovieRaw.QMovie_setFormat(selfAdr, arg2tmp);
END QMovie_setFormat;

PROCEDURE QMovie_format ( self: QMovie;
): QByteArray =
VAR
ret:ADDRESS; result : QByteArray;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtMovieRaw.QMovie_format(selfAdr);

  result := NEW(QByteArray);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QMovie_format;

PROCEDURE QMovie_setBackgroundColor ( self: QMovie;
 color: QColor;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(color.cxxObj,ADDRESS);
BEGIN
QtMovieRaw.QMovie_setBackgroundColor(selfAdr, arg2tmp);
END QMovie_setBackgroundColor;

PROCEDURE QMovie_state ( self: QMovie;
): MovieState =
VAR
ret:INTEGER; result : MovieState;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtMovieRaw.QMovie_state(selfAdr);
result := VAL(ret,MovieState);  
RETURN result;
END QMovie_state;

PROCEDURE QMovie_frameRect ( self: QMovie;
): QRect =
VAR
ret:ADDRESS; result : QRect;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtMovieRaw.QMovie_frameRect(selfAdr);

  result := NEW(QRect);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QMovie_frameRect;

PROCEDURE QMovie_currentImage ( self: QMovie;
): QImage =
VAR
ret:ADDRESS; result : QImage;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtMovieRaw.QMovie_currentImage(selfAdr);

  result := NEW(QImage);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QMovie_currentImage;

PROCEDURE QMovie_isValid ( self: QMovie;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtMovieRaw.QMovie_isValid(selfAdr);
END QMovie_isValid;

PROCEDURE QMovie_jumpToFrame ( self: QMovie;
frameNumber: INTEGER;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtMovieRaw.QMovie_jumpToFrame(selfAdr, frameNumber);
END QMovie_jumpToFrame;

PROCEDURE QMovie_loopCount ( self: QMovie;
): INTEGER =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtMovieRaw.QMovie_loopCount(selfAdr);
END QMovie_loopCount;

PROCEDURE QMovie_frameCount ( self: QMovie;
): INTEGER =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtMovieRaw.QMovie_frameCount(selfAdr);
END QMovie_frameCount;

PROCEDURE QMovie_nextFrameDelay ( self: QMovie;
): INTEGER =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtMovieRaw.QMovie_nextFrameDelay(selfAdr);
END QMovie_nextFrameDelay;

PROCEDURE QMovie_currentFrameNumber ( self: QMovie;
): INTEGER =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtMovieRaw.QMovie_currentFrameNumber(selfAdr);
END QMovie_currentFrameNumber;

PROCEDURE QMovie_speed ( self: QMovie;
): INTEGER =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtMovieRaw.QMovie_speed(selfAdr);
END QMovie_speed;

PROCEDURE QMovie_scaledSize ( self: QMovie;
): QSize =
VAR
ret:ADDRESS; result : QSize;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtMovieRaw.QMovie_scaledSize(selfAdr);

  result := NEW(QSize);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QMovie_scaledSize;

PROCEDURE QMovie_setScaledSize ( self: QMovie;
 size: QSize;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(size.cxxObj,ADDRESS);
BEGIN
QtMovieRaw.QMovie_setScaledSize(selfAdr, arg2tmp);
END QMovie_setScaledSize;

PROCEDURE QMovie_cacheMode ( self: QMovie;
): CacheMode =
VAR
ret:INTEGER; result : CacheMode;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtMovieRaw.QMovie_cacheMode(selfAdr);
result := VAL(ret,CacheMode);  
RETURN result;
END QMovie_cacheMode;

PROCEDURE QMovie_setCacheMode ( self: QMovie;
mode: CacheMode;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtMovieRaw.QMovie_setCacheMode(selfAdr, ORD(mode));
END QMovie_setCacheMode;

PROCEDURE QMovie_cacheMode1 ( self: QMovie;
): CacheMode =
VAR
ret:INTEGER; result : CacheMode;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtMovieRaw.QMovie_cacheMode1(selfAdr);
result := VAL(ret,CacheMode);  
RETURN result;
END QMovie_cacheMode1;

PROCEDURE QMovie_start ( self: QMovie;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtMovieRaw.QMovie_start(selfAdr);
END QMovie_start;

PROCEDURE QMovie_jumpToNextFrame ( self: QMovie;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtMovieRaw.QMovie_jumpToNextFrame(selfAdr);
END QMovie_jumpToNextFrame;

PROCEDURE QMovie_setPaused ( self: QMovie;
paused: BOOLEAN;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtMovieRaw.QMovie_setPaused(selfAdr, paused);
END QMovie_setPaused;

PROCEDURE QMovie_stop ( self: QMovie;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtMovieRaw.QMovie_stop(selfAdr);
END QMovie_stop;

PROCEDURE QMovie_setSpeed ( self: QMovie;
percentSpeed: INTEGER;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtMovieRaw.QMovie_setSpeed(selfAdr, percentSpeed);
END QMovie_setSpeed;

PROCEDURE Cleanup_QMovie(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QMovie := ref;
BEGIN
  Delete_QMovie(obj);
 END Cleanup_QMovie;

PROCEDURE Destroy_QMovie(self : QMovie) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QMovie);
END Destroy_QMovie;

REVEAL
QMovie =
QMoviePublic BRANDED OBJECT
OVERRIDES
init_0 := New_QMovie0;
init_1 := New_QMovie1;
init_2 := New_QMovie2;
init_3 := New_QMovie3;
init_4 := New_QMovie4;
init_5 := New_QMovie5;
init_6 := New_QMovie6;
init_7 := New_QMovie7;
setDevice := QMovie_setDevice;
device := QMovie_device;
setFileName := QMovie_setFileName;
fileName := QMovie_fileName;
setFormat := QMovie_setFormat;
format := QMovie_format;
setBackgroundColor := QMovie_setBackgroundColor;
state := QMovie_state;
frameRect := QMovie_frameRect;
currentImage := QMovie_currentImage;
isValid := QMovie_isValid;
jumpToFrame := QMovie_jumpToFrame;
loopCount := QMovie_loopCount;
frameCount := QMovie_frameCount;
nextFrameDelay := QMovie_nextFrameDelay;
currentFrameNumber := QMovie_currentFrameNumber;
speed := QMovie_speed;
scaledSize := QMovie_scaledSize;
setScaledSize := QMovie_setScaledSize;
cacheMode := QMovie_cacheMode;
setCacheMode := QMovie_setCacheMode;
cacheMode1 := QMovie_cacheMode1;
start := QMovie_start;
jumpToNextFrame := QMovie_jumpToNextFrame;
setPaused := QMovie_setPaused;
stop := QMovie_stop;
setSpeed := QMovie_setSpeed;
destroyCxx := Destroy_QMovie;
END;


BEGIN
END QtMovie.
