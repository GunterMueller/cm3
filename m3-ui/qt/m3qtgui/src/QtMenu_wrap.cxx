/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qmenu.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QMenu * New_QMenu0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QMenu *result = 0 ;
  QMenu * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QMenu *)new QMenu(arg1);
  *(QMenu **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMenu * New_QMenu1() {
  QMenu *result = 0 ;
  QMenu * cresult ;
  
  result = (QMenu *)new QMenu();
  *(QMenu **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMenu * New_QMenu2(QString * title, QWidget * parent) {
  QString *arg1 = 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QMenu *result = 0 ;
  QMenu * cresult ;
  
  arg1 = *(QString **)&title;
  arg2 = *(QWidget **)&parent; 
  result = (QMenu *)new QMenu((QString const &)*arg1,arg2);
  *(QMenu **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMenu * New_QMenu3(QString * title) {
  QString *arg1 = 0 ;
  QMenu *result = 0 ;
  QMenu * cresult ;
  
  arg1 = *(QString **)&title;
  result = (QMenu *)new QMenu((QString const &)*arg1);
  *(QMenu **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QMenu(QMenu * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  
  arg1 = *(QMenu **)&self; 
  delete arg1;
}


SWIGEXPORT void QMenu_addAction0_0(QMenu * self, QAction * action) {
  QMenu *arg1 = (QMenu *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QAction **)&action; 
  (arg1)->addAction(arg2);
}


SWIGEXPORT QAction * QMenu_addAction1(QMenu * self, QString * text) {
  QMenu *arg1 = (QMenu *) 0 ;
  QString *arg2 = 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QString **)&text;
  result = (QAction *)(arg1)->addAction((QString const &)*arg2);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QMenu_addAction2(QMenu * self, QIcon * icon, QString * text) {
  QMenu *arg1 = (QMenu *) 0 ;
  QIcon *arg2 = 0 ;
  QString *arg3 = 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QIcon **)&icon;
  arg3 = *(QString **)&text;
  result = (QAction *)(arg1)->addAction((QIcon const &)*arg2,(QString const &)*arg3);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QMenu_addAction3(QMenu * self, QString * text, QObject * receiver, char * member, QKeySequence * shortcut) {
  QMenu *arg1 = (QMenu *) 0 ;
  QString *arg2 = 0 ;
  QObject *arg3 = (QObject *) 0 ;
  char *arg4 = (char *) 0 ;
  QKeySequence *arg5 = 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QString **)&text;
  arg3 = *(QObject **)&receiver; 
  {
    arg4 = member;
  }
  arg5 = *(QKeySequence **)&shortcut;
  result = (QAction *)(arg1)->addAction((QString const &)*arg2,(QObject const *)arg3,(char const *)arg4,(QKeySequence const &)*arg5);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QMenu_addAction4(QMenu * self, QString * text, QObject * receiver, char * member) {
  QMenu *arg1 = (QMenu *) 0 ;
  QString *arg2 = 0 ;
  QObject *arg3 = (QObject *) 0 ;
  char *arg4 = (char *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QString **)&text;
  arg3 = *(QObject **)&receiver; 
  {
    arg4 = member;
  }
  result = (QAction *)(arg1)->addAction((QString const &)*arg2,(QObject const *)arg3,(char const *)arg4);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QMenu_addAction5(QMenu * self, QIcon * icon, QString * text, QObject * receiver, char * member, QKeySequence * shortcut) {
  QMenu *arg1 = (QMenu *) 0 ;
  QIcon *arg2 = 0 ;
  QString *arg3 = 0 ;
  QObject *arg4 = (QObject *) 0 ;
  char *arg5 = (char *) 0 ;
  QKeySequence *arg6 = 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QIcon **)&icon;
  arg3 = *(QString **)&text;
  arg4 = *(QObject **)&receiver; 
  {
    arg5 = member;
  }
  arg6 = *(QKeySequence **)&shortcut;
  result = (QAction *)(arg1)->addAction((QIcon const &)*arg2,(QString const &)*arg3,(QObject const *)arg4,(char const *)arg5,(QKeySequence const &)*arg6);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QMenu_addAction6(QMenu * self, QIcon * icon, QString * text, QObject * receiver, char * member) {
  QMenu *arg1 = (QMenu *) 0 ;
  QIcon *arg2 = 0 ;
  QString *arg3 = 0 ;
  QObject *arg4 = (QObject *) 0 ;
  char *arg5 = (char *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QIcon **)&icon;
  arg3 = *(QString **)&text;
  arg4 = *(QObject **)&receiver; 
  {
    arg5 = member;
  }
  result = (QAction *)(arg1)->addAction((QIcon const &)*arg2,(QString const &)*arg3,(QObject const *)arg4,(char const *)arg5);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QMenu_addMenu(QMenu * self, QMenu * menu) {
  QMenu *arg1 = (QMenu *) 0 ;
  QMenu *arg2 = (QMenu *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QMenu **)&menu; 
  result = (QAction *)(arg1)->addMenu(arg2);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMenu * QMenu_addMenu1(QMenu * self, QString * title) {
  QMenu *arg1 = (QMenu *) 0 ;
  QString *arg2 = 0 ;
  QMenu *result = 0 ;
  QMenu * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QString **)&title;
  result = (QMenu *)(arg1)->addMenu((QString const &)*arg2);
  *(QMenu **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMenu * QMenu_addMenu2(QMenu * self, QIcon * icon, QString * title) {
  QMenu *arg1 = (QMenu *) 0 ;
  QIcon *arg2 = 0 ;
  QString *arg3 = 0 ;
  QMenu *result = 0 ;
  QMenu * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QIcon **)&icon;
  arg3 = *(QString **)&title;
  result = (QMenu *)(arg1)->addMenu((QIcon const &)*arg2,(QString const &)*arg3);
  *(QMenu **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QMenu_addSeparator(QMenu * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  result = (QAction *)(arg1)->addSeparator();
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QMenu_insertMenu(QMenu * self, QAction * before, QMenu * menu) {
  QMenu *arg1 = (QMenu *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  QMenu *arg3 = (QMenu *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QAction **)&before; 
  arg3 = *(QMenu **)&menu; 
  result = (QAction *)(arg1)->insertMenu(arg2,arg3);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QMenu_insertSeparator(QMenu * self, QAction * before) {
  QMenu *arg1 = (QMenu *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QAction **)&before; 
  result = (QAction *)(arg1)->insertSeparator(arg2);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QMenu_isEmpty(QMenu const * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMenu **)&self; 
  result = (bool)((QMenu const *)arg1)->isEmpty();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QMenu_clear(QMenu * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  
  arg1 = *(QMenu **)&self; 
  (arg1)->clear();
}


SWIGEXPORT void QMenu_setTearOffEnabled(QMenu * self, bool m3arg2) {
  QMenu *arg1 = (QMenu *) 0 ;
  bool arg2 ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = m3arg2 ? true : false; 
  (arg1)->setTearOffEnabled(arg2);
}


SWIGEXPORT bool QMenu_isTearOffEnabled(QMenu const * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMenu **)&self; 
  result = (bool)((QMenu const *)arg1)->isTearOffEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QMenu_isTearOffMenuVisible(QMenu const * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMenu **)&self; 
  result = (bool)((QMenu const *)arg1)->isTearOffMenuVisible();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QMenu_hideTearOffMenu(QMenu * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  
  arg1 = *(QMenu **)&self; 
  (arg1)->hideTearOffMenu();
}


SWIGEXPORT void QMenu_setDefaultAction(QMenu * self, QAction * m3arg2) {
  QMenu *arg1 = (QMenu *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QAction **)&m3arg2; 
  (arg1)->setDefaultAction(arg2);
}


SWIGEXPORT QAction * QMenu_defaultAction(QMenu const * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  result = (QAction *)((QMenu const *)arg1)->defaultAction();
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QMenu_setActiveAction(QMenu * self, QAction * act) {
  QMenu *arg1 = (QMenu *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QAction **)&act; 
  (arg1)->setActiveAction(arg2);
}


SWIGEXPORT QAction * QMenu_activeAction(QMenu const * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  result = (QAction *)((QMenu const *)arg1)->activeAction();
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QMenu_popup(QMenu * self, QPoint * pos, QAction * at) {
  QMenu *arg1 = (QMenu *) 0 ;
  QPoint *arg2 = 0 ;
  QAction *arg3 = (QAction *) 0 ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QPoint **)&pos;
  arg3 = *(QAction **)&at; 
  (arg1)->popup((QPoint const &)*arg2,arg3);
}


SWIGEXPORT void QMenu_popup1(QMenu * self, QPoint * pos) {
  QMenu *arg1 = (QMenu *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QPoint **)&pos;
  (arg1)->popup((QPoint const &)*arg2);
}


SWIGEXPORT QSize * QMenu_sizeHint(QMenu const * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QMenu **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QMenu const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QRect * QMenu_actionGeometry(QMenu const * self, QAction * m3arg2) {
  QMenu *arg1 = (QMenu *) 0 ;
  QAction *arg2 = (QAction *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QAction **)&m3arg2; 
  *(QRect **)&cresult = new QRect((const QRect &)((QMenu const *)arg1)->actionGeometry(arg2));
  return cresult;
}


SWIGEXPORT QAction * QMenu_actionAt(QMenu const * self, QPoint * m3arg2) {
  QMenu *arg1 = (QMenu *) 0 ;
  QPoint *arg2 = 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QPoint **)&m3arg2;
  result = (QAction *)((QMenu const *)arg1)->actionAt((QPoint const &)*arg2);
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAction * QMenu_menuAction(QMenu const * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  QAction *result = 0 ;
  QAction * cresult ;
  
  arg1 = *(QMenu **)&self; 
  result = (QAction *)((QMenu const *)arg1)->menuAction();
  *(QAction **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QString *  QMenu_title(QMenu const * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  QString *  cresult ;
  
  arg1 = *(QMenu **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QMenu const *)arg1)->title());
  return cresult;
}


SWIGEXPORT void QMenu_setTitle(QMenu * self, QString * title) {
  QMenu *arg1 = (QMenu *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QString **)&title;
  (arg1)->setTitle((QString const &)*arg2);
}


SWIGEXPORT QIcon * QMenu_icon(QMenu const * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  QIcon * cresult ;
  
  arg1 = *(QMenu **)&self; 
  *(QIcon **)&cresult = new QIcon((const QIcon &)((QMenu const *)arg1)->icon());
  return cresult;
}


SWIGEXPORT void QMenu_setIcon(QMenu * self, QIcon * icon) {
  QMenu *arg1 = (QMenu *) 0 ;
  QIcon *arg2 = 0 ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QIcon **)&icon;
  (arg1)->setIcon((QIcon const &)*arg2);
}


SWIGEXPORT void QMenu_setNoReplayFor(QMenu * self, QWidget * widget) {
  QMenu *arg1 = (QMenu *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = *(QWidget **)&widget; 
  (arg1)->setNoReplayFor(arg2);
}


SWIGEXPORT bool QMenu_separatorsCollapsible(QMenu const * self) {
  QMenu *arg1 = (QMenu *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMenu **)&self; 
  result = (bool)((QMenu const *)arg1)->separatorsCollapsible();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QMenu_setSeparatorsCollapsible(QMenu * self, bool collapse) {
  QMenu *arg1 = (QMenu *) 0 ;
  bool arg2 ;
  
  arg1 = *(QMenu **)&self; 
  arg2 = collapse ? true : false; 
  (arg1)->setSeparatorsCollapsible(arg2);
}


SWIGEXPORT long Modula3_QMenuToQWidget(long objectRef) {
    long baseptr = 0;
    *(QWidget **)&baseptr = *(QMenu **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

