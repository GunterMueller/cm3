/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qscrollarea.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QScrollArea * New_QScrollArea0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QScrollArea *result = 0 ;
  QScrollArea * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QScrollArea *)new QScrollArea(arg1);
  *(QScrollArea **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QScrollArea * New_QScrollArea1() {
  QScrollArea *result = 0 ;
  QScrollArea * cresult ;
  
  result = (QScrollArea *)new QScrollArea();
  *(QScrollArea **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QScrollArea(QScrollArea * self) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  
  arg1 = *(QScrollArea **)&self; 
  delete arg1;
}


SWIGEXPORT QWidget * QScrollArea_widget(QScrollArea const * self) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QScrollArea **)&self; 
  result = (QWidget *)((QScrollArea const *)arg1)->widget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QScrollArea_setWidget(QScrollArea * self, QWidget * widget) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QScrollArea **)&self; 
  arg2 = *(QWidget **)&widget; 
  (arg1)->setWidget(arg2);
}


SWIGEXPORT QWidget * QScrollArea_takeWidget(QScrollArea * self) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QScrollArea **)&self; 
  result = (QWidget *)(arg1)->takeWidget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QScrollArea_widgetResizable(QScrollArea const * self) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QScrollArea **)&self; 
  result = (bool)((QScrollArea const *)arg1)->widgetResizable();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QScrollArea_setWidgetResizable(QScrollArea * self, bool resizable) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  bool arg2 ;
  
  arg1 = *(QScrollArea **)&self; 
  arg2 = resizable ? true : false; 
  (arg1)->setWidgetResizable(arg2);
}


SWIGEXPORT QSize * QScrollArea_sizeHint(QScrollArea const * self) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QScrollArea **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QScrollArea const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT bool QScrollArea_focusNextPrevChild(QScrollArea * self, bool next) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  bool arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QScrollArea **)&self; 
  arg2 = next ? true : false; 
  result = (bool)(arg1)->focusNextPrevChild(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::Alignment QScrollArea_alignment(QScrollArea const * self) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  Qt::Alignment cresult ;
  
  arg1 = *(QScrollArea **)&self; 
  *(Qt::Alignment **)&cresult = new Qt::Alignment((const Qt::Alignment &)((QScrollArea const *)arg1)->alignment());
  return cresult;
}


SWIGEXPORT void QScrollArea_setAlignment(QScrollArea * self, Qt::Alignment m3arg2) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  Qt::Alignment arg2 ;
  
  arg1 = *(QScrollArea **)&self; 
  arg2 = (Qt::Alignment)m3arg2; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT void QScrollArea_ensureVisible(QScrollArea * self, int x, int y, int xmargin, int ymargin) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QScrollArea **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)xmargin; 
  arg5 = (int)ymargin; 
  (arg1)->ensureVisible(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QScrollArea_ensureVisible1(QScrollArea * self, int x, int y, int xmargin) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QScrollArea **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)xmargin; 
  (arg1)->ensureVisible(arg2,arg3,arg4);
}


SWIGEXPORT void QScrollArea_ensureVisible2(QScrollArea * self, int x, int y) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QScrollArea **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  (arg1)->ensureVisible(arg2,arg3);
}


SWIGEXPORT void QScrollArea_ensureWidgetVisible(QScrollArea * self, QWidget * childWidget, int xmargin, int ymargin) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QScrollArea **)&self; 
  arg2 = *(QWidget **)&childWidget; 
  arg3 = (int)xmargin; 
  arg4 = (int)ymargin; 
  (arg1)->ensureWidgetVisible(arg2,arg3,arg4);
}


SWIGEXPORT void QScrollArea_ensureWidgetVisible1(QScrollArea * self, QWidget * childWidget, int xmargin) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int arg3 ;
  
  arg1 = *(QScrollArea **)&self; 
  arg2 = *(QWidget **)&childWidget; 
  arg3 = (int)xmargin; 
  (arg1)->ensureWidgetVisible(arg2,arg3);
}


SWIGEXPORT void QScrollArea_ensureWidgetVisible2(QScrollArea * self, QWidget * childWidget) {
  QScrollArea *arg1 = (QScrollArea *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QScrollArea **)&self; 
  arg2 = *(QWidget **)&childWidget; 
  (arg1)->ensureWidgetVisible(arg2);
}


SWIGEXPORT long Modula3_QScrollAreaToQAbstractScrollArea(long objectRef) {
    long baseptr = 0;
    *(QAbstractScrollArea **)&baseptr = *(QScrollArea **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

