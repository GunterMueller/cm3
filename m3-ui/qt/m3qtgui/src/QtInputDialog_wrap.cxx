/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qinputdialog.h>
#define  InputDialogOptions  QInputDialog::InputDialogOptions


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QInputDialog * New_QInputDialog0(QWidget * parent, Qt::WindowFlags flags) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowFlags arg2 ;
  QInputDialog *result = 0 ;
  QInputDialog * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = (Qt::WindowFlags)flags; 
  result = (QInputDialog *)new QInputDialog(arg1,arg2);
  *(QInputDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QInputDialog * New_QInputDialog1(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QInputDialog *result = 0 ;
  QInputDialog * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QInputDialog *)new QInputDialog(arg1);
  *(QInputDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QInputDialog * New_QInputDialog2() {
  QInputDialog *result = 0 ;
  QInputDialog * cresult ;
  
  result = (QInputDialog *)new QInputDialog();
  *(QInputDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QInputDialog(QInputDialog * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  
  arg1 = *(QInputDialog **)&self; 
  delete arg1;
}


SWIGEXPORT void QInputDialog_setInputMode(QInputDialog * self, QInputDialog::InputMode mode) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QInputDialog::InputMode arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (QInputDialog::InputMode)mode; 
  (arg1)->setInputMode(arg2);
}


SWIGEXPORT QInputDialog::InputMode QInputDialog_inputMode(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QInputDialog::InputMode result;
  QInputDialog::InputMode cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  result = (QInputDialog::InputMode)((QInputDialog const *)arg1)->inputMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_setLabelText(QInputDialog * self, QString * text) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->setLabelText((QString const &)*arg2);
}


SWIGEXPORT QString *  QInputDialog_labelText(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QString *  cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QInputDialog const *)arg1)->labelText());
  return cresult;
}


SWIGEXPORT void QInputDialog_setOption(QInputDialog * self, QInputDialog::InputDialogOption option, bool on) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QInputDialog::InputDialogOption arg2 ;
  bool arg3 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (QInputDialog::InputDialogOption)option; 
  arg3 = on ? true : false; 
  (arg1)->setOption(arg2,arg3);
}


SWIGEXPORT void QInputDialog_setOption1(QInputDialog * self, QInputDialog::InputDialogOption option) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QInputDialog::InputDialogOption arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (QInputDialog::InputDialogOption)option; 
  (arg1)->setOption(arg2);
}


SWIGEXPORT bool QInputDialog_testOption(QInputDialog const * self, QInputDialog::InputDialogOption option) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QInputDialog::InputDialogOption arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (QInputDialog::InputDialogOption)option; 
  result = (bool)((QInputDialog const *)arg1)->testOption(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_setOptions(QInputDialog * self, InputDialogOptions options) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  InputDialogOptions arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (InputDialogOptions)options; 
  (arg1)->setOptions(arg2);
}


SWIGEXPORT InputDialogOptions QInputDialog_options(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  InputDialogOptions cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  *(InputDialogOptions **)&cresult = new InputDialogOptions((const InputDialogOptions &)((QInputDialog const *)arg1)->options());
  return cresult;
}


SWIGEXPORT void QInputDialog_setTextValue(QInputDialog * self, QString * text) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->setTextValue((QString const &)*arg2);
}


SWIGEXPORT QString *  QInputDialog_textValue(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QString *  cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QInputDialog const *)arg1)->textValue());
  return cresult;
}


SWIGEXPORT void QInputDialog_setTextEchoMode(QInputDialog * self, QLineEdit::EchoMode mode) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QLineEdit::EchoMode arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (QLineEdit::EchoMode)mode; 
  (arg1)->setTextEchoMode(arg2);
}


SWIGEXPORT QLineEdit::EchoMode QInputDialog_textEchoMode(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QLineEdit::EchoMode cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  *(QLineEdit::EchoMode **)&cresult = new QLineEdit::EchoMode((const QLineEdit::EchoMode &)((QInputDialog const *)arg1)->textEchoMode());
  return cresult;
}


SWIGEXPORT void QInputDialog_setComboBoxEditable(QInputDialog * self, bool editable) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  bool arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = editable ? true : false; 
  (arg1)->setComboBoxEditable(arg2);
}


SWIGEXPORT bool QInputDialog_isComboBoxEditable(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  result = (bool)((QInputDialog const *)arg1)->isComboBoxEditable();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_setComboBoxItems(QInputDialog * self, QStringList * items) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QStringList *arg2 = 0 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = *(QStringList **)&items;
  (arg1)->setComboBoxItems((QStringList const &)*arg2);
}


SWIGEXPORT QStringList * QInputDialog_comboBoxItems(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QStringList * cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  *(QStringList **)&cresult = new QStringList((const QStringList &)((QInputDialog const *)arg1)->comboBoxItems());
  return cresult;
}


SWIGEXPORT void QInputDialog_setIntValue(QInputDialog * self, int value) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (int)value; 
  (arg1)->setIntValue(arg2);
}


SWIGEXPORT int QInputDialog_intValue(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  result = (int)((QInputDialog const *)arg1)->intValue();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_setIntMinimum(QInputDialog * self, int min) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (int)min; 
  (arg1)->setIntMinimum(arg2);
}


SWIGEXPORT int QInputDialog_intMinimum(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  result = (int)((QInputDialog const *)arg1)->intMinimum();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_setIntMaximum(QInputDialog * self, int max) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (int)max; 
  (arg1)->setIntMaximum(arg2);
}


SWIGEXPORT int QInputDialog_intMaximum(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  result = (int)((QInputDialog const *)arg1)->intMaximum();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_setIntRange(QInputDialog * self, int min, int max) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (int)min; 
  arg3 = (int)max; 
  (arg1)->setIntRange(arg2,arg3);
}


SWIGEXPORT void QInputDialog_setIntStep(QInputDialog * self, int step) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (int)step; 
  (arg1)->setIntStep(arg2);
}


SWIGEXPORT int QInputDialog_intStep(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  result = (int)((QInputDialog const *)arg1)->intStep();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_setDoubleValue(QInputDialog * self, double value) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  double arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (double)value; 
  (arg1)->setDoubleValue(arg2);
}


SWIGEXPORT double QInputDialog_doubleValue(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  result = (double)((QInputDialog const *)arg1)->doubleValue();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_setDoubleMinimum(QInputDialog * self, double min) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  double arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (double)min; 
  (arg1)->setDoubleMinimum(arg2);
}


SWIGEXPORT double QInputDialog_doubleMinimum(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  result = (double)((QInputDialog const *)arg1)->doubleMinimum();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_setDoubleMaximum(QInputDialog * self, double max) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  double arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (double)max; 
  (arg1)->setDoubleMaximum(arg2);
}


SWIGEXPORT double QInputDialog_doubleMaximum(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  result = (double)((QInputDialog const *)arg1)->doubleMaximum();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_setDoubleRange(QInputDialog * self, double min, double max) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (double)min; 
  arg3 = (double)max; 
  (arg1)->setDoubleRange(arg2,arg3);
}


SWIGEXPORT void QInputDialog_setDoubleDecimals(QInputDialog * self, int decimals) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (int)decimals; 
  (arg1)->setDoubleDecimals(arg2);
}


SWIGEXPORT int QInputDialog_doubleDecimals(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  result = (int)((QInputDialog const *)arg1)->doubleDecimals();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_setOkButtonText(QInputDialog * self, QString * text) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->setOkButtonText((QString const &)*arg2);
}


SWIGEXPORT QString *  QInputDialog_okButtonText(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QString *  cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QInputDialog const *)arg1)->okButtonText());
  return cresult;
}


SWIGEXPORT void QInputDialog_setCancelButtonText(QInputDialog * self, QString * text) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->setCancelButtonText((QString const &)*arg2);
}


SWIGEXPORT QString *  QInputDialog_cancelButtonText(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QString *  cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QInputDialog const *)arg1)->cancelButtonText());
  return cresult;
}


SWIGEXPORT void QInputDialog_open0_0(QInputDialog * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  
  arg1 = *(QInputDialog **)&self; 
  (arg1)->open();
}


SWIGEXPORT void QInputDialog_open1(QInputDialog * self, QObject * receiver, char * member) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QObject *arg2 = (QObject *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = *(QObject **)&receiver; 
  {
    arg3 = member;
  }
  (arg1)->open(arg2,(char const *)arg3);
}


SWIGEXPORT QSize * QInputDialog_minimumSizeHint(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QInputDialog const *)arg1)->minimumSizeHint());
  return cresult;
}


SWIGEXPORT QSize * QInputDialog_sizeHint(QInputDialog const * self) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QInputDialog **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QInputDialog const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT void QInputDialog_setVisible(QInputDialog * self, bool visible) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  bool arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = visible ? true : false; 
  (arg1)->setVisible(arg2);
}


SWIGEXPORT QString *  GetText(QWidget * parent, QString * title, QString * label, QLineEdit::EchoMode echo, QString * text, bool * ok, Qt::WindowFlags flags) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QLineEdit::EchoMode arg4 ;
  QString *arg5 = 0 ;
  bool *arg6 = (bool *) 0 ;
  Qt::WindowFlags arg7 ;
  QString *  cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (QLineEdit::EchoMode)echo; 
  arg5 = *(QString **)&text;
  arg6 = *(bool **)&ok; 
  arg7 = (Qt::WindowFlags)flags; 
  *(QString **)&cresult = new QString((const QString &)QInputDialog::getText(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,(QString const &)*arg5,arg6,arg7));
  return cresult;
}


SWIGEXPORT QString *  GetText1(QWidget * parent, QString * title, QString * label, QLineEdit::EchoMode echo, QString * text, bool * ok) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QLineEdit::EchoMode arg4 ;
  QString *arg5 = 0 ;
  bool *arg6 = (bool *) 0 ;
  QString *  cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (QLineEdit::EchoMode)echo; 
  arg5 = *(QString **)&text;
  arg6 = *(bool **)&ok; 
  *(QString **)&cresult = new QString((const QString &)QInputDialog::getText(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,(QString const &)*arg5,arg6));
  return cresult;
}


SWIGEXPORT QString *  GetText2(QWidget * parent, QString * title, QString * label, QLineEdit::EchoMode echo, QString * text) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QLineEdit::EchoMode arg4 ;
  QString *arg5 = 0 ;
  QString *  cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (QLineEdit::EchoMode)echo; 
  arg5 = *(QString **)&text;
  *(QString **)&cresult = new QString((const QString &)QInputDialog::getText(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,(QString const &)*arg5));
  return cresult;
}


SWIGEXPORT QString *  GetText3(QWidget * parent, QString * title, QString * label, QLineEdit::EchoMode echo) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QLineEdit::EchoMode arg4 ;
  QString *  cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (QLineEdit::EchoMode)echo; 
  *(QString **)&cresult = new QString((const QString &)QInputDialog::getText(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4));
  return cresult;
}


SWIGEXPORT QString *  GetText4(QWidget * parent, QString * title, QString * label) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString *  cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  *(QString **)&cresult = new QString((const QString &)QInputDialog::getText(arg1,(QString const &)*arg2,(QString const &)*arg3));
  return cresult;
}


SWIGEXPORT int GetInt(QWidget * parent, QString * title, QString * label, int value, int minValue, int maxValue, int step, bool * ok, Qt::WindowFlags flags) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool *arg8 = (bool *) 0 ;
  Qt::WindowFlags arg9 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  arg5 = (int)minValue; 
  arg6 = (int)maxValue; 
  arg7 = (int)step; 
  arg8 = *(bool **)&ok; 
  arg9 = (Qt::WindowFlags)flags; 
  result = (int)QInputDialog::getInt(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInt1(QWidget * parent, QString * title, QString * label, int value, int minValue, int maxValue, int step, bool * ok) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool *arg8 = (bool *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  arg5 = (int)minValue; 
  arg6 = (int)maxValue; 
  arg7 = (int)step; 
  arg8 = *(bool **)&ok; 
  result = (int)QInputDialog::getInt(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInt2(QWidget * parent, QString * title, QString * label, int value, int minValue, int maxValue, int step) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  arg5 = (int)minValue; 
  arg6 = (int)maxValue; 
  arg7 = (int)step; 
  result = (int)QInputDialog::getInt(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6,arg7);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInt3(QWidget * parent, QString * title, QString * label, int value, int minValue, int maxValue) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  arg5 = (int)minValue; 
  arg6 = (int)maxValue; 
  result = (int)QInputDialog::getInt(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInt4(QWidget * parent, QString * title, QString * label, int value, int minValue) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  arg5 = (int)minValue; 
  result = (int)QInputDialog::getInt(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInt5(QWidget * parent, QString * title, QString * label, int value) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  result = (int)QInputDialog::getInt(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInt6(QWidget * parent, QString * title, QString * label) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  result = (int)QInputDialog::getInt(arg1,(QString const &)*arg2,(QString const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double GetDouble(QWidget * parent, QString * title, QString * label, double value, double minValue, double maxValue, int decimals, bool * ok, Qt::WindowFlags flags) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  bool *arg8 = (bool *) 0 ;
  Qt::WindowFlags arg9 ;
  double result;
  double cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (double)value; 
  arg5 = (double)minValue; 
  arg6 = (double)maxValue; 
  arg7 = (int)decimals; 
  arg8 = *(bool **)&ok; 
  arg9 = (Qt::WindowFlags)flags; 
  result = (double)QInputDialog::getDouble(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double GetDouble1(QWidget * parent, QString * title, QString * label, double value, double minValue, double maxValue, int decimals, bool * ok) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  bool *arg8 = (bool *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (double)value; 
  arg5 = (double)minValue; 
  arg6 = (double)maxValue; 
  arg7 = (int)decimals; 
  arg8 = *(bool **)&ok; 
  result = (double)QInputDialog::getDouble(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double GetDouble2(QWidget * parent, QString * title, QString * label, double value, double minValue, double maxValue, int decimals) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  int arg7 ;
  double result;
  double cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (double)value; 
  arg5 = (double)minValue; 
  arg6 = (double)maxValue; 
  arg7 = (int)decimals; 
  result = (double)QInputDialog::getDouble(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6,arg7);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double GetDouble3(QWidget * parent, QString * title, QString * label, double value, double minValue, double maxValue) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double result;
  double cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (double)value; 
  arg5 = (double)minValue; 
  arg6 = (double)maxValue; 
  result = (double)QInputDialog::getDouble(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double GetDouble4(QWidget * parent, QString * title, QString * label, double value, double minValue) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double result;
  double cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (double)value; 
  arg5 = (double)minValue; 
  result = (double)QInputDialog::getDouble(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double GetDouble5(QWidget * parent, QString * title, QString * label, double value) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  double arg4 ;
  double result;
  double cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (double)value; 
  result = (double)QInputDialog::getDouble(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double GetDouble6(QWidget * parent, QString * title, QString * label) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  result = (double)QInputDialog::getDouble(arg1,(QString const &)*arg2,(QString const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString *  GetItem(QWidget * parent, QString * title, QString * label, QStringList * items, int current, bool editable, bool * ok, Qt::WindowFlags flags) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QStringList *arg4 = 0 ;
  int arg5 ;
  bool arg6 ;
  bool *arg7 = (bool *) 0 ;
  Qt::WindowFlags arg8 ;
  QString *  cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = *(QStringList **)&items;
  arg5 = (int)current; 
  arg6 = editable ? true : false; 
  arg7 = *(bool **)&ok; 
  arg8 = (Qt::WindowFlags)flags; 
  *(QString **)&cresult = new QString((const QString &)QInputDialog::getItem(arg1,(QString const &)*arg2,(QString const &)*arg3,(QStringList const &)*arg4,arg5,arg6,arg7,arg8));
  return cresult;
}


SWIGEXPORT QString *  GetItem1(QWidget * parent, QString * title, QString * label, QStringList * items, int current, bool editable, bool * ok) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QStringList *arg4 = 0 ;
  int arg5 ;
  bool arg6 ;
  bool *arg7 = (bool *) 0 ;
  QString *  cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = *(QStringList **)&items;
  arg5 = (int)current; 
  arg6 = editable ? true : false; 
  arg7 = *(bool **)&ok; 
  *(QString **)&cresult = new QString((const QString &)QInputDialog::getItem(arg1,(QString const &)*arg2,(QString const &)*arg3,(QStringList const &)*arg4,arg5,arg6,arg7));
  return cresult;
}


SWIGEXPORT QString *  GetItem2(QWidget * parent, QString * title, QString * label, QStringList * items, int current, bool editable) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QStringList *arg4 = 0 ;
  int arg5 ;
  bool arg6 ;
  QString *  cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = *(QStringList **)&items;
  arg5 = (int)current; 
  arg6 = editable ? true : false; 
  *(QString **)&cresult = new QString((const QString &)QInputDialog::getItem(arg1,(QString const &)*arg2,(QString const &)*arg3,(QStringList const &)*arg4,arg5,arg6));
  return cresult;
}


SWIGEXPORT QString *  GetItem3(QWidget * parent, QString * title, QString * label, QStringList * items, int current) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QStringList *arg4 = 0 ;
  int arg5 ;
  QString *  cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = *(QStringList **)&items;
  arg5 = (int)current; 
  *(QString **)&cresult = new QString((const QString &)QInputDialog::getItem(arg1,(QString const &)*arg2,(QString const &)*arg3,(QStringList const &)*arg4,arg5));
  return cresult;
}


SWIGEXPORT QString *  GetItem4(QWidget * parent, QString * title, QString * label, QStringList * items) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QStringList *arg4 = 0 ;
  QString *  cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = *(QStringList **)&items;
  *(QString **)&cresult = new QString((const QString &)QInputDialog::getItem(arg1,(QString const &)*arg2,(QString const &)*arg3,(QStringList const &)*arg4));
  return cresult;
}


SWIGEXPORT int GetInteger(QWidget * parent, QString * title, QString * label, int value, int minValue, int maxValue, int step, bool * ok, Qt::WindowFlags flags) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool *arg8 = (bool *) 0 ;
  Qt::WindowFlags arg9 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  arg5 = (int)minValue; 
  arg6 = (int)maxValue; 
  arg7 = (int)step; 
  arg8 = *(bool **)&ok; 
  arg9 = (Qt::WindowFlags)flags; 
  result = (int)QInputDialog::getInteger(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInteger1(QWidget * parent, QString * title, QString * label, int value, int minValue, int maxValue, int step, bool * ok) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  bool *arg8 = (bool *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  arg5 = (int)minValue; 
  arg6 = (int)maxValue; 
  arg7 = (int)step; 
  arg8 = *(bool **)&ok; 
  result = (int)QInputDialog::getInteger(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6,arg7,arg8);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInteger2(QWidget * parent, QString * title, QString * label, int value, int minValue, int maxValue, int step) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  arg5 = (int)minValue; 
  arg6 = (int)maxValue; 
  arg7 = (int)step; 
  result = (int)QInputDialog::getInteger(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6,arg7);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInteger3(QWidget * parent, QString * title, QString * label, int value, int minValue, int maxValue) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  arg5 = (int)minValue; 
  arg6 = (int)maxValue; 
  result = (int)QInputDialog::getInteger(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5,arg6);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInteger4(QWidget * parent, QString * title, QString * label, int value, int minValue) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int arg5 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  arg5 = (int)minValue; 
  result = (int)QInputDialog::getInteger(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4,arg5);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInteger5(QWidget * parent, QString * title, QString * label, int value) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  arg4 = (int)value; 
  result = (int)QInputDialog::getInteger(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int GetInteger6(QWidget * parent, QString * title, QString * label) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&title;
  arg3 = *(QString **)&label;
  result = (int)QInputDialog::getInteger(arg1,(QString const &)*arg2,(QString const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QInputDialog_done(QInputDialog * self, int result) {
  QInputDialog *arg1 = (QInputDialog *) 0 ;
  int arg2 ;
  
  arg1 = *(QInputDialog **)&self; 
  arg2 = (int)result; 
  (arg1)->done(arg2);
}


SWIGEXPORT long Modula3_QInputDialogToQDialog(long objectRef) {
    long baseptr = 0;
    *(QDialog **)&baseptr = *(QInputDialog **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

