/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qdialogbuttonbox.h>
#define StandardButtons QDialogButtonBox::StandardButtons


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QDialogButtonBox * New_QDialogButtonBox0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QDialogButtonBox *result = 0 ;
  QDialogButtonBox * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QDialogButtonBox *)new QDialogButtonBox(arg1);
  *(QDialogButtonBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDialogButtonBox * New_QDialogButtonBox1() {
  QDialogButtonBox *result = 0 ;
  QDialogButtonBox * cresult ;
  
  result = (QDialogButtonBox *)new QDialogButtonBox();
  *(QDialogButtonBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDialogButtonBox * New_QDialogButtonBox2(Qt::Orientation orientation, QWidget * parent) {
  Qt::Orientation arg1 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QDialogButtonBox *result = 0 ;
  QDialogButtonBox * cresult ;
  
  arg1 = (Qt::Orientation)orientation; 
  arg2 = *(QWidget **)&parent; 
  result = (QDialogButtonBox *)new QDialogButtonBox(arg1,arg2);
  *(QDialogButtonBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDialogButtonBox * New_QDialogButtonBox3(Qt::Orientation orientation) {
  Qt::Orientation arg1 ;
  QDialogButtonBox *result = 0 ;
  QDialogButtonBox * cresult ;
  
  arg1 = (Qt::Orientation)orientation; 
  result = (QDialogButtonBox *)new QDialogButtonBox(arg1);
  *(QDialogButtonBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDialogButtonBox * New_QDialogButtonBox4(StandardButtons buttons, Qt::Orientation orientation, QWidget * parent) {
  StandardButtons arg1 ;
  Qt::Orientation arg2 ;
  QWidget *arg3 = (QWidget *) 0 ;
  QDialogButtonBox *result = 0 ;
  QDialogButtonBox * cresult ;
  
  arg1 = (StandardButtons)buttons; 
  arg2 = (Qt::Orientation)orientation; 
  arg3 = *(QWidget **)&parent; 
  result = (QDialogButtonBox *)new QDialogButtonBox(arg1,arg2,arg3);
  *(QDialogButtonBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDialogButtonBox * New_QDialogButtonBox5(StandardButtons buttons, Qt::Orientation orientation) {
  StandardButtons arg1 ;
  Qt::Orientation arg2 ;
  QDialogButtonBox *result = 0 ;
  QDialogButtonBox * cresult ;
  
  arg1 = (StandardButtons)buttons; 
  arg2 = (Qt::Orientation)orientation; 
  result = (QDialogButtonBox *)new QDialogButtonBox(arg1,arg2);
  *(QDialogButtonBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDialogButtonBox * New_QDialogButtonBox6(StandardButtons buttons) {
  StandardButtons arg1 ;
  QDialogButtonBox *result = 0 ;
  QDialogButtonBox * cresult ;
  
  arg1 = (StandardButtons)buttons; 
  result = (QDialogButtonBox *)new QDialogButtonBox(arg1);
  *(QDialogButtonBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QDialogButtonBox(QDialogButtonBox * self) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  delete arg1;
}


SWIGEXPORT void QDialogButtonBox_setOrientation(QDialogButtonBox * self, Qt::Orientation orientation) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  Qt::Orientation arg2 ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  arg2 = (Qt::Orientation)orientation; 
  (arg1)->setOrientation(arg2);
}


SWIGEXPORT Qt::Orientation QDialogButtonBox_orientation(QDialogButtonBox const * self) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  Qt::Orientation result;
  Qt::Orientation cresult ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  result = (Qt::Orientation)((QDialogButtonBox const *)arg1)->orientation();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDialogButtonBox_addButton(QDialogButtonBox * self, QAbstractButton * button, QDialogButtonBox::ButtonRole role) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  QAbstractButton *arg2 = (QAbstractButton *) 0 ;
  QDialogButtonBox::ButtonRole arg3 ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  arg2 = *(QAbstractButton **)&button; 
  arg3 = (QDialogButtonBox::ButtonRole)role; 
  (arg1)->addButton(arg2,arg3);
}


SWIGEXPORT QPushButton * QDialogButtonBox_addButton1(QDialogButtonBox * self, QString * text, QDialogButtonBox::ButtonRole role) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  QString *arg2 = 0 ;
  QDialogButtonBox::ButtonRole arg3 ;
  QPushButton *result = 0 ;
  QPushButton * cresult ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  arg2 = *(QString **)&text;
  arg3 = (QDialogButtonBox::ButtonRole)role; 
  result = (QPushButton *)(arg1)->addButton((QString const &)*arg2,arg3);
  *(QPushButton **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPushButton * QDialogButtonBox_addButton2(QDialogButtonBox * self, QDialogButtonBox::StandardButton button) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  QDialogButtonBox::StandardButton arg2 ;
  QPushButton *result = 0 ;
  QPushButton * cresult ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  arg2 = (QDialogButtonBox::StandardButton)button; 
  result = (QPushButton *)(arg1)->addButton(arg2);
  *(QPushButton **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QDialogButtonBox_removeButton(QDialogButtonBox * self, QAbstractButton * button) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  QAbstractButton *arg2 = (QAbstractButton *) 0 ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  arg2 = *(QAbstractButton **)&button; 
  (arg1)->removeButton(arg2);
}


SWIGEXPORT void QDialogButtonBox_clear(QDialogButtonBox * self) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  (arg1)->clear();
}


SWIGEXPORT QDialogButtonBox::ButtonRole QDialogButtonBox_buttonRole(QDialogButtonBox const * self, QAbstractButton * button) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  QAbstractButton *arg2 = (QAbstractButton *) 0 ;
  QDialogButtonBox::ButtonRole result;
  QDialogButtonBox::ButtonRole cresult ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  arg2 = *(QAbstractButton **)&button; 
  result = (QDialogButtonBox::ButtonRole)((QDialogButtonBox const *)arg1)->buttonRole(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDialogButtonBox_setStandardButtons(QDialogButtonBox * self, StandardButtons buttons) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  StandardButtons arg2 ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  arg2 = (StandardButtons)buttons; 
  (arg1)->setStandardButtons(arg2);
}


SWIGEXPORT StandardButtons QDialogButtonBox_standardButtons(QDialogButtonBox const * self) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  StandardButtons cresult ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  *(StandardButtons **)&cresult = new StandardButtons((const StandardButtons &)((QDialogButtonBox const *)arg1)->standardButtons());
  return cresult;
}


SWIGEXPORT QDialogButtonBox::StandardButton QDialogButtonBox_standardButton(QDialogButtonBox const * self, QAbstractButton * button) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  QAbstractButton *arg2 = (QAbstractButton *) 0 ;
  QDialogButtonBox::StandardButton result;
  QDialogButtonBox::StandardButton cresult ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  arg2 = *(QAbstractButton **)&button; 
  result = (QDialogButtonBox::StandardButton)((QDialogButtonBox const *)arg1)->standardButton(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPushButton * QDialogButtonBox_button(QDialogButtonBox const * self, QDialogButtonBox::StandardButton which) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  QDialogButtonBox::StandardButton arg2 ;
  QPushButton *result = 0 ;
  QPushButton * cresult ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  arg2 = (QDialogButtonBox::StandardButton)which; 
  result = (QPushButton *)((QDialogButtonBox const *)arg1)->button(arg2);
  *(QPushButton **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QDialogButtonBox_setCenterButtons(QDialogButtonBox * self, bool center) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  bool arg2 ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  arg2 = center ? true : false; 
  (arg1)->setCenterButtons(arg2);
}


SWIGEXPORT bool QDialogButtonBox_centerButtons(QDialogButtonBox const * self) {
  QDialogButtonBox *arg1 = (QDialogButtonBox *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDialogButtonBox **)&self; 
  result = (bool)((QDialogButtonBox const *)arg1)->centerButtons();
  cresult = result; 
  return cresult;
}


SWIGEXPORT long Modula3_QDialogButtonBoxToQWidget(long objectRef) {
    long baseptr = 0;
    *(QWidget **)&baseptr = *(QDialogButtonBox **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

