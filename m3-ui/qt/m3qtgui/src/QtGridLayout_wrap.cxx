/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qgridlayout.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QGridLayout * New_QGridLayout0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QGridLayout *result = 0 ;
  QGridLayout * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QGridLayout *)new QGridLayout(arg1);
  *(QGridLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QGridLayout * New_QGridLayout1() {
  QGridLayout *result = 0 ;
  QGridLayout * cresult ;
  
  result = (QGridLayout *)new QGridLayout();
  *(QGridLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QGridLayout(QGridLayout * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  
  arg1 = *(QGridLayout **)&self; 
  delete arg1;
}


SWIGEXPORT QSize * QGridLayout_sizeHint(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QGridLayout const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QSize * QGridLayout_minimumSize(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QGridLayout const *)arg1)->minimumSize());
  return cresult;
}


SWIGEXPORT QSize * QGridLayout_maximumSize(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QGridLayout const *)arg1)->maximumSize());
  return cresult;
}


SWIGEXPORT void QGridLayout_setHorizontalSpacing(QGridLayout * self, int spacing) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)spacing; 
  (arg1)->setHorizontalSpacing(arg2);
}


SWIGEXPORT int QGridLayout_horizontalSpacing(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  result = (int)((QGridLayout const *)arg1)->horizontalSpacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGridLayout_setVerticalSpacing(QGridLayout * self, int spacing) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)spacing; 
  (arg1)->setVerticalSpacing(arg2);
}


SWIGEXPORT int QGridLayout_verticalSpacing(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  result = (int)((QGridLayout const *)arg1)->verticalSpacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGridLayout_setSpacing(QGridLayout * self, int spacing) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)spacing; 
  (arg1)->setSpacing(arg2);
}


SWIGEXPORT int QGridLayout_spacing(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  result = (int)((QGridLayout const *)arg1)->spacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGridLayout_setRowStretch(QGridLayout * self, int row, int stretch) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)row; 
  arg3 = (int)stretch; 
  (arg1)->setRowStretch(arg2,arg3);
}


SWIGEXPORT void QGridLayout_setColumnStretch(QGridLayout * self, int column, int stretch) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)column; 
  arg3 = (int)stretch; 
  (arg1)->setColumnStretch(arg2,arg3);
}


SWIGEXPORT int QGridLayout_rowStretch(QGridLayout const * self, int row) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)row; 
  result = (int)((QGridLayout const *)arg1)->rowStretch(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QGridLayout_columnStretch(QGridLayout const * self, int column) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)column; 
  result = (int)((QGridLayout const *)arg1)->columnStretch(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGridLayout_setRowMinimumHeight(QGridLayout * self, int row, int minSize) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)row; 
  arg3 = (int)minSize; 
  (arg1)->setRowMinimumHeight(arg2,arg3);
}


SWIGEXPORT void QGridLayout_setColumnMinimumWidth(QGridLayout * self, int column, int minSize) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)column; 
  arg3 = (int)minSize; 
  (arg1)->setColumnMinimumWidth(arg2,arg3);
}


SWIGEXPORT int QGridLayout_rowMinimumHeight(QGridLayout const * self, int row) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)row; 
  result = (int)((QGridLayout const *)arg1)->rowMinimumHeight(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QGridLayout_columnMinimumWidth(QGridLayout const * self, int column) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)column; 
  result = (int)((QGridLayout const *)arg1)->columnMinimumWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QGridLayout_columnCount(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  result = (int)((QGridLayout const *)arg1)->columnCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QGridLayout_rowCount(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  result = (int)((QGridLayout const *)arg1)->rowCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QGridLayout_cellRect(QGridLayout const * self, int row, int column) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int arg3 ;
  QRect * cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  *(QRect **)&cresult = new QRect((const QRect &)((QGridLayout const *)arg1)->cellRect(arg2,arg3));
  return cresult;
}


SWIGEXPORT bool QGridLayout_hasHeightForWidth(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  result = (bool)((QGridLayout const *)arg1)->hasHeightForWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QGridLayout_heightForWidth(QGridLayout const * self, int m3arg2) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)m3arg2; 
  result = (int)((QGridLayout const *)arg1)->heightForWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QGridLayout_minimumHeightForWidth(QGridLayout const * self, int m3arg2) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)m3arg2; 
  result = (int)((QGridLayout const *)arg1)->minimumHeightForWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::Orientations QGridLayout_expandingDirections(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  Qt::Orientations cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  *(Qt::Orientations **)&cresult = new Qt::Orientations((const Qt::Orientations &)((QGridLayout const *)arg1)->expandingDirections());
  return cresult;
}


SWIGEXPORT void QGridLayout_invalidate(QGridLayout * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  
  arg1 = *(QGridLayout **)&self; 
  (arg1)->invalidate();
}


SWIGEXPORT void QGridLayout_addWidget(QGridLayout * self, QWidget * w) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QWidget **)&w; 
  (arg1)->addWidget(arg2);
}


SWIGEXPORT void QGridLayout_addWidget1(QGridLayout * self, QWidget * m3arg2, int row, int column, Qt::Alignment m3arg5) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int arg3 ;
  int arg4 ;
  Qt::Alignment arg5 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  arg5 = (Qt::Alignment)m3arg5; 
  (arg1)->addWidget(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QGridLayout_addWidget2(QGridLayout * self, QWidget * m3arg2, int row, int column) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  (arg1)->addWidget(arg2,arg3,arg4);
}


SWIGEXPORT void QGridLayout_addWidget3(QGridLayout * self, QWidget * m3arg2, int row, int column, int rowSpan, int columnSpan, Qt::Alignment m3arg7) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Qt::Alignment arg7 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  arg5 = (int)rowSpan; 
  arg6 = (int)columnSpan; 
  arg7 = (Qt::Alignment)m3arg7; 
  (arg1)->addWidget(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QGridLayout_addWidget4(QGridLayout * self, QWidget * m3arg2, int row, int column, int rowSpan, int columnSpan) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  arg5 = (int)rowSpan; 
  arg6 = (int)columnSpan; 
  (arg1)->addWidget(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QGridLayout_addLayout(QGridLayout * self, QLayout * m3arg2, int row, int column, Qt::Alignment m3arg5) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  int arg3 ;
  int arg4 ;
  Qt::Alignment arg5 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QLayout **)&m3arg2; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  arg5 = (Qt::Alignment)m3arg5; 
  (arg1)->addLayout(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QGridLayout_addLayout1(QGridLayout * self, QLayout * m3arg2, int row, int column) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QLayout **)&m3arg2; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  (arg1)->addLayout(arg2,arg3,arg4);
}


SWIGEXPORT void QGridLayout_addLayout2(QGridLayout * self, QLayout * m3arg2, int row, int column, int rowSpan, int columnSpan, Qt::Alignment m3arg7) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Qt::Alignment arg7 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QLayout **)&m3arg2; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  arg5 = (int)rowSpan; 
  arg6 = (int)columnSpan; 
  arg7 = (Qt::Alignment)m3arg7; 
  (arg1)->addLayout(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QGridLayout_addLayout3(QGridLayout * self, QLayout * m3arg2, int row, int column, int rowSpan, int columnSpan) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QLayout **)&m3arg2; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  arg5 = (int)rowSpan; 
  arg6 = (int)columnSpan; 
  (arg1)->addLayout(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QGridLayout_setOriginCorner(QGridLayout * self, Qt::Corner m3arg2) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  Qt::Corner arg2 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (Qt::Corner)m3arg2; 
  (arg1)->setOriginCorner(arg2);
}


SWIGEXPORT Qt::Corner QGridLayout_originCorner(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  Qt::Corner result;
  Qt::Corner cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  result = (Qt::Corner)((QGridLayout const *)arg1)->originCorner();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QLayoutItem * QGridLayout_itemAt(QGridLayout const * self, int index) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  QLayoutItem *result = 0 ;
  QLayoutItem * cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)index; 
  result = (QLayoutItem *)((QGridLayout const *)arg1)->itemAt(arg2);
  *(QLayoutItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLayoutItem * QGridLayout_itemAtPosition(QGridLayout const * self, int row, int column) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int arg3 ;
  QLayoutItem *result = 0 ;
  QLayoutItem * cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  result = (QLayoutItem *)((QGridLayout const *)arg1)->itemAtPosition(arg2,arg3);
  *(QLayoutItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLayoutItem * QGridLayout_takeAt(QGridLayout * self, int index) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  QLayoutItem *result = 0 ;
  QLayoutItem * cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)index; 
  result = (QLayoutItem *)(arg1)->takeAt(arg2);
  *(QLayoutItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QGridLayout_count(QGridLayout const * self) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QGridLayout **)&self; 
  result = (int)((QGridLayout const *)arg1)->count();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGridLayout_setGeometry(QGridLayout * self, QRect * m3arg2) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QRect **)&m3arg2;
  (arg1)->setGeometry((QRect const &)*arg2);
}


SWIGEXPORT void QGridLayout_addItem(QGridLayout * self, QLayoutItem * item, int row, int column, int rowSpan, int columnSpan, Qt::Alignment m3arg7) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QLayoutItem *arg2 = (QLayoutItem *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Qt::Alignment arg7 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QLayoutItem **)&item; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  arg5 = (int)rowSpan; 
  arg6 = (int)columnSpan; 
  arg7 = (Qt::Alignment)m3arg7; 
  (arg1)->addItem(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QGridLayout_addItem1(QGridLayout * self, QLayoutItem * item, int row, int column, int rowSpan, int columnSpan) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QLayoutItem *arg2 = (QLayoutItem *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QLayoutItem **)&item; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  arg5 = (int)rowSpan; 
  arg6 = (int)columnSpan; 
  (arg1)->addItem(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QGridLayout_addItem2(QGridLayout * self, QLayoutItem * item, int row, int column, int rowSpan) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QLayoutItem *arg2 = (QLayoutItem *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QLayoutItem **)&item; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  arg5 = (int)rowSpan; 
  (arg1)->addItem(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QGridLayout_addItem3(QGridLayout * self, QLayoutItem * item, int row, int column) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  QLayoutItem *arg2 = (QLayoutItem *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = *(QLayoutItem **)&item; 
  arg3 = (int)row; 
  arg4 = (int)column; 
  (arg1)->addItem(arg2,arg3,arg4);
}


SWIGEXPORT void QGridLayout_setDefaultPositioning(QGridLayout * self, int n, Qt::Orientation orient) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  Qt::Orientation arg3 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)n; 
  arg3 = (Qt::Orientation)orient; 
  (arg1)->setDefaultPositioning(arg2,arg3);
}


SWIGEXPORT void QGridLayout_getItemPosition(QGridLayout * self, int idx, int * row, int * column, int * rowSpan, int * columnSpan) {
  QGridLayout *arg1 = (QGridLayout *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  
  arg1 = *(QGridLayout **)&self; 
  arg2 = (int)idx; 
  arg3 = *(int **)&row; 
  arg4 = *(int **)&column; 
  arg5 = *(int **)&rowSpan; 
  arg6 = *(int **)&columnSpan; 
  (arg1)->getItemPosition(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT long Modula3_QGridLayoutToQLayout(long objectRef) {
    long baseptr = 0;
    *(QLayout **)&baseptr = *(QGridLayout **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

