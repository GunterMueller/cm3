(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtBrush;


FROM QtImage IMPORT QImage;
FROM QtPixmap IMPORT QPixmap;
FROM QtColor IMPORT QColor;
FROM QtMatrix IMPORT QMatrix;
FROM QGuiStubs IMPORT QGradientStops;
IMPORT QtBrushRaw;
FROM QtTransform IMPORT QTransform;
FROM QtPoint IMPORT QPointF;
FROM QtNamespace IMPORT BrushStyle,GlobalColor;


IMPORT WeakRef;

PROCEDURE New_QBrush0 (self:QBrush;): QBrush =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QBrush0();

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush0;

PROCEDURE New_QBrush1 (self:QBrush;bs: BrushStyle;
): QBrush =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QBrush1(ORD(bs));

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush1;

PROCEDURE New_QBrush2 (self:QBrush; color: QColor;
bs: BrushStyle;
): QBrush =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(color.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QBrush2(arg1tmp, ORD(bs));

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush2;

PROCEDURE New_QBrush3 (self:QBrush; color: QColor;
): QBrush =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(color.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QBrush3(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush3;

PROCEDURE New_QBrush4 (self:QBrush;color: GlobalColor;
bs: BrushStyle;
): QBrush =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QBrush4(ORD(color), ORD(bs));

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush4;

PROCEDURE New_QBrush5 (self:QBrush;color: GlobalColor;
): QBrush =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QBrush5(ORD(color));

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush5;

PROCEDURE New_QBrush6 (self:QBrush; color: QColor;
 pixmap: QPixmap;
): QBrush =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(color.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(pixmap.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QBrush6(arg1tmp, arg2tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush6;

PROCEDURE New_QBrush7 (self:QBrush;color: GlobalColor;
 pixmap: QPixmap;
): QBrush =
VAR
result : ADDRESS;
arg2tmp :=  LOOPHOLE(pixmap.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QBrush7(ORD(color), arg2tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush7;

PROCEDURE New_QBrush8 (self:QBrush; pixmap: QPixmap;
): QBrush =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(pixmap.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QBrush8(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush8;

PROCEDURE New_QBrush9 (self:QBrush; image: QImage;
): QBrush =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(image.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QBrush9(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush9;

PROCEDURE New_QBrush10 (self:QBrush; brush: QBrush;
): QBrush =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(brush.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QBrush10(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush10;

PROCEDURE New_QBrush11 (self:QBrush; gradient: QGradient;
): QBrush =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(gradient.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QBrush11(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);

RETURN self;
END New_QBrush11;

PROCEDURE Delete_QBrush ( self: QBrush;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.Delete_QBrush(selfAdr);
END Delete_QBrush;

PROCEDURE QBrush_Op_Brush_Assign ( self, brush: QBrush;
): QBrush =
VAR
ret:ADDRESS; result : QBrush;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(brush.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QBrush_Op_Brush_Assign(selfAdr, arg2tmp);

IF ISTYPE(result,QBrush) AND ret = selfAdr THEN
  result := LOOPHOLE(self,QBrush);
ELSE
  result := NEW(QBrush);
  result.cxxObj := ret;
  result.destroyCxx();
END;

RETURN result;
END QBrush_Op_Brush_Assign;

PROCEDURE QBrush_style ( self: QBrush;
): BrushStyle =
VAR
ret:INTEGER; result : BrushStyle;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QBrush_style(selfAdr);
result := VAL(ret,BrushStyle);  
RETURN result;
END QBrush_style;

PROCEDURE QBrush_setStyle ( self: QBrush;
arg2: BrushStyle;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QBrush_setStyle(selfAdr, ORD(arg2));
END QBrush_setStyle;

PROCEDURE QBrush_matrix ( self: QBrush;
): QMatrix =
VAR
ret:ADDRESS; result : QMatrix;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QBrush_matrix(selfAdr);

  result := NEW(QMatrix);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QBrush_matrix;

PROCEDURE QBrush_setMatrix ( self: QBrush;
 mat: QMatrix;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(mat.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QBrush_setMatrix(selfAdr, arg2tmp);
END QBrush_setMatrix;

PROCEDURE QBrush_transform ( self: QBrush;
): QTransform =
VAR
ret:ADDRESS; result : QTransform;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QBrush_transform(selfAdr);

  result := NEW(QTransform);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QBrush_transform;

PROCEDURE QBrush_setTransform ( self: QBrush;
 arg2: QTransform;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(arg2.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QBrush_setTransform(selfAdr, arg2tmp);
END QBrush_setTransform;

PROCEDURE QBrush_texture ( self: QBrush;
): QPixmap =
VAR
ret:ADDRESS; result : QPixmap;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QBrush_texture(selfAdr);

  result := NEW(QPixmap);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QBrush_texture;

PROCEDURE QBrush_setTexture ( self: QBrush;
 pixmap: QPixmap;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(pixmap.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QBrush_setTexture(selfAdr, arg2tmp);
END QBrush_setTexture;

PROCEDURE QBrush_textureImage ( self: QBrush;
): QImage =
VAR
ret:ADDRESS; result : QImage;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QBrush_textureImage(selfAdr);

  result := NEW(QImage);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QBrush_textureImage;

PROCEDURE QBrush_setTextureImage ( self: QBrush;
 image: QImage;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(image.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QBrush_setTextureImage(selfAdr, arg2tmp);
END QBrush_setTextureImage;

PROCEDURE QBrush_color ( self: QBrush;
): QColor =
VAR
ret:ADDRESS; result : QColor;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QBrush_color(selfAdr);

  result := NEW(QColor);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QBrush_color;

PROCEDURE QBrush_setColor ( self: QBrush;
 color: QColor;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(color.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QBrush_setColor(selfAdr, arg2tmp);
END QBrush_setColor;

PROCEDURE QBrush_setColor1 ( self: QBrush;
color: GlobalColor;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QBrush_setColor1(selfAdr, ORD(color));
END QBrush_setColor1;

PROCEDURE QBrush_gradient ( self: QBrush;
): QGradient =
VAR
ret:ADDRESS; result : QGradient;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QBrush_gradient(selfAdr);

  result := NEW(QGradient);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QBrush_gradient;

PROCEDURE QBrush_isOpaque ( self: QBrush;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtBrushRaw.QBrush_isOpaque(selfAdr);
END QBrush_isOpaque;

PROCEDURE QBrush_Op_Brush_Equals ( self, b: QBrush;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(b.cxxObj,ADDRESS);
BEGIN
RETURN QtBrushRaw.QBrush_Op_Brush_Equals(selfAdr, arg2tmp);
END QBrush_Op_Brush_Equals;

PROCEDURE QBrush_Op_Brush_NotEquals ( self, b: QBrush;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(b.cxxObj,ADDRESS);
BEGIN
RETURN QtBrushRaw.QBrush_Op_Brush_NotEquals(selfAdr, arg2tmp);
END QBrush_Op_Brush_NotEquals;

PROCEDURE QBrush_isDetached ( self: QBrush;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtBrushRaw.QBrush_isDetached(selfAdr);
END QBrush_isDetached;

PROCEDURE Cleanup_QBrush(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QBrush := ref;
BEGIN
  Delete_QBrush(obj);
 END Cleanup_QBrush;

PROCEDURE Destroy_QBrush(self : QBrush) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QBrush);
END Destroy_QBrush;

REVEAL
QBrush =
QBrushPublic BRANDED OBJECT
OVERRIDES
init_0 := New_QBrush0;
init_1 := New_QBrush1;
init_2 := New_QBrush2;
init_3 := New_QBrush3;
init_4 := New_QBrush4;
init_5 := New_QBrush5;
init_6 := New_QBrush6;
init_7 := New_QBrush7;
init_8 := New_QBrush8;
init_9 := New_QBrush9;
init_10 := New_QBrush10;
init_11 := New_QBrush11;
Op_Brush_Assign := QBrush_Op_Brush_Assign;
style := QBrush_style;
setStyle := QBrush_setStyle;
matrix := QBrush_matrix;
setMatrix := QBrush_setMatrix;
transform := QBrush_transform;
setTransform := QBrush_setTransform;
texture := QBrush_texture;
setTexture := QBrush_setTexture;
textureImage := QBrush_textureImage;
setTextureImage := QBrush_setTextureImage;
color := QBrush_color;
setColor := QBrush_setColor;
setColor1 := QBrush_setColor1;
gradient := QBrush_gradient;
isOpaque := QBrush_isOpaque;
Op_Brush_Equals := QBrush_Op_Brush_Equals;
Op_Brush_NotEquals := QBrush_Op_Brush_NotEquals;
isDetached := QBrush_isDetached;
destroyCxx := Destroy_QBrush;
END;

PROCEDURE New_QGradient0 (self:QGradient;): QGradient =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QGradient0();

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QGradient);

RETURN self;
END New_QGradient0;

PROCEDURE QGradient_type ( self: QGradient;
): Type =
VAR
ret:INTEGER; result : Type;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QGradient_type(selfAdr);
result := VAL(ret,Type);  
RETURN result;
END QGradient_type;

PROCEDURE QGradient_setSpread ( self: QGradient;
spread: Spread;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QGradient_setSpread(selfAdr, ORD(spread));
END QGradient_setSpread;

PROCEDURE QGradient_spread ( self: QGradient;
): Spread =
VAR
ret:INTEGER; result : Spread;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QGradient_spread(selfAdr);
result := VAL(ret,Spread);  
RETURN result;
END QGradient_spread;

PROCEDURE QGradient_setColorAt ( self: QGradient;
pos: LONGREAL;
 color: QColor;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(color.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QGradient_setColorAt(selfAdr, pos, arg3tmp);
END QGradient_setColorAt;

PROCEDURE QGradient_setStops ( self: QGradient;
 stops: QGradientStops;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(stops.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QGradient_setStops(selfAdr, arg2tmp);
END QGradient_setStops;

PROCEDURE QGradient_stops ( self: QGradient;
): QGradientStops =
VAR
ret:ADDRESS; result : QGradientStops;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QGradient_stops(selfAdr);

  result := NEW(QGradientStops);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QGradient_stops;

PROCEDURE QGradient_coordinateMode ( self: QGradient;
): CoordinateMode =
VAR
ret:INTEGER; result : CoordinateMode;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QGradient_coordinateMode(selfAdr);
result := VAL(ret,CoordinateMode);  
RETURN result;
END QGradient_coordinateMode;

PROCEDURE QGradient_setCoordinateMode ( self: QGradient;
mode: CoordinateMode;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QGradient_setCoordinateMode(selfAdr, ORD(mode));
END QGradient_setCoordinateMode;

PROCEDURE QGradient_interpolationMode ( self: QGradient;
): InterpolationMode =
VAR
ret:INTEGER; result : InterpolationMode;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QGradient_interpolationMode(selfAdr);
result := VAL(ret,InterpolationMode);  
RETURN result;
END QGradient_interpolationMode;

PROCEDURE QGradient_setInterpolationMode ( self: QGradient;
mode: InterpolationMode;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QGradient_setInterpolationMode(selfAdr, ORD(mode));
END QGradient_setInterpolationMode;

PROCEDURE QGradient_Op_Grad_Equals ( self, gradient: QGradient;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(gradient.cxxObj,ADDRESS);
BEGIN
RETURN QtBrushRaw.QGradient_Op_Grad_Equals(selfAdr, arg2tmp);
END QGradient_Op_Grad_Equals;

PROCEDURE QGradient_OpGrad_NotEquals ( self, other: QGradient;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(other.cxxObj,ADDRESS);
BEGIN
RETURN QtBrushRaw.QGradient_OpGrad_NotEquals(selfAdr, arg2tmp);
END QGradient_OpGrad_NotEquals;

PROCEDURE QGradient_Op_Grad_Equals1 ( self, gradient: QGradient;
): BOOLEAN =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(gradient.cxxObj,ADDRESS);
BEGIN
RETURN QtBrushRaw.QGradient_Op_Grad_Equals1(selfAdr, arg2tmp);
END QGradient_Op_Grad_Equals1;

PROCEDURE Delete_QGradient ( self: QGradient;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.Delete_QGradient(selfAdr);
END Delete_QGradient;

PROCEDURE Cleanup_QGradient(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QGradient := ref;
BEGIN
  Delete_QGradient(obj);
 END Cleanup_QGradient;

PROCEDURE Destroy_QGradient(self : QGradient) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QGradient);
END Destroy_QGradient;

REVEAL
QGradient =
QGradientPublic BRANDED OBJECT
OVERRIDES
init_0 := New_QGradient0;
type := QGradient_type;
setSpread := QGradient_setSpread;
spread := QGradient_spread;
setColorAt := QGradient_setColorAt;
setStops := QGradient_setStops;
stops := QGradient_stops;
coordinateMode := QGradient_coordinateMode;
setCoordinateMode := QGradient_setCoordinateMode;
interpolationMode := QGradient_interpolationMode;
setInterpolationMode := QGradient_setInterpolationMode;
Op_Grad_Equals := QGradient_Op_Grad_Equals;
OpGrad_NotEquals := QGradient_OpGrad_NotEquals;
Op_Grad_Equals1 := QGradient_Op_Grad_Equals1;
destroyCxx := Destroy_QGradient;
END;

PROCEDURE New_QLinearGradient0 (self:QLinearGradient;): QLinearGradient =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QLinearGradient0();

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QLinearGradient);

RETURN self;
END New_QLinearGradient0;

PROCEDURE New_QLinearGradient1 (self:QLinearGradient; start, finalStop: QPointF;
): QLinearGradient =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(start.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(finalStop.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QLinearGradient1(arg1tmp, arg2tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QLinearGradient);

RETURN self;
END New_QLinearGradient1;

PROCEDURE New_QLinearGradient2 (self:QLinearGradient;xStart, yStart, xFinalStop, yFinalStop: LONGREAL;
): QLinearGradient =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QLinearGradient2(xStart, yStart, xFinalStop, yFinalStop);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QLinearGradient);

RETURN self;
END New_QLinearGradient2;

PROCEDURE QLinearGradient_start ( self: QLinearGradient;
): QPointF =
VAR
ret:ADDRESS; result : QPointF;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QLinearGradient_start(selfAdr);

  result := NEW(QPointF);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QLinearGradient_start;

PROCEDURE QLinearGradient_setStart ( self: QLinearGradient;
 start: QPointF;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(start.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QLinearGradient_setStart(selfAdr, arg2tmp);
END QLinearGradient_setStart;

PROCEDURE QLinearGradient_setStart1 ( self: QLinearGradient;
x, y: LONGREAL;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QLinearGradient_setStart1(selfAdr, x, y);
END QLinearGradient_setStart1;

PROCEDURE QLinearGradient_finalStop ( self: QLinearGradient;
): QPointF =
VAR
ret:ADDRESS; result : QPointF;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QLinearGradient_finalStop(selfAdr);

  result := NEW(QPointF);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QLinearGradient_finalStop;

PROCEDURE QLinearGradient_setFinalStop ( self: QLinearGradient;
 stop: QPointF;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(stop.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QLinearGradient_setFinalStop(selfAdr, arg2tmp);
END QLinearGradient_setFinalStop;

PROCEDURE QLinearGradient_setFinalStop1 ( self: QLinearGradient;
x, y: LONGREAL;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QLinearGradient_setFinalStop1(selfAdr, x, y);
END QLinearGradient_setFinalStop1;

PROCEDURE Delete_QLinearGradient ( self: QLinearGradient;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.Delete_QLinearGradient(selfAdr);
END Delete_QLinearGradient;

PROCEDURE Cleanup_QLinearGradient(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QLinearGradient := ref;
BEGIN
  Delete_QLinearGradient(obj);
 END Cleanup_QLinearGradient;

PROCEDURE Destroy_QLinearGradient(self : QLinearGradient) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QLinearGradient);
END Destroy_QLinearGradient;

REVEAL
QLinearGradient =
QLinearGradientPublic BRANDED OBJECT
OVERRIDES
init_0 := New_QLinearGradient0;
init_1 := New_QLinearGradient1;
init_2 := New_QLinearGradient2;
start := QLinearGradient_start;
setStart := QLinearGradient_setStart;
setStart1 := QLinearGradient_setStart1;
finalStop := QLinearGradient_finalStop;
setFinalStop := QLinearGradient_setFinalStop;
setFinalStop1 := QLinearGradient_setFinalStop1;
destroyCxx := Destroy_QLinearGradient;
END;

PROCEDURE New_QRadialGradient0 (self:QRadialGradient;): QRadialGradient =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QRadialGradient0();

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QRadialGradient);

RETURN self;
END New_QRadialGradient0;

PROCEDURE New_QRadialGradient1 (self:QRadialGradient; center: QPointF;
radius: LONGREAL;
 focalPoint: QPointF;
): QRadialGradient =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(center.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(focalPoint.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QRadialGradient1(arg1tmp, radius, arg3tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QRadialGradient);

RETURN self;
END New_QRadialGradient1;

PROCEDURE New_QRadialGradient2 (self:QRadialGradient;cx, cy, radius, fx, fy: LONGREAL;
): QRadialGradient =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QRadialGradient2(cx, cy, radius, fx, fy);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QRadialGradient);

RETURN self;
END New_QRadialGradient2;

PROCEDURE New_QRadialGradient3 (self:QRadialGradient; center: QPointF;
radius: LONGREAL;
): QRadialGradient =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(center.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QRadialGradient3(arg1tmp, radius);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QRadialGradient);

RETURN self;
END New_QRadialGradient3;

PROCEDURE New_QRadialGradient4 (self:QRadialGradient;cx, cy, radius: LONGREAL;
): QRadialGradient =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QRadialGradient4(cx, cy, radius);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QRadialGradient);

RETURN self;
END New_QRadialGradient4;

PROCEDURE QRadialGradient_center ( self: QRadialGradient;
): QPointF =
VAR
ret:ADDRESS; result : QPointF;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QRadialGradient_center(selfAdr);

  result := NEW(QPointF);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QRadialGradient_center;

PROCEDURE QRadialGradient_setCenter ( self: QRadialGradient;
 center: QPointF;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(center.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QRadialGradient_setCenter(selfAdr, arg2tmp);
END QRadialGradient_setCenter;

PROCEDURE QRadialGradient_setCenter1 ( self: QRadialGradient;
x, y: LONGREAL;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QRadialGradient_setCenter1(selfAdr, x, y);
END QRadialGradient_setCenter1;

PROCEDURE QRadialGradient_focalPoint ( self: QRadialGradient;
): QPointF =
VAR
ret:ADDRESS; result : QPointF;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QRadialGradient_focalPoint(selfAdr);

  result := NEW(QPointF);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QRadialGradient_focalPoint;

PROCEDURE QRadialGradient_setFocalPoint ( self: QRadialGradient;
 focalPoint: QPointF;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(focalPoint.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QRadialGradient_setFocalPoint(selfAdr, arg2tmp);
END QRadialGradient_setFocalPoint;

PROCEDURE QRadialGradient_setFocalPoint1 ( self: QRadialGradient;
x, y: LONGREAL;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QRadialGradient_setFocalPoint1(selfAdr, x, y);
END QRadialGradient_setFocalPoint1;

PROCEDURE QRadialGradient_radius ( self: QRadialGradient;
): LONGREAL =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtBrushRaw.QRadialGradient_radius(selfAdr);
END QRadialGradient_radius;

PROCEDURE QRadialGradient_setRadius ( self: QRadialGradient;
radius: LONGREAL;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QRadialGradient_setRadius(selfAdr, radius);
END QRadialGradient_setRadius;

PROCEDURE Delete_QRadialGradient ( self: QRadialGradient;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.Delete_QRadialGradient(selfAdr);
END Delete_QRadialGradient;

PROCEDURE Cleanup_QRadialGradient(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QRadialGradient := ref;
BEGIN
  Delete_QRadialGradient(obj);
 END Cleanup_QRadialGradient;

PROCEDURE Destroy_QRadialGradient(self : QRadialGradient) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QRadialGradient);
END Destroy_QRadialGradient;

REVEAL
QRadialGradient =
QRadialGradientPublic BRANDED OBJECT
OVERRIDES
init_0 := New_QRadialGradient0;
init_1 := New_QRadialGradient1;
init_2 := New_QRadialGradient2;
init_3 := New_QRadialGradient3;
init_4 := New_QRadialGradient4;
center := QRadialGradient_center;
setCenter := QRadialGradient_setCenter;
setCenter1 := QRadialGradient_setCenter1;
focalPoint := QRadialGradient_focalPoint;
setFocalPoint := QRadialGradient_setFocalPoint;
setFocalPoint1 := QRadialGradient_setFocalPoint1;
radius := QRadialGradient_radius;
setRadius := QRadialGradient_setRadius;
destroyCxx := Destroy_QRadialGradient;
END;

PROCEDURE New_QConicalGradient0 (self:QConicalGradient;): QConicalGradient =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QConicalGradient0();

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QConicalGradient);

RETURN self;
END New_QConicalGradient0;

PROCEDURE New_QConicalGradient1 (self:QConicalGradient; center: QPointF;
startAngle: LONGREAL;
): QConicalGradient =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(center.cxxObj,ADDRESS);
BEGIN
result := QtBrushRaw.New_QConicalGradient1(arg1tmp, startAngle);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QConicalGradient);

RETURN self;
END New_QConicalGradient1;

PROCEDURE New_QConicalGradient2 (self:QConicalGradient;cx, cy, startAngle: LONGREAL;
): QConicalGradient =
VAR
result : ADDRESS;
BEGIN
result := QtBrushRaw.New_QConicalGradient2(cx, cy, startAngle);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QConicalGradient);

RETURN self;
END New_QConicalGradient2;

PROCEDURE QConicalGradient_center ( self: QConicalGradient;
): QPointF =
VAR
ret:ADDRESS; result : QPointF;
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtBrushRaw.QConicalGradient_center(selfAdr);

  result := NEW(QPointF);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QConicalGradient_center;

PROCEDURE QConicalGradient_setCenter ( self: QConicalGradient;
 center: QPointF;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(center.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QConicalGradient_setCenter(selfAdr, arg2tmp);
END QConicalGradient_setCenter;

PROCEDURE QConicalGradient_setCenter1 ( self: QConicalGradient;
x, y: LONGREAL;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QConicalGradient_setCenter1(selfAdr, x, y);
END QConicalGradient_setCenter1;

PROCEDURE QConicalGradient_angle ( self: QConicalGradient;
): LONGREAL =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtBrushRaw.QConicalGradient_angle(selfAdr);
END QConicalGradient_angle;

PROCEDURE QConicalGradient_setAngle ( self: QConicalGradient;
angle: LONGREAL;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.QConicalGradient_setAngle(selfAdr, angle);
END QConicalGradient_setAngle;

PROCEDURE Delete_QConicalGradient ( self: QConicalGradient;
) =
VAR
selfAdr: ADDRESS := LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtBrushRaw.Delete_QConicalGradient(selfAdr);
END Delete_QConicalGradient;

PROCEDURE Cleanup_QConicalGradient(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QConicalGradient := ref;
BEGIN
  Delete_QConicalGradient(obj);
 END Cleanup_QConicalGradient;

PROCEDURE Destroy_QConicalGradient(self : QConicalGradient) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QConicalGradient);
END Destroy_QConicalGradient;

REVEAL
QConicalGradient =
QConicalGradientPublic BRANDED OBJECT
OVERRIDES
init_0 := New_QConicalGradient0;
init_1 := New_QConicalGradient1;
init_2 := New_QConicalGradient2;
center := QConicalGradient_center;
setCenter := QConicalGradient_setCenter;
setCenter1 := QConicalGradient_setCenter1;
angle := QConicalGradient_angle;
setAngle := QConicalGradient_setAngle;
destroyCxx := Destroy_QConicalGradient;
END;


BEGIN
END QtBrush.
