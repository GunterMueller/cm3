/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qfontmetrics.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QFontMetrics * New_QFontMetrics0(QFont * m3arg1) {
  QFont *arg1 = 0 ;
  QFontMetrics *result = 0 ;
  QFontMetrics * cresult ;
  
  arg1 = *(QFont **)&m3arg1;
  result = (QFontMetrics *)new QFontMetrics((QFont const &)*arg1);
  *(QFontMetrics **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QFontMetrics * New_QFontMetrics1(QFont * m3arg1, QPaintDevice * pd) {
  QFont *arg1 = 0 ;
  QPaintDevice *arg2 = (QPaintDevice *) 0 ;
  QFontMetrics *result = 0 ;
  QFontMetrics * cresult ;
  
  arg1 = *(QFont **)&m3arg1;
  arg2 = *(QPaintDevice **)&pd; 
  result = (QFontMetrics *)new QFontMetrics((QFont const &)*arg1,arg2);
  *(QFontMetrics **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QFontMetrics * New_QFontMetrics2(QFontMetrics const & m3arg1) {
  QFontMetrics *arg1 = 0 ;
  QFontMetrics *result = 0 ;
  QFontMetrics * cresult ;
  
  arg1 = *(QFontMetrics **)&m3arg1;
  result = (QFontMetrics *)new QFontMetrics((QFontMetrics const &)*arg1);
  *(QFontMetrics **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QFontMetrics(QFontMetrics * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  
  arg1 = *(QFontMetrics **)&self; 
  delete arg1;
}


SWIGEXPORT int QFontMetrics_ascent(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->ascent();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_descent(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->descent();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_height(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->height();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_leading(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->leading();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_lineSpacing(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->lineSpacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_minLeftBearing(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->minLeftBearing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_minRightBearing(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->minRightBearing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_maxWidth(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->maxWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_xHeight(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->xHeight();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_averageCharWidth(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->averageCharWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QFontMetrics_inFont(QFontMetrics const * self, QChar * m3arg2) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QChar arg2 ;
  QChar *argp2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  argp2 = *(QChar **)&m3arg2;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QChar");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  result = (bool)((QFontMetrics const *)arg1)->inFont(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QFontMetrics_inFontUcs4(QFontMetrics const * self, unsigned int ucs4) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  unsigned int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = (unsigned int)ucs4; 
  result = (bool)((QFontMetrics const *)arg1)->inFontUcs4(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_leftBearing(QFontMetrics const * self, QChar * m3arg2) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QChar arg2 ;
  QChar *argp2 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  argp2 = *(QChar **)&m3arg2;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QChar");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  result = (int)((QFontMetrics const *)arg1)->leftBearing(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_rightBearing(QFontMetrics const * self, QChar * m3arg2) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QChar arg2 ;
  QChar *argp2 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  argp2 = *(QChar **)&m3arg2;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QChar");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  result = (int)((QFontMetrics const *)arg1)->rightBearing(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_width(QFontMetrics const * self, QString * m3arg2, int len) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QString *arg2 = 0 ;
  int arg3 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = *(QString **)&m3arg2;
  arg3 = (int)len; 
  result = (int)((QFontMetrics const *)arg1)->width((QString const &)*arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_width1(QFontMetrics const * self, QString * m3arg2) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QString *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = *(QString **)&m3arg2;
  result = (int)((QFontMetrics const *)arg1)->width((QString const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_width2(QFontMetrics const * self, QString * m3arg2, int len, int flags) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QString *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = *(QString **)&m3arg2;
  arg3 = (int)len; 
  arg4 = (int)flags; 
  result = (int)((QFontMetrics const *)arg1)->width((QString const &)*arg2,arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_width3(QFontMetrics const * self, QChar * m3arg2) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QChar arg2 ;
  QChar *argp2 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  argp2 = *(QChar **)&m3arg2;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QChar");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  result = (int)((QFontMetrics const *)arg1)->width(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_charWidth(QFontMetrics const * self, QString * str, int pos) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QString *arg2 = 0 ;
  int arg3 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = *(QString **)&str;
  arg3 = (int)pos; 
  result = (int)((QFontMetrics const *)arg1)->charWidth((QString const &)*arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QFontMetrics_boundingRect(QFontMetrics const * self, QChar * m3arg2) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QChar arg2 ;
  QChar *argp2 ;
  QRect * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  argp2 = *(QChar **)&m3arg2;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QChar");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  *(QRect **)&cresult = new QRect((const QRect &)((QFontMetrics const *)arg1)->boundingRect(arg2));
  return cresult;
}


SWIGEXPORT QRect * QFontMetrics_boundingRect1(QFontMetrics const * self, QString * text) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QString *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = *(QString **)&text;
  *(QRect **)&cresult = new QRect((const QRect &)((QFontMetrics const *)arg1)->boundingRect((QString const &)*arg2));
  return cresult;
}


SWIGEXPORT QRect * QFontMetrics_boundingRect2(QFontMetrics const * self, QRect * r, int flags, QString * text, int tabstops, int * tabarray) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QRect *arg2 = 0 ;
  int arg3 ;
  QString *arg4 = 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = *(QRect **)&r;
  arg3 = (int)flags; 
  arg4 = *(QString **)&text;
  arg5 = (int)tabstops; 
  arg6 = *(int **)&tabarray; 
  *(QRect **)&cresult = new QRect((const QRect &)((QFontMetrics const *)arg1)->boundingRect((QRect const &)*arg2,arg3,(QString const &)*arg4,arg5,arg6));
  return cresult;
}


SWIGEXPORT QRect * QFontMetrics_boundingRect3(QFontMetrics const * self, QRect * r, int flags, QString * text, int tabstops) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QRect *arg2 = 0 ;
  int arg3 ;
  QString *arg4 = 0 ;
  int arg5 ;
  QRect * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = *(QRect **)&r;
  arg3 = (int)flags; 
  arg4 = *(QString **)&text;
  arg5 = (int)tabstops; 
  *(QRect **)&cresult = new QRect((const QRect &)((QFontMetrics const *)arg1)->boundingRect((QRect const &)*arg2,arg3,(QString const &)*arg4,arg5));
  return cresult;
}


SWIGEXPORT QRect * QFontMetrics_boundingRect4(QFontMetrics const * self, QRect * r, int flags, QString * text) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QRect *arg2 = 0 ;
  int arg3 ;
  QString *arg4 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = *(QRect **)&r;
  arg3 = (int)flags; 
  arg4 = *(QString **)&text;
  *(QRect **)&cresult = new QRect((const QRect &)((QFontMetrics const *)arg1)->boundingRect((QRect const &)*arg2,arg3,(QString const &)*arg4));
  return cresult;
}


SWIGEXPORT QRect * QFontMetrics_boundingRect5(QFontMetrics const * self, int x, int y, int w, int h, int flags, QString * text, int tabstops, int * tabarray) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  QString *arg7 = 0 ;
  int arg8 ;
  int *arg9 = (int *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (int)flags; 
  arg7 = *(QString **)&text;
  arg8 = (int)tabstops; 
  arg9 = *(int **)&tabarray; 
  *(QRect **)&cresult = new QRect((const QRect &)((QFontMetrics const *)arg1)->boundingRect(arg2,arg3,arg4,arg5,arg6,(QString const &)*arg7,arg8,arg9));
  return cresult;
}


SWIGEXPORT QRect * QFontMetrics_boundingRect6(QFontMetrics const * self, int x, int y, int w, int h, int flags, QString * text, int tabstops) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  QString *arg7 = 0 ;
  int arg8 ;
  QRect * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (int)flags; 
  arg7 = *(QString **)&text;
  arg8 = (int)tabstops; 
  *(QRect **)&cresult = new QRect((const QRect &)((QFontMetrics const *)arg1)->boundingRect(arg2,arg3,arg4,arg5,arg6,(QString const &)*arg7,arg8));
  return cresult;
}


SWIGEXPORT QRect * QFontMetrics_boundingRect7(QFontMetrics const * self, int x, int y, int w, int h, int flags, QString * text) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  QString *arg7 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  arg6 = (int)flags; 
  arg7 = *(QString **)&text;
  *(QRect **)&cresult = new QRect((const QRect &)((QFontMetrics const *)arg1)->boundingRect(arg2,arg3,arg4,arg5,arg6,(QString const &)*arg7));
  return cresult;
}


SWIGEXPORT QSize * QFontMetrics_size(QFontMetrics const * self, int flags, QString * str, int tabstops, int * tabarray) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = (int)flags; 
  arg3 = *(QString **)&str;
  arg4 = (int)tabstops; 
  arg5 = *(int **)&tabarray; 
  *(QSize **)&cresult = new QSize((const QSize &)((QFontMetrics const *)arg1)->size(arg2,(QString const &)*arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QSize * QFontMetrics_size1(QFontMetrics const * self, int flags, QString * str, int tabstops) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  int arg4 ;
  QSize * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = (int)flags; 
  arg3 = *(QString **)&str;
  arg4 = (int)tabstops; 
  *(QSize **)&cresult = new QSize((const QSize &)((QFontMetrics const *)arg1)->size(arg2,(QString const &)*arg3,arg4));
  return cresult;
}


SWIGEXPORT QSize * QFontMetrics_size2(QFontMetrics const * self, int flags, QString * str) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QSize * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = (int)flags; 
  arg3 = *(QString **)&str;
  *(QSize **)&cresult = new QSize((const QSize &)((QFontMetrics const *)arg1)->size(arg2,(QString const &)*arg3));
  return cresult;
}


SWIGEXPORT QRect * QFontMetrics_tightBoundingRect(QFontMetrics const * self, QString * text) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QString *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = *(QString **)&text;
  *(QRect **)&cresult = new QRect((const QRect &)((QFontMetrics const *)arg1)->tightBoundingRect((QString const &)*arg2));
  return cresult;
}


SWIGEXPORT QString * QFontMetrics_elidedText(QFontMetrics const * self, QString * text, Qt::TextElideMode mode, int width, int flags) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QString *arg2 = 0 ;
  Qt::TextElideMode arg3 ;
  int arg4 ;
  int arg5 ;
  QString * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = *(QString **)&text;
  arg3 = (Qt::TextElideMode)mode; 
  arg4 = (int)width; 
  arg5 = (int)flags; 
  *(QString **)&cresult = new QString((const QString &)((QFontMetrics const *)arg1)->elidedText((QString const &)*arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QString * QFontMetrics_elidedText1(QFontMetrics const * self, QString * text, Qt::TextElideMode mode, int width) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  QString *arg2 = 0 ;
  Qt::TextElideMode arg3 ;
  int arg4 ;
  QString * cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  arg2 = *(QString **)&text;
  arg3 = (Qt::TextElideMode)mode; 
  arg4 = (int)width; 
  *(QString **)&cresult = new QString((const QString &)((QFontMetrics const *)arg1)->elidedText((QString const &)*arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT int QFontMetrics_underlinePos(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->underlinePos();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_overlinePos(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->overlinePos();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_strikeOutPos(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->strikeOutPos();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFontMetrics_lineWidth(QFontMetrics const * self) {
  QFontMetrics *arg1 = (QFontMetrics *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFontMetrics **)&self; 
  result = (int)((QFontMetrics const *)arg1)->lineWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QFontMetricsF * New_QFontMetricsF0(QFont * m3arg1) {
  QFont *arg1 = 0 ;
  QFontMetricsF *result = 0 ;
  QFontMetricsF * cresult ;
  
  arg1 = *(QFont **)&m3arg1;
  result = (QFontMetricsF *)new QFontMetricsF((QFont const &)*arg1);
  *(QFontMetricsF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QFontMetricsF * New_QFontMetricsF1(QFont * m3arg1, QPaintDevice * pd) {
  QFont *arg1 = 0 ;
  QPaintDevice *arg2 = (QPaintDevice *) 0 ;
  QFontMetricsF *result = 0 ;
  QFontMetricsF * cresult ;
  
  arg1 = *(QFont **)&m3arg1;
  arg2 = *(QPaintDevice **)&pd; 
  result = (QFontMetricsF *)new QFontMetricsF((QFont const &)*arg1,arg2);
  *(QFontMetricsF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QFontMetricsF * New_QFontMetricsF2(QFontMetrics const & m3arg1) {
  QFontMetrics *arg1 = 0 ;
  QFontMetricsF *result = 0 ;
  QFontMetricsF * cresult ;
  
  arg1 = *(QFontMetrics **)&m3arg1;
  result = (QFontMetricsF *)new QFontMetricsF((QFontMetrics const &)*arg1);
  *(QFontMetricsF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QFontMetricsF * New_QFontMetricsF3(QFontMetricsF const & m3arg1) {
  QFontMetricsF *arg1 = 0 ;
  QFontMetricsF *result = 0 ;
  QFontMetricsF * cresult ;
  
  arg1 = *(QFontMetricsF **)&m3arg1;
  result = (QFontMetricsF *)new QFontMetricsF((QFontMetricsF const &)*arg1);
  *(QFontMetricsF **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QFontMetricsF(QFontMetricsF * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  
  arg1 = *(QFontMetricsF **)&self; 
  delete arg1;
}


SWIGEXPORT double QFontMetricsF_ascent(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->ascent();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_descent(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->descent();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_height(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->height();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_leading(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->leading();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_lineSpacing(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->lineSpacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_minLeftBearing(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->minLeftBearing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_minRightBearing(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->minRightBearing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_maxWidth(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->maxWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_xHeight(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->xHeight();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_averageCharWidth(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->averageCharWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QFontMetricsF_inFont(QFontMetricsF const * self, QChar * m3arg2) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QChar arg2 ;
  QChar *argp2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  argp2 = *(QChar **)&m3arg2;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QChar");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  result = (bool)((QFontMetricsF const *)arg1)->inFont(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QFontMetricsF_inFontUcs4(QFontMetricsF const * self, unsigned int ucs4) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  unsigned int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = (unsigned int)ucs4; 
  result = (bool)((QFontMetricsF const *)arg1)->inFontUcs4(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_leftBearing(QFontMetricsF const * self, QChar * m3arg2) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QChar arg2 ;
  QChar *argp2 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  argp2 = *(QChar **)&m3arg2;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QChar");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  result = (double)((QFontMetricsF const *)arg1)->leftBearing(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_rightBearing(QFontMetricsF const * self, QChar * m3arg2) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QChar arg2 ;
  QChar *argp2 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  argp2 = *(QChar **)&m3arg2;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QChar");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  result = (double)((QFontMetricsF const *)arg1)->rightBearing(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_width(QFontMetricsF const * self, QString * string) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QString *arg2 = 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = *(QString **)&string;
  result = (double)((QFontMetricsF const *)arg1)->width((QString const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_width1(QFontMetricsF const * self, QChar * m3arg2) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QChar arg2 ;
  QChar *argp2 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  argp2 = *(QChar **)&m3arg2;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QChar");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  result = (double)((QFontMetricsF const *)arg1)->width(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRectF * QFontMetricsF_boundingRect(QFontMetricsF const * self, QString * string) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QString *arg2 = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = *(QString **)&string;
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QFontMetricsF const *)arg1)->boundingRect((QString const &)*arg2));
  return cresult;
}


SWIGEXPORT QRectF * QFontMetricsF_boundingRect1(QFontMetricsF const * self, QChar * m3arg2) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QChar arg2 ;
  QChar *argp2 ;
  QRectF * cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  argp2 = *(QChar **)&m3arg2;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QChar");
       //RETURN 0;
       return 0;
     }
  */
  arg2 = *argp2; 
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QFontMetricsF const *)arg1)->boundingRect(arg2));
  return cresult;
}


SWIGEXPORT QRectF * QFontMetricsF_boundingRect2(QFontMetricsF const * self, QRectF * r, int flags, QString * string, int tabstops, int * tabarray) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QRectF *arg2 = 0 ;
  int arg3 ;
  QString *arg4 = 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  QRectF * cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = *(QRectF **)&r;
  arg3 = (int)flags; 
  arg4 = *(QString **)&string;
  arg5 = (int)tabstops; 
  arg6 = *(int **)&tabarray; 
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QFontMetricsF const *)arg1)->boundingRect((QRectF const &)*arg2,arg3,(QString const &)*arg4,arg5,arg6));
  return cresult;
}


SWIGEXPORT QRectF * QFontMetricsF_boundingRect3(QFontMetricsF const * self, QRectF * r, int flags, QString * string, int tabstops) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QRectF *arg2 = 0 ;
  int arg3 ;
  QString *arg4 = 0 ;
  int arg5 ;
  QRectF * cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = *(QRectF **)&r;
  arg3 = (int)flags; 
  arg4 = *(QString **)&string;
  arg5 = (int)tabstops; 
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QFontMetricsF const *)arg1)->boundingRect((QRectF const &)*arg2,arg3,(QString const &)*arg4,arg5));
  return cresult;
}


SWIGEXPORT QRectF * QFontMetricsF_boundingRect4(QFontMetricsF const * self, QRectF * r, int flags, QString * string) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QRectF *arg2 = 0 ;
  int arg3 ;
  QString *arg4 = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = *(QRectF **)&r;
  arg3 = (int)flags; 
  arg4 = *(QString **)&string;
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QFontMetricsF const *)arg1)->boundingRect((QRectF const &)*arg2,arg3,(QString const &)*arg4));
  return cresult;
}


SWIGEXPORT QSizeF * QFontMetricsF_size(QFontMetricsF const * self, int flags, QString * str, int tabstops, int * tabarray) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  QSizeF * cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = (int)flags; 
  arg3 = *(QString **)&str;
  arg4 = (int)tabstops; 
  arg5 = *(int **)&tabarray; 
  *(QSizeF **)&cresult = new QSizeF((const QSizeF &)((QFontMetricsF const *)arg1)->size(arg2,(QString const &)*arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QSizeF * QFontMetricsF_size1(QFontMetricsF const * self, int flags, QString * str, int tabstops) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  int arg4 ;
  QSizeF * cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = (int)flags; 
  arg3 = *(QString **)&str;
  arg4 = (int)tabstops; 
  *(QSizeF **)&cresult = new QSizeF((const QSizeF &)((QFontMetricsF const *)arg1)->size(arg2,(QString const &)*arg3,arg4));
  return cresult;
}


SWIGEXPORT QSizeF * QFontMetricsF_size2(QFontMetricsF const * self, int flags, QString * str) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QSizeF * cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = (int)flags; 
  arg3 = *(QString **)&str;
  *(QSizeF **)&cresult = new QSizeF((const QSizeF &)((QFontMetricsF const *)arg1)->size(arg2,(QString const &)*arg3));
  return cresult;
}


SWIGEXPORT QRectF * QFontMetricsF_tightBoundingRect(QFontMetricsF const * self, QString * text) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QString *arg2 = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = *(QString **)&text;
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QFontMetricsF const *)arg1)->tightBoundingRect((QString const &)*arg2));
  return cresult;
}


SWIGEXPORT QString * QFontMetricsF_elidedText(QFontMetricsF const * self, QString * text, Qt::TextElideMode mode, double width, int flags) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QString *arg2 = 0 ;
  Qt::TextElideMode arg3 ;
  double arg4 ;
  int arg5 ;
  QString * cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = *(QString **)&text;
  arg3 = (Qt::TextElideMode)mode; 
  arg4 = (double)width; 
  arg5 = (int)flags; 
  *(QString **)&cresult = new QString((const QString &)((QFontMetricsF const *)arg1)->elidedText((QString const &)*arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QString * QFontMetricsF_elidedText1(QFontMetricsF const * self, QString * text, Qt::TextElideMode mode, double width) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  QString *arg2 = 0 ;
  Qt::TextElideMode arg3 ;
  double arg4 ;
  QString * cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  arg2 = *(QString **)&text;
  arg3 = (Qt::TextElideMode)mode; 
  arg4 = (double)width; 
  *(QString **)&cresult = new QString((const QString &)((QFontMetricsF const *)arg1)->elidedText((QString const &)*arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT double QFontMetricsF_underlinePos(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->underlinePos();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_overlinePos(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->overlinePos();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_strikeOutPos(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->strikeOutPos();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QFontMetricsF_lineWidth(QFontMetricsF const * self) {
  QFontMetricsF *arg1 = (QFontMetricsF *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QFontMetricsF **)&self; 
  result = (double)((QFontMetricsF const *)arg1)->lineWidth();
  cresult = result; 
  return cresult;
}


#ifdef __cplusplus
}
#endif

