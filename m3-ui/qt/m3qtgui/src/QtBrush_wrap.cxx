/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qbrush.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QBrush * New_QBrush0() {
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  result = (QBrush *)new QBrush();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * New_QBrush1(Qt::BrushStyle bs) {
  Qt::BrushStyle arg1 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = (Qt::BrushStyle)bs; 
  result = (QBrush *)new QBrush(arg1);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * New_QBrush2(QColor * color, Qt::BrushStyle bs) {
  QColor *arg1 = 0 ;
  Qt::BrushStyle arg2 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QColor **)&color;
  arg2 = (Qt::BrushStyle)bs; 
  result = (QBrush *)new QBrush((QColor const &)*arg1,arg2);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * New_QBrush3(QColor * color) {
  QColor *arg1 = 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QColor **)&color;
  result = (QBrush *)new QBrush((QColor const &)*arg1);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * New_QBrush4(Qt::GlobalColor color, Qt::BrushStyle bs) {
  Qt::GlobalColor arg1 ;
  Qt::BrushStyle arg2 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = (Qt::GlobalColor)color; 
  arg2 = (Qt::BrushStyle)bs; 
  result = (QBrush *)new QBrush(arg1,arg2);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * New_QBrush5(Qt::GlobalColor color) {
  Qt::GlobalColor arg1 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = (Qt::GlobalColor)color; 
  result = (QBrush *)new QBrush(arg1);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * New_QBrush6(QColor * color, QPixmap * pixmap) {
  QColor *arg1 = 0 ;
  QPixmap *arg2 = 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QColor **)&color;
  arg2 = *(QPixmap **)&pixmap;
  result = (QBrush *)new QBrush((QColor const &)*arg1,(QPixmap const &)*arg2);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * New_QBrush7(Qt::GlobalColor color, QPixmap * pixmap) {
  Qt::GlobalColor arg1 ;
  QPixmap *arg2 = 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = (Qt::GlobalColor)color; 
  arg2 = *(QPixmap **)&pixmap;
  result = (QBrush *)new QBrush(arg1,(QPixmap const &)*arg2);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * New_QBrush8(QPixmap * pixmap) {
  QPixmap *arg1 = 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPixmap **)&pixmap;
  result = (QBrush *)new QBrush((QPixmap const &)*arg1);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * New_QBrush9(QImage * image) {
  QImage *arg1 = 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QImage **)&image;
  result = (QBrush *)new QBrush((QImage const &)*arg1);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * New_QBrush10(QBrush * brush) {
  QBrush *arg1 = 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QBrush **)&brush;
  result = (QBrush *)new QBrush((QBrush const &)*arg1);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * New_QBrush11(QGradient const & gradient) {
  QGradient *arg1 = 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QGradient **)&gradient;
  result = (QBrush *)new QBrush((QGradient const &)*arg1);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QBrush(QBrush * self) {
  QBrush *arg1 = (QBrush *) 0 ;
  
  arg1 = *(QBrush **)&self; 
  delete arg1;
}


SWIGEXPORT QBrush * QBrush_Op_Brush_Assign(QBrush * self, QBrush * brush) {
  QBrush *arg1 = (QBrush *) 0 ;
  QBrush *arg2 = 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QBrush **)&self; 
  arg2 = *(QBrush **)&brush;
  result = (QBrush *) &(arg1)->operator =((QBrush const &)*arg2);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::BrushStyle QBrush_style(QBrush const * self) {
  QBrush *arg1 = (QBrush *) 0 ;
  Qt::BrushStyle result;
  Qt::BrushStyle cresult ;
  
  arg1 = *(QBrush **)&self; 
  result = (Qt::BrushStyle)((QBrush const *)arg1)->style();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QBrush_setStyle(QBrush * self, Qt::BrushStyle m3arg2) {
  QBrush *arg1 = (QBrush *) 0 ;
  Qt::BrushStyle arg2 ;
  
  arg1 = *(QBrush **)&self; 
  arg2 = (Qt::BrushStyle)m3arg2; 
  (arg1)->setStyle(arg2);
}


SWIGEXPORT QMatrix * QBrush_matrix(QBrush const * self) {
  QBrush *arg1 = (QBrush *) 0 ;
  QMatrix *result = 0 ;
  QMatrix * cresult ;
  
  arg1 = *(QBrush **)&self; 
  result = (QMatrix *) &((QBrush const *)arg1)->matrix();
  *(QMatrix **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QBrush_setMatrix(QBrush * self, QMatrix * mat) {
  QBrush *arg1 = (QBrush *) 0 ;
  QMatrix *arg2 = 0 ;
  
  arg1 = *(QBrush **)&self; 
  arg2 = *(QMatrix **)&mat;
  (arg1)->setMatrix((QMatrix const &)*arg2);
}


SWIGEXPORT QTransform * QBrush_transform(QBrush const * self) {
  QBrush *arg1 = (QBrush *) 0 ;
  QTransform * cresult ;
  
  arg1 = *(QBrush **)&self; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)((QBrush const *)arg1)->transform());
  return cresult;
}


SWIGEXPORT void QBrush_setTransform(QBrush * self, QTransform * m3arg2) {
  QBrush *arg1 = (QBrush *) 0 ;
  QTransform *arg2 = 0 ;
  
  arg1 = *(QBrush **)&self; 
  arg2 = *(QTransform **)&m3arg2;
  (arg1)->setTransform((QTransform const &)*arg2);
}


SWIGEXPORT QPixmap * QBrush_texture(QBrush const * self) {
  QBrush *arg1 = (QBrush *) 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QBrush **)&self; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QBrush const *)arg1)->texture());
  return cresult;
}


SWIGEXPORT void QBrush_setTexture(QBrush * self, QPixmap * pixmap) {
  QBrush *arg1 = (QBrush *) 0 ;
  QPixmap *arg2 = 0 ;
  
  arg1 = *(QBrush **)&self; 
  arg2 = *(QPixmap **)&pixmap;
  (arg1)->setTexture((QPixmap const &)*arg2);
}


SWIGEXPORT QImage * QBrush_textureImage(QBrush const * self) {
  QBrush *arg1 = (QBrush *) 0 ;
  QImage * cresult ;
  
  arg1 = *(QBrush **)&self; 
  *(QImage **)&cresult = new QImage((const QImage &)((QBrush const *)arg1)->textureImage());
  return cresult;
}


SWIGEXPORT void QBrush_setTextureImage(QBrush * self, QImage * image) {
  QBrush *arg1 = (QBrush *) 0 ;
  QImage *arg2 = 0 ;
  
  arg1 = *(QBrush **)&self; 
  arg2 = *(QImage **)&image;
  (arg1)->setTextureImage((QImage const &)*arg2);
}


SWIGEXPORT QColor * QBrush_color(QBrush const * self) {
  QBrush *arg1 = (QBrush *) 0 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  arg1 = *(QBrush **)&self; 
  result = (QColor *) &((QBrush const *)arg1)->color();
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QBrush_setColor(QBrush * self, QColor * color) {
  QBrush *arg1 = (QBrush *) 0 ;
  QColor *arg2 = 0 ;
  
  arg1 = *(QBrush **)&self; 
  arg2 = *(QColor **)&color;
  (arg1)->setColor((QColor const &)*arg2);
}


SWIGEXPORT void QBrush_setColor1(QBrush * self, Qt::GlobalColor color) {
  QBrush *arg1 = (QBrush *) 0 ;
  Qt::GlobalColor arg2 ;
  
  arg1 = *(QBrush **)&self; 
  arg2 = (Qt::GlobalColor)color; 
  (arg1)->setColor(arg2);
}


SWIGEXPORT QGradient * QBrush_gradient(QBrush const * self) {
  QBrush *arg1 = (QBrush *) 0 ;
  QGradient *result = 0 ;
  QGradient * cresult ;
  
  arg1 = *(QBrush **)&self; 
  result = (QGradient *)((QBrush const *)arg1)->gradient();
  *(QGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QBrush_isOpaque(QBrush const * self) {
  QBrush *arg1 = (QBrush *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QBrush **)&self; 
  result = (bool)((QBrush const *)arg1)->isOpaque();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QBrush_Op_Brush_Equals(QBrush const * self, QBrush * b) {
  QBrush *arg1 = (QBrush *) 0 ;
  QBrush *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QBrush **)&self; 
  arg2 = *(QBrush **)&b;
  result = (bool)((QBrush const *)arg1)->operator ==((QBrush const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QBrush_Op_Brush_NotEquals(QBrush const * self, QBrush * b) {
  QBrush *arg1 = (QBrush *) 0 ;
  QBrush *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QBrush **)&self; 
  arg2 = *(QBrush **)&b;
  result = (bool)((QBrush const *)arg1)->operator !=((QBrush const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QBrush_isDetached(QBrush const * self) {
  QBrush *arg1 = (QBrush *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QBrush **)&self; 
  result = (bool)((QBrush const *)arg1)->isDetached();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QGradient * New_QGradient0() {
  QGradient *result = 0 ;
  QGradient * cresult ;
  
  result = (QGradient *)new QGradient();
  *(QGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QGradient::Type QGradient_type(QGradient * self) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradient::Type result;
  QGradient::Type cresult ;
  
  arg1 = *(QGradient **)&self; 
  result = (QGradient::Type)((QGradient const *)arg1)->type();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGradient_setSpread(QGradient * self, QGradient::Spread spread) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradient::Spread arg2 ;
  
  arg1 = *(QGradient **)&self; 
  arg2 = (QGradient::Spread)spread; 
  (arg1)->setSpread(arg2);
}


SWIGEXPORT QGradient::Spread QGradient_spread(QGradient * self) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradient::Spread result;
  QGradient::Spread cresult ;
  
  arg1 = *(QGradient **)&self; 
  result = (QGradient::Spread)((QGradient const *)arg1)->spread();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGradient_setColorAt(QGradient * self, double pos, QColor * color) {
  QGradient *arg1 = (QGradient *) 0 ;
  double arg2 ;
  QColor *arg3 = 0 ;
  
  arg1 = *(QGradient **)&self; 
  arg2 = (double)pos; 
  arg3 = *(QColor **)&color;
  (arg1)->setColorAt(arg2,(QColor const &)*arg3);
}


SWIGEXPORT void QGradient_setStops(QGradient * self, QGradientStops * stops) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradientStops *arg2 = 0 ;
  
  arg1 = *(QGradient **)&self; 
  arg2 = *(QGradientStops **)&stops;
  (arg1)->setStops((QGradientStops const &)*arg2);
}


SWIGEXPORT QGradientStops * QGradient_stops(QGradient * self) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradientStops * cresult ;
  
  arg1 = *(QGradient **)&self; 
  *(QGradientStops **)&cresult = new QGradientStops((const QGradientStops &)((QGradient const *)arg1)->stops());
  return cresult;
}


SWIGEXPORT QGradient::CoordinateMode QGradient_coordinateMode(QGradient * self) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradient::CoordinateMode result;
  QGradient::CoordinateMode cresult ;
  
  arg1 = *(QGradient **)&self; 
  result = (QGradient::CoordinateMode)((QGradient const *)arg1)->coordinateMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGradient_setCoordinateMode(QGradient * self, QGradient::CoordinateMode mode) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradient::CoordinateMode arg2 ;
  
  arg1 = *(QGradient **)&self; 
  arg2 = (QGradient::CoordinateMode)mode; 
  (arg1)->setCoordinateMode(arg2);
}


SWIGEXPORT QGradient::InterpolationMode QGradient_interpolationMode(QGradient * self) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradient::InterpolationMode result;
  QGradient::InterpolationMode cresult ;
  
  arg1 = *(QGradient **)&self; 
  result = (QGradient::InterpolationMode)((QGradient const *)arg1)->interpolationMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGradient_setInterpolationMode(QGradient * self, QGradient::InterpolationMode mode) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradient::InterpolationMode arg2 ;
  
  arg1 = *(QGradient **)&self; 
  arg2 = (QGradient::InterpolationMode)mode; 
  (arg1)->setInterpolationMode(arg2);
}


SWIGEXPORT bool QGradient_Op_Grad_Equals(QGradient * self, QGradient const & gradient) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradient *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QGradient **)&self; 
  arg2 = *(QGradient **)&gradient;
  result = (bool)((QGradient const *)arg1)->operator ==((QGradient const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QGradient_OpGrad_NotEquals(QGradient * self, QGradient const & other) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradient *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QGradient **)&self; 
  arg2 = *(QGradient **)&other;
  result = (bool)((QGradient const *)arg1)->operator !=((QGradient const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QGradient_Op_Grad_Equals1(QGradient * self, QGradient const & gradient) {
  QGradient *arg1 = (QGradient *) 0 ;
  QGradient *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QGradient **)&self; 
  arg2 = *(QGradient **)&gradient;
  result = (bool)(arg1)->operator ==((QGradient const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QGradient(QGradient * self) {
  QGradient *arg1 = (QGradient *) 0 ;
  
  arg1 = *(QGradient **)&self; 
  delete arg1;
}


SWIGEXPORT QLinearGradient * New_QLinearGradient0() {
  QLinearGradient *result = 0 ;
  QLinearGradient * cresult ;
  
  result = (QLinearGradient *)new QLinearGradient();
  *(QLinearGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLinearGradient * New_QLinearGradient1(QPointF * start, QPointF * finalStop) {
  QPointF *arg1 = 0 ;
  QPointF *arg2 = 0 ;
  QLinearGradient *result = 0 ;
  QLinearGradient * cresult ;
  
  arg1 = *(QPointF **)&start;
  arg2 = *(QPointF **)&finalStop;
  result = (QLinearGradient *)new QLinearGradient((QPointF const &)*arg1,(QPointF const &)*arg2);
  *(QLinearGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLinearGradient * New_QLinearGradient2(double xStart, double yStart, double xFinalStop, double yFinalStop) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  QLinearGradient *result = 0 ;
  QLinearGradient * cresult ;
  
  arg1 = (double)xStart; 
  arg2 = (double)yStart; 
  arg3 = (double)xFinalStop; 
  arg4 = (double)yFinalStop; 
  result = (QLinearGradient *)new QLinearGradient(arg1,arg2,arg3,arg4);
  *(QLinearGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPointF * QLinearGradient_start(QLinearGradient const * self) {
  QLinearGradient *arg1 = (QLinearGradient *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QLinearGradient **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QLinearGradient const *)arg1)->start());
  return cresult;
}


SWIGEXPORT void QLinearGradient_setStart(QLinearGradient * self, QPointF * start) {
  QLinearGradient *arg1 = (QLinearGradient *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QLinearGradient **)&self; 
  arg2 = *(QPointF **)&start;
  (arg1)->setStart((QPointF const &)*arg2);
}


SWIGEXPORT void QLinearGradient_setStart1(QLinearGradient * self, double x, double y) {
  QLinearGradient *arg1 = (QLinearGradient *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QLinearGradient **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  (arg1)->setStart(arg2,arg3);
}


SWIGEXPORT QPointF * QLinearGradient_finalStop(QLinearGradient const * self) {
  QLinearGradient *arg1 = (QLinearGradient *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QLinearGradient **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QLinearGradient const *)arg1)->finalStop());
  return cresult;
}


SWIGEXPORT void QLinearGradient_setFinalStop(QLinearGradient * self, QPointF * stop) {
  QLinearGradient *arg1 = (QLinearGradient *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QLinearGradient **)&self; 
  arg2 = *(QPointF **)&stop;
  (arg1)->setFinalStop((QPointF const &)*arg2);
}


SWIGEXPORT void QLinearGradient_setFinalStop1(QLinearGradient * self, double x, double y) {
  QLinearGradient *arg1 = (QLinearGradient *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QLinearGradient **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  (arg1)->setFinalStop(arg2,arg3);
}


SWIGEXPORT void Delete_QLinearGradient(QLinearGradient * self) {
  QLinearGradient *arg1 = (QLinearGradient *) 0 ;
  
  arg1 = *(QLinearGradient **)&self; 
  delete arg1;
}


SWIGEXPORT QRadialGradient * New_QRadialGradient0() {
  QRadialGradient *result = 0 ;
  QRadialGradient * cresult ;
  
  result = (QRadialGradient *)new QRadialGradient();
  *(QRadialGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRadialGradient * New_QRadialGradient1(QPointF * center, double radius, QPointF * focalPoint) {
  QPointF *arg1 = 0 ;
  double arg2 ;
  QPointF *arg3 = 0 ;
  QRadialGradient *result = 0 ;
  QRadialGradient * cresult ;
  
  arg1 = *(QPointF **)&center;
  arg2 = (double)radius; 
  arg3 = *(QPointF **)&focalPoint;
  result = (QRadialGradient *)new QRadialGradient((QPointF const &)*arg1,arg2,(QPointF const &)*arg3);
  *(QRadialGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRadialGradient * New_QRadialGradient2(double cx, double cy, double radius, double fx, double fy) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  QRadialGradient *result = 0 ;
  QRadialGradient * cresult ;
  
  arg1 = (double)cx; 
  arg2 = (double)cy; 
  arg3 = (double)radius; 
  arg4 = (double)fx; 
  arg5 = (double)fy; 
  result = (QRadialGradient *)new QRadialGradient(arg1,arg2,arg3,arg4,arg5);
  *(QRadialGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRadialGradient * New_QRadialGradient3(QPointF * center, double radius) {
  QPointF *arg1 = 0 ;
  double arg2 ;
  QRadialGradient *result = 0 ;
  QRadialGradient * cresult ;
  
  arg1 = *(QPointF **)&center;
  arg2 = (double)radius; 
  result = (QRadialGradient *)new QRadialGradient((QPointF const &)*arg1,arg2);
  *(QRadialGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRadialGradient * New_QRadialGradient4(double cx, double cy, double radius) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  QRadialGradient *result = 0 ;
  QRadialGradient * cresult ;
  
  arg1 = (double)cx; 
  arg2 = (double)cy; 
  arg3 = (double)radius; 
  result = (QRadialGradient *)new QRadialGradient(arg1,arg2,arg3);
  *(QRadialGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPointF * QRadialGradient_center(QRadialGradient const * self) {
  QRadialGradient *arg1 = (QRadialGradient *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QRadialGradient **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QRadialGradient const *)arg1)->center());
  return cresult;
}


SWIGEXPORT void QRadialGradient_setCenter(QRadialGradient * self, QPointF * center) {
  QRadialGradient *arg1 = (QRadialGradient *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRadialGradient **)&self; 
  arg2 = *(QPointF **)&center;
  (arg1)->setCenter((QPointF const &)*arg2);
}


SWIGEXPORT void QRadialGradient_setCenter1(QRadialGradient * self, double x, double y) {
  QRadialGradient *arg1 = (QRadialGradient *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QRadialGradient **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  (arg1)->setCenter(arg2,arg3);
}


SWIGEXPORT QPointF * QRadialGradient_focalPoint(QRadialGradient const * self) {
  QRadialGradient *arg1 = (QRadialGradient *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QRadialGradient **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QRadialGradient const *)arg1)->focalPoint());
  return cresult;
}


SWIGEXPORT void QRadialGradient_setFocalPoint(QRadialGradient * self, QPointF * focalPoint) {
  QRadialGradient *arg1 = (QRadialGradient *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QRadialGradient **)&self; 
  arg2 = *(QPointF **)&focalPoint;
  (arg1)->setFocalPoint((QPointF const &)*arg2);
}


SWIGEXPORT void QRadialGradient_setFocalPoint1(QRadialGradient * self, double x, double y) {
  QRadialGradient *arg1 = (QRadialGradient *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QRadialGradient **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  (arg1)->setFocalPoint(arg2,arg3);
}


SWIGEXPORT double QRadialGradient_radius(QRadialGradient const * self) {
  QRadialGradient *arg1 = (QRadialGradient *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QRadialGradient **)&self; 
  result = (double)((QRadialGradient const *)arg1)->radius();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QRadialGradient_setRadius(QRadialGradient * self, double radius) {
  QRadialGradient *arg1 = (QRadialGradient *) 0 ;
  double arg2 ;
  
  arg1 = *(QRadialGradient **)&self; 
  arg2 = (double)radius; 
  (arg1)->setRadius(arg2);
}


SWIGEXPORT void Delete_QRadialGradient(QRadialGradient * self) {
  QRadialGradient *arg1 = (QRadialGradient *) 0 ;
  
  arg1 = *(QRadialGradient **)&self; 
  delete arg1;
}


SWIGEXPORT QConicalGradient * New_QConicalGradient0() {
  QConicalGradient *result = 0 ;
  QConicalGradient * cresult ;
  
  result = (QConicalGradient *)new QConicalGradient();
  *(QConicalGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QConicalGradient * New_QConicalGradient1(QPointF * center, double startAngle) {
  QPointF *arg1 = 0 ;
  double arg2 ;
  QConicalGradient *result = 0 ;
  QConicalGradient * cresult ;
  
  arg1 = *(QPointF **)&center;
  arg2 = (double)startAngle; 
  result = (QConicalGradient *)new QConicalGradient((QPointF const &)*arg1,arg2);
  *(QConicalGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QConicalGradient * New_QConicalGradient2(double cx, double cy, double startAngle) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  QConicalGradient *result = 0 ;
  QConicalGradient * cresult ;
  
  arg1 = (double)cx; 
  arg2 = (double)cy; 
  arg3 = (double)startAngle; 
  result = (QConicalGradient *)new QConicalGradient(arg1,arg2,arg3);
  *(QConicalGradient **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPointF * QConicalGradient_center(QConicalGradient const * self) {
  QConicalGradient *arg1 = (QConicalGradient *) 0 ;
  QPointF * cresult ;
  
  arg1 = *(QConicalGradient **)&self; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QConicalGradient const *)arg1)->center());
  return cresult;
}


SWIGEXPORT void QConicalGradient_setCenter(QConicalGradient * self, QPointF * center) {
  QConicalGradient *arg1 = (QConicalGradient *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QConicalGradient **)&self; 
  arg2 = *(QPointF **)&center;
  (arg1)->setCenter((QPointF const &)*arg2);
}


SWIGEXPORT void QConicalGradient_setCenter1(QConicalGradient * self, double x, double y) {
  QConicalGradient *arg1 = (QConicalGradient *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QConicalGradient **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  (arg1)->setCenter(arg2,arg3);
}


SWIGEXPORT double QConicalGradient_angle(QConicalGradient const * self) {
  QConicalGradient *arg1 = (QConicalGradient *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QConicalGradient **)&self; 
  result = (double)((QConicalGradient const *)arg1)->angle();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QConicalGradient_setAngle(QConicalGradient * self, double angle) {
  QConicalGradient *arg1 = (QConicalGradient *) 0 ;
  double arg2 ;
  
  arg1 = *(QConicalGradient **)&self; 
  arg2 = (double)angle; 
  (arg1)->setAngle(arg2);
}


SWIGEXPORT void Delete_QConicalGradient(QConicalGradient * self) {
  QConicalGradient *arg1 = (QConicalGradient *) 0 ;
  
  arg1 = *(QConicalGradient **)&self; 
  delete arg1;
}


SWIGEXPORT long Modula3_QLinearGradientToQGradient(long objectRef) {
    long baseptr = 0;
    *(QGradient **)&baseptr = *(QLinearGradient **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QRadialGradientToQGradient(long objectRef) {
    long baseptr = 0;
    *(QGradient **)&baseptr = *(QRadialGradient **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QConicalGradientToQGradient(long objectRef) {
    long baseptr = 0;
    *(QGradient **)&baseptr = *(QConicalGradient **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

