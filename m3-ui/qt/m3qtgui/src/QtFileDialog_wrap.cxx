/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qfiledialog.h>
#define  Options  QFileDialog::Options


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QFileDialog * New_QFileDialog0(QWidget * parent, Qt::WindowFlags f) {
  QWidget *arg1 = (QWidget *) 0 ;
  Qt::WindowFlags arg2 ;
  QFileDialog *result = 0 ;
  QFileDialog * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = (Qt::WindowFlags)f; 
  result = (QFileDialog *)new QFileDialog(arg1,arg2);
  *(QFileDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QFileDialog * New_QFileDialog1(QWidget * parent, QString * caption, QString * directory, QString * filter) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  QFileDialog *result = 0 ;
  QFileDialog * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&directory;
  arg4 = *(QString **)&filter;
  result = (QFileDialog *)new QFileDialog(arg1,(QString const &)*arg2,(QString const &)*arg3,(QString const &)*arg4);
  *(QFileDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QFileDialog * New_QFileDialog2(QWidget * parent, QString * caption, QString * directory) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QFileDialog *result = 0 ;
  QFileDialog * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&directory;
  result = (QFileDialog *)new QFileDialog(arg1,(QString const &)*arg2,(QString const &)*arg3);
  *(QFileDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QFileDialog * New_QFileDialog3(QWidget * parent, QString * caption) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QFileDialog *result = 0 ;
  QFileDialog * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  result = (QFileDialog *)new QFileDialog(arg1,(QString const &)*arg2);
  *(QFileDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QFileDialog * New_QFileDialog4(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QFileDialog *result = 0 ;
  QFileDialog * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QFileDialog *)new QFileDialog(arg1);
  *(QFileDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QFileDialog * New_QFileDialog5() {
  QFileDialog *result = 0 ;
  QFileDialog * cresult ;
  
  result = (QFileDialog *)new QFileDialog();
  *(QFileDialog **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QFileDialog(QFileDialog * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  delete arg1;
}


SWIGEXPORT void QFileDialog_setDirectory(QFileDialog * self, QString * directory) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QString **)&directory;
  (arg1)->setDirectory((QString const &)*arg2);
}


SWIGEXPORT void QFileDialog_setDirectory1(QFileDialog * self, QDir * directory) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QDir *arg2 = 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QDir **)&directory;
  (arg1)->setDirectory((QDir const &)*arg2);
}


SWIGEXPORT QDir * QFileDialog_directory(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QDir * cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  *(QDir **)&cresult = new QDir((const QDir &)((QFileDialog const *)arg1)->directory());
  return cresult;
}


SWIGEXPORT void QFileDialog_selectFile(QFileDialog * self, QString * filename) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QString **)&filename;
  (arg1)->selectFile((QString const &)*arg2);
}


SWIGEXPORT QStringList * QFileDialog_selectedFiles(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QStringList * cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  *(QStringList **)&cresult = new QStringList((const QStringList &)((QFileDialog const *)arg1)->selectedFiles());
  return cresult;
}


SWIGEXPORT void QFileDialog_setNameFilterDetailsVisible(QFileDialog * self, bool enabled) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  bool arg2 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = enabled ? true : false; 
  (arg1)->setNameFilterDetailsVisible(arg2);
}


SWIGEXPORT bool QFileDialog_isNameFilterDetailsVisible(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  result = (bool)((QFileDialog const *)arg1)->isNameFilterDetailsVisible();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFileDialog_setNameFilter(QFileDialog * self, QString * filter) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QString **)&filter;
  (arg1)->setNameFilter((QString const &)*arg2);
}


SWIGEXPORT void QFileDialog_setNameFilters(QFileDialog * self, QStringList * filters) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QStringList *arg2 = 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QStringList **)&filters;
  (arg1)->setNameFilters((QStringList const &)*arg2);
}


SWIGEXPORT QStringList * QFileDialog_nameFilters(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QStringList * cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  *(QStringList **)&cresult = new QStringList((const QStringList &)((QFileDialog const *)arg1)->nameFilters());
  return cresult;
}


SWIGEXPORT void QFileDialog_selectNameFilter(QFileDialog * self, QString * filter) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QString **)&filter;
  (arg1)->selectNameFilter((QString const &)*arg2);
}


SWIGEXPORT QString * QFileDialog_selectedNameFilter(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QString * cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QFileDialog const *)arg1)->selectedNameFilter());
  return cresult;
}


SWIGEXPORT void QFileDialog_setViewMode(QFileDialog * self, QFileDialog::ViewMode mode) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileDialog::ViewMode arg2 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = (QFileDialog::ViewMode)mode; 
  (arg1)->setViewMode(arg2);
}


SWIGEXPORT QFileDialog::ViewMode QFileDialog_viewMode(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileDialog::ViewMode result;
  QFileDialog::ViewMode cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  result = (QFileDialog::ViewMode)((QFileDialog const *)arg1)->viewMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFileDialog_setFileMode(QFileDialog * self, QFileDialog::FileMode mode) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileDialog::FileMode arg2 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = (QFileDialog::FileMode)mode; 
  (arg1)->setFileMode(arg2);
}


SWIGEXPORT QFileDialog::FileMode QFileDialog_fileMode(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileDialog::FileMode result;
  QFileDialog::FileMode cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  result = (QFileDialog::FileMode)((QFileDialog const *)arg1)->fileMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFileDialog_setAcceptMode(QFileDialog * self, QFileDialog::AcceptMode mode) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileDialog::AcceptMode arg2 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = (QFileDialog::AcceptMode)mode; 
  (arg1)->setAcceptMode(arg2);
}


SWIGEXPORT QFileDialog::AcceptMode QFileDialog_acceptMode(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileDialog::AcceptMode result;
  QFileDialog::AcceptMode cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  result = (QFileDialog::AcceptMode)((QFileDialog const *)arg1)->acceptMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFileDialog_setReadOnly(QFileDialog * self, bool enabled) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  bool arg2 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = enabled ? true : false; 
  (arg1)->setReadOnly(arg2);
}


SWIGEXPORT bool QFileDialog_isReadOnly(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  result = (bool)((QFileDialog const *)arg1)->isReadOnly();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFileDialog_setResolveSymlinks(QFileDialog * self, bool enabled) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  bool arg2 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = enabled ? true : false; 
  (arg1)->setResolveSymlinks(arg2);
}


SWIGEXPORT bool QFileDialog_resolveSymlinks(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  result = (bool)((QFileDialog const *)arg1)->resolveSymlinks();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QByteArray * QFileDialog_saveState(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QFileDialog const *)arg1)->saveState());
  return cresult;
}


SWIGEXPORT bool QFileDialog_restoreState(QFileDialog * self, QByteArray * state) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QByteArray *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QByteArray **)&state;
  result = (bool)(arg1)->restoreState((QByteArray const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFileDialog_setConfirmOverwrite(QFileDialog * self, bool enabled) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  bool arg2 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = enabled ? true : false; 
  (arg1)->setConfirmOverwrite(arg2);
}


SWIGEXPORT bool QFileDialog_confirmOverwrite(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  result = (bool)((QFileDialog const *)arg1)->confirmOverwrite();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFileDialog_setDefaultSuffix(QFileDialog * self, QString * suffix) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QString **)&suffix;
  (arg1)->setDefaultSuffix((QString const &)*arg2);
}


SWIGEXPORT QString * QFileDialog_defaultSuffix(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QString * cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QFileDialog const *)arg1)->defaultSuffix());
  return cresult;
}


SWIGEXPORT void QFileDialog_setHistory(QFileDialog * self, QStringList * paths) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QStringList *arg2 = 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QStringList **)&paths;
  (arg1)->setHistory((QStringList const &)*arg2);
}


SWIGEXPORT QStringList * QFileDialog_history(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QStringList * cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  *(QStringList **)&cresult = new QStringList((const QStringList &)((QFileDialog const *)arg1)->history());
  return cresult;
}


SWIGEXPORT void QFileDialog_setItemDelegate(QFileDialog * self, QAbstractItemDelegate * delegate) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QAbstractItemDelegate *arg2 = (QAbstractItemDelegate *) 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QAbstractItemDelegate **)&delegate; 
  (arg1)->setItemDelegate(arg2);
}


SWIGEXPORT QAbstractItemDelegate * QFileDialog_itemDelegate(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QAbstractItemDelegate *result = 0 ;
  QAbstractItemDelegate * cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  result = (QAbstractItemDelegate *)((QFileDialog const *)arg1)->itemDelegate();
  *(QAbstractItemDelegate **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QFileDialog_setIconProvider(QFileDialog * self, QFileIconProvider * provider) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileIconProvider *arg2 = (QFileIconProvider *) 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QFileIconProvider **)&provider; 
  (arg1)->setIconProvider(arg2);
}


SWIGEXPORT QFileIconProvider * QFileDialog_iconProvider(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileIconProvider *result = 0 ;
  QFileIconProvider * cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  result = (QFileIconProvider *)((QFileDialog const *)arg1)->iconProvider();
  *(QFileIconProvider **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QFileDialog_setLabelText(QFileDialog * self, QFileDialog::DialogLabel label, QString * text) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileDialog::DialogLabel arg2 ;
  QString *arg3 = 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = (QFileDialog::DialogLabel)label; 
  arg3 = *(QString **)&text;
  (arg1)->setLabelText(arg2,(QString const &)*arg3);
}


SWIGEXPORT QString * QFileDialog_labelText(QFileDialog const * self, QFileDialog::DialogLabel label) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileDialog::DialogLabel arg2 ;
  QString * cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = (QFileDialog::DialogLabel)label; 
  *(QString **)&cresult = new QString((const QString &)((QFileDialog const *)arg1)->labelText(arg2));
  return cresult;
}


SWIGEXPORT void QFileDialog_setProxyModel(QFileDialog * self, QAbstractProxyModel * model) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QAbstractProxyModel *arg2 = (QAbstractProxyModel *) 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QAbstractProxyModel **)&model; 
  (arg1)->setProxyModel(arg2);
}


SWIGEXPORT QAbstractProxyModel * QFileDialog_proxyModel(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QAbstractProxyModel *result = 0 ;
  QAbstractProxyModel * cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  result = (QAbstractProxyModel *)((QFileDialog const *)arg1)->proxyModel();
  *(QAbstractProxyModel **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QFileDialog_setOption(QFileDialog * self, QFileDialog::Option option, bool on) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileDialog::Option arg2 ;
  bool arg3 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = (QFileDialog::Option)option; 
  arg3 = on ? true : false; 
  (arg1)->setOption(arg2,arg3);
}


SWIGEXPORT void QFileDialog_setOption1(QFileDialog * self, QFileDialog::Option option) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileDialog::Option arg2 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = (QFileDialog::Option)option; 
  (arg1)->setOption(arg2);
}


SWIGEXPORT bool QFileDialog_testOption(QFileDialog const * self, QFileDialog::Option option) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QFileDialog::Option arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = (QFileDialog::Option)option; 
  result = (bool)((QFileDialog const *)arg1)->testOption(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFileDialog_setOptions(QFileDialog * self, Options options) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  Options arg2 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = (Options)options; 
  (arg1)->setOptions(arg2);
}


SWIGEXPORT Options QFileDialog_options(QFileDialog const * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  Options cresult ;
  
  arg1 = *(QFileDialog **)&self; 
  *(Options **)&cresult = new Options((const Options &)((QFileDialog const *)arg1)->options());
  return cresult;
}


SWIGEXPORT void QFileDialog_open0_0(QFileDialog * self) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  (arg1)->open();
}


SWIGEXPORT void QFileDialog_open1(QFileDialog * self, QObject * receiver, char * member) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  QObject *arg2 = (QObject *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = *(QObject **)&receiver; 
  {
    arg3 = member;
  }
  (arg1)->open(arg2,(char const *)arg3);
}


SWIGEXPORT void QFileDialog_setVisible(QFileDialog * self, bool visible) {
  QFileDialog *arg1 = (QFileDialog *) 0 ;
  bool arg2 ;
  
  arg1 = *(QFileDialog **)&self; 
  arg2 = visible ? true : false; 
  (arg1)->setVisible(arg2);
}


SWIGEXPORT QString * GetOpenFileName(QWidget * parent, QString * caption, QString * dir, QString * filter, QString * selectedFilter, Options options) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  QString *arg5 = (QString *) 0 ;
  Options arg6 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  arg4 = *(QString **)&filter;
  arg5 = *(QString **)&selectedFilter; 
  arg6 = (Options)options; 
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getOpenFileName(arg1,(QString const &)*arg2,(QString const &)*arg3,(QString const &)*arg4,arg5,arg6));
  return cresult;
}


SWIGEXPORT QString * GetOpenFileName1(QWidget * parent, QString * caption, QString * dir, QString * filter, QString * selectedFilter) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  QString *arg5 = (QString *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  arg4 = *(QString **)&filter;
  arg5 = *(QString **)&selectedFilter; 
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getOpenFileName(arg1,(QString const &)*arg2,(QString const &)*arg3,(QString const &)*arg4,arg5));
  return cresult;
}


SWIGEXPORT QString * GetOpenFileName2(QWidget * parent, QString * caption, QString * dir, QString * filter) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  arg4 = *(QString **)&filter;
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getOpenFileName(arg1,(QString const &)*arg2,(QString const &)*arg3,(QString const &)*arg4));
  return cresult;
}


SWIGEXPORT QString * GetOpenFileName3(QWidget * parent, QString * caption, QString * dir) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getOpenFileName(arg1,(QString const &)*arg2,(QString const &)*arg3));
  return cresult;
}


SWIGEXPORT QString * GetOpenFileName4(QWidget * parent, QString * caption) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getOpenFileName(arg1,(QString const &)*arg2));
  return cresult;
}


SWIGEXPORT QString * GetOpenFileName5(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getOpenFileName(arg1));
  return cresult;
}


SWIGEXPORT QString * GetOpenFileName6() {
  QString * cresult ;
  
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getOpenFileName());
  return cresult;
}


SWIGEXPORT QString * GetSaveFileName(QWidget * parent, QString * caption, QString * dir, QString * filter, QString * selectedFilter, Options options) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  QString *arg5 = (QString *) 0 ;
  Options arg6 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  arg4 = *(QString **)&filter;
  arg5 = *(QString **)&selectedFilter; 
  arg6 = (Options)options; 
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getSaveFileName(arg1,(QString const &)*arg2,(QString const &)*arg3,(QString const &)*arg4,arg5,arg6));
  return cresult;
}


SWIGEXPORT QString * GetSaveFileName1(QWidget * parent, QString * caption, QString * dir, QString * filter, QString * selectedFilter) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  QString *arg5 = (QString *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  arg4 = *(QString **)&filter;
  arg5 = *(QString **)&selectedFilter; 
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getSaveFileName(arg1,(QString const &)*arg2,(QString const &)*arg3,(QString const &)*arg4,arg5));
  return cresult;
}


SWIGEXPORT QString * GetSaveFileName2(QWidget * parent, QString * caption, QString * dir, QString * filter) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  arg4 = *(QString **)&filter;
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getSaveFileName(arg1,(QString const &)*arg2,(QString const &)*arg3,(QString const &)*arg4));
  return cresult;
}


SWIGEXPORT QString * GetSaveFileName3(QWidget * parent, QString * caption, QString * dir) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getSaveFileName(arg1,(QString const &)*arg2,(QString const &)*arg3));
  return cresult;
}


SWIGEXPORT QString * GetSaveFileName4(QWidget * parent, QString * caption) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getSaveFileName(arg1,(QString const &)*arg2));
  return cresult;
}


SWIGEXPORT QString * GetSaveFileName5(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getSaveFileName(arg1));
  return cresult;
}


SWIGEXPORT QString * GetSaveFileName6() {
  QString * cresult ;
  
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getSaveFileName());
  return cresult;
}


SWIGEXPORT QString * GetExistingDirectory(QWidget * parent, QString * caption, QString * dir, Options options) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  Options arg4 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  arg4 = (Options)options; 
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getExistingDirectory(arg1,(QString const &)*arg2,(QString const &)*arg3,arg4));
  return cresult;
}


SWIGEXPORT QString * GetExistingDirectory1(QWidget * parent, QString * caption, QString * dir) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getExistingDirectory(arg1,(QString const &)*arg2,(QString const &)*arg3));
  return cresult;
}


SWIGEXPORT QString * GetExistingDirectory2(QWidget * parent, QString * caption) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getExistingDirectory(arg1,(QString const &)*arg2));
  return cresult;
}


SWIGEXPORT QString * GetExistingDirectory3(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getExistingDirectory(arg1));
  return cresult;
}


SWIGEXPORT QString * GetExistingDirectory4() {
  QString * cresult ;
  
  *(QString **)&cresult = new QString((const QString &)QFileDialog::getExistingDirectory());
  return cresult;
}


SWIGEXPORT QStringList * GetOpenFileNames(QWidget * parent, QString * caption, QString * dir, QString * filter, QString * selectedFilter, Options options) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  QString *arg5 = (QString *) 0 ;
  Options arg6 ;
  QStringList * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  arg4 = *(QString **)&filter;
  arg5 = *(QString **)&selectedFilter; 
  arg6 = (Options)options; 
  *(QStringList **)&cresult = new QStringList((const QStringList &)QFileDialog::getOpenFileNames(arg1,(QString const &)*arg2,(QString const &)*arg3,(QString const &)*arg4,arg5,arg6));
  return cresult;
}


SWIGEXPORT QStringList * GetOpenFileNames1(QWidget * parent, QString * caption, QString * dir, QString * filter, QString * selectedFilter) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  QString *arg5 = (QString *) 0 ;
  QStringList * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  arg4 = *(QString **)&filter;
  arg5 = *(QString **)&selectedFilter; 
  *(QStringList **)&cresult = new QStringList((const QStringList &)QFileDialog::getOpenFileNames(arg1,(QString const &)*arg2,(QString const &)*arg3,(QString const &)*arg4,arg5));
  return cresult;
}


SWIGEXPORT QStringList * GetOpenFileNames2(QWidget * parent, QString * caption, QString * dir, QString * filter) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QString *arg4 = 0 ;
  QStringList * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  arg4 = *(QString **)&filter;
  *(QStringList **)&cresult = new QStringList((const QStringList &)QFileDialog::getOpenFileNames(arg1,(QString const &)*arg2,(QString const &)*arg3,(QString const &)*arg4));
  return cresult;
}


SWIGEXPORT QStringList * GetOpenFileNames3(QWidget * parent, QString * caption, QString * dir) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QString *arg3 = 0 ;
  QStringList * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  arg3 = *(QString **)&dir;
  *(QStringList **)&cresult = new QStringList((const QStringList &)QFileDialog::getOpenFileNames(arg1,(QString const &)*arg2,(QString const &)*arg3));
  return cresult;
}


SWIGEXPORT QStringList * GetOpenFileNames4(QWidget * parent, QString * caption) {
  QWidget *arg1 = (QWidget *) 0 ;
  QString *arg2 = 0 ;
  QStringList * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  arg2 = *(QString **)&caption;
  *(QStringList **)&cresult = new QStringList((const QStringList &)QFileDialog::getOpenFileNames(arg1,(QString const &)*arg2));
  return cresult;
}


SWIGEXPORT QStringList * GetOpenFileNames5(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QStringList * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  *(QStringList **)&cresult = new QStringList((const QStringList &)QFileDialog::getOpenFileNames(arg1));
  return cresult;
}


SWIGEXPORT QStringList * GetOpenFileNames6() {
  QStringList * cresult ;
  
  *(QStringList **)&cresult = new QStringList((const QStringList &)QFileDialog::getOpenFileNames());
  return cresult;
}


SWIGEXPORT long Modula3_QFileDialogToQDialog(long objectRef) {
    long baseptr = 0;
    *(QDialog **)&baseptr = *(QFileDialog **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

