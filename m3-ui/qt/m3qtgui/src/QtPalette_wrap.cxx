/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qpalette.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QPalette * New_QPalette0() {
  QPalette *result = 0 ;
  QPalette * cresult ;
  
  result = (QPalette *)new QPalette();
  *(QPalette **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPalette * New_QPalette1(QColor * button) {
  QColor *arg1 = 0 ;
  QPalette *result = 0 ;
  QPalette * cresult ;
  
  arg1 = *(QColor **)&button;
  result = (QPalette *)new QPalette((QColor const &)*arg1);
  *(QPalette **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPalette * New_QPalette2(Qt::GlobalColor button) {
  Qt::GlobalColor arg1 ;
  QPalette *result = 0 ;
  QPalette * cresult ;
  
  arg1 = (Qt::GlobalColor)button; 
  result = (QPalette *)new QPalette(arg1);
  *(QPalette **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPalette * New_QPalette3(QColor * button, QColor * window) {
  QColor *arg1 = 0 ;
  QColor *arg2 = 0 ;
  QPalette *result = 0 ;
  QPalette * cresult ;
  
  arg1 = *(QColor **)&button;
  arg2 = *(QColor **)&window;
  result = (QPalette *)new QPalette((QColor const &)*arg1,(QColor const &)*arg2);
  *(QPalette **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPalette * New_QPalette4(QBrush * windowText, QBrush * button, QBrush * light, QBrush * dark, QBrush * mid, QBrush * text, QBrush * bright_text, QBrush * base, QBrush * window) {
  QBrush *arg1 = 0 ;
  QBrush *arg2 = 0 ;
  QBrush *arg3 = 0 ;
  QBrush *arg4 = 0 ;
  QBrush *arg5 = 0 ;
  QBrush *arg6 = 0 ;
  QBrush *arg7 = 0 ;
  QBrush *arg8 = 0 ;
  QBrush *arg9 = 0 ;
  QPalette *result = 0 ;
  QPalette * cresult ;
  
  arg1 = *(QBrush **)&windowText;
  arg2 = *(QBrush **)&button;
  arg3 = *(QBrush **)&light;
  arg4 = *(QBrush **)&dark;
  arg5 = *(QBrush **)&mid;
  arg6 = *(QBrush **)&text;
  arg7 = *(QBrush **)&bright_text;
  arg8 = *(QBrush **)&base;
  arg9 = *(QBrush **)&window;
  result = (QPalette *)new QPalette((QBrush const &)*arg1,(QBrush const &)*arg2,(QBrush const &)*arg3,(QBrush const &)*arg4,(QBrush const &)*arg5,(QBrush const &)*arg6,(QBrush const &)*arg7,(QBrush const &)*arg8,(QBrush const &)*arg9);
  *(QPalette **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPalette * New_QPalette5(QColor * windowText, QColor * window, QColor * light, QColor * dark, QColor * mid, QColor * text, QColor * base) {
  QColor *arg1 = 0 ;
  QColor *arg2 = 0 ;
  QColor *arg3 = 0 ;
  QColor *arg4 = 0 ;
  QColor *arg5 = 0 ;
  QColor *arg6 = 0 ;
  QColor *arg7 = 0 ;
  QPalette *result = 0 ;
  QPalette * cresult ;
  
  arg1 = *(QColor **)&windowText;
  arg2 = *(QColor **)&window;
  arg3 = *(QColor **)&light;
  arg4 = *(QColor **)&dark;
  arg5 = *(QColor **)&mid;
  arg6 = *(QColor **)&text;
  arg7 = *(QColor **)&base;
  result = (QPalette *)new QPalette((QColor const &)*arg1,(QColor const &)*arg2,(QColor const &)*arg3,(QColor const &)*arg4,(QColor const &)*arg5,(QColor const &)*arg6,(QColor const &)*arg7);
  *(QPalette **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPalette * New_QPalette6(QPalette * palette) {
  QPalette *arg1 = 0 ;
  QPalette *result = 0 ;
  QPalette * cresult ;
  
  arg1 = *(QPalette **)&palette;
  result = (QPalette *)new QPalette((QPalette const &)*arg1);
  *(QPalette **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QPalette(QPalette * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  
  arg1 = *(QPalette **)&self; 
  delete arg1;
}


SWIGEXPORT QPalette * QPalette_Op_Brush_Assign(QPalette * self, QPalette * palette) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette *arg2 = 0 ;
  QPalette *result = 0 ;
  QPalette * cresult ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = *(QPalette **)&palette;
  result = (QPalette *) &(arg1)->operator =((QPalette const &)*arg2);
  *(QPalette **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPalette::ColorGroup QPalette_currentColorGroup(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorGroup result;
  QPalette::ColorGroup cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QPalette::ColorGroup)((QPalette const *)arg1)->currentColorGroup();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPalette_setCurrentColorGroup(QPalette * self, QPalette::ColorGroup cg) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorGroup arg2 ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorGroup)cg; 
  (arg1)->setCurrentColorGroup(arg2);
}


SWIGEXPORT QColor * QPalette_color(QPalette const * self, QPalette::ColorGroup cg, QPalette::ColorRole cr) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorGroup arg2 ;
  QPalette::ColorRole arg3 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorGroup)cg; 
  arg3 = (QPalette::ColorRole)cr; 
  result = (QColor *) &((QPalette const *)arg1)->color(arg2,arg3);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_brush(QPalette const * self, QPalette::ColorGroup cg, QPalette::ColorRole cr) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorGroup arg2 ;
  QPalette::ColorRole arg3 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorGroup)cg; 
  arg3 = (QPalette::ColorRole)cr; 
  result = (QBrush *) &((QPalette const *)arg1)->brush(arg2,arg3);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QPalette_setColor(QPalette * self, QPalette::ColorGroup cg, QPalette::ColorRole cr, QColor * color) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorGroup arg2 ;
  QPalette::ColorRole arg3 ;
  QColor *arg4 = 0 ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorGroup)cg; 
  arg3 = (QPalette::ColorRole)cr; 
  arg4 = *(QColor **)&color;
  (arg1)->setColor(arg2,arg3,(QColor const &)*arg4);
}


SWIGEXPORT void QPalette_setColor1(QPalette * self, QPalette::ColorRole cr, QColor * color) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorRole arg2 ;
  QColor *arg3 = 0 ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorRole)cr; 
  arg3 = *(QColor **)&color;
  (arg1)->setColor(arg2,(QColor const &)*arg3);
}


SWIGEXPORT void QPalette_setBrush(QPalette * self, QPalette::ColorRole cr, QBrush * brush) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorRole arg2 ;
  QBrush *arg3 = 0 ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorRole)cr; 
  arg3 = *(QBrush **)&brush;
  (arg1)->setBrush(arg2,(QBrush const &)*arg3);
}


SWIGEXPORT bool QPalette_isBrushSet(QPalette const * self, QPalette::ColorGroup cg, QPalette::ColorRole cr) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorGroup arg2 ;
  QPalette::ColorRole arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorGroup)cg; 
  arg3 = (QPalette::ColorRole)cr; 
  result = (bool)((QPalette const *)arg1)->isBrushSet(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPalette_setBrush1(QPalette * self, QPalette::ColorGroup cg, QPalette::ColorRole cr, QBrush * brush) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorGroup arg2 ;
  QPalette::ColorRole arg3 ;
  QBrush *arg4 = 0 ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorGroup)cg; 
  arg3 = (QPalette::ColorRole)cr; 
  arg4 = *(QBrush **)&brush;
  (arg1)->setBrush(arg2,arg3,(QBrush const &)*arg4);
}


SWIGEXPORT void QPalette_setColorGroup(QPalette * self, QPalette::ColorGroup cr, QBrush * windowText, QBrush * button, QBrush * light, QBrush * dark, QBrush * mid, QBrush * text, QBrush * bright_text, QBrush * base, QBrush * window) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorGroup arg2 ;
  QBrush *arg3 = 0 ;
  QBrush *arg4 = 0 ;
  QBrush *arg5 = 0 ;
  QBrush *arg6 = 0 ;
  QBrush *arg7 = 0 ;
  QBrush *arg8 = 0 ;
  QBrush *arg9 = 0 ;
  QBrush *arg10 = 0 ;
  QBrush *arg11 = 0 ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorGroup)cr; 
  arg3 = *(QBrush **)&windowText;
  arg4 = *(QBrush **)&button;
  arg5 = *(QBrush **)&light;
  arg6 = *(QBrush **)&dark;
  arg7 = *(QBrush **)&mid;
  arg8 = *(QBrush **)&text;
  arg9 = *(QBrush **)&bright_text;
  arg10 = *(QBrush **)&base;
  arg11 = *(QBrush **)&window;
  (arg1)->setColorGroup(arg2,(QBrush const &)*arg3,(QBrush const &)*arg4,(QBrush const &)*arg5,(QBrush const &)*arg6,(QBrush const &)*arg7,(QBrush const &)*arg8,(QBrush const &)*arg9,(QBrush const &)*arg10,(QBrush const &)*arg11);
}


SWIGEXPORT bool QPalette_isEqual(QPalette const * self, QPalette::ColorGroup cr1, QPalette::ColorGroup cr2) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorGroup arg2 ;
  QPalette::ColorGroup arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorGroup)cr1; 
  arg3 = (QPalette::ColorGroup)cr2; 
  result = (bool)((QPalette const *)arg1)->isEqual(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QColor * QPalette_color1(QPalette const * self, QPalette::ColorRole cr) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorRole arg2 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorRole)cr; 
  result = (QColor *) &((QPalette const *)arg1)->color(arg2);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_brush1(QPalette const * self, QPalette::ColorRole cr) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette::ColorRole arg2 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (QPalette::ColorRole)cr; 
  result = (QBrush *) &((QPalette const *)arg1)->brush(arg2);
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_foreground(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->foreground();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_windowText(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->windowText();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_button(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->button();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_light(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->light();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_dark(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->dark();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_mid(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->mid();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_text(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->text();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_base(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->base();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_alternateBase(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->alternateBase();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_toolTipBase(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->toolTipBase();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_toolTipText(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->toolTipText();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_background(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->background();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_window(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->window();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_midlight(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->midlight();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_brightText(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->brightText();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_buttonText(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->buttonText();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_shadow(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->shadow();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_highlight(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->highlight();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_highlightedText(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->highlightedText();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_link(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->link();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QBrush * QPalette_linkVisited(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  QBrush *result = 0 ;
  QBrush * cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (QBrush *) &((QPalette const *)arg1)->linkVisited();
  *(QBrush **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPalette_Op_Brush_Equals(QPalette const * self, QPalette * p) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = *(QPalette **)&p;
  result = (bool)((QPalette const *)arg1)->operator ==((QPalette const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPalette_Op_Brush_NotEquals(QPalette const * self, QPalette * p) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = *(QPalette **)&p;
  result = (bool)((QPalette const *)arg1)->operator !=((QPalette const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPalette_isCopyOf(QPalette const * self, QPalette * p) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = *(QPalette **)&p;
  result = (bool)((QPalette const *)arg1)->isCopyOf((QPalette const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QPalette_serialNumber(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (int)((QPalette const *)arg1)->serialNumber();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned long QPalette_cacheKey(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  unsigned long result;
  unsigned long cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (unsigned long)((QPalette const *)arg1)->cacheKey();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPalette * QPalette_resolve(QPalette const * self, QPalette * m3arg2) {
  QPalette *arg1 = (QPalette *) 0 ;
  QPalette *arg2 = 0 ;
  QPalette * cresult ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = *(QPalette **)&m3arg2;
  *(QPalette **)&cresult = new QPalette((const QPalette &)((QPalette const *)arg1)->resolve((QPalette const &)*arg2));
  return cresult;
}


SWIGEXPORT unsigned int QPalette_resolve1(QPalette const * self) {
  QPalette *arg1 = (QPalette *) 0 ;
  unsigned int result;
  unsigned int cresult ;
  
  arg1 = *(QPalette **)&self; 
  result = (unsigned int)((QPalette const *)arg1)->resolve();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPalette_resolve2(QPalette * self, unsigned int mask) {
  QPalette *arg1 = (QPalette *) 0 ;
  unsigned int arg2 ;
  
  arg1 = *(QPalette **)&self; 
  arg2 = (unsigned int)mask; 
  (arg1)->resolve(arg2);
}


#ifdef __cplusplus
}
#endif

