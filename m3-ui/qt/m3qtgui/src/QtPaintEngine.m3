(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtPaintEngine;


FROM QtTransform IMPORT QTransform;
FROM QtPoint IMPORT QPointF, QPoint;
FROM QtPaintDevice IMPORT QPaintDevice;
FROM QtPixmap IMPORT QPixmap;
FROM QtPen IMPORT QPen;
FROM QtLine IMPORT QLine, QLineF;
FROM QtNamespace IMPORT ClipOperation, ImageConversionFlags, BGMode;
FROM QtFont IMPORT QFont;
FROM QtImage IMPORT QImage;
FROM QtRect IMPORT QRect, QRectF;
FROM QtMatrix IMPORT QMatrix;
FROM QtRegion IMPORT QRegion;
FROM QtBrush IMPORT QBrush;
IMPORT QtPaintEngineRaw;


IMPORT WeakRef;
IMPORT Ctypes AS C;
FROM QtString IMPORT QString;
FROM QtByteArray IMPORT QByteArray;

PROCEDURE QTextItem_descent (self: QTextItem; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPaintEngineRaw.QTextItem_descent(selfAdr);
  END QTextItem_descent;

PROCEDURE QTextItem_ascent (self: QTextItem; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPaintEngineRaw.QTextItem_ascent(selfAdr);
  END QTextItem_ascent;

PROCEDURE QTextItem_width (self: QTextItem; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPaintEngineRaw.QTextItem_width(selfAdr);
  END QTextItem_width;

PROCEDURE QTextItem_renderFlags (self: QTextItem; ): RenderFlags =
  VAR
    ret    : INTEGER;
    result : RenderFlags;
    selfAdr: ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QTextItem_renderFlags(selfAdr);
    result := VAL(ret, RenderFlags);
    RETURN result;
  END QTextItem_renderFlags;

PROCEDURE QTextItem_text (self: QTextItem; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QTextItem_text(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextItem_text;

PROCEDURE QTextItem_font (self: QTextItem; ): QFont =
  VAR
    ret    : ADDRESS;
    result : QFont;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QTextItem_font(selfAdr);

    result := NEW(QFont);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextItem_font;

PROCEDURE Delete_QTextItem (self: QTextItem; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.Delete_QTextItem(selfAdr);
  END Delete_QTextItem;

PROCEDURE Cleanup_QTextItem
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTextItem := ref;
  BEGIN
    Delete_QTextItem(obj);
  END Cleanup_QTextItem;

PROCEDURE Destroy_QTextItem (self: QTextItem) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTextItem);
  END Destroy_QTextItem;

REVEAL
  QTextItem = QTextItemPublic BRANDED OBJECT
              OVERRIDES
                descent     := QTextItem_descent;
                ascent      := QTextItem_ascent;
                width       := QTextItem_width;
                renderFlags := QTextItem_renderFlags;
                text        := QTextItem_text;
                font        := QTextItem_font;
                destroyCxx  := Destroy_QTextItem;
              END;

PROCEDURE Delete_QPaintEngine (self: QPaintEngine; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.Delete_QPaintEngine(selfAdr);
  END Delete_QPaintEngine;

PROCEDURE QPaintEngine_isActive (self: QPaintEngine; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPaintEngineRaw.QPaintEngine_isActive(selfAdr);
  END QPaintEngine_isActive;

PROCEDURE QPaintEngine_setActive
  (self: QPaintEngine; newState: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_setActive(selfAdr, newState);
  END QPaintEngine_setActive;

PROCEDURE QPaintEngine_drawRects
  (self: QPaintEngine; rects: QRect; rectCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rects.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawRects(selfAdr, arg2tmp, rectCount);
  END QPaintEngine_drawRects;

PROCEDURE QPaintEngine_drawRects1
  (self: QPaintEngine; rects: QRectF; rectCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rects.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawRects1(selfAdr, arg2tmp, rectCount);
  END QPaintEngine_drawRects1;

PROCEDURE QPaintEngine_drawLines
  (self: QPaintEngine; lines: QLine; lineCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(lines.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawLines(selfAdr, arg2tmp, lineCount);
  END QPaintEngine_drawLines;

PROCEDURE QPaintEngine_drawLines1
  (self: QPaintEngine; lines: QLineF; lineCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(lines.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawLines1(selfAdr, arg2tmp, lineCount);
  END QPaintEngine_drawLines1;

PROCEDURE QPaintEngine_drawEllipse (self: QPaintEngine; r: QRectF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawEllipse(selfAdr, arg2tmp);
  END QPaintEngine_drawEllipse;

PROCEDURE QPaintEngine_drawEllipse1 (self: QPaintEngine; r: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawEllipse1(selfAdr, arg2tmp);
  END QPaintEngine_drawEllipse1;

PROCEDURE QPaintEngine_drawPoints
  (self: QPaintEngine; points: QPointF; pointCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawPoints(selfAdr, arg2tmp, pointCount);
  END QPaintEngine_drawPoints;

PROCEDURE QPaintEngine_drawPoints1
  (self: QPaintEngine; points: QPoint; pointCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawPoints1(selfAdr, arg2tmp, pointCount);
  END QPaintEngine_drawPoints1;

PROCEDURE QPaintEngine_drawPolygon (self      : QPaintEngine;
                                    points    : QPointF;
                                    pointCount: INTEGER;
                                    mode      : PolygonDrawMode; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawPolygon(
      selfAdr, arg2tmp, pointCount, ORD(mode));
  END QPaintEngine_drawPolygon;

PROCEDURE QPaintEngine_drawPolygon1 (self      : QPaintEngine;
                                     points    : QPoint;
                                     pointCount: INTEGER;
                                     mode      : PolygonDrawMode; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawPolygon1(
      selfAdr, arg2tmp, pointCount, ORD(mode));
  END QPaintEngine_drawPolygon1;

PROCEDURE QPaintEngine_drawTiledPixmap
  (self: QPaintEngine; r: QRectF; pixmap: QPixmap; s: QPointF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pixmap.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(s.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawTiledPixmap(
      selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPaintEngine_drawTiledPixmap;

PROCEDURE QPaintEngine_drawImage (self : QPaintEngine;
                                  r    : QRectF;
                                  pm   : QImage;
                                  sr   : QRectF;
                                  flags: ImageConversionFlags; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sr.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawImage(
      selfAdr, arg2tmp, arg3tmp, arg4tmp, ORD(flags));
  END QPaintEngine_drawImage;

PROCEDURE QPaintEngine_drawImage1
  (self: QPaintEngine; r: QRectF; pm: QImage; sr: QRectF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sr.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_drawImage1(
      selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPaintEngine_drawImage1;

PROCEDURE QPaintEngine_setPaintDevice
  (self: QPaintEngine; device: QPaintDevice; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(device.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_setPaintDevice(selfAdr, arg2tmp);
  END QPaintEngine_setPaintDevice;

PROCEDURE QPaintEngine_paintDevice (self: QPaintEngine; ): QPaintDevice =
  VAR
    ret    : ADDRESS;
    result : QPaintDevice;
    selfAdr: ADDRESS      := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngine_paintDevice(selfAdr);

    result := NEW(QPaintDevice);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngine_paintDevice;

PROCEDURE QPaintEngine_setSystemClip
  (self: QPaintEngine; baseClip: QRegion; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(baseClip.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_setSystemClip(selfAdr, arg2tmp);
  END QPaintEngine_setSystemClip;

PROCEDURE QPaintEngine_systemClip (self: QPaintEngine; ): QRegion =
  VAR
    ret    : ADDRESS;
    result : QRegion;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngine_systemClip(selfAdr);

    result := NEW(QRegion);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngine_systemClip;

PROCEDURE QPaintEngine_setSystemRect (self: QPaintEngine; rect: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_setSystemRect(selfAdr, arg2tmp);
  END QPaintEngine_setSystemRect;

PROCEDURE QPaintEngine_systemRect (self: QPaintEngine; ): QRect =
  VAR
    ret    : ADDRESS;
    result : QRect;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngine_systemRect(selfAdr);

    result := NEW(QRect);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngine_systemRect;

PROCEDURE QPaintEngine_coordinateOffset (self: QPaintEngine; ): QPoint =
  VAR
    ret    : ADDRESS;
    result : QPoint;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngine_coordinateOffset(selfAdr);

    result := NEW(QPoint);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngine_coordinateOffset;

PROCEDURE QPaintEngine_fix_neg_rect
  (self: QPaintEngine; VAR x, y, w, h: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp: C.int;
    arg3tmp: C.int;
    arg4tmp: C.int;
    arg5tmp: C.int;
  BEGIN
    arg2tmp := x;
    arg3tmp := y;
    arg4tmp := w;
    arg5tmp := h;
    QtPaintEngineRaw.QPaintEngine_fix_neg_rect(
      selfAdr, arg2tmp, arg3tmp, arg4tmp, arg5tmp);
    x := arg2tmp;
    y := arg3tmp;
    w := arg4tmp;
    h := arg5tmp;
  END QPaintEngine_fix_neg_rect;

PROCEDURE QPaintEngine_testDirty (self: QPaintEngine; df: DirtyFlags; ):
  BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPaintEngineRaw.QPaintEngine_testDirty(selfAdr, ORD(df));
  END QPaintEngine_testDirty;

PROCEDURE QPaintEngine_setDirty (self: QPaintEngine; df: DirtyFlags; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_setDirty(selfAdr, ORD(df));
  END QPaintEngine_setDirty;

PROCEDURE QPaintEngine_clearDirty (self: QPaintEngine; df: DirtyFlags; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_clearDirty(selfAdr, ORD(df));
  END QPaintEngine_clearDirty;

PROCEDURE QPaintEngine_hasFeature
  (self: QPaintEngine; feature: PaintEngineFeatures; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPaintEngineRaw.QPaintEngine_hasFeature(selfAdr, ORD(feature));
  END QPaintEngine_hasFeature;

PROCEDURE QPaintEngine_syncState (self: QPaintEngine; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.QPaintEngine_syncState(selfAdr);
  END QPaintEngine_syncState;

PROCEDURE QPaintEngine_isExtended (self: QPaintEngine; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPaintEngineRaw.QPaintEngine_isExtended(selfAdr);
  END QPaintEngine_isExtended;

PROCEDURE Cleanup_QPaintEngine
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QPaintEngine := ref;
  BEGIN
    Delete_QPaintEngine(obj);
  END Cleanup_QPaintEngine;

PROCEDURE Destroy_QPaintEngine (self: QPaintEngine) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QPaintEngine);
  END Destroy_QPaintEngine;

REVEAL
  QPaintEngine = QPaintEnginePublic BRANDED OBJECT
                 OVERRIDES
                   isActive         := QPaintEngine_isActive;
                   setActive        := QPaintEngine_setActive;
                   drawRects        := QPaintEngine_drawRects;
                   drawRects1       := QPaintEngine_drawRects1;
                   drawLines        := QPaintEngine_drawLines;
                   drawLines1       := QPaintEngine_drawLines1;
                   drawEllipse      := QPaintEngine_drawEllipse;
                   drawEllipse1     := QPaintEngine_drawEllipse1;
                   drawPoints       := QPaintEngine_drawPoints;
                   drawPoints1      := QPaintEngine_drawPoints1;
                   drawPolygon      := QPaintEngine_drawPolygon;
                   drawPolygon1     := QPaintEngine_drawPolygon1;
                   drawTiledPixmap  := QPaintEngine_drawTiledPixmap;
                   drawImage        := QPaintEngine_drawImage;
                   drawImage1       := QPaintEngine_drawImage1;
                   setPaintDevice   := QPaintEngine_setPaintDevice;
                   paintDevice      := QPaintEngine_paintDevice;
                   setSystemClip    := QPaintEngine_setSystemClip;
                   systemClip       := QPaintEngine_systemClip;
                   setSystemRect    := QPaintEngine_setSystemRect;
                   systemRect       := QPaintEngine_systemRect;
                   coordinateOffset := QPaintEngine_coordinateOffset;
                   fix_neg_rect     := QPaintEngine_fix_neg_rect;
                   testDirty        := QPaintEngine_testDirty;
                   setDirty         := QPaintEngine_setDirty;
                   clearDirty       := QPaintEngine_clearDirty;
                   hasFeature       := QPaintEngine_hasFeature;
                   syncState        := QPaintEngine_syncState;
                   isExtended       := QPaintEngine_isExtended;
                   destroyCxx       := Destroy_QPaintEngine;
                 END;

PROCEDURE QPaintEngineState_state (self: QPaintEngineState; ): DirtyFlags =
  VAR
    ret    : INTEGER;
    result : DirtyFlags;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngineState_state(selfAdr);
    result := VAL(ret, DirtyFlags);
    RETURN result;
  END QPaintEngineState_state;

PROCEDURE QPaintEngineState_pen (self: QPaintEngineState; ): QPen =
  VAR
    ret    : ADDRESS;
    result : QPen;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngineState_pen(selfAdr);

    result := NEW(QPen);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngineState_pen;

PROCEDURE QPaintEngineState_brush (self: QPaintEngineState; ): QBrush =
  VAR
    ret    : ADDRESS;
    result : QBrush;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngineState_brush(selfAdr);

    result := NEW(QBrush);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngineState_brush;

PROCEDURE QPaintEngineState_brushOrigin (self: QPaintEngineState; ):
  QPointF =
  VAR
    ret    : ADDRESS;
    result : QPointF;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngineState_brushOrigin(selfAdr);

    result := NEW(QPointF);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngineState_brushOrigin;

PROCEDURE QPaintEngineState_backgroundBrush (self: QPaintEngineState; ):
  QBrush =
  VAR
    ret    : ADDRESS;
    result : QBrush;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngineState_backgroundBrush(selfAdr);

    result := NEW(QBrush);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngineState_backgroundBrush;

PROCEDURE QPaintEngineState_backgroundMode (self: QPaintEngineState; ):
  BGMode =
  VAR
    ret    : INTEGER;
    result : BGMode;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngineState_backgroundMode(selfAdr);
    result := VAL(ret, BGMode);
    RETURN result;
  END QPaintEngineState_backgroundMode;

PROCEDURE QPaintEngineState_font (self: QPaintEngineState; ): QFont =
  VAR
    ret    : ADDRESS;
    result : QFont;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngineState_font(selfAdr);

    result := NEW(QFont);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngineState_font;

PROCEDURE QPaintEngineState_matrix (self: QPaintEngineState; ): QMatrix =
  VAR
    ret    : ADDRESS;
    result : QMatrix;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngineState_matrix(selfAdr);

    result := NEW(QMatrix);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngineState_matrix;

PROCEDURE QPaintEngineState_transform (self: QPaintEngineState; ):
  QTransform =
  VAR
    ret    : ADDRESS;
    result : QTransform;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngineState_transform(selfAdr);

    result := NEW(QTransform);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngineState_transform;

PROCEDURE QPaintEngineState_clipOperation (self: QPaintEngineState; ):
  ClipOperation =
  VAR
    ret    : INTEGER;
    result : ClipOperation;
    selfAdr: ADDRESS       := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngineState_clipOperation(selfAdr);
    result := VAL(ret, ClipOperation);
    RETURN result;
  END QPaintEngineState_clipOperation;

PROCEDURE QPaintEngineState_clipRegion (self: QPaintEngineState; ):
  QRegion =
  VAR
    ret    : ADDRESS;
    result : QRegion;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPaintEngineRaw.QPaintEngineState_clipRegion(selfAdr);

    result := NEW(QRegion);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPaintEngineState_clipRegion;

PROCEDURE QPaintEngineState_isClipEnabled (self: QPaintEngineState; ):
  BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPaintEngineRaw.QPaintEngineState_isClipEnabled(selfAdr);
  END QPaintEngineState_isClipEnabled;

PROCEDURE QPaintEngineState_opacity (self: QPaintEngineState; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPaintEngineRaw.QPaintEngineState_opacity(selfAdr);
  END QPaintEngineState_opacity;

PROCEDURE QPaintEngineState_brushNeedsResolving
  (self: QPaintEngineState; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPaintEngineRaw.QPaintEngineState_brushNeedsResolving(selfAdr);
  END QPaintEngineState_brushNeedsResolving;

PROCEDURE QPaintEngineState_penNeedsResolving (self: QPaintEngineState; ):
  BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPaintEngineRaw.QPaintEngineState_penNeedsResolving(selfAdr);
  END QPaintEngineState_penNeedsResolving;

PROCEDURE Delete_QPaintEngineState (self: QPaintEngineState; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPaintEngineRaw.Delete_QPaintEngineState(selfAdr);
  END Delete_QPaintEngineState;

PROCEDURE Cleanup_QPaintEngineState
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QPaintEngineState := ref;
  BEGIN
    Delete_QPaintEngineState(obj);
  END Cleanup_QPaintEngineState;

PROCEDURE Destroy_QPaintEngineState (self: QPaintEngineState) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QPaintEngineState);
  END Destroy_QPaintEngineState;

REVEAL
  QPaintEngineState =
    QPaintEngineStatePublic BRANDED OBJECT
    OVERRIDES
      state               := QPaintEngineState_state;
      pen                 := QPaintEngineState_pen;
      brush               := QPaintEngineState_brush;
      brushOrigin         := QPaintEngineState_brushOrigin;
      backgroundBrush     := QPaintEngineState_backgroundBrush;
      backgroundMode      := QPaintEngineState_backgroundMode;
      font                := QPaintEngineState_font;
      matrix              := QPaintEngineState_matrix;
      transform           := QPaintEngineState_transform;
      clipOperation       := QPaintEngineState_clipOperation;
      clipRegion          := QPaintEngineState_clipRegion;
      isClipEnabled       := QPaintEngineState_isClipEnabled;
      opacity             := QPaintEngineState_opacity;
      brushNeedsResolving := QPaintEngineState_brushNeedsResolving;
      penNeedsResolving   := QPaintEngineState_penNeedsResolving;
      destroyCxx          := Destroy_QPaintEngineState;
    END;


BEGIN
END QtPaintEngine.
