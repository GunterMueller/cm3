/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qlayout.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void Delete_QLayout(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  
  arg1 = *(QLayout **)&self; 
  delete arg1;
}


SWIGEXPORT int QLayout_margin(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QLayout **)&self; 
  result = (int)((QLayout const *)arg1)->margin();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QLayout_spacing(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QLayout **)&self; 
  result = (int)((QLayout const *)arg1)->spacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QLayout_setMargin(QLayout * self, int m3arg2) {
  QLayout *arg1 = (QLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = (int)m3arg2; 
  (arg1)->setMargin(arg2);
}


SWIGEXPORT void QLayout_setSpacing(QLayout * self, int m3arg2) {
  QLayout *arg1 = (QLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = (int)m3arg2; 
  (arg1)->setSpacing(arg2);
}


SWIGEXPORT void QLayout_setContentsMargins(QLayout * self, int left, int top, int right, int bottom) {
  QLayout *arg1 = (QLayout *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = (int)left; 
  arg3 = (int)top; 
  arg4 = (int)right; 
  arg5 = (int)bottom; 
  (arg1)->setContentsMargins(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QLayout_setContentsMargins1(QLayout * self, QMargins * margins) {
  QLayout *arg1 = (QLayout *) 0 ;
  QMargins *arg2 = 0 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = *(QMargins **)&margins;
  (arg1)->setContentsMargins((QMargins const &)*arg2);
}


SWIGEXPORT void QLayout_getContentsMargins(QLayout * self, int * left, int * top, int * right, int * bottom) {
  QLayout *arg1 = (QLayout *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = *(int **)&left; 
  arg3 = *(int **)&top; 
  arg4 = *(int **)&right; 
  arg5 = *(int **)&bottom; 
  ((QLayout const *)arg1)->getContentsMargins(arg2,arg3,arg4,arg5);
}


SWIGEXPORT QMargins * QLayout_contentsMargins(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QMargins * cresult ;
  
  arg1 = *(QLayout **)&self; 
  *(QMargins **)&cresult = new QMargins((const QMargins &)((QLayout const *)arg1)->contentsMargins());
  return cresult;
}


SWIGEXPORT QRect * QLayout_contentsRect(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QLayout **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QLayout const *)arg1)->contentsRect());
  return cresult;
}


SWIGEXPORT bool QLayout_setAlignment(QLayout * self, QWidget * w, Qt::Alignment alignment) {
  QLayout *arg1 = (QLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  Qt::Alignment arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = *(QWidget **)&w; 
  arg3 = (Qt::Alignment)alignment; 
  result = (bool)(arg1)->setAlignment(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QLayout_setAlignment1(QLayout * self, QLayout * l, Qt::Alignment alignment) {
  QLayout *arg1 = (QLayout *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  Qt::Alignment arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = *(QLayout **)&l; 
  arg3 = (Qt::Alignment)alignment; 
  result = (bool)(arg1)->setAlignment(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QLayout_setAlignment2_0(QLayout * self, Qt::Alignment a) {
  QLayout *arg1 = (QLayout *) 0 ;
  Qt::Alignment arg2 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = (Qt::Alignment)a; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT void QLayout_setSizeConstraint(QLayout * self, QLayout::SizeConstraint m3arg2) {
  QLayout *arg1 = (QLayout *) 0 ;
  QLayout::SizeConstraint arg2 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = (QLayout::SizeConstraint)m3arg2; 
  (arg1)->setSizeConstraint(arg2);
}


SWIGEXPORT QLayout::SizeConstraint QLayout_sizeConstraint(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QLayout::SizeConstraint result;
  QLayout::SizeConstraint cresult ;
  
  arg1 = *(QLayout **)&self; 
  result = (QLayout::SizeConstraint)((QLayout const *)arg1)->sizeConstraint();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QLayout_setMenuBar(QLayout * self, QWidget * w) {
  QLayout *arg1 = (QLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = *(QWidget **)&w; 
  (arg1)->setMenuBar(arg2);
}


SWIGEXPORT QWidget * QLayout_menuBar(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QLayout **)&self; 
  result = (QWidget *)((QLayout const *)arg1)->menuBar();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QLayout_parentWidget(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QLayout **)&self; 
  result = (QWidget *)((QLayout const *)arg1)->parentWidget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QLayout_invalidate(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  
  arg1 = *(QLayout **)&self; 
  (arg1)->invalidate();
}


SWIGEXPORT QRect * QLayout_geometry(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QLayout **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QLayout const *)arg1)->geometry());
  return cresult;
}


SWIGEXPORT bool QLayout_activate(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLayout **)&self; 
  result = (bool)(arg1)->activate();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QLayout_update(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  
  arg1 = *(QLayout **)&self; 
  (arg1)->update();
}


SWIGEXPORT void QLayout_addWidget(QLayout * self, QWidget * w) {
  QLayout *arg1 = (QLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = *(QWidget **)&w; 
  (arg1)->addWidget(arg2);
}


SWIGEXPORT void QLayout_removeWidget(QLayout * self, QWidget * w) {
  QLayout *arg1 = (QLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = *(QWidget **)&w; 
  (arg1)->removeWidget(arg2);
}


SWIGEXPORT void QLayout_removeItem(QLayout * self, QLayoutItem * m3arg2) {
  QLayout *arg1 = (QLayout *) 0 ;
  QLayoutItem *arg2 = (QLayoutItem *) 0 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = *(QLayoutItem **)&m3arg2; 
  (arg1)->removeItem(arg2);
}


SWIGEXPORT Qt::Orientations QLayout_expandingDirections(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  Qt::Orientations cresult ;
  
  arg1 = *(QLayout **)&self; 
  *(Qt::Orientations **)&cresult = new Qt::Orientations((const Qt::Orientations &)((QLayout const *)arg1)->expandingDirections());
  return cresult;
}


SWIGEXPORT QSize * QLayout_minimumSize(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QLayout const *)arg1)->minimumSize());
  return cresult;
}


SWIGEXPORT QSize * QLayout_maximumSize(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QLayout const *)arg1)->maximumSize());
  return cresult;
}


SWIGEXPORT void QLayout_setGeometry(QLayout * self, QRect * m3arg2) {
  QLayout *arg1 = (QLayout *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = *(QRect **)&m3arg2;
  (arg1)->setGeometry((QRect const &)*arg2);
}


SWIGEXPORT int QLayout_indexOf(QLayout * self, QWidget * m3arg2) {
  QLayout *arg1 = (QLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = *(QWidget **)&m3arg2; 
  result = (int)((QLayout const *)arg1)->indexOf(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QLayout_isEmpty(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLayout **)&self; 
  result = (bool)((QLayout const *)arg1)->isEmpty();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QLayout_totalHeightForWidth(QLayout * self, int w) {
  QLayout *arg1 = (QLayout *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = (int)w; 
  result = (int)((QLayout const *)arg1)->totalHeightForWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QLayout_totalMinimumSize(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QLayout const *)arg1)->totalMinimumSize());
  return cresult;
}


SWIGEXPORT QSize * QLayout_totalMaximumSize(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QLayout const *)arg1)->totalMaximumSize());
  return cresult;
}


SWIGEXPORT QSize * QLayout_totalSizeHint(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QLayout const *)arg1)->totalSizeHint());
  return cresult;
}


SWIGEXPORT QLayout * QLayout_layout(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  QLayout *result = 0 ;
  QLayout * cresult ;
  
  arg1 = *(QLayout **)&self; 
  result = (QLayout *)(arg1)->layout();
  *(QLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QLayout_setEnabled(QLayout * self, bool m3arg2) {
  QLayout *arg1 = (QLayout *) 0 ;
  bool arg2 ;
  
  arg1 = *(QLayout **)&self; 
  arg2 = m3arg2 ? true : false; 
  (arg1)->setEnabled(arg2);
}


SWIGEXPORT bool QLayout_isEnabled(QLayout * self) {
  QLayout *arg1 = (QLayout *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLayout **)&self; 
  result = (bool)((QLayout const *)arg1)->isEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * ClosestAcceptableSize(QWidget * w, QSize * s) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSize *arg2 = 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidget **)&w; 
  arg2 = *(QSize **)&s;
  *(QSize **)&cresult = new QSize((const QSize &)QLayout::closestAcceptableSize((QWidget const *)arg1,(QSize const &)*arg2));
  return cresult;
}


SWIGEXPORT long Modula3_QLayoutToQObject(long objectRef) {
    long baseptr = 0;
    *(QObject **)&baseptr = *(QLayout **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

