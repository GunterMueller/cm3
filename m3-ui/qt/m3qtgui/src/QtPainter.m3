(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtPainter;


FROM QtPoint IMPORT QPoint, QPointF;
FROM QtPaintDevice IMPORT QPaintDevice;
FROM QtTransform IMPORT QTransform;
FROM QtPen IMPORT QPen;
FROM QtPixmap IMPORT QPixmap;
FROM QtLine IMPORT QLineF, QLine;
FROM QtNamespace IMPORT BrushStyle, GlobalColor, ClipOperation, BGMode,
                        FillRule, SizeMode, ImageConversionFlags, PenStyle,
                        LayoutDirection;
FROM QtColor IMPORT QColor;
FROM QtFont IMPORT QFont;
FROM QtPaintEngine IMPORT QTextItem, QPaintEngine;
IMPORT QtPainterRaw;
FROM QtImage IMPORT QImage;
FROM QtPicture IMPORT QPicture;
FROM QtRect IMPORT QRect, QRectF;
FROM QtWidget IMPORT QWidget;
FROM QtMatrix IMPORT QMatrix;
FROM QtRegion IMPORT QRegion;
FROM QtFontInfo IMPORT QFontInfo;
FROM QtPolygon IMPORT QPolygon, QPolygonF;
FROM QtBrush IMPORT QBrush;
FROM QtFontMetrics IMPORT QFontMetrics;


IMPORT WeakRef;

PROCEDURE New_QPainter0 (self: QPainter; ): QPainter =
  VAR result: ADDRESS;
  BEGIN
    result := QtPainterRaw.New_QPainter0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QPainter);

    RETURN self;
  END New_QPainter0;

PROCEDURE New_QPainter1 (self: QPainter; arg1: QPaintDevice; ): QPainter =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(arg1.cxxObj, ADDRESS);
  BEGIN
    result := QtPainterRaw.New_QPainter1(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QPainter);

    RETURN self;
  END New_QPainter1;

PROCEDURE Delete_QPainter (self: QPainter; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.Delete_QPainter(selfAdr);
  END Delete_QPainter;

PROCEDURE QPainter_device (self: QPainter; ): QPaintDevice =
  VAR
    ret    : ADDRESS;
    result : QPaintDevice;
    selfAdr: ADDRESS      := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_device(selfAdr);

    result := NEW(QPaintDevice);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_device;

PROCEDURE QPainter_begin (self: QPainter; arg2: QPaintDevice; ): BOOLEAN =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPainterRaw.QPainter_begin(selfAdr, arg2tmp);
  END QPainter_begin;

PROCEDURE QPainter_end (self: QPainter; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPainterRaw.QPainter_end(selfAdr);
  END QPainter_end;

PROCEDURE QPainter_isActive (self: QPainter; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPainterRaw.QPainter_isActive(selfAdr);
  END QPainter_isActive;

PROCEDURE QPainter_initFrom (self: QPainter; widget: QWidget; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(widget.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_initFrom(selfAdr, arg2tmp);
  END QPainter_initFrom;

PROCEDURE QPainter_setCompositionMode
  (self: QPainter; mode: CompositionMode; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setCompositionMode(selfAdr, ORD(mode));
  END QPainter_setCompositionMode;

PROCEDURE QPainter_compositionMode (self: QPainter; ): CompositionMode =
  VAR
    ret    : INTEGER;
    result : CompositionMode;
    selfAdr: ADDRESS         := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_compositionMode(selfAdr);
    result := VAL(ret, CompositionMode);
    RETURN result;
  END QPainter_compositionMode;

PROCEDURE QPainter_font (self: QPainter; ): QFont =
  VAR
    ret    : ADDRESS;
    result : QFont;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_font(selfAdr);

    result := NEW(QFont);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_font;

PROCEDURE QPainter_setFont (self: QPainter; f: QFont; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(f.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setFont(selfAdr, arg2tmp);
  END QPainter_setFont;

PROCEDURE QPainter_fontMetrics (self: QPainter; ): QFontMetrics =
  VAR
    ret    : ADDRESS;
    result : QFontMetrics;
    selfAdr: ADDRESS      := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_fontMetrics(selfAdr);

    result := NEW(QFontMetrics);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_fontMetrics;

PROCEDURE QPainter_fontInfo (self: QPainter; ): QFontInfo =
  VAR
    ret    : ADDRESS;
    result : QFontInfo;
    selfAdr: ADDRESS   := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_fontInfo(selfAdr);

    result := NEW(QFontInfo);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_fontInfo;

PROCEDURE QPainter_setPen (self: QPainter; color: QColor; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(color.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setPen(selfAdr, arg2tmp);
  END QPainter_setPen;

PROCEDURE QPainter_setPen1 (self: QPainter; pen: QPen; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(pen.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setPen1(selfAdr, arg2tmp);
  END QPainter_setPen1;

PROCEDURE QPainter_setPen2 (self: QPainter; style: PenStyle; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setPen2(selfAdr, ORD(style));
  END QPainter_setPen2;

PROCEDURE QPainter_pen (self: QPainter; ): QPen =
  VAR
    ret    : ADDRESS;
    result : QPen;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_pen(selfAdr);

    result := NEW(QPen);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_pen;

PROCEDURE QPainter_setBrush (self: QPainter; brush: QBrush; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(brush.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setBrush(selfAdr, arg2tmp);
  END QPainter_setBrush;

PROCEDURE QPainter_setBrush1 (self: QPainter; style: BrushStyle; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setBrush1(selfAdr, ORD(style));
  END QPainter_setBrush1;

PROCEDURE QPainter_brush (self: QPainter; ): QBrush =
  VAR
    ret    : ADDRESS;
    result : QBrush;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_brush(selfAdr);

    result := NEW(QBrush);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_brush;

PROCEDURE QPainter_setBackgroundMode (self: QPainter; mode: BGMode; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setBackgroundMode(selfAdr, ORD(mode));
  END QPainter_setBackgroundMode;

PROCEDURE QPainter_backgroundMode (self: QPainter; ): BGMode =
  VAR
    ret    : INTEGER;
    result : BGMode;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_backgroundMode(selfAdr);
    result := VAL(ret, BGMode);
    RETURN result;
  END QPainter_backgroundMode;

PROCEDURE QPainter_brushOrigin (self: QPainter; ): QPoint =
  VAR
    ret    : ADDRESS;
    result : QPoint;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_brushOrigin(selfAdr);

    result := NEW(QPoint);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_brushOrigin;

PROCEDURE QPainter_setBrushOrigin (self: QPainter; x, y: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setBrushOrigin(selfAdr, x, y);
  END QPainter_setBrushOrigin;

PROCEDURE QPainter_setBrushOrigin1 (self: QPainter; arg2: QPoint; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setBrushOrigin1(selfAdr, arg2tmp);
  END QPainter_setBrushOrigin1;

PROCEDURE QPainter_setBrushOrigin2 (self: QPainter; arg2: QPointF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setBrushOrigin2(selfAdr, arg2tmp);
  END QPainter_setBrushOrigin2;

PROCEDURE QPainter_setBackground (self: QPainter; bg: QBrush; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(bg.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setBackground(selfAdr, arg2tmp);
  END QPainter_setBackground;

PROCEDURE QPainter_background (self: QPainter; ): QBrush =
  VAR
    ret    : ADDRESS;
    result : QBrush;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_background(selfAdr);

    result := NEW(QBrush);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_background;

PROCEDURE QPainter_opacity (self: QPainter; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPainterRaw.QPainter_opacity(selfAdr);
  END QPainter_opacity;

PROCEDURE QPainter_setOpacity (self: QPainter; opacity: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setOpacity(selfAdr, opacity);
  END QPainter_setOpacity;

PROCEDURE QPainter_clipRegion (self: QPainter; ): QRegion =
  VAR
    ret    : ADDRESS;
    result : QRegion;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_clipRegion(selfAdr);

    result := NEW(QRegion);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_clipRegion;

PROCEDURE QPainter_setClipRect
  (self: QPainter; arg2: QRectF; op: ClipOperation; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setClipRect(selfAdr, arg2tmp, ORD(op));
  END QPainter_setClipRect;

PROCEDURE QPainter_setClipRect1 (self: QPainter; arg2: QRectF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setClipRect1(selfAdr, arg2tmp);
  END QPainter_setClipRect1;

PROCEDURE QPainter_setClipRect2
  (self: QPainter; arg2: QRect; op: ClipOperation; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setClipRect2(selfAdr, arg2tmp, ORD(op));
  END QPainter_setClipRect2;

PROCEDURE QPainter_setClipRect3 (self: QPainter; arg2: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setClipRect3(selfAdr, arg2tmp);
  END QPainter_setClipRect3;

PROCEDURE QPainter_setClipRect4
  (self: QPainter; x, y, w, h: INTEGER; op: ClipOperation; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setClipRect4(selfAdr, x, y, w, h, ORD(op));
  END QPainter_setClipRect4;

PROCEDURE QPainter_setClipRect5 (self: QPainter; x, y, w, h: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setClipRect5(selfAdr, x, y, w, h);
  END QPainter_setClipRect5;

PROCEDURE QPainter_setClipRegion
  (self: QPainter; arg2: QRegion; op: ClipOperation; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setClipRegion(selfAdr, arg2tmp, ORD(op));
  END QPainter_setClipRegion;

PROCEDURE QPainter_setClipRegion1 (self: QPainter; arg2: QRegion; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setClipRegion1(selfAdr, arg2tmp);
  END QPainter_setClipRegion1;

PROCEDURE QPainter_setClipping (self: QPainter; enable: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setClipping(selfAdr, enable);
  END QPainter_setClipping;

PROCEDURE QPainter_hasClipping (self: QPainter; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPainterRaw.QPainter_hasClipping(selfAdr);
  END QPainter_hasClipping;

PROCEDURE QPainter_clipBoundingRect (self: QPainter; ): QRectF =
  VAR
    ret    : ADDRESS;
    result : QRectF;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_clipBoundingRect(selfAdr);

    result := NEW(QRectF);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_clipBoundingRect;

PROCEDURE QPainter_save (self: QPainter; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_save(selfAdr);
  END QPainter_save;

PROCEDURE QPainter_restore (self: QPainter; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_restore(selfAdr);
  END QPainter_restore;

PROCEDURE QPainter_setMatrix
  (self: QPainter; matrix: QMatrix; combine: BOOLEAN; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(matrix.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setMatrix(selfAdr, arg2tmp, combine);
  END QPainter_setMatrix;

PROCEDURE QPainter_setMatrix1 (self: QPainter; matrix: QMatrix; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(matrix.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setMatrix1(selfAdr, arg2tmp);
  END QPainter_setMatrix1;

PROCEDURE QPainter_matrix (self: QPainter; ): QMatrix =
  VAR
    ret    : ADDRESS;
    result : QMatrix;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_matrix(selfAdr);

    result := NEW(QMatrix);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_matrix;

PROCEDURE QPainter_deviceMatrix (self: QPainter; ): QMatrix =
  VAR
    ret    : ADDRESS;
    result : QMatrix;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_deviceMatrix(selfAdr);

    result := NEW(QMatrix);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_deviceMatrix;

PROCEDURE QPainter_resetMatrix (self: QPainter; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_resetMatrix(selfAdr);
  END QPainter_resetMatrix;

PROCEDURE QPainter_setTransform
  (self: QPainter; transform: QTransform; combine: BOOLEAN; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(transform.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setTransform(selfAdr, arg2tmp, combine);
  END QPainter_setTransform;

PROCEDURE QPainter_setTransform1
  (self: QPainter; transform: QTransform; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(transform.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setTransform1(selfAdr, arg2tmp);
  END QPainter_setTransform1;

PROCEDURE QPainter_transform (self: QPainter; ): QTransform =
  VAR
    ret    : ADDRESS;
    result : QTransform;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_transform(selfAdr);

    result := NEW(QTransform);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_transform;

PROCEDURE QPainter_deviceTransform (self: QPainter; ): QTransform =
  VAR
    ret    : ADDRESS;
    result : QTransform;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_deviceTransform(selfAdr);

    result := NEW(QTransform);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_deviceTransform;

PROCEDURE QPainter_resetTransform (self: QPainter; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_resetTransform(selfAdr);
  END QPainter_resetTransform;

PROCEDURE QPainter_setWorldMatrix
  (self: QPainter; matrix: QMatrix; combine: BOOLEAN; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(matrix.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setWorldMatrix(selfAdr, arg2tmp, combine);
  END QPainter_setWorldMatrix;

PROCEDURE QPainter_setWorldMatrix1 (self: QPainter; matrix: QMatrix; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(matrix.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setWorldMatrix1(selfAdr, arg2tmp);
  END QPainter_setWorldMatrix1;

PROCEDURE QPainter_worldMatrix (self: QPainter; ): QMatrix =
  VAR
    ret    : ADDRESS;
    result : QMatrix;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_worldMatrix(selfAdr);

    result := NEW(QMatrix);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_worldMatrix;

PROCEDURE QPainter_setWorldTransform
  (self: QPainter; matrix: QTransform; combine: BOOLEAN; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(matrix.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setWorldTransform(selfAdr, arg2tmp, combine);
  END QPainter_setWorldTransform;

PROCEDURE QPainter_setWorldTransform1
  (self: QPainter; matrix: QTransform; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(matrix.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setWorldTransform1(selfAdr, arg2tmp);
  END QPainter_setWorldTransform1;

PROCEDURE QPainter_worldTransform (self: QPainter; ): QTransform =
  VAR
    ret    : ADDRESS;
    result : QTransform;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_worldTransform(selfAdr);

    result := NEW(QTransform);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_worldTransform;

PROCEDURE QPainter_combinedMatrix (self: QPainter; ): QMatrix =
  VAR
    ret    : ADDRESS;
    result : QMatrix;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_combinedMatrix(selfAdr);

    result := NEW(QMatrix);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_combinedMatrix;

PROCEDURE QPainter_combinedTransform (self: QPainter; ): QTransform =
  VAR
    ret    : ADDRESS;
    result : QTransform;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_combinedTransform(selfAdr);

    result := NEW(QTransform);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_combinedTransform;

PROCEDURE QPainter_setMatrixEnabled (self: QPainter; enabled: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setMatrixEnabled(selfAdr, enabled);
  END QPainter_setMatrixEnabled;

PROCEDURE QPainter_matrixEnabled (self: QPainter; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPainterRaw.QPainter_matrixEnabled(selfAdr);
  END QPainter_matrixEnabled;

PROCEDURE QPainter_setWorldMatrixEnabled
  (self: QPainter; enabled: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setWorldMatrixEnabled(selfAdr, enabled);
  END QPainter_setWorldMatrixEnabled;

PROCEDURE QPainter_worldMatrixEnabled (self: QPainter; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPainterRaw.QPainter_worldMatrixEnabled(selfAdr);
  END QPainter_worldMatrixEnabled;

PROCEDURE QPainter_scale (self: QPainter; sx, sy: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_scale(selfAdr, sx, sy);
  END QPainter_scale;

PROCEDURE QPainter_shear (self: QPainter; sh, sv: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_shear(selfAdr, sh, sv);
  END QPainter_shear;

PROCEDURE QPainter_rotate (self: QPainter; a: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_rotate(selfAdr, a);
  END QPainter_rotate;

PROCEDURE QPainter_translate (self: QPainter; offset: QPointF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(offset.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_translate(selfAdr, arg2tmp);
  END QPainter_translate;

PROCEDURE QPainter_translate1 (self: QPainter; offset: QPoint; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(offset.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_translate1(selfAdr, arg2tmp);
  END QPainter_translate1;

PROCEDURE QPainter_translate2 (self: QPainter; dx, dy: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_translate2(selfAdr, dx, dy);
  END QPainter_translate2;

PROCEDURE QPainter_window (self: QPainter; ): QRect =
  VAR
    ret    : ADDRESS;
    result : QRect;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_window(selfAdr);

    result := NEW(QRect);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_window;

PROCEDURE QPainter_setWindow (self: QPainter; window: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(window.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setWindow(selfAdr, arg2tmp);
  END QPainter_setWindow;

PROCEDURE QPainter_setWindow1 (self: QPainter; x, y, w, h: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setWindow1(selfAdr, x, y, w, h);
  END QPainter_setWindow1;

PROCEDURE QPainter_viewport (self: QPainter; ): QRect =
  VAR
    ret    : ADDRESS;
    result : QRect;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_viewport(selfAdr);

    result := NEW(QRect);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_viewport;

PROCEDURE QPainter_setViewport (self: QPainter; viewport: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(viewport.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setViewport(selfAdr, arg2tmp);
  END QPainter_setViewport;

PROCEDURE QPainter_setViewport1 (self: QPainter; x, y, w, h: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setViewport1(selfAdr, x, y, w, h);
  END QPainter_setViewport1;

PROCEDURE QPainter_setViewTransformEnabled
  (self: QPainter; enable: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setViewTransformEnabled(selfAdr, enable);
  END QPainter_setViewTransformEnabled;

PROCEDURE QPainter_viewTransformEnabled (self: QPainter; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPainterRaw.QPainter_viewTransformEnabled(selfAdr);
  END QPainter_viewTransformEnabled;

PROCEDURE QPainter_drawPoint (self: QPainter; pt: QPointF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(pt.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPoint(selfAdr, arg2tmp);
  END QPainter_drawPoint;

PROCEDURE QPainter_drawPoint1 (self: QPainter; p: QPoint; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPoint1(selfAdr, arg2tmp);
  END QPainter_drawPoint1;

PROCEDURE QPainter_drawPoint2 (self: QPainter; x, y: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPoint2(selfAdr, x, y);
  END QPainter_drawPoint2;

PROCEDURE QPainter_drawPoints
  (self: QPainter; points: QPointF; pointCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPoints(selfAdr, arg2tmp, pointCount);
  END QPainter_drawPoints;

PROCEDURE QPainter_drawPoints1 (self: QPainter; points: QPolygonF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPoints1(selfAdr, arg2tmp);
  END QPainter_drawPoints1;

PROCEDURE QPainter_drawPoints2
  (self: QPainter; points: QPoint; pointCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPoints2(selfAdr, arg2tmp, pointCount);
  END QPainter_drawPoints2;

PROCEDURE QPainter_drawPoints3 (self: QPainter; points: QPolygon; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPoints3(selfAdr, arg2tmp);
  END QPainter_drawPoints3;

PROCEDURE QPainter_drawLine (self: QPainter; line: QLineF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(line.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawLine(selfAdr, arg2tmp);
  END QPainter_drawLine;

PROCEDURE QPainter_drawLine1 (self: QPainter; line: QLine; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(line.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawLine1(selfAdr, arg2tmp);
  END QPainter_drawLine1;

PROCEDURE QPainter_drawLine2 (self: QPainter; x1, y1, x2, y2: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawLine2(selfAdr, x1, y1, x2, y2);
  END QPainter_drawLine2;

PROCEDURE QPainter_drawLine3 (self: QPainter; p1, p2: QPoint; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p1.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(p2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawLine3(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawLine3;

PROCEDURE QPainter_drawLine4 (self: QPainter; p1, p2: QPointF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p1.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(p2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawLine4(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawLine4;

PROCEDURE QPainter_drawRect (self: QPainter; rect: QRectF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRect(selfAdr, arg2tmp);
  END QPainter_drawRect;

PROCEDURE QPainter_drawRect1 (self: QPainter; x1, y1, w, h: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRect1(selfAdr, x1, y1, w, h);
  END QPainter_drawRect1;

PROCEDURE QPainter_drawRect2 (self: QPainter; rect: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRect2(selfAdr, arg2tmp);
  END QPainter_drawRect2;

PROCEDURE QPainter_drawEllipse (self: QPainter; r: QRectF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawEllipse(selfAdr, arg2tmp);
  END QPainter_drawEllipse;

PROCEDURE QPainter_drawEllipse1 (self: QPainter; r: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawEllipse1(selfAdr, arg2tmp);
  END QPainter_drawEllipse1;

PROCEDURE QPainter_drawEllipse2 (self: QPainter; x, y, w, h: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawEllipse2(selfAdr, x, y, w, h);
  END QPainter_drawEllipse2;

PROCEDURE QPainter_drawEllipse3
  (self: QPainter; center: QPointF; rx, ry: LONGREAL; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(center.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawEllipse3(selfAdr, arg2tmp, rx, ry);
  END QPainter_drawEllipse3;

PROCEDURE QPainter_drawEllipse4
  (self: QPainter; center: QPoint; rx, ry: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(center.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawEllipse4(selfAdr, arg2tmp, rx, ry);
  END QPainter_drawEllipse4;

PROCEDURE QPainter_drawPolyline
  (self: QPainter; points: QPointF; pointCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolyline(selfAdr, arg2tmp, pointCount);
  END QPainter_drawPolyline;

PROCEDURE QPainter_drawPolyline1 (self: QPainter; polyline: QPolygonF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(polyline.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolyline1(selfAdr, arg2tmp);
  END QPainter_drawPolyline1;

PROCEDURE QPainter_drawPolyline2
  (self: QPainter; points: QPoint; pointCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolyline2(selfAdr, arg2tmp, pointCount);
  END QPainter_drawPolyline2;

PROCEDURE QPainter_drawPolyline3 (self: QPainter; polygon: QPolygon; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(polygon.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolyline3(selfAdr, arg2tmp);
  END QPainter_drawPolyline3;

PROCEDURE QPainter_drawPolygon (self      : QPainter;
                                points    : QPointF;
                                pointCount: INTEGER;
                                fillRule  : FillRule; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolygon(
      selfAdr, arg2tmp, pointCount, ORD(fillRule));
  END QPainter_drawPolygon;

PROCEDURE QPainter_drawPolygon1
  (self: QPainter; points: QPointF; pointCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolygon1(selfAdr, arg2tmp, pointCount);
  END QPainter_drawPolygon1;

PROCEDURE QPainter_drawPolygon2
  (self: QPainter; polygon: QPolygonF; fillRule: FillRule; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(polygon.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolygon2(selfAdr, arg2tmp, ORD(fillRule));
  END QPainter_drawPolygon2;

PROCEDURE QPainter_drawPolygon3 (self: QPainter; polygon: QPolygonF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(polygon.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolygon3(selfAdr, arg2tmp);
  END QPainter_drawPolygon3;

PROCEDURE QPainter_drawPolygon4 (self      : QPainter;
                                 points    : QPoint;
                                 pointCount: INTEGER;
                                 fillRule  : FillRule; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolygon4(
      selfAdr, arg2tmp, pointCount, ORD(fillRule));
  END QPainter_drawPolygon4;

PROCEDURE QPainter_drawPolygon5
  (self: QPainter; points: QPoint; pointCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolygon5(selfAdr, arg2tmp, pointCount);
  END QPainter_drawPolygon5;

PROCEDURE QPainter_drawPolygon6
  (self: QPainter; polygon: QPolygon; fillRule: FillRule; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(polygon.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolygon6(selfAdr, arg2tmp, ORD(fillRule));
  END QPainter_drawPolygon6;

PROCEDURE QPainter_drawPolygon7 (self: QPainter; polygon: QPolygon; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(polygon.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPolygon7(selfAdr, arg2tmp);
  END QPainter_drawPolygon7;

PROCEDURE QPainter_drawConvexPolygon
  (self: QPainter; points: QPointF; pointCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawConvexPolygon(selfAdr, arg2tmp, pointCount);
  END QPainter_drawConvexPolygon;

PROCEDURE QPainter_drawConvexPolygon1
  (self: QPainter; polygon: QPolygonF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(polygon.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawConvexPolygon1(selfAdr, arg2tmp);
  END QPainter_drawConvexPolygon1;

PROCEDURE QPainter_drawConvexPolygon2
  (self: QPainter; points: QPoint; pointCount: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(points.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawConvexPolygon2(selfAdr, arg2tmp, pointCount);
  END QPainter_drawConvexPolygon2;

PROCEDURE QPainter_drawConvexPolygon3
  (self: QPainter; polygon: QPolygon; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(polygon.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawConvexPolygon3(selfAdr, arg2tmp);
  END QPainter_drawConvexPolygon3;

PROCEDURE QPainter_drawArc
  (self: QPainter; rect: QRectF; a, alen: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawArc(selfAdr, arg2tmp, a, alen);
  END QPainter_drawArc;

PROCEDURE QPainter_drawArc1
  (self: QPainter; arg2: QRect; a, alen: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawArc1(selfAdr, arg2tmp, a, alen);
  END QPainter_drawArc1;

PROCEDURE QPainter_drawArc2
  (self: QPainter; x, y, w, h, a, alen: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawArc2(selfAdr, x, y, w, h, a, alen);
  END QPainter_drawArc2;

PROCEDURE QPainter_drawPie
  (self: QPainter; rect: QRectF; a, alen: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPie(selfAdr, arg2tmp, a, alen);
  END QPainter_drawPie;

PROCEDURE QPainter_drawPie1
  (self: QPainter; x, y, w, h, a, alen: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPie1(selfAdr, x, y, w, h, a, alen);
  END QPainter_drawPie1;

PROCEDURE QPainter_drawPie2
  (self: QPainter; arg2: QRect; a, alen: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPie2(selfAdr, arg2tmp, a, alen);
  END QPainter_drawPie2;

PROCEDURE QPainter_drawChord
  (self: QPainter; rect: QRectF; a, alen: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawChord(selfAdr, arg2tmp, a, alen);
  END QPainter_drawChord;

PROCEDURE QPainter_drawChord1
  (self: QPainter; x, y, w, h, a, alen: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawChord1(selfAdr, x, y, w, h, a, alen);
  END QPainter_drawChord1;

PROCEDURE QPainter_drawChord2
  (self: QPainter; arg2: QRect; a, alen: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawChord2(selfAdr, arg2tmp, a, alen);
  END QPainter_drawChord2;

PROCEDURE QPainter_drawRoundedRect (self            : QPainter;
                                    rect            : QRectF;
                                    xRadius, yRadius: LONGREAL;
                                    mode            : SizeMode; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundedRect(
      selfAdr, arg2tmp, xRadius, yRadius, ORD(mode));
  END QPainter_drawRoundedRect;

PROCEDURE QPainter_drawRoundedRect1
  (self: QPainter; rect: QRectF; xRadius, yRadius: LONGREAL; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundedRect1(
      selfAdr, arg2tmp, xRadius, yRadius);
  END QPainter_drawRoundedRect1;

PROCEDURE QPainter_drawRoundedRect2 (self            : QPainter;
                                     x, y, w, h      : INTEGER;
                                     xRadius, yRadius: LONGREAL;
                                     mode            : SizeMode; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundedRect2(
      selfAdr, x, y, w, h, xRadius, yRadius, ORD(mode));
  END QPainter_drawRoundedRect2;

PROCEDURE QPainter_drawRoundedRect3
  (self: QPainter; x, y, w, h: INTEGER; xRadius, yRadius: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundedRect3(
      selfAdr, x, y, w, h, xRadius, yRadius);
  END QPainter_drawRoundedRect3;

PROCEDURE QPainter_drawRoundedRect4 (self            : QPainter;
                                     rect            : QRect;
                                     xRadius, yRadius: LONGREAL;
                                     mode            : SizeMode; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundedRect4(
      selfAdr, arg2tmp, xRadius, yRadius, ORD(mode));
  END QPainter_drawRoundedRect4;

PROCEDURE QPainter_drawRoundedRect5
  (self: QPainter; rect: QRect; xRadius, yRadius: LONGREAL; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundedRect5(
      selfAdr, arg2tmp, xRadius, yRadius);
  END QPainter_drawRoundedRect5;

PROCEDURE QPainter_drawRoundRect
  (self: QPainter; r: QRectF; xround, yround: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundRect(selfAdr, arg2tmp, xround, yround);
  END QPainter_drawRoundRect;

PROCEDURE QPainter_drawRoundRect1
  (self: QPainter; r: QRectF; xround: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundRect1(selfAdr, arg2tmp, xround);
  END QPainter_drawRoundRect1;

PROCEDURE QPainter_drawRoundRect2 (self: QPainter; r: QRectF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundRect2(selfAdr, arg2tmp);
  END QPainter_drawRoundRect2;

PROCEDURE QPainter_drawRoundRect3
  (self: QPainter; x, y, w, h, arg6, arg7: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundRect3(selfAdr, x, y, w, h, arg6, arg7);
  END QPainter_drawRoundRect3;

PROCEDURE QPainter_drawRoundRect4
  (self: QPainter; x, y, w, h, arg6: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundRect4(selfAdr, x, y, w, h, arg6);
  END QPainter_drawRoundRect4;

PROCEDURE QPainter_drawRoundRect5 (self: QPainter; x, y, w, h: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundRect5(selfAdr, x, y, w, h);
  END QPainter_drawRoundRect5;

PROCEDURE QPainter_drawRoundRect6
  (self: QPainter; r: QRect; xround, yround: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundRect6(selfAdr, arg2tmp, xround, yround);
  END QPainter_drawRoundRect6;

PROCEDURE QPainter_drawRoundRect7
  (self: QPainter; r: QRect; xround: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundRect7(selfAdr, arg2tmp, xround);
  END QPainter_drawRoundRect7;

PROCEDURE QPainter_drawRoundRect8 (self: QPainter; r: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawRoundRect8(selfAdr, arg2tmp);
  END QPainter_drawRoundRect8;

PROCEDURE QPainter_drawTiledPixmap
  (self: QPainter; rect: QRectF; pm: QPixmap; offset: QPointF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(offset.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawTiledPixmap(
      selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPainter_drawTiledPixmap;

PROCEDURE QPainter_drawTiledPixmap1
  (self: QPainter; rect: QRectF; pm: QPixmap; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(rect.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawTiledPixmap1(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawTiledPixmap1;

PROCEDURE QPainter_drawTiledPixmap2
  (self: QPainter; x, y, w, h: INTEGER; arg6: QPixmap; sx, sy: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg6tmp          := LOOPHOLE(arg6.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawTiledPixmap2(
      selfAdr, x, y, w, h, arg6tmp, sx, sy);
  END QPainter_drawTiledPixmap2;

PROCEDURE QPainter_drawTiledPixmap3
  (self: QPainter; x, y, w, h: INTEGER; arg6: QPixmap; sx: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg6tmp          := LOOPHOLE(arg6.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawTiledPixmap3(
      selfAdr, x, y, w, h, arg6tmp, sx);
  END QPainter_drawTiledPixmap3;

PROCEDURE QPainter_drawTiledPixmap4
  (self: QPainter; x, y, w, h: INTEGER; arg6: QPixmap; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg6tmp          := LOOPHOLE(arg6.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawTiledPixmap4(selfAdr, x, y, w, h, arg6tmp);
  END QPainter_drawTiledPixmap4;

PROCEDURE QPainter_drawTiledPixmap5
  (self: QPainter; arg2: QRect; arg3: QPixmap; arg4: QPoint; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(arg3.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(arg4.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawTiledPixmap5(
      selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPainter_drawTiledPixmap5;

PROCEDURE QPainter_drawTiledPixmap6
  (self: QPainter; arg2: QRect; arg3: QPixmap; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(arg3.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawTiledPixmap6(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawTiledPixmap6;

PROCEDURE QPainter_drawPicture
  (self: QPainter; p: QPointF; picture: QPicture; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(picture.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPicture(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawPicture;

PROCEDURE QPainter_drawPicture1
  (self: QPainter; x, y: INTEGER; picture: QPicture; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(picture.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPicture1(selfAdr, x, y, arg4tmp);
  END QPainter_drawPicture1;

PROCEDURE QPainter_drawPicture2
  (self: QPainter; p: QPoint; picture: QPicture; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(picture.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPicture2(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawPicture2;

PROCEDURE QPainter_drawPixmap (self      : QPainter;
                               targetRect: QRectF;
                               pixmap    : QPixmap;
                               sourceRect: QRectF;   ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(targetRect.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pixmap.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sourceRect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPixmap(selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPainter_drawPixmap;

PROCEDURE QPainter_drawPixmap1 (self      : QPainter;
                                targetRect: QRect;
                                pixmap    : QPixmap;
                                sourceRect: QRect;    ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(targetRect.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pixmap.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sourceRect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPixmap1(selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPainter_drawPixmap1;

PROCEDURE QPainter_drawPixmap2 (self          : QPainter;
                                x, y, w, h    : INTEGER;
                                pm            : QPixmap;
                                sx, sy, sw, sh: INTEGER;  ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg6tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPixmap2(
      selfAdr, x, y, w, h, arg6tmp, sx, sy, sw, sh);
  END QPainter_drawPixmap2;

PROCEDURE QPainter_drawPixmap3
  (self: QPainter; x, y: INTEGER; pm: QPixmap; sx, sy, sw, sh: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPixmap3(
      selfAdr, x, y, arg4tmp, sx, sy, sw, sh);
  END QPainter_drawPixmap3;

PROCEDURE QPainter_drawPixmap4
  (self: QPainter; p: QPointF; pm: QPixmap; sr: QRectF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sr.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPixmap4(selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPainter_drawPixmap4;

PROCEDURE QPainter_drawPixmap5
  (self: QPainter; p: QPoint; pm: QPixmap; sr: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sr.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPixmap5(selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPainter_drawPixmap5;

PROCEDURE QPainter_drawPixmap6
  (self: QPainter; p: QPointF; pm: QPixmap; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPixmap6(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawPixmap6;

PROCEDURE QPainter_drawPixmap7 (self: QPainter; p: QPoint; pm: QPixmap; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPixmap7(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawPixmap7;

PROCEDURE QPainter_drawPixmap8
  (self: QPainter; x, y: INTEGER; pm: QPixmap; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPixmap8(selfAdr, x, y, arg4tmp);
  END QPainter_drawPixmap8;

PROCEDURE QPainter_drawPixmap9 (self: QPainter; r: QRect; pm: QPixmap; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPixmap9(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawPixmap9;

PROCEDURE QPainter_drawPixmap10
  (self: QPainter; x, y, w, h: INTEGER; pm: QPixmap; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg6tmp          := LOOPHOLE(pm.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawPixmap10(selfAdr, x, y, w, h, arg6tmp);
  END QPainter_drawPixmap10;

PROCEDURE QPainter_drawImage (self      : QPainter;
                              targetRect: QRectF;
                              image     : QImage;
                              sourceRect: QRectF;
                              flags     : ImageConversionFlags; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(targetRect.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sourceRect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage(
      selfAdr, arg2tmp, arg3tmp, arg4tmp, ORD(flags));
  END QPainter_drawImage;

PROCEDURE QPainter_drawImage1 (self      : QPainter;
                               targetRect: QRectF;
                               image     : QImage;
                               sourceRect: QRectF;   ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(targetRect.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sourceRect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage1(selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPainter_drawImage1;

PROCEDURE QPainter_drawImage2 (self      : QPainter;
                               targetRect: QRect;
                               image     : QImage;
                               sourceRect: QRect;
                               flags     : ImageConversionFlags; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(targetRect.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sourceRect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage2(
      selfAdr, arg2tmp, arg3tmp, arg4tmp, ORD(flags));
  END QPainter_drawImage2;

PROCEDURE QPainter_drawImage3
  (self: QPainter; targetRect: QRect; image: QImage; sourceRect: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(targetRect.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sourceRect.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage3(selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPainter_drawImage3;

PROCEDURE QPainter_drawImage4 (self : QPainter;
                               p    : QPointF;
                               image: QImage;
                               sr   : QRectF;
                               flags: ImageConversionFlags; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sr.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage4(
      selfAdr, arg2tmp, arg3tmp, arg4tmp, ORD(flags));
  END QPainter_drawImage4;

PROCEDURE QPainter_drawImage5
  (self: QPainter; p: QPointF; image: QImage; sr: QRectF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sr.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage5(selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPainter_drawImage5;

PROCEDURE QPainter_drawImage6 (self : QPainter;
                               p    : QPoint;
                               image: QImage;
                               sr   : QRect;
                               flags: ImageConversionFlags; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sr.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage6(
      selfAdr, arg2tmp, arg3tmp, arg4tmp, ORD(flags));
  END QPainter_drawImage6;

PROCEDURE QPainter_drawImage7
  (self: QPainter; p: QPoint; image: QImage; sr: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(sr.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage7(selfAdr, arg2tmp, arg3tmp, arg4tmp);
  END QPainter_drawImage7;

PROCEDURE QPainter_drawImage8
  (self: QPainter; r: QRectF; image: QImage; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage8(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawImage8;

PROCEDURE QPainter_drawImage9 (self: QPainter; r: QRect; image: QImage; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage9(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawImage9;

PROCEDURE QPainter_drawImage10
  (self: QPainter; p: QPointF; image: QImage; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage10(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawImage10;

PROCEDURE QPainter_drawImage11
  (self: QPainter; p: QPoint; image: QImage; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage11(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawImage11;

PROCEDURE QPainter_drawImage12 (self          : QPainter;
                                x, y          : INTEGER;
                                image         : QImage;
                                sx, sy, sw, sh: INTEGER;
                                flags         : ImageConversionFlags; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage12(
      selfAdr, x, y, arg4tmp, sx, sy, sw, sh, ORD(flags));
  END QPainter_drawImage12;

PROCEDURE QPainter_drawImage13 (self          : QPainter;
                                x, y          : INTEGER;
                                image         : QImage;
                                sx, sy, sw, sh: INTEGER;  ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage13(
      selfAdr, x, y, arg4tmp, sx, sy, sw, sh);
  END QPainter_drawImage13;

PROCEDURE QPainter_drawImage14
  (self: QPainter; x, y: INTEGER; image: QImage; sx, sy, sw: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage14(selfAdr, x, y, arg4tmp, sx, sy, sw);
  END QPainter_drawImage14;

PROCEDURE QPainter_drawImage15
  (self: QPainter; x, y: INTEGER; image: QImage; sx, sy: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage15(selfAdr, x, y, arg4tmp, sx, sy);
  END QPainter_drawImage15;

PROCEDURE QPainter_drawImage16
  (self: QPainter; x, y: INTEGER; image: QImage; sx: INTEGER; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage16(selfAdr, x, y, arg4tmp, sx);
  END QPainter_drawImage16;

PROCEDURE QPainter_drawImage17
  (self: QPainter; x, y: INTEGER; image: QImage; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(image.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawImage17(selfAdr, x, y, arg4tmp);
  END QPainter_drawImage17;

PROCEDURE QPainter_setLayoutDirection
  (self: QPainter; direction: LayoutDirection; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setLayoutDirection(selfAdr, ORD(direction));
  END QPainter_setLayoutDirection;

PROCEDURE QPainter_layoutDirection (self: QPainter; ): LayoutDirection =
  VAR
    ret    : INTEGER;
    result : LayoutDirection;
    selfAdr: ADDRESS         := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_layoutDirection(selfAdr);
    result := VAL(ret, LayoutDirection);
    RETURN result;
  END QPainter_layoutDirection;

PROCEDURE QPainter_drawTextItem
  (self: QPainter; p: QPointF; ti: QTextItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(ti.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawTextItem(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawTextItem;

PROCEDURE QPainter_drawTextItem1
  (self: QPainter; x, y: INTEGER; ti: QTextItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg4tmp          := LOOPHOLE(ti.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawTextItem1(selfAdr, x, y, arg4tmp);
  END QPainter_drawTextItem1;

PROCEDURE QPainter_drawTextItem2
  (self: QPainter; p: QPoint; ti: QTextItem; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(p.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(ti.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_drawTextItem2(selfAdr, arg2tmp, arg3tmp);
  END QPainter_drawTextItem2;

PROCEDURE QPainter_fillRect
  (self: QPainter; arg2: QRectF; arg3: QBrush; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(arg3.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect(selfAdr, arg2tmp, arg3tmp);
  END QPainter_fillRect;

PROCEDURE QPainter_fillRect1
  (self: QPainter; x, y, w, h: INTEGER; arg6: QBrush; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg6tmp          := LOOPHOLE(arg6.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect1(selfAdr, x, y, w, h, arg6tmp);
  END QPainter_fillRect1;

PROCEDURE QPainter_fillRect2
  (self: QPainter; arg2: QRect; arg3: QBrush; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(arg3.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect2(selfAdr, arg2tmp, arg3tmp);
  END QPainter_fillRect2;

PROCEDURE QPainter_fillRect3
  (self: QPainter; arg2: QRectF; color: QColor; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(color.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect3(selfAdr, arg2tmp, arg3tmp);
  END QPainter_fillRect3;

PROCEDURE QPainter_fillRect4
  (self: QPainter; x, y, w, h: INTEGER; color: QColor; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg6tmp          := LOOPHOLE(color.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect4(selfAdr, x, y, w, h, arg6tmp);
  END QPainter_fillRect4;

PROCEDURE QPainter_fillRect5
  (self: QPainter; arg2: QRect; color: QColor; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(color.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect5(selfAdr, arg2tmp, arg3tmp);
  END QPainter_fillRect5;

PROCEDURE QPainter_fillRect6
  (self: QPainter; x, y, w, h: INTEGER; c: GlobalColor; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect6(selfAdr, x, y, w, h, ORD(c));
  END QPainter_fillRect6;

PROCEDURE QPainter_fillRect7 (self: QPainter; r: QRect; c: GlobalColor; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect7(selfAdr, arg2tmp, ORD(c));
  END QPainter_fillRect7;

PROCEDURE QPainter_fillRect8
  (self: QPainter; r: QRectF; c: GlobalColor; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect8(selfAdr, arg2tmp, ORD(c));
  END QPainter_fillRect8;

PROCEDURE QPainter_fillRect9
  (self: QPainter; x, y, w, h: INTEGER; style: BrushStyle; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect9(selfAdr, x, y, w, h, ORD(style));
  END QPainter_fillRect9;

PROCEDURE QPainter_fillRect10
  (self: QPainter; r: QRect; style: BrushStyle; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect10(selfAdr, arg2tmp, ORD(style));
  END QPainter_fillRect10;

PROCEDURE QPainter_fillRect11
  (self: QPainter; r: QRectF; style: BrushStyle; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(r.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_fillRect11(selfAdr, arg2tmp, ORD(style));
  END QPainter_fillRect11;

PROCEDURE QPainter_eraseRect (self: QPainter; arg2: QRectF; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_eraseRect(selfAdr, arg2tmp);
  END QPainter_eraseRect;

PROCEDURE QPainter_eraseRect1 (self: QPainter; x, y, w, h: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_eraseRect1(selfAdr, x, y, w, h);
  END QPainter_eraseRect1;

PROCEDURE QPainter_eraseRect2 (self: QPainter; arg2: QRect; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_eraseRect2(selfAdr, arg2tmp);
  END QPainter_eraseRect2;

PROCEDURE QPainter_setRenderHint
  (self: QPainter; hint: RenderHint; on: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setRenderHint(selfAdr, ORD(hint), on);
  END QPainter_setRenderHint;

PROCEDURE QPainter_setRenderHint1 (self: QPainter; hint: RenderHint; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setRenderHint1(selfAdr, ORD(hint));
  END QPainter_setRenderHint1;

PROCEDURE QPainter_setRenderHints
  (self: QPainter; hints: RenderHints; on: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setRenderHints(selfAdr, ORD(hints), on);
  END QPainter_setRenderHints;

PROCEDURE QPainter_setRenderHints1 (self: QPainter; hints: RenderHints; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_setRenderHints1(selfAdr, ORD(hints));
  END QPainter_setRenderHints1;

PROCEDURE QPainter_renderHints (self: QPainter; ): RenderHints =
  VAR
    ret    : INTEGER;
    result : RenderHints;
    selfAdr: ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_renderHints(selfAdr);
    result := VAL(ret, RenderHints);
    RETURN result;
  END QPainter_renderHints;

PROCEDURE QPainter_testRenderHint (self: QPainter; hint: RenderHint; ):
  BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtPainterRaw.QPainter_testRenderHint(selfAdr, ORD(hint));
  END QPainter_testRenderHint;

PROCEDURE QPainter_paintEngine (self: QPainter; ): QPaintEngine =
  VAR
    ret    : ADDRESS;
    result : QPaintEngine;
    selfAdr: ADDRESS      := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.QPainter_paintEngine(selfAdr);

    result := NEW(QPaintEngine);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QPainter_paintEngine;

PROCEDURE SetRedirected
  (device, replacement: QPaintDevice; offset: QPoint; ) =
  VAR
    arg1tmp := LOOPHOLE(device.cxxObj, ADDRESS);
    arg2tmp := LOOPHOLE(replacement.cxxObj, ADDRESS);
    arg3tmp := LOOPHOLE(offset.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.SetRedirected(arg1tmp, arg2tmp, arg3tmp);
  END SetRedirected;

PROCEDURE SetRedirected1 (device, replacement: QPaintDevice; ) =
  VAR
    arg1tmp := LOOPHOLE(device.cxxObj, ADDRESS);
    arg2tmp := LOOPHOLE(replacement.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.SetRedirected1(arg1tmp, arg2tmp);
  END SetRedirected1;

PROCEDURE Redirected (device: QPaintDevice; offset: QPoint; ):
  QPaintDevice =
  VAR
    ret    : ADDRESS;
    result : QPaintDevice;
    arg1tmp               := LOOPHOLE(device.cxxObj, ADDRESS);
    arg2tmp               := LOOPHOLE(offset.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.Redirected(arg1tmp, arg2tmp);

    result := NEW(QPaintDevice);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END Redirected;

PROCEDURE Redirected1 (device: QPaintDevice; ): QPaintDevice =
  VAR
    ret    : ADDRESS;
    result : QPaintDevice;
    arg1tmp               := LOOPHOLE(device.cxxObj, ADDRESS);
  BEGIN
    ret := QtPainterRaw.Redirected1(arg1tmp);

    result := NEW(QPaintDevice);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END Redirected1;

PROCEDURE RestoreRedirected (device: QPaintDevice; ) =
  VAR arg1tmp := LOOPHOLE(device.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.RestoreRedirected(arg1tmp);
  END RestoreRedirected;

PROCEDURE QPainter_beginNativePainting (self: QPainter; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_beginNativePainting(selfAdr);
  END QPainter_beginNativePainting;

PROCEDURE QPainter_endNativePainting (self: QPainter; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtPainterRaw.QPainter_endNativePainting(selfAdr);
  END QPainter_endNativePainting;

PROCEDURE Cleanup_QPainter
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QPainter := ref;
  BEGIN
    Delete_QPainter(obj);
  END Cleanup_QPainter;

PROCEDURE Destroy_QPainter (self: QPainter) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QPainter);
  END Destroy_QPainter;

REVEAL
  QPainter = QPainterPublic BRANDED OBJECT
             OVERRIDES
               init_0                  := New_QPainter0;
               init_1                  := New_QPainter1;
               device                  := QPainter_device;
               begin                   := QPainter_begin;
               end                     := QPainter_end;
               isActive                := QPainter_isActive;
               initFrom                := QPainter_initFrom;
               setCompositionMode      := QPainter_setCompositionMode;
               compositionMode         := QPainter_compositionMode;
               font                    := QPainter_font;
               setFont                 := QPainter_setFont;
               fontMetrics             := QPainter_fontMetrics;
               fontInfo                := QPainter_fontInfo;
               setPen                  := QPainter_setPen;
               setPen1                 := QPainter_setPen1;
               setPen2                 := QPainter_setPen2;
               pen                     := QPainter_pen;
               setBrush                := QPainter_setBrush;
               setBrush1               := QPainter_setBrush1;
               brush                   := QPainter_brush;
               setBackgroundMode       := QPainter_setBackgroundMode;
               backgroundMode          := QPainter_backgroundMode;
               brushOrigin             := QPainter_brushOrigin;
               setBrushOrigin          := QPainter_setBrushOrigin;
               setBrushOrigin1         := QPainter_setBrushOrigin1;
               setBrushOrigin2         := QPainter_setBrushOrigin2;
               setBackground           := QPainter_setBackground;
               background              := QPainter_background;
               opacity                 := QPainter_opacity;
               setOpacity              := QPainter_setOpacity;
               clipRegion              := QPainter_clipRegion;
               setClipRect             := QPainter_setClipRect;
               setClipRect1            := QPainter_setClipRect1;
               setClipRect2            := QPainter_setClipRect2;
               setClipRect3            := QPainter_setClipRect3;
               setClipRect4            := QPainter_setClipRect4;
               setClipRect5            := QPainter_setClipRect5;
               setClipRegion           := QPainter_setClipRegion;
               setClipRegion1          := QPainter_setClipRegion1;
               setClipping             := QPainter_setClipping;
               hasClipping             := QPainter_hasClipping;
               clipBoundingRect        := QPainter_clipBoundingRect;
               save                    := QPainter_save;
               restore                 := QPainter_restore;
               setMatrix               := QPainter_setMatrix;
               setMatrix1              := QPainter_setMatrix1;
               matrix                  := QPainter_matrix;
               deviceMatrix            := QPainter_deviceMatrix;
               resetMatrix             := QPainter_resetMatrix;
               setTransform            := QPainter_setTransform;
               setTransform1           := QPainter_setTransform1;
               transform               := QPainter_transform;
               deviceTransform         := QPainter_deviceTransform;
               resetTransform          := QPainter_resetTransform;
               setWorldMatrix          := QPainter_setWorldMatrix;
               setWorldMatrix1         := QPainter_setWorldMatrix1;
               worldMatrix             := QPainter_worldMatrix;
               setWorldTransform       := QPainter_setWorldTransform;
               setWorldTransform1      := QPainter_setWorldTransform1;
               worldTransform          := QPainter_worldTransform;
               combinedMatrix          := QPainter_combinedMatrix;
               combinedTransform       := QPainter_combinedTransform;
               setMatrixEnabled        := QPainter_setMatrixEnabled;
               matrixEnabled           := QPainter_matrixEnabled;
               setWorldMatrixEnabled   := QPainter_setWorldMatrixEnabled;
               worldMatrixEnabled      := QPainter_worldMatrixEnabled;
               scale                   := QPainter_scale;
               shear                   := QPainter_shear;
               rotate                  := QPainter_rotate;
               translate               := QPainter_translate;
               translate1              := QPainter_translate1;
               translate2              := QPainter_translate2;
               window                  := QPainter_window;
               setWindow               := QPainter_setWindow;
               setWindow1              := QPainter_setWindow1;
               viewport                := QPainter_viewport;
               setViewport             := QPainter_setViewport;
               setViewport1            := QPainter_setViewport1;
               setViewTransformEnabled := QPainter_setViewTransformEnabled;
               viewTransformEnabled    := QPainter_viewTransformEnabled;
               drawPoint               := QPainter_drawPoint;
               drawPoint1              := QPainter_drawPoint1;
               drawPoint2              := QPainter_drawPoint2;
               drawPoints              := QPainter_drawPoints;
               drawPoints1             := QPainter_drawPoints1;
               drawPoints2             := QPainter_drawPoints2;
               drawPoints3             := QPainter_drawPoints3;
               drawLine                := QPainter_drawLine;
               drawLine1               := QPainter_drawLine1;
               drawLine2               := QPainter_drawLine2;
               drawLine3               := QPainter_drawLine3;
               drawLine4               := QPainter_drawLine4;
               drawRect                := QPainter_drawRect;
               drawRect1               := QPainter_drawRect1;
               drawRect2               := QPainter_drawRect2;
               drawEllipse             := QPainter_drawEllipse;
               drawEllipse1            := QPainter_drawEllipse1;
               drawEllipse2            := QPainter_drawEllipse2;
               drawEllipse3            := QPainter_drawEllipse3;
               drawEllipse4            := QPainter_drawEllipse4;
               drawPolyline            := QPainter_drawPolyline;
               drawPolyline1           := QPainter_drawPolyline1;
               drawPolyline2           := QPainter_drawPolyline2;
               drawPolyline3           := QPainter_drawPolyline3;
               drawPolygon             := QPainter_drawPolygon;
               drawPolygon1            := QPainter_drawPolygon1;
               drawPolygon2            := QPainter_drawPolygon2;
               drawPolygon3            := QPainter_drawPolygon3;
               drawPolygon4            := QPainter_drawPolygon4;
               drawPolygon5            := QPainter_drawPolygon5;
               drawPolygon6            := QPainter_drawPolygon6;
               drawPolygon7            := QPainter_drawPolygon7;
               drawConvexPolygon       := QPainter_drawConvexPolygon;
               drawConvexPolygon1      := QPainter_drawConvexPolygon1;
               drawConvexPolygon2      := QPainter_drawConvexPolygon2;
               drawConvexPolygon3      := QPainter_drawConvexPolygon3;
               drawArc                 := QPainter_drawArc;
               drawArc1                := QPainter_drawArc1;
               drawArc2                := QPainter_drawArc2;
               drawPie                 := QPainter_drawPie;
               drawPie1                := QPainter_drawPie1;
               drawPie2                := QPainter_drawPie2;
               drawChord               := QPainter_drawChord;
               drawChord1              := QPainter_drawChord1;
               drawChord2              := QPainter_drawChord2;
               drawRoundedRect         := QPainter_drawRoundedRect;
               drawRoundedRect1        := QPainter_drawRoundedRect1;
               drawRoundedRect2        := QPainter_drawRoundedRect2;
               drawRoundedRect3        := QPainter_drawRoundedRect3;
               drawRoundedRect4        := QPainter_drawRoundedRect4;
               drawRoundedRect5        := QPainter_drawRoundedRect5;
               drawRoundRect           := QPainter_drawRoundRect;
               drawRoundRect1          := QPainter_drawRoundRect1;
               drawRoundRect2          := QPainter_drawRoundRect2;
               drawRoundRect3          := QPainter_drawRoundRect3;
               drawRoundRect4          := QPainter_drawRoundRect4;
               drawRoundRect5          := QPainter_drawRoundRect5;
               drawRoundRect6          := QPainter_drawRoundRect6;
               drawRoundRect7          := QPainter_drawRoundRect7;
               drawRoundRect8          := QPainter_drawRoundRect8;
               drawTiledPixmap         := QPainter_drawTiledPixmap;
               drawTiledPixmap1        := QPainter_drawTiledPixmap1;
               drawTiledPixmap2        := QPainter_drawTiledPixmap2;
               drawTiledPixmap3        := QPainter_drawTiledPixmap3;
               drawTiledPixmap4        := QPainter_drawTiledPixmap4;
               drawTiledPixmap5        := QPainter_drawTiledPixmap5;
               drawTiledPixmap6        := QPainter_drawTiledPixmap6;
               drawPicture             := QPainter_drawPicture;
               drawPicture1            := QPainter_drawPicture1;
               drawPicture2            := QPainter_drawPicture2;
               drawPixmap              := QPainter_drawPixmap;
               drawPixmap1             := QPainter_drawPixmap1;
               drawPixmap2             := QPainter_drawPixmap2;
               drawPixmap3             := QPainter_drawPixmap3;
               drawPixmap4             := QPainter_drawPixmap4;
               drawPixmap5             := QPainter_drawPixmap5;
               drawPixmap6             := QPainter_drawPixmap6;
               drawPixmap7             := QPainter_drawPixmap7;
               drawPixmap8             := QPainter_drawPixmap8;
               drawPixmap9             := QPainter_drawPixmap9;
               drawPixmap10            := QPainter_drawPixmap10;
               drawImage               := QPainter_drawImage;
               drawImage1              := QPainter_drawImage1;
               drawImage2              := QPainter_drawImage2;
               drawImage3              := QPainter_drawImage3;
               drawImage4              := QPainter_drawImage4;
               drawImage5              := QPainter_drawImage5;
               drawImage6              := QPainter_drawImage6;
               drawImage7              := QPainter_drawImage7;
               drawImage8              := QPainter_drawImage8;
               drawImage9              := QPainter_drawImage9;
               drawImage10             := QPainter_drawImage10;
               drawImage11             := QPainter_drawImage11;
               drawImage12             := QPainter_drawImage12;
               drawImage13             := QPainter_drawImage13;
               drawImage14             := QPainter_drawImage14;
               drawImage15             := QPainter_drawImage15;
               drawImage16             := QPainter_drawImage16;
               drawImage17             := QPainter_drawImage17;
               setLayoutDirection      := QPainter_setLayoutDirection;
               layoutDirection         := QPainter_layoutDirection;
               drawTextItem            := QPainter_drawTextItem;
               drawTextItem1           := QPainter_drawTextItem1;
               drawTextItem2           := QPainter_drawTextItem2;
               fillRect                := QPainter_fillRect;
               fillRect1               := QPainter_fillRect1;
               fillRect2               := QPainter_fillRect2;
               fillRect3               := QPainter_fillRect3;
               fillRect4               := QPainter_fillRect4;
               fillRect5               := QPainter_fillRect5;
               fillRect6               := QPainter_fillRect6;
               fillRect7               := QPainter_fillRect7;
               fillRect8               := QPainter_fillRect8;
               fillRect9               := QPainter_fillRect9;
               fillRect10              := QPainter_fillRect10;
               fillRect11              := QPainter_fillRect11;
               eraseRect               := QPainter_eraseRect;
               eraseRect1              := QPainter_eraseRect1;
               eraseRect2              := QPainter_eraseRect2;
               setRenderHint           := QPainter_setRenderHint;
               setRenderHint1          := QPainter_setRenderHint1;
               setRenderHints          := QPainter_setRenderHints;
               setRenderHints1         := QPainter_setRenderHints1;
               renderHints             := QPainter_renderHints;
               testRenderHint          := QPainter_testRenderHint;
               paintEngine             := QPainter_paintEngine;
               beginNativePainting     := QPainter_beginNativePainting;
               endNativePainting       := QPainter_endNativePainting;
               destroyCxx              := Destroy_QPainter;
             END;


BEGIN
END QtPainter.
