/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qregion.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QRegion * New_QRegion0() {
  QRegion *result = 0 ;
  QRegion * cresult ;
  
  result = (QRegion *)new QRegion();
  *(QRegion **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRegion * New_QRegion1(int x, int y, int w, int h, QRegion::RegionType t) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QRegion::RegionType arg5 ;
  QRegion *result = 0 ;
  QRegion * cresult ;
  
  arg1 = (int)x; 
  arg2 = (int)y; 
  arg3 = (int)w; 
  arg4 = (int)h; 
  arg5 = (QRegion::RegionType)t; 
  result = (QRegion *)new QRegion(arg1,arg2,arg3,arg4,arg5);
  *(QRegion **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRegion * New_QRegion2(int x, int y, int w, int h) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QRegion *result = 0 ;
  QRegion * cresult ;
  
  arg1 = (int)x; 
  arg2 = (int)y; 
  arg3 = (int)w; 
  arg4 = (int)h; 
  result = (QRegion *)new QRegion(arg1,arg2,arg3,arg4);
  *(QRegion **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRegion * New_QRegion3(QRect * r, QRegion::RegionType t) {
  QRect *arg1 = 0 ;
  QRegion::RegionType arg2 ;
  QRegion *result = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRect **)&r;
  arg2 = (QRegion::RegionType)t; 
  result = (QRegion *)new QRegion((QRect const &)*arg1,arg2);
  *(QRegion **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRegion * New_QRegion4(QRect * r) {
  QRect *arg1 = 0 ;
  QRegion *result = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRect **)&r;
  result = (QRegion *)new QRegion((QRect const &)*arg1);
  *(QRegion **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRegion * New_QRegion5(QPolygon * pa, Qt::FillRule fillRule) {
  QPolygon *arg1 = 0 ;
  Qt::FillRule arg2 ;
  QRegion *result = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QPolygon **)&pa;
  arg2 = (Qt::FillRule)fillRule; 
  result = (QRegion *)new QRegion((QPolygon const &)*arg1,arg2);
  *(QRegion **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRegion * New_QRegion6(QPolygon * pa) {
  QPolygon *arg1 = 0 ;
  QRegion *result = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QPolygon **)&pa;
  result = (QRegion *)new QRegion((QPolygon const &)*arg1);
  *(QRegion **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRegion * New_QRegion7(QRegion const & region) {
  QRegion *arg1 = 0 ;
  QRegion *result = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&region;
  result = (QRegion *)new QRegion((QRegion const &)*arg1);
  *(QRegion **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRegion * New_QRegion8(QBitmap const & bitmap) {
  QBitmap *arg1 = 0 ;
  QRegion *result = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QBitmap **)&bitmap;
  result = (QRegion *)new QRegion((QBitmap const &)*arg1);
  *(QRegion **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QRegion(QRegion * self) {
  QRegion *arg1 = (QRegion *) 0 ;
  
  arg1 = *(QRegion **)&self; 
  delete arg1;
}


SWIGEXPORT void QRegion_swap(QRegion * self, QRegion & other) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRegion *arg2 = 0 ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRegion **)&other;
  /*
  if(!arg2) {
      //SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QRegion & reference is null");
      //RETURN ;
      return ;
    }
  */
  
  (arg1)->swap(*arg2);
}


SWIGEXPORT bool QRegion_isEmpty(QRegion const * self) {
  QRegion *arg1 = (QRegion *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRegion **)&self; 
  result = (bool)((QRegion const *)arg1)->isEmpty();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRegion_contains(QRegion const * self, QPoint * p) {
  QRegion *arg1 = (QRegion *) 0 ;
  QPoint *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QPoint **)&p;
  result = (bool)((QRegion const *)arg1)->contains((QPoint const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRegion_contains1(QRegion const * self, QRect * r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRect *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRect **)&r;
  result = (bool)((QRegion const *)arg1)->contains((QRect const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QRegion_translate(QRegion * self, int dx, int dy) {
  QRegion *arg1 = (QRegion *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  (arg1)->translate(arg2,arg3);
}


SWIGEXPORT void QRegion_translate1(QRegion * self, QPoint * p) {
  QRegion *arg1 = (QRegion *) 0 ;
  QPoint *arg2 = 0 ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QPoint **)&p;
  (arg1)->translate((QPoint const &)*arg2);
}


SWIGEXPORT QRegion * QRegion_translated(QRegion const * self, int dx, int dy) {
  QRegion *arg1 = (QRegion *) 0 ;
  int arg2 ;
  int arg3 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->translated(arg2,arg3));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_translated1(QRegion const * self, QPoint * p) {
  QRegion *arg1 = (QRegion *) 0 ;
  QPoint *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QPoint **)&p;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->translated((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_unite(QRegion const * self, QRegion const & r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRegion *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRegion **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->unite((QRegion const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_unite1(QRegion const * self, QRect * r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRect *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRect **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->unite((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_intersect(QRegion const * self, QRegion const & r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRegion *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRegion **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->intersect((QRegion const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_intersect1(QRegion const * self, QRect * r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRect *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRect **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->intersect((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_subtract(QRegion const * self, QRegion const & r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRegion *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRegion **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->subtract((QRegion const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_eor(QRegion const * self, QRegion const & r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRegion *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRegion **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->eor((QRegion const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_united(QRegion const * self, QRegion const & r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRegion *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRegion **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->united((QRegion const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_united1(QRegion const * self, QRect * r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRect *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRect **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->united((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_intersected(QRegion const * self, QRegion const & r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRegion *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRegion **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->intersected((QRegion const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_intersected1(QRegion const * self, QRect * r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRect *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRect **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->intersected((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_subtracted(QRegion const * self, QRegion const & r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRegion *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRegion **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->subtracted((QRegion const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QRegion_xored(QRegion const * self, QRegion const & r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRegion *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRegion **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QRegion const *)arg1)->xored((QRegion const &)*arg2));
  return cresult;
}


SWIGEXPORT bool QRegion_intersects(QRegion const * self, QRegion const & r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRegion *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRegion **)&r;
  result = (bool)((QRegion const *)arg1)->intersects((QRegion const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QRegion_intersects1(QRegion const * self, QRect * r) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRect *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRect **)&r;
  result = (bool)((QRegion const *)arg1)->intersects((QRect const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QRegion_boundingRect(QRegion const * self) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QRegion **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QRegion const *)arg1)->boundingRect());
  return cresult;
}


SWIGEXPORT void QRegion_setRects(QRegion * self, QRect * rect, int num) {
  QRegion *arg1 = (QRegion *) 0 ;
  QRect *arg2 = (QRect *) 0 ;
  int arg3 ;
  
  arg1 = *(QRegion **)&self; 
  arg2 = *(QRect **)&rect; 
  arg3 = (int)num; 
  (arg1)->setRects((QRect const *)arg2,arg3);
}


SWIGEXPORT int QRegion_rectCount(QRegion const * self) {
  QRegion *arg1 = (QRegion *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QRegion **)&self; 
  result = (int)((QRegion const *)arg1)->rectCount();
  cresult = result; 
  return cresult;
}


#ifdef __cplusplus
}
#endif

