/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qdatetimeedit.h>
#define  Sections QDateTimeEdit::Sections


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QDateTimeEdit * New_QDateTimeEdit0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QDateTimeEdit *result = 0 ;
  QDateTimeEdit * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QDateTimeEdit *)new QDateTimeEdit(arg1);
  *(QDateTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTimeEdit * New_QDateTimeEdit1() {
  QDateTimeEdit *result = 0 ;
  QDateTimeEdit * cresult ;
  
  result = (QDateTimeEdit *)new QDateTimeEdit();
  *(QDateTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTimeEdit * New_QDateTimeEdit2(QDateTime const & dt, QWidget * parent) {
  QDateTime *arg1 = 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QDateTimeEdit *result = 0 ;
  QDateTimeEdit * cresult ;
  
  arg1 = *(QDateTime **)&dt;
  arg2 = *(QWidget **)&parent; 
  result = (QDateTimeEdit *)new QDateTimeEdit((QDateTime const &)*arg1,arg2);
  *(QDateTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTimeEdit * New_QDateTimeEdit3(QDateTime const & dt) {
  QDateTime *arg1 = 0 ;
  QDateTimeEdit *result = 0 ;
  QDateTimeEdit * cresult ;
  
  arg1 = *(QDateTime **)&dt;
  result = (QDateTimeEdit *)new QDateTimeEdit((QDateTime const &)*arg1);
  *(QDateTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTimeEdit * New_QDateTimeEdit4(QDate const & d, QWidget * parent) {
  QDate *arg1 = 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QDateTimeEdit *result = 0 ;
  QDateTimeEdit * cresult ;
  
  arg1 = *(QDate **)&d;
  arg2 = *(QWidget **)&parent; 
  result = (QDateTimeEdit *)new QDateTimeEdit((QDate const &)*arg1,arg2);
  *(QDateTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTimeEdit * New_QDateTimeEdit5(QDate const & d) {
  QDate *arg1 = 0 ;
  QDateTimeEdit *result = 0 ;
  QDateTimeEdit * cresult ;
  
  arg1 = *(QDate **)&d;
  result = (QDateTimeEdit *)new QDateTimeEdit((QDate const &)*arg1);
  *(QDateTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTimeEdit * New_QDateTimeEdit6(QTime const & t, QWidget * parent) {
  QTime *arg1 = 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QDateTimeEdit *result = 0 ;
  QDateTimeEdit * cresult ;
  
  arg1 = *(QTime **)&t;
  arg2 = *(QWidget **)&parent; 
  result = (QDateTimeEdit *)new QDateTimeEdit((QTime const &)*arg1,arg2);
  *(QDateTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTimeEdit * New_QDateTimeEdit7(QTime const & t) {
  QTime *arg1 = 0 ;
  QDateTimeEdit *result = 0 ;
  QDateTimeEdit * cresult ;
  
  arg1 = *(QTime **)&t;
  result = (QDateTimeEdit *)new QDateTimeEdit((QTime const &)*arg1);
  *(QDateTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTime * QDateTimeEdit_dateTime(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)((QDateTimeEdit const *)arg1)->dateTime());
  return cresult;
}


SWIGEXPORT QDate * QDateTimeEdit_date(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDate * cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(QDate **)&cresult = new QDate((const QDate &)((QDateTimeEdit const *)arg1)->date());
  return cresult;
}


SWIGEXPORT QTime * QDateTimeEdit_time(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QTime * cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(QTime **)&cresult = new QTime((const QTime &)((QDateTimeEdit const *)arg1)->time());
  return cresult;
}


SWIGEXPORT QDateTime * QDateTimeEdit_minimumDateTime(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)((QDateTimeEdit const *)arg1)->minimumDateTime());
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_clearMinimumDateTime(QDateTimeEdit * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  (arg1)->clearMinimumDateTime();
}


SWIGEXPORT void QDateTimeEdit_setMinimumDateTime(QDateTimeEdit * self, QDateTime const & dt) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDateTime *arg2 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QDateTime **)&dt;
  (arg1)->setMinimumDateTime((QDateTime const &)*arg2);
}


SWIGEXPORT QDateTime * QDateTimeEdit_maximumDateTime(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDateTime * cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(QDateTime **)&cresult = new QDateTime((const QDateTime &)((QDateTimeEdit const *)arg1)->maximumDateTime());
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_clearMaximumDateTime(QDateTimeEdit * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  (arg1)->clearMaximumDateTime();
}


SWIGEXPORT void QDateTimeEdit_setMaximumDateTime(QDateTimeEdit * self, QDateTime const & dt) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDateTime *arg2 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QDateTime **)&dt;
  (arg1)->setMaximumDateTime((QDateTime const &)*arg2);
}


SWIGEXPORT void QDateTimeEdit_setDateTimeRange(QDateTimeEdit * self, QDateTime const & min, QDateTime const & max) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDateTime *arg2 = 0 ;
  QDateTime *arg3 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QDateTime **)&min;
  arg3 = *(QDateTime **)&max;
  (arg1)->setDateTimeRange((QDateTime const &)*arg2,(QDateTime const &)*arg3);
}


SWIGEXPORT QDate * QDateTimeEdit_minimumDate(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDate * cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(QDate **)&cresult = new QDate((const QDate &)((QDateTimeEdit const *)arg1)->minimumDate());
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_setMinimumDate(QDateTimeEdit * self, QDate const & min) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDate *arg2 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QDate **)&min;
  (arg1)->setMinimumDate((QDate const &)*arg2);
}


SWIGEXPORT void QDateTimeEdit_clearMinimumDate(QDateTimeEdit * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  (arg1)->clearMinimumDate();
}


SWIGEXPORT QDate * QDateTimeEdit_maximumDate(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDate * cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(QDate **)&cresult = new QDate((const QDate &)((QDateTimeEdit const *)arg1)->maximumDate());
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_setMaximumDate(QDateTimeEdit * self, QDate const & max) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDate *arg2 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QDate **)&max;
  (arg1)->setMaximumDate((QDate const &)*arg2);
}


SWIGEXPORT void QDateTimeEdit_clearMaximumDate(QDateTimeEdit * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  (arg1)->clearMaximumDate();
}


SWIGEXPORT void QDateTimeEdit_setDateRange(QDateTimeEdit * self, QDate const & min, QDate const & max) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDate *arg2 = 0 ;
  QDate *arg3 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QDate **)&min;
  arg3 = *(QDate **)&max;
  (arg1)->setDateRange((QDate const &)*arg2,(QDate const &)*arg3);
}


SWIGEXPORT QTime * QDateTimeEdit_minimumTime(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QTime * cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(QTime **)&cresult = new QTime((const QTime &)((QDateTimeEdit const *)arg1)->minimumTime());
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_setMinimumTime(QDateTimeEdit * self, QTime const & min) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QTime *arg2 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QTime **)&min;
  (arg1)->setMinimumTime((QTime const &)*arg2);
}


SWIGEXPORT void QDateTimeEdit_clearMinimumTime(QDateTimeEdit * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  (arg1)->clearMinimumTime();
}


SWIGEXPORT QTime * QDateTimeEdit_maximumTime(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QTime * cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(QTime **)&cresult = new QTime((const QTime &)((QDateTimeEdit const *)arg1)->maximumTime());
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_setMaximumTime(QDateTimeEdit * self, QTime const & max) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QTime *arg2 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QTime **)&max;
  (arg1)->setMaximumTime((QTime const &)*arg2);
}


SWIGEXPORT void QDateTimeEdit_clearMaximumTime(QDateTimeEdit * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  (arg1)->clearMaximumTime();
}


SWIGEXPORT void QDateTimeEdit_setTimeRange(QDateTimeEdit * self, QTime const & min, QTime const & max) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QTime *arg2 = 0 ;
  QTime *arg3 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QTime **)&min;
  arg3 = *(QTime **)&max;
  (arg1)->setTimeRange((QTime const &)*arg2,(QTime const &)*arg3);
}


SWIGEXPORT Sections QDateTimeEdit_displayedSections(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  Sections cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(Sections **)&cresult = new Sections((const Sections &)((QDateTimeEdit const *)arg1)->displayedSections());
  return cresult;
}


SWIGEXPORT QDateTimeEdit::Section QDateTimeEdit_currentSection(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDateTimeEdit::Section result;
  QDateTimeEdit::Section cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  result = (QDateTimeEdit::Section)((QDateTimeEdit const *)arg1)->currentSection();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QDateTimeEdit::Section QDateTimeEdit_sectionAt(QDateTimeEdit const * self, int index) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  int arg2 ;
  QDateTimeEdit::Section result;
  QDateTimeEdit::Section cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = (int)index; 
  result = (QDateTimeEdit::Section)((QDateTimeEdit const *)arg1)->sectionAt(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_setCurrentSection(QDateTimeEdit * self, QDateTimeEdit::Section section) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDateTimeEdit::Section arg2 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = (QDateTimeEdit::Section)section; 
  (arg1)->setCurrentSection(arg2);
}


SWIGEXPORT int QDateTimeEdit_currentSectionIndex(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  result = (int)((QDateTimeEdit const *)arg1)->currentSectionIndex();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_setCurrentSectionIndex(QDateTimeEdit * self, int index) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  int arg2 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = (int)index; 
  (arg1)->setCurrentSectionIndex(arg2);
}


SWIGEXPORT QCalendarWidget * QDateTimeEdit_calendarWidget(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QCalendarWidget *result = 0 ;
  QCalendarWidget * cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  result = (QCalendarWidget *)((QDateTimeEdit const *)arg1)->calendarWidget();
  *(QCalendarWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_setCalendarWidget(QDateTimeEdit * self, QCalendarWidget * calendarWidget) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QCalendarWidget *arg2 = (QCalendarWidget *) 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QCalendarWidget **)&calendarWidget; 
  (arg1)->setCalendarWidget(arg2);
}


SWIGEXPORT int QDateTimeEdit_sectionCount(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  result = (int)((QDateTimeEdit const *)arg1)->sectionCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_setSelectedSection(QDateTimeEdit * self, QDateTimeEdit::Section section) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDateTimeEdit::Section arg2 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = (QDateTimeEdit::Section)section; 
  (arg1)->setSelectedSection(arg2);
}


SWIGEXPORT QString *  QDateTimeEdit_sectionText(QDateTimeEdit const * self, QDateTimeEdit::Section section) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDateTimeEdit::Section arg2 ;
  QString *  cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = (QDateTimeEdit::Section)section; 
  *(QString **)&cresult = new QString((const QString &)((QDateTimeEdit const *)arg1)->sectionText(arg2));
  return cresult;
}


SWIGEXPORT QString *  QDateTimeEdit_displayFormat(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QString *  cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QDateTimeEdit const *)arg1)->displayFormat());
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_setDisplayFormat(QDateTimeEdit * self, QString * format) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QString **)&format;
  (arg1)->setDisplayFormat((QString const &)*arg2);
}


SWIGEXPORT bool QDateTimeEdit_calendarPopup(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  result = (bool)((QDateTimeEdit const *)arg1)->calendarPopup();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_setCalendarPopup(QDateTimeEdit * self, bool enable) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  bool arg2 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setCalendarPopup(arg2);
}


SWIGEXPORT Qt::TimeSpec QDateTimeEdit_timeSpec(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  Qt::TimeSpec result;
  Qt::TimeSpec cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  result = (Qt::TimeSpec)((QDateTimeEdit const *)arg1)->timeSpec();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_setTimeSpec(QDateTimeEdit * self, Qt::TimeSpec spec) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  Qt::TimeSpec arg2 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = (Qt::TimeSpec)spec; 
  (arg1)->setTimeSpec(arg2);
}


SWIGEXPORT QSize * QDateTimeEdit_sizeHint(QDateTimeEdit const * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QDateTimeEdit const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT void QDateTimeEdit_clear(QDateTimeEdit * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  (arg1)->clear();
}


SWIGEXPORT void QDateTimeEdit_stepBy(QDateTimeEdit * self, int steps) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  int arg2 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = (int)steps; 
  (arg1)->stepBy(arg2);
}


SWIGEXPORT void QDateTimeEdit_setDateTime(QDateTimeEdit * self, QDateTime const & dateTime) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDateTime *arg2 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QDateTime **)&dateTime;
  (arg1)->setDateTime((QDateTime const &)*arg2);
}


SWIGEXPORT void QDateTimeEdit_setDate(QDateTimeEdit * self, QDate const & date) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QDate *arg2 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QDate **)&date;
  (arg1)->setDate((QDate const &)*arg2);
}


SWIGEXPORT void QDateTimeEdit_setTime(QDateTimeEdit * self, QTime const & time) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  QTime *arg2 = 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  arg2 = *(QTime **)&time;
  (arg1)->setTime((QTime const &)*arg2);
}


SWIGEXPORT void Delete_QDateTimeEdit(QDateTimeEdit * self) {
  QDateTimeEdit *arg1 = (QDateTimeEdit *) 0 ;
  
  arg1 = *(QDateTimeEdit **)&self; 
  delete arg1;
}


SWIGEXPORT QTimeEdit * New_QTimeEdit0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QTimeEdit *result = 0 ;
  QTimeEdit * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QTimeEdit *)new QTimeEdit(arg1);
  *(QTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTimeEdit * New_QTimeEdit1() {
  QTimeEdit *result = 0 ;
  QTimeEdit * cresult ;
  
  result = (QTimeEdit *)new QTimeEdit();
  *(QTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTimeEdit * New_QTimeEdit2(QTime const & time, QWidget * parent) {
  QTime *arg1 = 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QTimeEdit *result = 0 ;
  QTimeEdit * cresult ;
  
  arg1 = *(QTime **)&time;
  arg2 = *(QWidget **)&parent; 
  result = (QTimeEdit *)new QTimeEdit((QTime const &)*arg1,arg2);
  *(QTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTimeEdit * New_QTimeEdit3(QTime const & time) {
  QTime *arg1 = 0 ;
  QTimeEdit *result = 0 ;
  QTimeEdit * cresult ;
  
  arg1 = *(QTime **)&time;
  result = (QTimeEdit *)new QTimeEdit((QTime const &)*arg1);
  *(QTimeEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTimeEdit(QTimeEdit * self) {
  QTimeEdit *arg1 = (QTimeEdit *) 0 ;
  
  arg1 = *(QTimeEdit **)&self; 
  delete arg1;
}


SWIGEXPORT QDateEdit * New_QDateEdit0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QDateEdit *result = 0 ;
  QDateEdit * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QDateEdit *)new QDateEdit(arg1);
  *(QDateEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateEdit * New_QDateEdit1() {
  QDateEdit *result = 0 ;
  QDateEdit * cresult ;
  
  result = (QDateEdit *)new QDateEdit();
  *(QDateEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateEdit * New_QDateEdit2(QDate const & date, QWidget * parent) {
  QDate *arg1 = 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QDateEdit *result = 0 ;
  QDateEdit * cresult ;
  
  arg1 = *(QDate **)&date;
  arg2 = *(QWidget **)&parent; 
  result = (QDateEdit *)new QDateEdit((QDate const &)*arg1,arg2);
  *(QDateEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDateEdit * New_QDateEdit3(QDate const & date) {
  QDate *arg1 = 0 ;
  QDateEdit *result = 0 ;
  QDateEdit * cresult ;
  
  arg1 = *(QDate **)&date;
  result = (QDateEdit *)new QDateEdit((QDate const &)*arg1);
  *(QDateEdit **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QDateEdit(QDateEdit * self) {
  QDateEdit *arg1 = (QDateEdit *) 0 ;
  
  arg1 = *(QDateEdit **)&self; 
  delete arg1;
}


SWIGEXPORT long Modula3_QDateTimeEditToQAbstractSpinBox(long objectRef) {
    long baseptr = 0;
    *(QAbstractSpinBox **)&baseptr = *(QDateTimeEdit **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QTimeEditToQDateTimeEdit(long objectRef) {
    long baseptr = 0;
    *(QDateTimeEdit **)&baseptr = *(QTimeEdit **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QDateEditToQDateTimeEdit(long objectRef) {
    long baseptr = 0;
    *(QDateTimeEdit **)&baseptr = *(QDateEdit **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

