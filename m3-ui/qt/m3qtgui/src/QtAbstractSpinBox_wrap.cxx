/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qabstractspinbox.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QAbstractSpinBox * New_QAbstractSpinBox0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QAbstractSpinBox *result = 0 ;
  QAbstractSpinBox * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QAbstractSpinBox *)new QAbstractSpinBox(arg1);
  *(QAbstractSpinBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QAbstractSpinBox * New_QAbstractSpinBox1() {
  QAbstractSpinBox *result = 0 ;
  QAbstractSpinBox * cresult ;
  
  result = (QAbstractSpinBox *)new QAbstractSpinBox();
  *(QAbstractSpinBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QAbstractSpinBox(QAbstractSpinBox * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  delete arg1;
}


SWIGEXPORT QAbstractSpinBox::ButtonSymbols QAbstractSpinBox_buttonSymbols(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  QAbstractSpinBox::ButtonSymbols result;
  QAbstractSpinBox::ButtonSymbols cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  result = (QAbstractSpinBox::ButtonSymbols)((QAbstractSpinBox const *)arg1)->buttonSymbols();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QAbstractSpinBox_setButtonSymbols(QAbstractSpinBox * self, QAbstractSpinBox::ButtonSymbols bs) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  QAbstractSpinBox::ButtonSymbols arg2 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = (QAbstractSpinBox::ButtonSymbols)bs; 
  (arg1)->setButtonSymbols(arg2);
}


SWIGEXPORT void QAbstractSpinBox_setCorrectionMode(QAbstractSpinBox * self, QAbstractSpinBox::CorrectionMode cm) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  QAbstractSpinBox::CorrectionMode arg2 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = (QAbstractSpinBox::CorrectionMode)cm; 
  (arg1)->setCorrectionMode(arg2);
}


SWIGEXPORT QAbstractSpinBox::CorrectionMode QAbstractSpinBox_correctionMode(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  QAbstractSpinBox::CorrectionMode result;
  QAbstractSpinBox::CorrectionMode cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  result = (QAbstractSpinBox::CorrectionMode)((QAbstractSpinBox const *)arg1)->correctionMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QAbstractSpinBox_hasAcceptableInput(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  result = (bool)((QAbstractSpinBox const *)arg1)->hasAcceptableInput();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * QAbstractSpinBox_text(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  QString * cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QAbstractSpinBox const *)arg1)->text());
  return cresult;
}


SWIGEXPORT QString * QAbstractSpinBox_specialValueText(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  QString * cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QAbstractSpinBox const *)arg1)->specialValueText());
  return cresult;
}


SWIGEXPORT void QAbstractSpinBox_setSpecialValueText(QAbstractSpinBox * self, QString * txt) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = *(QString **)&txt;
  (arg1)->setSpecialValueText((QString const &)*arg2);
}


SWIGEXPORT bool QAbstractSpinBox_wrapping(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  result = (bool)((QAbstractSpinBox const *)arg1)->wrapping();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QAbstractSpinBox_setWrapping(QAbstractSpinBox * self, bool w) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  bool arg2 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = w ? true : false; 
  (arg1)->setWrapping(arg2);
}


SWIGEXPORT void QAbstractSpinBox_setReadOnly(QAbstractSpinBox * self, bool r) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  bool arg2 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = r ? true : false; 
  (arg1)->setReadOnly(arg2);
}


SWIGEXPORT bool QAbstractSpinBox_isReadOnly(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  result = (bool)((QAbstractSpinBox const *)arg1)->isReadOnly();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QAbstractSpinBox_setKeyboardTracking(QAbstractSpinBox * self, bool kt) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  bool arg2 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = kt ? true : false; 
  (arg1)->setKeyboardTracking(arg2);
}


SWIGEXPORT bool QAbstractSpinBox_keyboardTracking(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  result = (bool)((QAbstractSpinBox const *)arg1)->keyboardTracking();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QAbstractSpinBox_setAlignment(QAbstractSpinBox * self, int flag) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  Qt::Alignment arg2 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = (Qt::Alignment)flag; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT int QAbstractSpinBox_alignment(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  Qt::Alignment result;
  int cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  result = ((QAbstractSpinBox const *)arg1)->alignment();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT void QAbstractSpinBox_setFrame(QAbstractSpinBox * self, bool m3arg2) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  bool arg2 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = m3arg2 ? true : false; 
  (arg1)->setFrame(arg2);
}


SWIGEXPORT bool QAbstractSpinBox_hasFrame(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  result = (bool)((QAbstractSpinBox const *)arg1)->hasFrame();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QAbstractSpinBox_setAccelerated(QAbstractSpinBox * self, bool on) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  bool arg2 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = on ? true : false; 
  (arg1)->setAccelerated(arg2);
}


SWIGEXPORT bool QAbstractSpinBox_isAccelerated(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  result = (bool)((QAbstractSpinBox const *)arg1)->isAccelerated();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QAbstractSpinBox_sizeHint(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QAbstractSpinBox const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QSize * QAbstractSpinBox_minimumSizeHint(QAbstractSpinBox const * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QAbstractSpinBox const *)arg1)->minimumSizeHint());
  return cresult;
}


SWIGEXPORT void QAbstractSpinBox_interpretText(QAbstractSpinBox * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  (arg1)->interpretText();
}


SWIGEXPORT bool QAbstractSpinBox_event(QAbstractSpinBox * self, QEvent * event) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  QEvent *arg2 = (QEvent *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = *(QEvent **)&event; 
  result = (bool)(arg1)->event(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QAbstractSpinBox_fixup(QAbstractSpinBox const * self, QString * input) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = *(QString **)&input;
  /*
  if(!arg2) {
     return ;
    }
  */
  
  ((QAbstractSpinBox const *)arg1)->fixup(*arg2);
}


SWIGEXPORT void QAbstractSpinBox_stepBy(QAbstractSpinBox * self, int steps) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  int arg2 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  arg2 = (int)steps; 
  (arg1)->stepBy(arg2);
}


SWIGEXPORT void QAbstractSpinBox_stepUp(QAbstractSpinBox * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  (arg1)->stepUp();
}


SWIGEXPORT void QAbstractSpinBox_stepDown(QAbstractSpinBox * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  (arg1)->stepDown();
}


SWIGEXPORT void QAbstractSpinBox_selectAll(QAbstractSpinBox * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  (arg1)->selectAll();
}


SWIGEXPORT void QAbstractSpinBox_clear(QAbstractSpinBox * self) {
  QAbstractSpinBox *arg1 = (QAbstractSpinBox *) 0 ;
  
  arg1 = *(QAbstractSpinBox **)&self; 
  (arg1)->clear();
}


#ifdef __cplusplus
}
#endif

