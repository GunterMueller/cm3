/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qsplitter.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QSplitter * New_QSplitter0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSplitter *result = 0 ;
  QSplitter * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QSplitter *)new QSplitter(arg1);
  *(QSplitter **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSplitter * New_QSplitter1() {
  QSplitter *result = 0 ;
  QSplitter * cresult ;
  
  result = (QSplitter *)new QSplitter();
  *(QSplitter **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSplitter * New_QSplitter2(Qt::Orientation m3arg1, QWidget * parent) {
  Qt::Orientation arg1 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QSplitter *result = 0 ;
  QSplitter * cresult ;
  
  arg1 = (Qt::Orientation)m3arg1; 
  arg2 = *(QWidget **)&parent; 
  result = (QSplitter *)new QSplitter(arg1,arg2);
  *(QSplitter **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSplitter * New_QSplitter3(Qt::Orientation m3arg1) {
  Qt::Orientation arg1 ;
  QSplitter *result = 0 ;
  QSplitter * cresult ;
  
  arg1 = (Qt::Orientation)m3arg1; 
  result = (QSplitter *)new QSplitter(arg1);
  *(QSplitter **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QSplitter(QSplitter * self) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  
  arg1 = *(QSplitter **)&self; 
  delete arg1;
}


SWIGEXPORT void QSplitter_addWidget(QSplitter * self, QWidget * widget) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = *(QWidget **)&widget; 
  (arg1)->addWidget(arg2);
}


SWIGEXPORT void QSplitter_insertWidget(QSplitter * self, int index, QWidget * widget) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  int arg2 ;
  QWidget *arg3 = (QWidget *) 0 ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = (int)index; 
  arg3 = *(QWidget **)&widget; 
  (arg1)->insertWidget(arg2,arg3);
}


SWIGEXPORT void QSplitter_setOrientation(QSplitter * self, Qt::Orientation m3arg2) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  Qt::Orientation arg2 ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = (Qt::Orientation)m3arg2; 
  (arg1)->setOrientation(arg2);
}


SWIGEXPORT Qt::Orientation QSplitter_orientation(QSplitter const * self) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  Qt::Orientation result;
  Qt::Orientation cresult ;
  
  arg1 = *(QSplitter **)&self; 
  result = (Qt::Orientation)((QSplitter const *)arg1)->orientation();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSplitter_setChildrenCollapsible(QSplitter * self, bool m3arg2) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  bool arg2 ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = m3arg2 ? true : false; 
  (arg1)->setChildrenCollapsible(arg2);
}


SWIGEXPORT bool QSplitter_childrenCollapsible(QSplitter const * self) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSplitter **)&self; 
  result = (bool)((QSplitter const *)arg1)->childrenCollapsible();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSplitter_setCollapsible(QSplitter * self, int index, bool m3arg3) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = (int)index; 
  arg3 = m3arg3 ? true : false; 
  (arg1)->setCollapsible(arg2,arg3);
}


SWIGEXPORT bool QSplitter_isCollapsible(QSplitter const * self, int index) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = (int)index; 
  result = (bool)((QSplitter const *)arg1)->isCollapsible(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSplitter_setOpaqueResize(QSplitter * self, bool opaque) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  bool arg2 ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = opaque ? true : false; 
  (arg1)->setOpaqueResize(arg2);
}


SWIGEXPORT void QSplitter_setOpaqueResize1(QSplitter * self) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  
  arg1 = *(QSplitter **)&self; 
  (arg1)->setOpaqueResize();
}


SWIGEXPORT bool QSplitter_opaqueResize(QSplitter const * self) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSplitter **)&self; 
  result = (bool)((QSplitter const *)arg1)->opaqueResize();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSplitter_refresh(QSplitter * self) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  
  arg1 = *(QSplitter **)&self; 
  (arg1)->refresh();
}


SWIGEXPORT QSize * QSplitter_sizeHint(QSplitter const * self) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QSplitter **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QSplitter const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QSize * QSplitter_minimumSizeHint(QSplitter const * self) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QSplitter **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QSplitter const *)arg1)->minimumSizeHint());
  return cresult;
}


SWIGEXPORT QByteArray * QSplitter_saveState(QSplitter const * self) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QSplitter **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QSplitter const *)arg1)->saveState());
  return cresult;
}


SWIGEXPORT bool QSplitter_restoreState(QSplitter * self, QByteArray * state) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  QByteArray *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = *(QByteArray **)&state;
  result = (bool)(arg1)->restoreState((QByteArray const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QSplitter_handleWidth(QSplitter const * self) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QSplitter **)&self; 
  result = (int)((QSplitter const *)arg1)->handleWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSplitter_setHandleWidth(QSplitter * self, int m3arg2) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  int arg2 ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = (int)m3arg2; 
  (arg1)->setHandleWidth(arg2);
}


SWIGEXPORT int QSplitter_indexOf(QSplitter const * self, QWidget * w) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = *(QWidget **)&w; 
  result = (int)((QSplitter const *)arg1)->indexOf(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QSplitter_widget(QSplitter const * self, int index) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  int arg2 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = (int)index; 
  result = (QWidget *)((QSplitter const *)arg1)->widget(arg2);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QSplitter_count(QSplitter const * self) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QSplitter **)&self; 
  result = (int)((QSplitter const *)arg1)->count();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSplitter_getRange(QSplitter const * self, int index, int * m3arg3, int * m3arg4) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = (int)index; 
  arg3 = *(int **)&m3arg3; 
  arg4 = *(int **)&m3arg4; 
  ((QSplitter const *)arg1)->getRange(arg2,arg3,arg4);
}


SWIGEXPORT void QSplitter_setStretchFactor(QSplitter * self, int index, int stretch) {
  QSplitter *arg1 = (QSplitter *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QSplitter **)&self; 
  arg2 = (int)index; 
  arg3 = (int)stretch; 
  (arg1)->setStretchFactor(arg2,arg3);
}


SWIGEXPORT QSplitterHandle * New_QSplitterHandle0(Qt::Orientation o, QSplitter * parent) {
  Qt::Orientation arg1 ;
  QSplitter *arg2 = (QSplitter *) 0 ;
  QSplitterHandle *result = 0 ;
  QSplitterHandle * cresult ;
  
  arg1 = (Qt::Orientation)o; 
  arg2 = *(QSplitter **)&parent; 
  result = (QSplitterHandle *)new QSplitterHandle(arg1,arg2);
  *(QSplitterHandle **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QSplitterHandle_setOrientation(QSplitterHandle * self, Qt::Orientation o) {
  QSplitterHandle *arg1 = (QSplitterHandle *) 0 ;
  Qt::Orientation arg2 ;
  
  arg1 = *(QSplitterHandle **)&self; 
  arg2 = (Qt::Orientation)o; 
  (arg1)->setOrientation(arg2);
}


SWIGEXPORT Qt::Orientation QSplitterHandle_orientation(QSplitterHandle const * self) {
  QSplitterHandle *arg1 = (QSplitterHandle *) 0 ;
  Qt::Orientation result;
  Qt::Orientation cresult ;
  
  arg1 = *(QSplitterHandle **)&self; 
  result = (Qt::Orientation)((QSplitterHandle const *)arg1)->orientation();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QSplitterHandle_opaqueResize(QSplitterHandle const * self) {
  QSplitterHandle *arg1 = (QSplitterHandle *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSplitterHandle **)&self; 
  result = (bool)((QSplitterHandle const *)arg1)->opaqueResize();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSplitter * QSplitterHandle_splitter(QSplitterHandle const * self) {
  QSplitterHandle *arg1 = (QSplitterHandle *) 0 ;
  QSplitter *result = 0 ;
  QSplitter * cresult ;
  
  arg1 = *(QSplitterHandle **)&self; 
  result = (QSplitter *)((QSplitterHandle const *)arg1)->splitter();
  *(QSplitter **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QSplitterHandle_sizeHint(QSplitterHandle const * self) {
  QSplitterHandle *arg1 = (QSplitterHandle *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QSplitterHandle **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QSplitterHandle const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT void Delete_QSplitterHandle(QSplitterHandle * self) {
  QSplitterHandle *arg1 = (QSplitterHandle *) 0 ;
  
  arg1 = *(QSplitterHandle **)&self; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

