/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qtreewidget.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem0(int type) {
  int arg1 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = (int)type; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem1() {
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  result = (QTreeWidgetItem *)new QTreeWidgetItem();
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem2(QStringList * strings, int type) {
  QStringList *arg1 = 0 ;
  int arg2 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QStringList **)&strings;
  arg2 = (int)type; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem((QStringList const &)*arg1,arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem3(QStringList * strings) {
  QStringList *arg1 = 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QStringList **)&strings;
  result = (QTreeWidgetItem *)new QTreeWidgetItem((QStringList const &)*arg1);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem4(QTreeWidget * view, int type) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  int arg2 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&view; 
  arg2 = (int)type; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1,arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem5(QTreeWidget * view) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&view; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem6(QTreeWidget * view, QStringList * strings, int type) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QStringList *arg2 = 0 ;
  int arg3 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&view; 
  arg2 = *(QStringList **)&strings;
  arg3 = (int)type; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1,(QStringList const &)*arg2,arg3);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem7(QTreeWidget * view, QStringList * strings) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QStringList *arg2 = 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&view; 
  arg2 = *(QStringList **)&strings;
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1,(QStringList const &)*arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem8(QTreeWidget * view, QTreeWidgetItem * after, int type) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  int arg3 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&view; 
  arg2 = *(QTreeWidgetItem **)&after; 
  arg3 = (int)type; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1,arg2,arg3);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem9(QTreeWidget * view, QTreeWidgetItem * after) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&view; 
  arg2 = *(QTreeWidgetItem **)&after; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1,arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem10(QTreeWidgetItem * parent, int type) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&parent; 
  arg2 = (int)type; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1,arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem11(QTreeWidgetItem * parent) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&parent; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem12(QTreeWidgetItem * parent, QStringList * strings, int type) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QStringList *arg2 = 0 ;
  int arg3 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&parent; 
  arg2 = *(QStringList **)&strings;
  arg3 = (int)type; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1,(QStringList const &)*arg2,arg3);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem13(QTreeWidgetItem * parent, QStringList * strings) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QStringList *arg2 = 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&parent; 
  arg2 = *(QStringList **)&strings;
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1,(QStringList const &)*arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem14(QTreeWidgetItem * parent, QTreeWidgetItem * after, int type) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  int arg3 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&parent; 
  arg2 = *(QTreeWidgetItem **)&after; 
  arg3 = (int)type; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1,arg2,arg3);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem15(QTreeWidgetItem * parent, QTreeWidgetItem * after) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&parent; 
  arg2 = *(QTreeWidgetItem **)&after; 
  result = (QTreeWidgetItem *)new QTreeWidgetItem(arg1,arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * New_QTreeWidgetItem16(QTreeWidgetItem const & other) {
  QTreeWidgetItem *arg1 = 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&other;
  result = (QTreeWidgetItem *)new QTreeWidgetItem((QTreeWidgetItem const &)*arg1);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTreeWidgetItem(QTreeWidgetItem * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  delete arg1;
}


SWIGEXPORT QTreeWidgetItem * QTreeWidgetItem_clone(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (QTreeWidgetItem *)((QTreeWidgetItem const *)arg1)->clone();
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidget * QTreeWidgetItem_treeWidget(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QTreeWidget *result = 0 ;
  QTreeWidget * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (QTreeWidget *)((QTreeWidgetItem const *)arg1)->treeWidget();
  *(QTreeWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setSelected(QTreeWidgetItem * self, bool select) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = select ? true : false; 
  (arg1)->setSelected(arg2);
}


SWIGEXPORT bool QTreeWidgetItem_isSelected(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (bool)((QTreeWidgetItem const *)arg1)->isSelected();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setHidden(QTreeWidgetItem * self, bool hide) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = hide ? true : false; 
  (arg1)->setHidden(arg2);
}


SWIGEXPORT bool QTreeWidgetItem_isHidden(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (bool)((QTreeWidgetItem const *)arg1)->isHidden();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setExpanded(QTreeWidgetItem * self, bool expand) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = expand ? true : false; 
  (arg1)->setExpanded(arg2);
}


SWIGEXPORT bool QTreeWidgetItem_isExpanded(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (bool)((QTreeWidgetItem const *)arg1)->isExpanded();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setFirstColumnSpanned(QTreeWidgetItem * self, bool span) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = span ? true : false; 
  (arg1)->setFirstColumnSpanned(arg2);
}


SWIGEXPORT bool QTreeWidgetItem_isFirstColumnSpanned(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (bool)((QTreeWidgetItem const *)arg1)->isFirstColumnSpanned();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setDisabled(QTreeWidgetItem * self, bool disabled) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = disabled ? true : false; 
  (arg1)->setDisabled(arg2);
}


SWIGEXPORT bool QTreeWidgetItem_isDisabled(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (bool)((QTreeWidgetItem const *)arg1)->isDisabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setChildIndicatorPolicy(QTreeWidgetItem * self, QTreeWidgetItem::ChildIndicatorPolicy policy) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem::ChildIndicatorPolicy arg2 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (QTreeWidgetItem::ChildIndicatorPolicy)policy; 
  (arg1)->setChildIndicatorPolicy(arg2);
}


SWIGEXPORT QTreeWidgetItem::ChildIndicatorPolicy QTreeWidgetItem_childIndicatorPolicy(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem::ChildIndicatorPolicy result;
  QTreeWidgetItem::ChildIndicatorPolicy cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (QTreeWidgetItem::ChildIndicatorPolicy)((QTreeWidgetItem const *)arg1)->childIndicatorPolicy();
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::ItemFlags QTreeWidgetItem_flags(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  Qt::ItemFlags cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  *(Qt::ItemFlags **)&cresult = new Qt::ItemFlags((const Qt::ItemFlags &)((QTreeWidgetItem const *)arg1)->flags());
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setFlags(QTreeWidgetItem * self, Qt::ItemFlags flags) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  Qt::ItemFlags arg2 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (Qt::ItemFlags)flags; 
  (arg1)->setFlags(arg2);
}


SWIGEXPORT QString *  QTreeWidgetItem_text(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QString *  cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  *(QString **)&cresult = new QString((const QString &)((QTreeWidgetItem const *)arg1)->text(arg2));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setText(QTreeWidgetItem * self, int column, QString * text) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = *(QString **)&text;
  (arg1)->setText(arg2,(QString const &)*arg3);
}


SWIGEXPORT QIcon * QTreeWidgetItem_icon(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QIcon * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  *(QIcon **)&cresult = new QIcon((const QIcon &)((QTreeWidgetItem const *)arg1)->icon(arg2));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setIcon(QTreeWidgetItem * self, int column, QIcon * icon) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QIcon *arg3 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = *(QIcon **)&icon;
  (arg1)->setIcon(arg2,(QIcon const &)*arg3);
}


SWIGEXPORT QString *  QTreeWidgetItem_statusTip(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QString *  cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  *(QString **)&cresult = new QString((const QString &)((QTreeWidgetItem const *)arg1)->statusTip(arg2));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setStatusTip(QTreeWidgetItem * self, int column, QString * statusTip) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = *(QString **)&statusTip;
  (arg1)->setStatusTip(arg2,(QString const &)*arg3);
}


SWIGEXPORT QString *  QTreeWidgetItem_toolTip(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QString *  cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  *(QString **)&cresult = new QString((const QString &)((QTreeWidgetItem const *)arg1)->toolTip(arg2));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setToolTip(QTreeWidgetItem * self, int column, QString * toolTip) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = *(QString **)&toolTip;
  (arg1)->setToolTip(arg2,(QString const &)*arg3);
}


SWIGEXPORT QString *  QTreeWidgetItem_whatsThis(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QString *  cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  *(QString **)&cresult = new QString((const QString &)((QTreeWidgetItem const *)arg1)->whatsThis(arg2));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setWhatsThis(QTreeWidgetItem * self, int column, QString * whatsThis) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = *(QString **)&whatsThis;
  (arg1)->setWhatsThis(arg2,(QString const &)*arg3);
}


SWIGEXPORT QFont * QTreeWidgetItem_font(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QFont * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  *(QFont **)&cresult = new QFont((const QFont &)((QTreeWidgetItem const *)arg1)->font(arg2));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setFont(QTreeWidgetItem * self, int column, QFont * font) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QFont *arg3 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = *(QFont **)&font;
  (arg1)->setFont(arg2,(QFont const &)*arg3);
}


SWIGEXPORT int QTreeWidgetItem_textAlignment(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  result = (int)((QTreeWidgetItem const *)arg1)->textAlignment(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setTextAlignment(QTreeWidgetItem * self, int column, int alignment) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = (int)alignment; 
  (arg1)->setTextAlignment(arg2,arg3);
}


SWIGEXPORT QColor * QTreeWidgetItem_backgroundColor(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QColor * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  *(QColor **)&cresult = new QColor((const QColor &)((QTreeWidgetItem const *)arg1)->backgroundColor(arg2));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setBackgroundColor(QTreeWidgetItem * self, int column, QColor * color) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QColor *arg3 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = *(QColor **)&color;
  (arg1)->setBackgroundColor(arg2,(QColor const &)*arg3);
}


SWIGEXPORT QBrush * QTreeWidgetItem_background(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QBrush * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QTreeWidgetItem const *)arg1)->background(arg2));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setBackground(QTreeWidgetItem * self, int column, QBrush * brush) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QBrush *arg3 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = *(QBrush **)&brush;
  (arg1)->setBackground(arg2,(QBrush const &)*arg3);
}


SWIGEXPORT QColor * QTreeWidgetItem_textColor(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QColor * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  *(QColor **)&cresult = new QColor((const QColor &)((QTreeWidgetItem const *)arg1)->textColor(arg2));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setTextColor(QTreeWidgetItem * self, int column, QColor * color) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QColor *arg3 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = *(QColor **)&color;
  (arg1)->setTextColor(arg2,(QColor const &)*arg3);
}


SWIGEXPORT QBrush * QTreeWidgetItem_foreground(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QBrush * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QTreeWidgetItem const *)arg1)->foreground(arg2));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setForeground(QTreeWidgetItem * self, int column, QBrush * brush) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QBrush *arg3 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = *(QBrush **)&brush;
  (arg1)->setForeground(arg2,(QBrush const &)*arg3);
}


SWIGEXPORT Qt::CheckState QTreeWidgetItem_checkState(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  Qt::CheckState result;
  Qt::CheckState cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  result = (Qt::CheckState)((QTreeWidgetItem const *)arg1)->checkState(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setCheckState(QTreeWidgetItem * self, int column, Qt::CheckState state) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  Qt::CheckState arg3 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = (Qt::CheckState)state; 
  (arg1)->setCheckState(arg2,arg3);
}


SWIGEXPORT QSize * QTreeWidgetItem_sizeHint(QTreeWidgetItem const * self, int column) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QSize * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  *(QSize **)&cresult = new QSize((const QSize &)((QTreeWidgetItem const *)arg1)->sizeHint(arg2));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setSizeHint(QTreeWidgetItem * self, int column, QSize * size) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QSize *arg3 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = *(QSize **)&size;
  (arg1)->setSizeHint(arg2,(QSize const &)*arg3);
}


SWIGEXPORT QVariant * QTreeWidgetItem_data(QTreeWidgetItem const * self, int column, int role) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  int arg3 ;
  QVariant * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = (int)role; 
  *(QVariant **)&cresult = new QVariant((const QVariant &)((QTreeWidgetItem const *)arg1)->data(arg2,arg3));
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_setData(QTreeWidgetItem * self, int column, int role, QVariant * value) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  int arg3 ;
  QVariant *arg4 = 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = (int)role; 
  arg4 = *(QVariant **)&value;
  (arg1)->setData(arg2,arg3,(QVariant const &)*arg4);
}


SWIGEXPORT QTreeWidgetItem * QTreeWidgetItem_parent(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (QTreeWidgetItem *)((QTreeWidgetItem const *)arg1)->parent();
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * QTreeWidgetItem_child(QTreeWidgetItem const * self, int index) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)index; 
  result = (QTreeWidgetItem *)((QTreeWidgetItem const *)arg1)->child(arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QTreeWidgetItem_childCount(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (int)((QTreeWidgetItem const *)arg1)->childCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTreeWidgetItem_columnCount(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (int)((QTreeWidgetItem const *)arg1)->columnCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTreeWidgetItem_indexOfChild(QTreeWidgetItem const * self, QTreeWidgetItem * child) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = *(QTreeWidgetItem **)&child; 
  result = (int)((QTreeWidgetItem const *)arg1)->indexOfChild(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_addChild(QTreeWidgetItem * self, QTreeWidgetItem * child) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = *(QTreeWidgetItem **)&child; 
  (arg1)->addChild(arg2);
}


SWIGEXPORT void QTreeWidgetItem_insertChild(QTreeWidgetItem * self, int index, QTreeWidgetItem * child) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QTreeWidgetItem *arg3 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)index; 
  arg3 = *(QTreeWidgetItem **)&child; 
  (arg1)->insertChild(arg2,arg3);
}


SWIGEXPORT void QTreeWidgetItem_removeChild(QTreeWidgetItem * self, QTreeWidgetItem * child) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = *(QTreeWidgetItem **)&child; 
  (arg1)->removeChild(arg2);
}


SWIGEXPORT QTreeWidgetItem * QTreeWidgetItem_takeChild(QTreeWidgetItem * self, int index) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)index; 
  result = (QTreeWidgetItem *)(arg1)->takeChild(arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QTreeWidgetItem_type(QTreeWidgetItem const * self) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  result = (int)((QTreeWidgetItem const *)arg1)->type();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidgetItem_sortChildren(QTreeWidgetItem * self, int column, Qt::SortOrder order) {
  QTreeWidgetItem *arg1 = (QTreeWidgetItem *) 0 ;
  int arg2 ;
  Qt::SortOrder arg3 ;
  
  arg1 = *(QTreeWidgetItem **)&self; 
  arg2 = (int)column; 
  arg3 = (Qt::SortOrder)order; 
  (arg1)->sortChildren(arg2,arg3);
}


SWIGEXPORT QTreeWidget * New_QTreeWidget0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QTreeWidget *result = 0 ;
  QTreeWidget * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QTreeWidget *)new QTreeWidget(arg1);
  *(QTreeWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidget * New_QTreeWidget1() {
  QTreeWidget *result = 0 ;
  QTreeWidget * cresult ;
  
  result = (QTreeWidget *)new QTreeWidget();
  *(QTreeWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTreeWidget(QTreeWidget * self) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  delete arg1;
}


SWIGEXPORT int QTreeWidget_columnCount(QTreeWidget const * self) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  result = (int)((QTreeWidget const *)arg1)->columnCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidget_setColumnCount(QTreeWidget * self, int columns) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = (int)columns; 
  (arg1)->setColumnCount(arg2);
}


SWIGEXPORT QTreeWidgetItem * QTreeWidget_invisibleRootItem(QTreeWidget const * self) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  result = (QTreeWidgetItem *)((QTreeWidget const *)arg1)->invisibleRootItem();
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * QTreeWidget_topLevelItem(QTreeWidget const * self, int index) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  int arg2 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = (int)index; 
  result = (QTreeWidgetItem *)((QTreeWidget const *)arg1)->topLevelItem(arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QTreeWidget_topLevelItemCount(QTreeWidget const * self) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  result = (int)((QTreeWidget const *)arg1)->topLevelItemCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidget_insertTopLevelItem(QTreeWidget * self, int index, QTreeWidgetItem * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  int arg2 ;
  QTreeWidgetItem *arg3 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = (int)index; 
  arg3 = *(QTreeWidgetItem **)&item; 
  (arg1)->insertTopLevelItem(arg2,arg3);
}


SWIGEXPORT void QTreeWidget_addTopLevelItem(QTreeWidget * self, QTreeWidgetItem * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  (arg1)->addTopLevelItem(arg2);
}


SWIGEXPORT QTreeWidgetItem * QTreeWidget_takeTopLevelItem(QTreeWidget * self, int index) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  int arg2 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = (int)index; 
  result = (QTreeWidgetItem *)(arg1)->takeTopLevelItem(arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QTreeWidget_indexOfTopLevelItem(QTreeWidget * self, QTreeWidgetItem * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  result = (int)(arg1)->indexOfTopLevelItem(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTreeWidget_indexOfTopLevelItem1(QTreeWidget const * self, QTreeWidgetItem * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  result = (int)((QTreeWidget const *)arg1)->indexOfTopLevelItem(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * QTreeWidget_headerItem(QTreeWidget const * self) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  result = (QTreeWidgetItem *)((QTreeWidget const *)arg1)->headerItem();
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidget_setHeaderItem(QTreeWidget * self, QTreeWidgetItem * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  (arg1)->setHeaderItem(arg2);
}


SWIGEXPORT void QTreeWidget_setHeaderLabels(QTreeWidget * self, QStringList * labels) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QStringList *arg2 = 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QStringList **)&labels;
  (arg1)->setHeaderLabels((QStringList const &)*arg2);
}


SWIGEXPORT void QTreeWidget_setHeaderLabel(QTreeWidget * self, QString * label) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QString **)&label;
  (arg1)->setHeaderLabel((QString const &)*arg2);
}


SWIGEXPORT QTreeWidgetItem * QTreeWidget_currentItem(QTreeWidget const * self) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  result = (QTreeWidgetItem *)((QTreeWidget const *)arg1)->currentItem();
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QTreeWidget_currentColumn(QTreeWidget const * self) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  result = (int)((QTreeWidget const *)arg1)->currentColumn();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * QTreeWidget_itemAt(QTreeWidget const * self, QPoint * p) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QPoint *arg2 = 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QPoint **)&p;
  result = (QTreeWidgetItem *)((QTreeWidget const *)arg1)->itemAt((QPoint const &)*arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * QTreeWidget_itemAt1(QTreeWidget const * self, int x, int y) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  result = (QTreeWidgetItem *)((QTreeWidget const *)arg1)->itemAt(arg2,arg3);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QTreeWidget_visualItemRect(QTreeWidget const * self, QTreeWidgetItem const * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  *(QRect **)&cresult = new QRect((const QRect &)((QTreeWidget const *)arg1)->visualItemRect((QTreeWidgetItem const *)arg2));
  return cresult;
}


SWIGEXPORT int QTreeWidget_sortColumn(QTreeWidget const * self) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  result = (int)((QTreeWidget const *)arg1)->sortColumn();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidget_sortItems(QTreeWidget * self, int column, Qt::SortOrder order) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  int arg2 ;
  Qt::SortOrder arg3 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = (int)column; 
  arg3 = (Qt::SortOrder)order; 
  (arg1)->sortItems(arg2,arg3);
}


SWIGEXPORT void QTreeWidget_setSortingEnabled(QTreeWidget * self, bool enable) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setSortingEnabled(arg2);
}


SWIGEXPORT bool QTreeWidget_isSortingEnabled(QTreeWidget const * self) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  result = (bool)((QTreeWidget const *)arg1)->isSortingEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidget_editItem(QTreeWidget * self, QTreeWidgetItem * item, int column) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  int arg3 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  arg3 = (int)column; 
  (arg1)->editItem(arg2,arg3);
}


SWIGEXPORT void QTreeWidget_editItem1(QTreeWidget * self, QTreeWidgetItem * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  (arg1)->editItem(arg2);
}


SWIGEXPORT void QTreeWidget_openPersistentEditor(QTreeWidget * self, QTreeWidgetItem * item, int column) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  int arg3 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  arg3 = (int)column; 
  (arg1)->openPersistentEditor(arg2,arg3);
}


SWIGEXPORT void QTreeWidget_openPersistentEditor1(QTreeWidget * self, QTreeWidgetItem * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  (arg1)->openPersistentEditor(arg2);
}


SWIGEXPORT void QTreeWidget_closePersistentEditor(QTreeWidget * self, QTreeWidgetItem * item, int column) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  int arg3 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  arg3 = (int)column; 
  (arg1)->closePersistentEditor(arg2,arg3);
}


SWIGEXPORT void QTreeWidget_closePersistentEditor1(QTreeWidget * self, QTreeWidgetItem * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  (arg1)->closePersistentEditor(arg2);
}


SWIGEXPORT QWidget * QTreeWidget_itemWidget(QTreeWidget const * self, QTreeWidgetItem * item, int column) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  int arg3 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  arg3 = (int)column; 
  result = (QWidget *)((QTreeWidget const *)arg1)->itemWidget(arg2,arg3);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidget_setItemWidget(QTreeWidget * self, QTreeWidgetItem * item, int column, QWidget * widget) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  int arg3 ;
  QWidget *arg4 = (QWidget *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  arg3 = (int)column; 
  arg4 = *(QWidget **)&widget; 
  (arg1)->setItemWidget(arg2,arg3,arg4);
}


SWIGEXPORT void QTreeWidget_removeItemWidget(QTreeWidget * self, QTreeWidgetItem * item, int column) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  int arg3 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  arg3 = (int)column; 
  (arg1)->removeItemWidget(arg2,arg3);
}


SWIGEXPORT bool QTreeWidget_isItemSelected(QTreeWidget const * self, QTreeWidgetItem const * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  result = (bool)((QTreeWidget const *)arg1)->isItemSelected((QTreeWidgetItem const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidget_setItemSelected(QTreeWidget * self, QTreeWidgetItem const * item, bool select) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  bool arg3 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  arg3 = select ? true : false; 
  (arg1)->setItemSelected((QTreeWidgetItem const *)arg2,arg3);
}


SWIGEXPORT bool QTreeWidget_isItemHidden(QTreeWidget const * self, QTreeWidgetItem const * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  result = (bool)((QTreeWidget const *)arg1)->isItemHidden((QTreeWidgetItem const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidget_setItemHidden(QTreeWidget * self, QTreeWidgetItem const * item, bool hide) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  bool arg3 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  arg3 = hide ? true : false; 
  (arg1)->setItemHidden((QTreeWidgetItem const *)arg2,arg3);
}


SWIGEXPORT bool QTreeWidget_isItemExpanded(QTreeWidget const * self, QTreeWidgetItem const * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  result = (bool)((QTreeWidget const *)arg1)->isItemExpanded((QTreeWidgetItem const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidget_setItemExpanded(QTreeWidget * self, QTreeWidgetItem const * item, bool expand) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  bool arg3 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  arg3 = expand ? true : false; 
  (arg1)->setItemExpanded((QTreeWidgetItem const *)arg2,arg3);
}


SWIGEXPORT bool QTreeWidget_isFirstItemColumnSpanned(QTreeWidget const * self, QTreeWidgetItem const * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  result = (bool)((QTreeWidget const *)arg1)->isFirstItemColumnSpanned((QTreeWidgetItem const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidget_setFirstItemColumnSpanned(QTreeWidget * self, QTreeWidgetItem const * item, bool span) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  bool arg3 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  arg3 = span ? true : false; 
  (arg1)->setFirstItemColumnSpanned((QTreeWidgetItem const *)arg2,arg3);
}


SWIGEXPORT QTreeWidgetItem * QTreeWidget_itemAbove(QTreeWidget const * self, QTreeWidgetItem const * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  result = (QTreeWidgetItem *)((QTreeWidget const *)arg1)->itemAbove((QTreeWidgetItem const *)arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTreeWidgetItem * QTreeWidget_itemBelow(QTreeWidget const * self, QTreeWidgetItem const * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  QTreeWidgetItem *result = 0 ;
  QTreeWidgetItem * cresult ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  result = (QTreeWidgetItem *)((QTreeWidget const *)arg1)->itemBelow((QTreeWidgetItem const *)arg2);
  *(QTreeWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTreeWidget_setSelectionModel(QTreeWidget * self, QItemSelectionModel * selectionModel) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QItemSelectionModel *arg2 = (QItemSelectionModel *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QItemSelectionModel **)&selectionModel; 
  (arg1)->setSelectionModel(arg2);
}


SWIGEXPORT void QTreeWidget_scrollToItem(QTreeWidget * self, QTreeWidgetItem const * item, QAbstractItemView::ScrollHint hint) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  QAbstractItemView::ScrollHint arg3 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  arg3 = (QAbstractItemView::ScrollHint)hint; 
  (arg1)->scrollToItem((QTreeWidgetItem const *)arg2,arg3);
}


SWIGEXPORT void QTreeWidget_scrollToItem1(QTreeWidget * self, QTreeWidgetItem const * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  (arg1)->scrollToItem((QTreeWidgetItem const *)arg2);
}


SWIGEXPORT void QTreeWidget_expandItem(QTreeWidget * self, QTreeWidgetItem const * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  (arg1)->expandItem((QTreeWidgetItem const *)arg2);
}


SWIGEXPORT void QTreeWidget_collapseItem(QTreeWidget * self, QTreeWidgetItem const * item) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  QTreeWidgetItem *arg2 = (QTreeWidgetItem *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  arg2 = *(QTreeWidgetItem **)&item; 
  (arg1)->collapseItem((QTreeWidgetItem const *)arg2);
}


SWIGEXPORT void QTreeWidget_clear(QTreeWidget * self) {
  QTreeWidget *arg1 = (QTreeWidget *) 0 ;
  
  arg1 = *(QTreeWidget **)&self; 
  (arg1)->clear();
}


SWIGEXPORT long Modula3_QTreeWidgetToQTreeView(long objectRef) {
    long baseptr = 0;
    *(QTreeView **)&baseptr = *(QTreeWidget **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

