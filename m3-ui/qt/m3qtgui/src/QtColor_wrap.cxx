/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qcolor.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QColor * New_QColor0() {
  QColor *result = 0 ;
  QColor * cresult ;
  
  result = (QColor *)new QColor();
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QColor * New_QColor1(Qt::GlobalColor color) {
  Qt::GlobalColor arg1 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  arg1 = (Qt::GlobalColor)color; 
  result = (QColor *)new QColor(arg1);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QColor * New_QColor2(int r, int g, int b, int a) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  arg1 = (int)r; 
  arg2 = (int)g; 
  arg3 = (int)b; 
  arg4 = (int)a; 
  result = (QColor *)new QColor(arg1,arg2,arg3,arg4);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QColor * New_QColor3(int r, int g, int b) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  arg1 = (int)r; 
  arg2 = (int)g; 
  arg3 = (int)b; 
  result = (QColor *)new QColor(arg1,arg2,arg3);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QColor * New_QColor4(QRgb rgb) {
  QRgb arg1 ;
  QRgb *argp1 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  argp1 = *(QRgb **)&rgb;
  /*
     if (!argp1) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QRgb");
       //RETURN 0;
       return 0;
     }
  */
  arg1 = *argp1; 
  result = (QColor *)new QColor(arg1);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QColor * New_QColor5(QString * name) {
  QString *arg1 = 0 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  arg1 = *(QString **)&name;
  result = (QColor *)new QColor((QString const &)*arg1);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QColor * New_QColor6(char * name) {
  char *arg1 = (char *) 0 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  {
    arg1 = name;
  }
  result = (QColor *)new QColor((char const *)arg1);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QColor * New_QColor7(QColor * color) {
  QColor *arg1 = 0 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&color;
  result = (QColor *)new QColor((QColor const &)*arg1);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QColor * New_QColor8(QColor::Spec spec) {
  QColor::Spec arg1 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  arg1 = (QColor::Spec)spec; 
  result = (QColor *)new QColor(arg1);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QColor_isValid(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (bool)((QColor const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * QColor_name(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QString * cresult ;
  
  arg1 = *(QColor **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QColor const *)arg1)->name());
  return cresult;
}


SWIGEXPORT void QColor_setNamedColor(QColor * self, QString * name) {
  QColor *arg1 = (QColor *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(QString **)&name;
  (arg1)->setNamedColor((QString const &)*arg2);
}


SWIGEXPORT QStringList * ColorNames() {
  QStringList * cresult ;
  
  *(QStringList **)&cresult = new QStringList((const QStringList &)QColor::colorNames());
  return cresult;
}


SWIGEXPORT QColor::Spec QColor_spec(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QColor::Spec result;
  QColor::Spec cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (QColor::Spec)((QColor const *)arg1)->spec();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_alpha(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->alpha();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QColor_setAlpha(QColor * self, int alpha) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)alpha; 
  (arg1)->setAlpha(arg2);
}


SWIGEXPORT double QColor_alphaF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->alphaF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QColor_setAlphaF(QColor * self, double alpha) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)alpha; 
  (arg1)->setAlphaF(arg2);
}


SWIGEXPORT int QColor_red(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->red();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_green(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->green();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_blue(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->blue();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QColor_setRed(QColor * self, int red) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)red; 
  (arg1)->setRed(arg2);
}


SWIGEXPORT void QColor_setGreen(QColor * self, int green) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)green; 
  (arg1)->setGreen(arg2);
}


SWIGEXPORT void QColor_setBlue(QColor * self, int blue) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)blue; 
  (arg1)->setBlue(arg2);
}


SWIGEXPORT double QColor_redF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->redF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_greenF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->greenF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_blueF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->blueF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QColor_setRedF(QColor * self, double red) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)red; 
  (arg1)->setRedF(arg2);
}


SWIGEXPORT void QColor_setGreenF(QColor * self, double green) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)green; 
  (arg1)->setGreenF(arg2);
}


SWIGEXPORT void QColor_setBlueF(QColor * self, double blue) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)blue; 
  (arg1)->setBlueF(arg2);
}


SWIGEXPORT void QColor_getRgb(QColor const * self, int * r, int * g, int * b, int * a) {
  QColor *arg1 = (QColor *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(int **)&r; 
  arg3 = *(int **)&g; 
  arg4 = *(int **)&b; 
  arg5 = *(int **)&a; 
  ((QColor const *)arg1)->getRgb(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_getRgb1(QColor const * self, int * r, int * g, int * b) {
  QColor *arg1 = (QColor *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(int **)&r; 
  arg3 = *(int **)&g; 
  arg4 = *(int **)&b; 
  ((QColor const *)arg1)->getRgb(arg2,arg3,arg4);
}


SWIGEXPORT void QColor_setRgb(QColor * self, int r, int g, int b, int a) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)r; 
  arg3 = (int)g; 
  arg4 = (int)b; 
  arg5 = (int)a; 
  (arg1)->setRgb(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_setRgb1(QColor * self, int r, int g, int b) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)r; 
  arg3 = (int)g; 
  arg4 = (int)b; 
  (arg1)->setRgb(arg2,arg3,arg4);
}


SWIGEXPORT void QColor_getRgbF(QColor const * self, double * r, double * g, double * b, double * a) {
  QColor *arg1 = (QColor *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(double **)&r; 
  arg3 = *(double **)&g; 
  arg4 = *(double **)&b; 
  arg5 = *(double **)&a; 
  ((QColor const *)arg1)->getRgbF(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_getRgbF1(QColor const * self, double * r, double * g, double * b) {
  QColor *arg1 = (QColor *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(double **)&r; 
  arg3 = *(double **)&g; 
  arg4 = *(double **)&b; 
  ((QColor const *)arg1)->getRgbF(arg2,arg3,arg4);
}


SWIGEXPORT void QColor_setRgbF(QColor * self, double r, double g, double b, double a) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)r; 
  arg3 = (double)g; 
  arg4 = (double)b; 
  arg5 = (double)a; 
  (arg1)->setRgbF(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_setRgbF1(QColor * self, double r, double g, double b) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)r; 
  arg3 = (double)g; 
  arg4 = (double)b; 
  (arg1)->setRgbF(arg2,arg3,arg4);
}


SWIGEXPORT QRgb QColor_rgba(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QRgb cresult ;
  
  arg1 = *(QColor **)&self; 
  *(QRgb **)&cresult = new QRgb((const QRgb &)((QColor const *)arg1)->rgba());
  return cresult;
}


SWIGEXPORT void QColor_setRgba(QColor * self, QRgb rgba) {
  QColor *arg1 = (QColor *) 0 ;
  QRgb arg2 ;
  QRgb *argp2 ;
  
  arg1 = *(QColor **)&self; 
  argp2 = *(QRgb **)&rgba;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QRgb");
       //RETURN ;
       return ;
     }
  */
  arg2 = *argp2; 
  (arg1)->setRgba(arg2);
}


SWIGEXPORT QRgb QColor_rgb(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QRgb cresult ;
  
  arg1 = *(QColor **)&self; 
  *(QRgb **)&cresult = new QRgb((const QRgb &)((QColor const *)arg1)->rgb());
  return cresult;
}


SWIGEXPORT void QColor_setRgb2(QColor * self, QRgb rgb) {
  QColor *arg1 = (QColor *) 0 ;
  QRgb arg2 ;
  QRgb *argp2 ;
  
  arg1 = *(QColor **)&self; 
  argp2 = *(QRgb **)&rgb;
  /*
     if (!argp2) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QRgb");
       //RETURN ;
       return ;
     }
  */
  arg2 = *argp2; 
  (arg1)->setRgb(arg2);
}


SWIGEXPORT int QColor_hue(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->hue();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_saturation(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->saturation();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_hsvHue(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->hsvHue();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_hsvSaturation(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->hsvSaturation();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_value(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->value();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_hueF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->hueF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_saturationF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->saturationF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_hsvHueF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->hsvHueF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_hsvSaturationF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->hsvSaturationF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_valueF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->valueF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QColor_getHsv(QColor const * self, int * h, int * s, int * v, int * a) {
  QColor *arg1 = (QColor *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(int **)&h; 
  arg3 = *(int **)&s; 
  arg4 = *(int **)&v; 
  arg5 = *(int **)&a; 
  ((QColor const *)arg1)->getHsv(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_getHsv1(QColor const * self, int * h, int * s, int * v) {
  QColor *arg1 = (QColor *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(int **)&h; 
  arg3 = *(int **)&s; 
  arg4 = *(int **)&v; 
  ((QColor const *)arg1)->getHsv(arg2,arg3,arg4);
}


SWIGEXPORT void QColor_setHsv(QColor * self, int h, int s, int v, int a) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)h; 
  arg3 = (int)s; 
  arg4 = (int)v; 
  arg5 = (int)a; 
  (arg1)->setHsv(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_setHsv1(QColor * self, int h, int s, int v) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)h; 
  arg3 = (int)s; 
  arg4 = (int)v; 
  (arg1)->setHsv(arg2,arg3,arg4);
}


SWIGEXPORT void QColor_getHsvF(QColor const * self, double * h, double * s, double * v, double * a) {
  QColor *arg1 = (QColor *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(double **)&h; 
  arg3 = *(double **)&s; 
  arg4 = *(double **)&v; 
  arg5 = *(double **)&a; 
  ((QColor const *)arg1)->getHsvF(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_getHsvF1(QColor const * self, double * h, double * s, double * v) {
  QColor *arg1 = (QColor *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(double **)&h; 
  arg3 = *(double **)&s; 
  arg4 = *(double **)&v; 
  ((QColor const *)arg1)->getHsvF(arg2,arg3,arg4);
}


SWIGEXPORT void QColor_setHsvF(QColor * self, double h, double s, double v, double a) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)h; 
  arg3 = (double)s; 
  arg4 = (double)v; 
  arg5 = (double)a; 
  (arg1)->setHsvF(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_setHsvF1(QColor * self, double h, double s, double v) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)h; 
  arg3 = (double)s; 
  arg4 = (double)v; 
  (arg1)->setHsvF(arg2,arg3,arg4);
}


SWIGEXPORT int QColor_cyan(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->cyan();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_magenta(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->magenta();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_yellow(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->yellow();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_black(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->black();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_cyanF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->cyanF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_magentaF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->magentaF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_yellowF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->yellowF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_blackF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->blackF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QColor_getCmyk(QColor * self, int * c, int * m, int * y, int * k, int * a) {
  QColor *arg1 = (QColor *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(int **)&c; 
  arg3 = *(int **)&m; 
  arg4 = *(int **)&y; 
  arg5 = *(int **)&k; 
  arg6 = *(int **)&a; 
  (arg1)->getCmyk(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QColor_getCmyk1(QColor * self, int * c, int * m, int * y, int * k) {
  QColor *arg1 = (QColor *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(int **)&c; 
  arg3 = *(int **)&m; 
  arg4 = *(int **)&y; 
  arg5 = *(int **)&k; 
  (arg1)->getCmyk(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_setCmyk(QColor * self, int c, int m, int y, int k, int a) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)c; 
  arg3 = (int)m; 
  arg4 = (int)y; 
  arg5 = (int)k; 
  arg6 = (int)a; 
  (arg1)->setCmyk(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QColor_setCmyk1(QColor * self, int c, int m, int y, int k) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)c; 
  arg3 = (int)m; 
  arg4 = (int)y; 
  arg5 = (int)k; 
  (arg1)->setCmyk(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_getCmykF(QColor * self, double * c, double * m, double * y, double * k, double * a) {
  QColor *arg1 = (QColor *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  double *arg6 = (double *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(double **)&c; 
  arg3 = *(double **)&m; 
  arg4 = *(double **)&y; 
  arg5 = *(double **)&k; 
  arg6 = *(double **)&a; 
  (arg1)->getCmykF(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QColor_getCmykF1(QColor * self, double * c, double * m, double * y, double * k) {
  QColor *arg1 = (QColor *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(double **)&c; 
  arg3 = *(double **)&m; 
  arg4 = *(double **)&y; 
  arg5 = *(double **)&k; 
  (arg1)->getCmykF(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_setCmykF(QColor * self, double c, double m, double y, double k, double a) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)c; 
  arg3 = (double)m; 
  arg4 = (double)y; 
  arg5 = (double)k; 
  arg6 = (double)a; 
  (arg1)->setCmykF(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QColor_setCmykF1(QColor * self, double c, double m, double y, double k) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)c; 
  arg3 = (double)m; 
  arg4 = (double)y; 
  arg5 = (double)k; 
  (arg1)->setCmykF(arg2,arg3,arg4,arg5);
}


SWIGEXPORT int QColor_hslHue(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->hslHue();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_hslSaturation(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->hslSaturation();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QColor_lightness(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (int)((QColor const *)arg1)->lightness();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_hslHueF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->hslHueF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_hslSaturationF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->hslSaturationF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QColor_lightnessF(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QColor **)&self; 
  result = (double)((QColor const *)arg1)->lightnessF();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QColor_getHsl(QColor const * self, int * h, int * s, int * l, int * a) {
  QColor *arg1 = (QColor *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(int **)&h; 
  arg3 = *(int **)&s; 
  arg4 = *(int **)&l; 
  arg5 = *(int **)&a; 
  ((QColor const *)arg1)->getHsl(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_getHsl1(QColor const * self, int * h, int * s, int * l) {
  QColor *arg1 = (QColor *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(int **)&h; 
  arg3 = *(int **)&s; 
  arg4 = *(int **)&l; 
  ((QColor const *)arg1)->getHsl(arg2,arg3,arg4);
}


SWIGEXPORT void QColor_setHsl(QColor * self, int h, int s, int l, int a) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)h; 
  arg3 = (int)s; 
  arg4 = (int)l; 
  arg5 = (int)a; 
  (arg1)->setHsl(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_setHsl1(QColor * self, int h, int s, int l) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)h; 
  arg3 = (int)s; 
  arg4 = (int)l; 
  (arg1)->setHsl(arg2,arg3,arg4);
}


SWIGEXPORT void QColor_getHslF(QColor const * self, double * h, double * s, double * l, double * a) {
  QColor *arg1 = (QColor *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(double **)&h; 
  arg3 = *(double **)&s; 
  arg4 = *(double **)&l; 
  arg5 = *(double **)&a; 
  ((QColor const *)arg1)->getHslF(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_getHslF1(QColor const * self, double * h, double * s, double * l) {
  QColor *arg1 = (QColor *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(double **)&h; 
  arg3 = *(double **)&s; 
  arg4 = *(double **)&l; 
  ((QColor const *)arg1)->getHslF(arg2,arg3,arg4);
}


SWIGEXPORT void QColor_setHslF(QColor * self, double h, double s, double l, double a) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)h; 
  arg3 = (double)s; 
  arg4 = (double)l; 
  arg5 = (double)a; 
  (arg1)->setHslF(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QColor_setHslF1(QColor * self, double h, double s, double l) {
  QColor *arg1 = (QColor *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (double)h; 
  arg3 = (double)s; 
  arg4 = (double)l; 
  (arg1)->setHslF(arg2,arg3,arg4);
}


SWIGEXPORT QColor * QColor_toRgb(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->toRgb());
  return cresult;
}


SWIGEXPORT QColor * QColor_toHsv(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->toHsv());
  return cresult;
}


SWIGEXPORT QColor * QColor_toCmyk(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->toCmyk());
  return cresult;
}


SWIGEXPORT QColor * QColor_toHsl(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->toHsl());
  return cresult;
}


SWIGEXPORT QColor * QColor_convertTo(QColor const * self, QColor::Spec colorSpec) {
  QColor *arg1 = (QColor *) 0 ;
  QColor::Spec arg2 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (QColor::Spec)colorSpec; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->convertTo(arg2));
  return cresult;
}


SWIGEXPORT QColor * FromRgb(QRgb rgb) {
  QRgb arg1 ;
  QRgb *argp1 ;
  QColor * cresult ;
  
  argp1 = *(QRgb **)&rgb;
  /*
     if (!argp1) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QRgb");
       //RETURN 0;
       return 0;
     }
  */
  arg1 = *argp1; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromRgb(arg1));
  return cresult;
}


SWIGEXPORT QColor * FromRgba(QRgb rgba) {
  QRgb arg1 ;
  QRgb *argp1 ;
  QColor * cresult ;
  
  argp1 = *(QRgb **)&rgba;
  /*
     if (!argp1) {
  //     SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null QRgb");
       //RETURN 0;
       return 0;
     }
  */
  arg1 = *argp1; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromRgba(arg1));
  return cresult;
}


SWIGEXPORT QColor * FromRgb1(int r, int g, int b, int a) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QColor * cresult ;
  
  arg1 = (int)r; 
  arg2 = (int)g; 
  arg3 = (int)b; 
  arg4 = (int)a; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromRgb(arg1,arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QColor * FromRgb2(int r, int g, int b) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  QColor * cresult ;
  
  arg1 = (int)r; 
  arg2 = (int)g; 
  arg3 = (int)b; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromRgb(arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QColor * FromRgbF(double r, double g, double b, double a) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  QColor * cresult ;
  
  arg1 = (double)r; 
  arg2 = (double)g; 
  arg3 = (double)b; 
  arg4 = (double)a; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromRgbF(arg1,arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QColor * FromRgbF1(double r, double g, double b) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  QColor * cresult ;
  
  arg1 = (double)r; 
  arg2 = (double)g; 
  arg3 = (double)b; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromRgbF(arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QColor * FromHsv(int h, int s, int v, int a) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QColor * cresult ;
  
  arg1 = (int)h; 
  arg2 = (int)s; 
  arg3 = (int)v; 
  arg4 = (int)a; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromHsv(arg1,arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QColor * FromHsv1(int h, int s, int v) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  QColor * cresult ;
  
  arg1 = (int)h; 
  arg2 = (int)s; 
  arg3 = (int)v; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromHsv(arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QColor * FromHsvF(double h, double s, double v, double a) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  QColor * cresult ;
  
  arg1 = (double)h; 
  arg2 = (double)s; 
  arg3 = (double)v; 
  arg4 = (double)a; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromHsvF(arg1,arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QColor * FromHsvF1(double h, double s, double v) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  QColor * cresult ;
  
  arg1 = (double)h; 
  arg2 = (double)s; 
  arg3 = (double)v; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromHsvF(arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QColor * FromCmyk(int c, int m, int y, int k, int a) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QColor * cresult ;
  
  arg1 = (int)c; 
  arg2 = (int)m; 
  arg3 = (int)y; 
  arg4 = (int)k; 
  arg5 = (int)a; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromCmyk(arg1,arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QColor * FromCmyk1(int c, int m, int y, int k) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QColor * cresult ;
  
  arg1 = (int)c; 
  arg2 = (int)m; 
  arg3 = (int)y; 
  arg4 = (int)k; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromCmyk(arg1,arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QColor * FromCmykF(double c, double m, double y, double k, double a) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  QColor * cresult ;
  
  arg1 = (double)c; 
  arg2 = (double)m; 
  arg3 = (double)y; 
  arg4 = (double)k; 
  arg5 = (double)a; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromCmykF(arg1,arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QColor * FromCmykF1(double c, double m, double y, double k) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  QColor * cresult ;
  
  arg1 = (double)c; 
  arg2 = (double)m; 
  arg3 = (double)y; 
  arg4 = (double)k; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromCmykF(arg1,arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QColor * FromHsl(int h, int s, int l, int a) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QColor * cresult ;
  
  arg1 = (int)h; 
  arg2 = (int)s; 
  arg3 = (int)l; 
  arg4 = (int)a; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromHsl(arg1,arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QColor * FromHsl1(int h, int s, int l) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  QColor * cresult ;
  
  arg1 = (int)h; 
  arg2 = (int)s; 
  arg3 = (int)l; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromHsl(arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QColor * FromHslF(double h, double s, double l, double a) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  QColor * cresult ;
  
  arg1 = (double)h; 
  arg2 = (double)s; 
  arg3 = (double)l; 
  arg4 = (double)a; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromHslF(arg1,arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QColor * FromHslF1(double h, double s, double l) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  QColor * cresult ;
  
  arg1 = (double)h; 
  arg2 = (double)s; 
  arg3 = (double)l; 
  *(QColor **)&cresult = new QColor((const QColor &)QColor::fromHslF(arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QColor * QColor_light(QColor const * self, int f) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)f; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->light(arg2));
  return cresult;
}


SWIGEXPORT QColor * QColor_light1(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->light());
  return cresult;
}


SWIGEXPORT QColor * QColor_lighter(QColor const * self, int f) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)f; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->lighter(arg2));
  return cresult;
}


SWIGEXPORT QColor * QColor_lighter1(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->lighter());
  return cresult;
}


SWIGEXPORT QColor * QColor_dark(QColor const * self, int f) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)f; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->dark(arg2));
  return cresult;
}


SWIGEXPORT QColor * QColor_dark1(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->dark());
  return cresult;
}


SWIGEXPORT QColor * QColor_darker(QColor const * self, int f) {
  QColor *arg1 = (QColor *) 0 ;
  int arg2 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (int)f; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->darker(arg2));
  return cresult;
}


SWIGEXPORT QColor * QColor_darker1(QColor const * self) {
  QColor *arg1 = (QColor *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QColor const *)arg1)->darker());
  return cresult;
}


SWIGEXPORT QColor * QColor_Op_Assign(QColor * self, QColor * m3arg2) {
  QColor *arg1 = (QColor *) 0 ;
  QColor *arg2 = 0 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(QColor **)&m3arg2;
  result = (QColor *) &(arg1)->operator =((QColor const &)*arg2);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QColor * QColor_Op_Assign1(QColor * self, Qt::GlobalColor color) {
  QColor *arg1 = (QColor *) 0 ;
  Qt::GlobalColor arg2 ;
  QColor *result = 0 ;
  QColor * cresult ;
  
  arg1 = *(QColor **)&self; 
  arg2 = (Qt::GlobalColor)color; 
  result = (QColor *) &(arg1)->operator =(arg2);
  *(QColor **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QColor_Op_Equals(QColor const * self, QColor * c) {
  QColor *arg1 = (QColor *) 0 ;
  QColor *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(QColor **)&c;
  result = (bool)((QColor const *)arg1)->operator ==((QColor const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QColor_Op_NotEquals(QColor const * self, QColor * c) {
  QColor *arg1 = (QColor *) 0 ;
  QColor *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QColor **)&self; 
  arg2 = *(QColor **)&c;
  result = (bool)((QColor const *)arg1)->operator !=((QColor const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QColor(QColor * self) {
  QColor *arg1 = (QColor *) 0 ;
  
  arg1 = *(QColor **)&self; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

