(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtItemSelectionModel;


IMPORT QtItemSelectionModelRaw;
FROM QtAbstractItemModel IMPORT QModelIndex,QAbstractItemModel;
FROM QGuiStubs IMPORT QModelIndexList;
FROM QtObject IMPORT QObject;


IMPORT WeakRef;

PROCEDURE New_QItemSelectionRange0 (self:QItemSelectionRange;): QItemSelectionRange =
VAR
result : ADDRESS;
BEGIN
result := QtItemSelectionModelRaw.New_QItemSelectionRange0();

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QItemSelectionRange);

RETURN self;
END New_QItemSelectionRange0;

PROCEDURE New_QItemSelectionRange1 (self:QItemSelectionRange; other: QItemSelectionRange;
): QItemSelectionRange =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(other.cxxObj,ADDRESS);
BEGIN
result := QtItemSelectionModelRaw.New_QItemSelectionRange1(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QItemSelectionRange);

RETURN self;
END New_QItemSelectionRange1;

PROCEDURE New_QItemSelectionRange2 (self:QItemSelectionRange; topLeft, bottomRight: QModelIndex;
): QItemSelectionRange =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(topLeft.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(bottomRight.cxxObj,ADDRESS);
BEGIN
result := QtItemSelectionModelRaw.New_QItemSelectionRange2(arg1tmp, arg2tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QItemSelectionRange);

RETURN self;
END New_QItemSelectionRange2;

PROCEDURE New_QItemSelectionRange3 (self:QItemSelectionRange; index: QModelIndex;
): QItemSelectionRange =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
BEGIN
result := QtItemSelectionModelRaw.New_QItemSelectionRange3(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QItemSelectionRange);

RETURN self;
END New_QItemSelectionRange3;

PROCEDURE QItemSelectionRange_top ( self: QItemSelectionRange;
): INTEGER =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionRange_top(arg1tmp);
END QItemSelectionRange_top;

PROCEDURE QItemSelectionRange_left ( self: QItemSelectionRange;
): INTEGER =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionRange_left(arg1tmp);
END QItemSelectionRange_left;

PROCEDURE QItemSelectionRange_bottom ( self: QItemSelectionRange;
): INTEGER =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionRange_bottom(arg1tmp);
END QItemSelectionRange_bottom;

PROCEDURE QItemSelectionRange_right ( self: QItemSelectionRange;
): INTEGER =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionRange_right(arg1tmp);
END QItemSelectionRange_right;

PROCEDURE QItemSelectionRange_width ( self: QItemSelectionRange;
): INTEGER =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionRange_width(arg1tmp);
END QItemSelectionRange_width;

PROCEDURE QItemSelectionRange_height ( self: QItemSelectionRange;
): INTEGER =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionRange_height(arg1tmp);
END QItemSelectionRange_height;

PROCEDURE QItemSelectionRange_topLeft ( self: QItemSelectionRange;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionRange_topLeft(arg1tmp);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionRange_topLeft;

PROCEDURE QItemSelectionRange_bottomRight ( self: QItemSelectionRange;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionRange_bottomRight(arg1tmp);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionRange_bottomRight;

PROCEDURE QItemSelectionRange_parent ( self: QItemSelectionRange;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionRange_parent(arg1tmp);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionRange_parent;

PROCEDURE QItemSelectionRange_model ( self: QItemSelectionRange;
): QAbstractItemModel =
VAR
ret:ADDRESS; result : QAbstractItemModel;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionRange_model(arg1tmp);

  result := NEW(QAbstractItemModel);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionRange_model;

PROCEDURE QItemSelectionRange_contains ( self: QItemSelectionRange;
 index: QModelIndex;
): BOOLEAN =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionRange_contains(arg1tmp, arg2tmp);
END QItemSelectionRange_contains;

PROCEDURE QItemSelectionRange_contains1 ( self: QItemSelectionRange;
row, column: INTEGER;
 parentIndex: QModelIndex;
): BOOLEAN =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg4tmp :=  LOOPHOLE(parentIndex.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionRange_contains1(arg1tmp, row, column, arg4tmp);
END QItemSelectionRange_contains1;

PROCEDURE QItemSelectionRange_intersects ( self, other: QItemSelectionRange;
): BOOLEAN =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(other.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionRange_intersects(arg1tmp, arg2tmp);
END QItemSelectionRange_intersects;

PROCEDURE QItemSelectionRange_intersect ( self, other: QItemSelectionRange;
): QItemSelectionRange =
VAR
ret:ADDRESS; result : QItemSelectionRange;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(other.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionRange_intersect(arg1tmp, arg2tmp);

  result := NEW(QItemSelectionRange);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionRange_intersect;

PROCEDURE QItemSelectionRange_intersected ( self, other: QItemSelectionRange;
): QItemSelectionRange =
VAR
ret:ADDRESS; result : QItemSelectionRange;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(other.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionRange_intersected(arg1tmp, arg2tmp);

  result := NEW(QItemSelectionRange);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionRange_intersected;

PROCEDURE QItemSelectionRange_isValid ( self: QItemSelectionRange;
): BOOLEAN =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionRange_isValid(arg1tmp);
END QItemSelectionRange_isValid;

PROCEDURE QItemSelectionRange_indexes ( self: QItemSelectionRange;
): QModelIndexList =
VAR
ret:ADDRESS; result : QModelIndexList;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionRange_indexes(arg1tmp);

  result := NEW(QModelIndexList);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionRange_indexes;

PROCEDURE Delete_QItemSelectionRange ( self: QItemSelectionRange;
) =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.Delete_QItemSelectionRange(arg1tmp);
END Delete_QItemSelectionRange;

PROCEDURE Cleanup_QItemSelectionRange(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QItemSelectionRange := ref;
BEGIN
  Delete_QItemSelectionRange(obj);
 END Cleanup_QItemSelectionRange;

PROCEDURE Destroy_QItemSelectionRange(self : QItemSelectionRange) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QItemSelectionRange);
END Destroy_QItemSelectionRange;

REVEAL
QItemSelectionRange =
QItemSelectionRangePublic BRANDED OBJECT
OVERRIDES
init_0 := New_QItemSelectionRange0;
init_1 := New_QItemSelectionRange1;
init_2 := New_QItemSelectionRange2;
init_3 := New_QItemSelectionRange3;
top := QItemSelectionRange_top;
left := QItemSelectionRange_left;
bottom := QItemSelectionRange_bottom;
right := QItemSelectionRange_right;
width := QItemSelectionRange_width;
height := QItemSelectionRange_height;
topLeft := QItemSelectionRange_topLeft;
bottomRight := QItemSelectionRange_bottomRight;
parent := QItemSelectionRange_parent;
model := QItemSelectionRange_model;
contains := QItemSelectionRange_contains;
contains1 := QItemSelectionRange_contains1;
intersects := QItemSelectionRange_intersects;
intersect := QItemSelectionRange_intersect;
intersected := QItemSelectionRange_intersected;
isValid := QItemSelectionRange_isValid;
indexes := QItemSelectionRange_indexes;
destroyCxx := Destroy_QItemSelectionRange;
END;

PROCEDURE New_QItemSelectionModel0 (self:QItemSelectionModel; model: QAbstractItemModel;
): QItemSelectionModel =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(model.cxxObj,ADDRESS);
BEGIN
result := QtItemSelectionModelRaw.New_QItemSelectionModel0(arg1tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QItemSelectionModel);

RETURN self;
END New_QItemSelectionModel0;

PROCEDURE New_QItemSelectionModel1 (self:QItemSelectionModel; model: QAbstractItemModel;
 parent: QObject;
): QItemSelectionModel =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(model.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
result := QtItemSelectionModelRaw.New_QItemSelectionModel1(arg1tmp, arg2tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QItemSelectionModel);

RETURN self;
END New_QItemSelectionModel1;

PROCEDURE Delete_QItemSelectionModel ( self: QItemSelectionModel;
) =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.Delete_QItemSelectionModel(arg1tmp);
END Delete_QItemSelectionModel;

PROCEDURE QItemSelectionModel_currentIndex ( self: QItemSelectionModel;
): QModelIndex =
VAR
ret:ADDRESS; result : QModelIndex;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionModel_currentIndex(arg1tmp);

  result := NEW(QModelIndex);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionModel_currentIndex;

PROCEDURE QItemSelectionModel_isSelected ( self: QItemSelectionModel;
 index: QModelIndex;
): BOOLEAN =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionModel_isSelected(arg1tmp, arg2tmp);
END QItemSelectionModel_isSelected;

PROCEDURE QItemSelectionModel_isRowSelected ( self: QItemSelectionModel;
row: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionModel_isRowSelected(arg1tmp, row, arg3tmp);
END QItemSelectionModel_isRowSelected;

PROCEDURE QItemSelectionModel_isColumnSelected ( self: QItemSelectionModel;
column: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionModel_isColumnSelected(arg1tmp, column, arg3tmp);
END QItemSelectionModel_isColumnSelected;

PROCEDURE QItemSelectionModel_rowIntersectsSelection ( self: QItemSelectionModel;
row: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionModel_rowIntersectsSelection(arg1tmp, row, arg3tmp);
END QItemSelectionModel_rowIntersectsSelection;

PROCEDURE QItemSelectionModel_columnIntersectsSelection ( self: QItemSelectionModel;
column: INTEGER;
 parent: QModelIndex;
): BOOLEAN =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(parent.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionModel_columnIntersectsSelection(arg1tmp, column, arg3tmp);
END QItemSelectionModel_columnIntersectsSelection;

PROCEDURE QItemSelectionModel_hasSelection ( self: QItemSelectionModel;
): BOOLEAN =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelectionModel_hasSelection(arg1tmp);
END QItemSelectionModel_hasSelection;

PROCEDURE QItemSelectionModel_selectedIndexes ( self: QItemSelectionModel;
): QModelIndexList =
VAR
ret:ADDRESS; result : QModelIndexList;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionModel_selectedIndexes(arg1tmp);

  result := NEW(QModelIndexList);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionModel_selectedIndexes;

PROCEDURE QItemSelectionModel_selectedRows ( self: QItemSelectionModel;
column: INTEGER;
): QModelIndexList =
VAR
ret:ADDRESS; result : QModelIndexList;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionModel_selectedRows(arg1tmp, column);

  result := NEW(QModelIndexList);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionModel_selectedRows;

PROCEDURE QItemSelectionModel_selectedRows1 ( self: QItemSelectionModel;
): QModelIndexList =
VAR
ret:ADDRESS; result : QModelIndexList;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionModel_selectedRows1(arg1tmp);

  result := NEW(QModelIndexList);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionModel_selectedRows1;

PROCEDURE QItemSelectionModel_selectedColumns ( self: QItemSelectionModel;
row: INTEGER;
): QModelIndexList =
VAR
ret:ADDRESS; result : QModelIndexList;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionModel_selectedColumns(arg1tmp, row);

  result := NEW(QModelIndexList);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionModel_selectedColumns;

PROCEDURE QItemSelectionModel_selectedColumns1 ( self: QItemSelectionModel;
): QModelIndexList =
VAR
ret:ADDRESS; result : QModelIndexList;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionModel_selectedColumns1(arg1tmp);

  result := NEW(QModelIndexList);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionModel_selectedColumns1;

PROCEDURE QItemSelectionModel_selection ( self: QItemSelectionModel;
): QItemSelection =
VAR
ret:ADDRESS; result : QItemSelection;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionModel_selection(arg1tmp);

  result := NEW(QItemSelection);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionModel_selection;

PROCEDURE QItemSelectionModel_model ( self: QItemSelectionModel;
): QAbstractItemModel =
VAR
ret:ADDRESS; result : QAbstractItemModel;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelectionModel_model(arg1tmp);

  result := NEW(QAbstractItemModel);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelectionModel_model;

PROCEDURE QItemSelectionModel_setCurrentIndex ( self: QItemSelectionModel;
 index: QModelIndex;
command: SelectionFlags;
) =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.QItemSelectionModel_setCurrentIndex(arg1tmp, arg2tmp, ORD(command));
END QItemSelectionModel_setCurrentIndex;

PROCEDURE QItemSelectionModel_select ( self: QItemSelectionModel;
 index: QModelIndex;
command: SelectionFlags;
) =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.QItemSelectionModel_select(arg1tmp, arg2tmp, ORD(command));
END QItemSelectionModel_select;

PROCEDURE QItemSelectionModel_select1 ( self: QItemSelectionModel;
 selection: QItemSelection;
command: SelectionFlags;
) =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(selection.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.QItemSelectionModel_select1(arg1tmp, arg2tmp, ORD(command));
END QItemSelectionModel_select1;

PROCEDURE QItemSelectionModel_clear ( self: QItemSelectionModel;
) =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.QItemSelectionModel_clear(arg1tmp);
END QItemSelectionModel_clear;

PROCEDURE QItemSelectionModel_reset ( self: QItemSelectionModel;
) =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.QItemSelectionModel_reset(arg1tmp);
END QItemSelectionModel_reset;

PROCEDURE QItemSelectionModel_clearSelection ( self: QItemSelectionModel;
) =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.QItemSelectionModel_clearSelection(arg1tmp);
END QItemSelectionModel_clearSelection;

PROCEDURE Cleanup_QItemSelectionModel(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QItemSelectionModel := ref;
BEGIN
  Delete_QItemSelectionModel(obj);
 END Cleanup_QItemSelectionModel;

PROCEDURE Destroy_QItemSelectionModel(self : QItemSelectionModel) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QItemSelectionModel);
END Destroy_QItemSelectionModel;

REVEAL
QItemSelectionModel =
QItemSelectionModelPublic BRANDED OBJECT
OVERRIDES
init_0 := New_QItemSelectionModel0;
init_1 := New_QItemSelectionModel1;
currentIndex := QItemSelectionModel_currentIndex;
isSelected := QItemSelectionModel_isSelected;
isRowSelected := QItemSelectionModel_isRowSelected;
isColumnSelected := QItemSelectionModel_isColumnSelected;
rowIntersectsSelection := QItemSelectionModel_rowIntersectsSelection;
columnIntersectsSelection := QItemSelectionModel_columnIntersectsSelection;
hasSelection := QItemSelectionModel_hasSelection;
selectedIndexes := QItemSelectionModel_selectedIndexes;
selectedRows := QItemSelectionModel_selectedRows;
selectedRows1 := QItemSelectionModel_selectedRows1;
selectedColumns := QItemSelectionModel_selectedColumns;
selectedColumns1 := QItemSelectionModel_selectedColumns1;
selection := QItemSelectionModel_selection;
model := QItemSelectionModel_model;
setCurrentIndex := QItemSelectionModel_setCurrentIndex;
select := QItemSelectionModel_select;
select1 := QItemSelectionModel_select1;
clear := QItemSelectionModel_clear;
reset := QItemSelectionModel_reset;
clearSelection := QItemSelectionModel_clearSelection;
destroyCxx := Destroy_QItemSelectionModel;
END;

PROCEDURE New_QItemSelection0 (self:QItemSelection;): QItemSelection =
VAR
result : ADDRESS;
BEGIN
result := QtItemSelectionModelRaw.New_QItemSelection0();

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QItemSelection);

RETURN self;
END New_QItemSelection0;

PROCEDURE New_QItemSelection1 (self:QItemSelection; topLeft, bottomRight: QModelIndex;
): QItemSelection =
VAR
result : ADDRESS;
arg1tmp :=  LOOPHOLE(topLeft.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(bottomRight.cxxObj,ADDRESS);
BEGIN
result := QtItemSelectionModelRaw.New_QItemSelection1(arg1tmp, arg2tmp);

  self.cxxObj := result;
  EVAL WeakRef.FromRef(self,Cleanup_QItemSelection);

RETURN self;
END New_QItemSelection1;

PROCEDURE QItemSelection_select ( self: QItemSelection;
 topLeft, bottomRight: QModelIndex;
) =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(topLeft.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(bottomRight.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.QItemSelection_select(arg1tmp, arg2tmp, arg3tmp);
END QItemSelection_select;

PROCEDURE QItemSelection_contains ( self: QItemSelection;
 index: QModelIndex;
): BOOLEAN =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(index.cxxObj,ADDRESS);
BEGIN
RETURN QtItemSelectionModelRaw.QItemSelection_contains(arg1tmp, arg2tmp);
END QItemSelection_contains;

PROCEDURE QItemSelection_indexes ( self: QItemSelection;
): QModelIndexList =
VAR
ret:ADDRESS; result : QModelIndexList;
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
ret := QtItemSelectionModelRaw.QItemSelection_indexes(arg1tmp);

  result := NEW(QModelIndexList);
  result.cxxObj := ret;
  result.destroyCxx();

RETURN result;
END QItemSelection_indexes;

PROCEDURE QItemSelection_merge ( self, other: QItemSelection;
command: SelectionFlags;
) =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(other.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.QItemSelection_merge(arg1tmp, arg2tmp, ORD(command));
END QItemSelection_merge;

PROCEDURE Split ( range, other: QItemSelectionRange;
 result: QItemSelection;
) =
VAR
arg1tmp :=  LOOPHOLE(range.cxxObj,ADDRESS);
arg2tmp :=  LOOPHOLE(other.cxxObj,ADDRESS);
arg3tmp :=  LOOPHOLE(result.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.Split(arg1tmp, arg2tmp, arg3tmp);
END Split;

PROCEDURE Delete_QItemSelection ( self: QItemSelection;
) =
VAR
arg1tmp :=  LOOPHOLE(self.cxxObj,ADDRESS);
BEGIN
QtItemSelectionModelRaw.Delete_QItemSelection(arg1tmp);
END Delete_QItemSelection;

PROCEDURE Cleanup_QItemSelection(<*UNUSED*>READONLY self: WeakRef.T; ref: REFANY) =
VAR obj : QItemSelection := ref;
BEGIN
  Delete_QItemSelection(obj);
 END Cleanup_QItemSelection;

PROCEDURE Destroy_QItemSelection(self : QItemSelection) =
BEGIN
  EVAL WeakRef.FromRef(self,Cleanup_QItemSelection);
END Destroy_QItemSelection;

REVEAL
QItemSelection =
QItemSelectionPublic BRANDED OBJECT
OVERRIDES
init_0 := New_QItemSelection0;
init_1 := New_QItemSelection1;
select := QItemSelection_select;
contains := QItemSelection_contains;
indexes := QItemSelection_indexes;
merge := QItemSelection_merge;
destroyCxx := Destroy_QItemSelection;
END;


BEGIN
END QtItemSelectionModel.
