/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qgraphicsview.h>
#define  OptimizationFlags QGraphicsView::OptimizationFlags
#define  CacheMode QGraphicsView::CacheMode


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QGraphicsView * New_QGraphicsView0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QGraphicsView *result = 0 ;
  QGraphicsView * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QGraphicsView *)new QGraphicsView(arg1);
  *(QGraphicsView **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QGraphicsView * New_QGraphicsView1() {
  QGraphicsView *result = 0 ;
  QGraphicsView * cresult ;
  
  result = (QGraphicsView *)new QGraphicsView();
  *(QGraphicsView **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QGraphicsView * New_QGraphicsView2(QGraphicsScene * scene, QWidget * parent) {
  QGraphicsScene *arg1 = (QGraphicsScene *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QGraphicsView *result = 0 ;
  QGraphicsView * cresult ;
  
  arg1 = *(QGraphicsScene **)&scene; 
  arg2 = *(QWidget **)&parent; 
  result = (QGraphicsView *)new QGraphicsView(arg1,arg2);
  *(QGraphicsView **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QGraphicsView * New_QGraphicsView3(QGraphicsScene * scene) {
  QGraphicsScene *arg1 = (QGraphicsScene *) 0 ;
  QGraphicsView *result = 0 ;
  QGraphicsView * cresult ;
  
  arg1 = *(QGraphicsScene **)&scene; 
  result = (QGraphicsView *)new QGraphicsView(arg1);
  *(QGraphicsView **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QGraphicsView(QGraphicsView * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  delete arg1;
}


SWIGEXPORT QSize * QGraphicsView_sizeHint(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QGraphicsView const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QPainter::RenderHints QGraphicsView_renderHints(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPainter::RenderHints cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  *(QPainter::RenderHints **)&cresult = new QPainter::RenderHints((const QPainter::RenderHints &)((QGraphicsView const *)arg1)->renderHints());
  return cresult;
}


SWIGEXPORT void QGraphicsView_setRenderHint(QGraphicsView * self, QPainter::RenderHint hint, bool enabled) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPainter::RenderHint arg2 ;
  bool arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (QPainter::RenderHint)hint; 
  arg3 = enabled ? true : false; 
  (arg1)->setRenderHint(arg2,arg3);
}


SWIGEXPORT void QGraphicsView_setRenderHint1(QGraphicsView * self, QPainter::RenderHint hint) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPainter::RenderHint arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (QPainter::RenderHint)hint; 
  (arg1)->setRenderHint(arg2);
}


SWIGEXPORT void QGraphicsView_setRenderHints(QGraphicsView * self, QPainter::RenderHints hints) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPainter::RenderHints arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (QPainter::RenderHints)hints; 
  (arg1)->setRenderHints(arg2);
}


SWIGEXPORT Qt::Alignment QGraphicsView_alignment(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  Qt::Alignment cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  *(Qt::Alignment **)&cresult = new Qt::Alignment((const Qt::Alignment &)((QGraphicsView const *)arg1)->alignment());
  return cresult;
}


SWIGEXPORT void QGraphicsView_setAlignment(QGraphicsView * self, Qt::Alignment alignment) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  Qt::Alignment arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (Qt::Alignment)alignment; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT QGraphicsView::ViewportAnchor QGraphicsView_transformationAnchor(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsView::ViewportAnchor result;
  QGraphicsView::ViewportAnchor cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  result = (QGraphicsView::ViewportAnchor)((QGraphicsView const *)arg1)->transformationAnchor();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGraphicsView_setTransformationAnchor(QGraphicsView * self, QGraphicsView::ViewportAnchor anchor) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsView::ViewportAnchor arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (QGraphicsView::ViewportAnchor)anchor; 
  (arg1)->setTransformationAnchor(arg2);
}


SWIGEXPORT QGraphicsView::ViewportAnchor QGraphicsView_resizeAnchor(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsView::ViewportAnchor result;
  QGraphicsView::ViewportAnchor cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  result = (QGraphicsView::ViewportAnchor)((QGraphicsView const *)arg1)->resizeAnchor();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGraphicsView_setResizeAnchor(QGraphicsView * self, QGraphicsView::ViewportAnchor anchor) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsView::ViewportAnchor arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (QGraphicsView::ViewportAnchor)anchor; 
  (arg1)->setResizeAnchor(arg2);
}


SWIGEXPORT QGraphicsView::ViewportUpdateMode QGraphicsView_viewportUpdateMode(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsView::ViewportUpdateMode result;
  QGraphicsView::ViewportUpdateMode cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  result = (QGraphicsView::ViewportUpdateMode)((QGraphicsView const *)arg1)->viewportUpdateMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGraphicsView_setViewportUpdateMode(QGraphicsView * self, QGraphicsView::ViewportUpdateMode mode) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsView::ViewportUpdateMode arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (QGraphicsView::ViewportUpdateMode)mode; 
  (arg1)->setViewportUpdateMode(arg2);
}


SWIGEXPORT OptimizationFlags QGraphicsView_optimizationFlags(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  OptimizationFlags cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  *(OptimizationFlags **)&cresult = new OptimizationFlags((const OptimizationFlags &)((QGraphicsView const *)arg1)->optimizationFlags());
  return cresult;
}


SWIGEXPORT void QGraphicsView_setOptimizationFlag(QGraphicsView * self, QGraphicsView::OptimizationFlag flag, bool enabled) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsView::OptimizationFlag arg2 ;
  bool arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (QGraphicsView::OptimizationFlag)flag; 
  arg3 = enabled ? true : false; 
  (arg1)->setOptimizationFlag(arg2,arg3);
}


SWIGEXPORT void QGraphicsView_setOptimizationFlag1(QGraphicsView * self, QGraphicsView::OptimizationFlag flag) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsView::OptimizationFlag arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (QGraphicsView::OptimizationFlag)flag; 
  (arg1)->setOptimizationFlag(arg2);
}


SWIGEXPORT void QGraphicsView_setOptimizationFlags(QGraphicsView * self, OptimizationFlags flags) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  OptimizationFlags arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (OptimizationFlags)flags; 
  (arg1)->setOptimizationFlags(arg2);
}


SWIGEXPORT QGraphicsView::DragMode QGraphicsView_dragMode(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsView::DragMode result;
  QGraphicsView::DragMode cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  result = (QGraphicsView::DragMode)((QGraphicsView const *)arg1)->dragMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGraphicsView_setDragMode(QGraphicsView * self, QGraphicsView::DragMode mode) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsView::DragMode arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (QGraphicsView::DragMode)mode; 
  (arg1)->setDragMode(arg2);
}


SWIGEXPORT Qt::ItemSelectionMode QGraphicsView_rubberBandSelectionMode(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  Qt::ItemSelectionMode result;
  Qt::ItemSelectionMode cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  result = (Qt::ItemSelectionMode)((QGraphicsView const *)arg1)->rubberBandSelectionMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGraphicsView_setRubberBandSelectionMode(QGraphicsView * self, Qt::ItemSelectionMode mode) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  Qt::ItemSelectionMode arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (Qt::ItemSelectionMode)mode; 
  (arg1)->setRubberBandSelectionMode(arg2);
}


SWIGEXPORT CacheMode QGraphicsView_cacheMode(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  CacheMode cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  *(CacheMode **)&cresult = new CacheMode((const CacheMode &)((QGraphicsView const *)arg1)->cacheMode());
  return cresult;
}


SWIGEXPORT void QGraphicsView_setCacheMode(QGraphicsView * self, CacheMode mode) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  CacheMode arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (CacheMode)mode; 
  (arg1)->setCacheMode(arg2);
}


SWIGEXPORT void QGraphicsView_resetCachedContent(QGraphicsView * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  (arg1)->resetCachedContent();
}


SWIGEXPORT bool QGraphicsView_isInteractive(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  result = (bool)((QGraphicsView const *)arg1)->isInteractive();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGraphicsView_setInteractive(QGraphicsView * self, bool allowed) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  bool arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = allowed ? true : false; 
  (arg1)->setInteractive(arg2);
}


SWIGEXPORT QGraphicsScene * QGraphicsView_scene(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsScene *result = 0 ;
  QGraphicsScene * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  result = (QGraphicsScene *)((QGraphicsView const *)arg1)->scene();
  *(QGraphicsScene **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QGraphicsView_setScene(QGraphicsView * self, QGraphicsScene * scene) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsScene *arg2 = (QGraphicsScene *) 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QGraphicsScene **)&scene; 
  (arg1)->setScene(arg2);
}


SWIGEXPORT QRectF * QGraphicsView_sceneRect(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRectF * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QGraphicsView const *)arg1)->sceneRect());
  return cresult;
}


SWIGEXPORT void QGraphicsView_setSceneRect(QGraphicsView * self, QRectF * rect) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRectF *arg2 = 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QRectF **)&rect;
  (arg1)->setSceneRect((QRectF const &)*arg2);
}


SWIGEXPORT void QGraphicsView_setSceneRect1(QGraphicsView * self, double x, double y, double w, double h) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  arg4 = (double)w; 
  arg5 = (double)h; 
  (arg1)->setSceneRect(arg2,arg3,arg4,arg5);
}


SWIGEXPORT QMatrix * QGraphicsView_matrix(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QMatrix * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  *(QMatrix **)&cresult = new QMatrix((const QMatrix &)((QGraphicsView const *)arg1)->matrix());
  return cresult;
}


SWIGEXPORT void QGraphicsView_setMatrix(QGraphicsView * self, QMatrix * matrix, bool combine) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QMatrix *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QMatrix **)&matrix;
  arg3 = combine ? true : false; 
  (arg1)->setMatrix((QMatrix const &)*arg2,arg3);
}


SWIGEXPORT void QGraphicsView_setMatrix1(QGraphicsView * self, QMatrix * matrix) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QMatrix *arg2 = 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QMatrix **)&matrix;
  (arg1)->setMatrix((QMatrix const &)*arg2);
}


SWIGEXPORT void QGraphicsView_resetMatrix(QGraphicsView * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  (arg1)->resetMatrix();
}


SWIGEXPORT QTransform * QGraphicsView_transform(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QTransform * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)((QGraphicsView const *)arg1)->transform());
  return cresult;
}


SWIGEXPORT QTransform * QGraphicsView_viewportTransform(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QTransform * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)((QGraphicsView const *)arg1)->viewportTransform());
  return cresult;
}


SWIGEXPORT bool QGraphicsView_isTransformed(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  result = (bool)((QGraphicsView const *)arg1)->isTransformed();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QGraphicsView_setTransform(QGraphicsView * self, QTransform * matrix, bool combine) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QTransform *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QTransform **)&matrix;
  arg3 = combine ? true : false; 
  (arg1)->setTransform((QTransform const &)*arg2,arg3);
}


SWIGEXPORT void QGraphicsView_setTransform1(QGraphicsView * self, QTransform * matrix) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QTransform *arg2 = 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QTransform **)&matrix;
  (arg1)->setTransform((QTransform const &)*arg2);
}


SWIGEXPORT void QGraphicsView_resetTransform(QGraphicsView * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  (arg1)->resetTransform();
}


SWIGEXPORT void QGraphicsView_rotate(QGraphicsView * self, double angle) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)angle; 
  (arg1)->rotate(arg2);
}


SWIGEXPORT void QGraphicsView_scale(QGraphicsView * self, double sx, double sy) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)sx; 
  arg3 = (double)sy; 
  (arg1)->scale(arg2,arg3);
}


SWIGEXPORT void QGraphicsView_shear(QGraphicsView * self, double sh, double sv) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)sh; 
  arg3 = (double)sv; 
  (arg1)->shear(arg2,arg3);
}


SWIGEXPORT void QGraphicsView_translate(QGraphicsView * self, double dx, double dy) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)dx; 
  arg3 = (double)dy; 
  (arg1)->translate(arg2,arg3);
}


SWIGEXPORT void QGraphicsView_centerOn(QGraphicsView * self, QPointF * pos) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPointF *arg2 = 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QPointF **)&pos;
  (arg1)->centerOn((QPointF const &)*arg2);
}


SWIGEXPORT void QGraphicsView_centerOn1(QGraphicsView * self, double x, double y) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  (arg1)->centerOn(arg2,arg3);
}


SWIGEXPORT void QGraphicsView_centerOn2(QGraphicsView * self, QGraphicsItem * item) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsItem *arg2 = (QGraphicsItem *) 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QGraphicsItem **)&item; 
  (arg1)->centerOn((QGraphicsItem const *)arg2);
}


SWIGEXPORT void QGraphicsView_ensureVisible(QGraphicsView * self, QRectF * rect, int xmargin, int ymargin) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRectF *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QRectF **)&rect;
  arg3 = (int)xmargin; 
  arg4 = (int)ymargin; 
  (arg1)->ensureVisible((QRectF const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QGraphicsView_ensureVisible1(QGraphicsView * self, QRectF * rect, int xmargin) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRectF *arg2 = 0 ;
  int arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QRectF **)&rect;
  arg3 = (int)xmargin; 
  (arg1)->ensureVisible((QRectF const &)*arg2,arg3);
}


SWIGEXPORT void QGraphicsView_ensureVisible2(QGraphicsView * self, QRectF * rect) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRectF *arg2 = 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QRectF **)&rect;
  (arg1)->ensureVisible((QRectF const &)*arg2);
}


SWIGEXPORT void QGraphicsView_ensureVisible3(QGraphicsView * self, double x, double y, double w, double h, int xmargin, int ymargin) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  arg4 = (double)w; 
  arg5 = (double)h; 
  arg6 = (int)xmargin; 
  arg7 = (int)ymargin; 
  (arg1)->ensureVisible(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QGraphicsView_ensureVisible4(QGraphicsView * self, double x, double y, double w, double h, int xmargin) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  int arg6 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  arg4 = (double)w; 
  arg5 = (double)h; 
  arg6 = (int)xmargin; 
  (arg1)->ensureVisible(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QGraphicsView_ensureVisible5(QGraphicsView * self, double x, double y, double w, double h) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  arg4 = (double)w; 
  arg5 = (double)h; 
  (arg1)->ensureVisible(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QGraphicsView_ensureVisible6(QGraphicsView * self, QGraphicsItem * item, int xmargin, int ymargin) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsItem *arg2 = (QGraphicsItem *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QGraphicsItem **)&item; 
  arg3 = (int)xmargin; 
  arg4 = (int)ymargin; 
  (arg1)->ensureVisible((QGraphicsItem const *)arg2,arg3,arg4);
}


SWIGEXPORT void QGraphicsView_ensureVisible7(QGraphicsView * self, QGraphicsItem * item, int xmargin) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsItem *arg2 = (QGraphicsItem *) 0 ;
  int arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QGraphicsItem **)&item; 
  arg3 = (int)xmargin; 
  (arg1)->ensureVisible((QGraphicsItem const *)arg2,arg3);
}


SWIGEXPORT void QGraphicsView_ensureVisible8(QGraphicsView * self, QGraphicsItem * item) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsItem *arg2 = (QGraphicsItem *) 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QGraphicsItem **)&item; 
  (arg1)->ensureVisible((QGraphicsItem const *)arg2);
}


SWIGEXPORT void QGraphicsView_fitInView(QGraphicsView * self, QRectF * rect, Qt::AspectRatioMode aspectRadioMode) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRectF *arg2 = 0 ;
  Qt::AspectRatioMode arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QRectF **)&rect;
  arg3 = (Qt::AspectRatioMode)aspectRadioMode; 
  (arg1)->fitInView((QRectF const &)*arg2,arg3);
}


SWIGEXPORT void QGraphicsView_fitInView1(QGraphicsView * self, QRectF * rect) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRectF *arg2 = 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QRectF **)&rect;
  (arg1)->fitInView((QRectF const &)*arg2);
}


SWIGEXPORT void QGraphicsView_fitInView2(QGraphicsView * self, double x, double y, double w, double h, Qt::AspectRatioMode aspectRadioMode) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  Qt::AspectRatioMode arg6 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  arg4 = (double)w; 
  arg5 = (double)h; 
  arg6 = (Qt::AspectRatioMode)aspectRadioMode; 
  (arg1)->fitInView(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QGraphicsView_fitInView3(QGraphicsView * self, double x, double y, double w, double h) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  arg4 = (double)w; 
  arg5 = (double)h; 
  (arg1)->fitInView(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QGraphicsView_fitInView4(QGraphicsView * self, QGraphicsItem * item, Qt::AspectRatioMode aspectRadioMode) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsItem *arg2 = (QGraphicsItem *) 0 ;
  Qt::AspectRatioMode arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QGraphicsItem **)&item; 
  arg3 = (Qt::AspectRatioMode)aspectRadioMode; 
  (arg1)->fitInView((QGraphicsItem const *)arg2,arg3);
}


SWIGEXPORT void QGraphicsView_fitInView5(QGraphicsView * self, QGraphicsItem * item) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QGraphicsItem *arg2 = (QGraphicsItem *) 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QGraphicsItem **)&item; 
  (arg1)->fitInView((QGraphicsItem const *)arg2);
}


SWIGEXPORT QGraphicsItem * QGraphicsView_itemAt(QGraphicsView const * self, QPoint * pos) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPoint *arg2 = 0 ;
  QGraphicsItem *result = 0 ;
  QGraphicsItem * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QPoint **)&pos;
  result = (QGraphicsItem *)((QGraphicsView const *)arg1)->itemAt((QPoint const &)*arg2);
  *(QGraphicsItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QGraphicsItem * QGraphicsView_itemAt1(QGraphicsView const * self, int x, int y) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  int arg2 ;
  int arg3 ;
  QGraphicsItem *result = 0 ;
  QGraphicsItem * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  result = (QGraphicsItem *)((QGraphicsView const *)arg1)->itemAt(arg2,arg3);
  *(QGraphicsItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPointF * QGraphicsView_mapToScene(QGraphicsView const * self, QPoint * point) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPoint *arg2 = 0 ;
  QPointF * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QPoint **)&point;
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QGraphicsView const *)arg1)->mapToScene((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT QPolygonF * QGraphicsView_mapToScene1(QGraphicsView const * self, QRect * rect) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRect *arg2 = 0 ;
  QPolygonF * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QRect **)&rect;
  *(QPolygonF **)&cresult = new QPolygonF((const QPolygonF &)((QGraphicsView const *)arg1)->mapToScene((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QPolygonF * QGraphicsView_mapToScene2(QGraphicsView const * self, QPolygon * polygon) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPolygon *arg2 = 0 ;
  QPolygonF * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QPolygon **)&polygon;
  *(QPolygonF **)&cresult = new QPolygonF((const QPolygonF &)((QGraphicsView const *)arg1)->mapToScene((QPolygon const &)*arg2));
  return cresult;
}


SWIGEXPORT QPainterPath * QGraphicsView_mapToScene3(QGraphicsView const * self, QPainterPath * path) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPainterPath *arg2 = 0 ;
  QPainterPath * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QPainterPath **)&path;
  *(QPainterPath **)&cresult = new QPainterPath((const QPainterPath &)((QGraphicsView const *)arg1)->mapToScene((QPainterPath const &)*arg2));
  return cresult;
}


SWIGEXPORT QPoint * QGraphicsView_mapFromScene(QGraphicsView const * self, QPointF * point) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPointF *arg2 = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QPointF **)&point;
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QGraphicsView const *)arg1)->mapFromScene((QPointF const &)*arg2));
  return cresult;
}


SWIGEXPORT QPolygon * QGraphicsView_mapFromScene1(QGraphicsView const * self, QRectF * rect) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRectF *arg2 = 0 ;
  QPolygon * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QRectF **)&rect;
  *(QPolygon **)&cresult = new QPolygon((const QPolygon &)((QGraphicsView const *)arg1)->mapFromScene((QRectF const &)*arg2));
  return cresult;
}


SWIGEXPORT QPolygon * QGraphicsView_mapFromScene2(QGraphicsView const * self, QPolygonF * polygon) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPolygonF *arg2 = 0 ;
  QPolygon * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QPolygonF **)&polygon;
  *(QPolygon **)&cresult = new QPolygon((const QPolygon &)((QGraphicsView const *)arg1)->mapFromScene((QPolygonF const &)*arg2));
  return cresult;
}


SWIGEXPORT QPainterPath * QGraphicsView_mapFromScene3(QGraphicsView const * self, QPainterPath * path) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QPainterPath *arg2 = 0 ;
  QPainterPath * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QPainterPath **)&path;
  *(QPainterPath **)&cresult = new QPainterPath((const QPainterPath &)((QGraphicsView const *)arg1)->mapFromScene((QPainterPath const &)*arg2));
  return cresult;
}


SWIGEXPORT QPointF * QGraphicsView_mapToScene4(QGraphicsView const * self, int x, int y) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  int arg2 ;
  int arg3 ;
  QPointF * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QGraphicsView const *)arg1)->mapToScene(arg2,arg3));
  return cresult;
}


SWIGEXPORT QPolygonF * QGraphicsView_mapToScene5(QGraphicsView const * self, int x, int y, int w, int h) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QPolygonF * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  *(QPolygonF **)&cresult = new QPolygonF((const QPolygonF &)((QGraphicsView const *)arg1)->mapToScene(arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QPoint * QGraphicsView_mapFromScene4(QGraphicsView const * self, double x, double y) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  QPoint * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QGraphicsView const *)arg1)->mapFromScene(arg2,arg3));
  return cresult;
}


SWIGEXPORT QPolygon * QGraphicsView_mapFromScene5(QGraphicsView const * self, double x, double y, double w, double h) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  QPolygon * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  arg4 = (double)w; 
  arg5 = (double)h; 
  *(QPolygon **)&cresult = new QPolygon((const QPolygon &)((QGraphicsView const *)arg1)->mapFromScene(arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QBrush * QGraphicsView_backgroundBrush(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QBrush * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QGraphicsView const *)arg1)->backgroundBrush());
  return cresult;
}


SWIGEXPORT void QGraphicsView_setBackgroundBrush(QGraphicsView * self, QBrush * brush) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QBrush *arg2 = 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QBrush **)&brush;
  (arg1)->setBackgroundBrush((QBrush const &)*arg2);
}


SWIGEXPORT QBrush * QGraphicsView_foregroundBrush(QGraphicsView const * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QBrush * cresult ;
  
  arg1 = *(QGraphicsView **)&self; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QGraphicsView const *)arg1)->foregroundBrush());
  return cresult;
}


SWIGEXPORT void QGraphicsView_setForegroundBrush(QGraphicsView * self, QBrush * brush) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QBrush *arg2 = 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QBrush **)&brush;
  (arg1)->setForegroundBrush((QBrush const &)*arg2);
}


SWIGEXPORT void QGraphicsView_invalidateScene(QGraphicsView * self, QRectF * rect, QGraphicsScene::SceneLayers layers) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRectF *arg2 = 0 ;
  QGraphicsScene::SceneLayers arg3 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QRectF **)&rect;
  arg3 = (QGraphicsScene::SceneLayers)layers; 
  (arg1)->invalidateScene((QRectF const &)*arg2,arg3);
}


SWIGEXPORT void QGraphicsView_invalidateScene1(QGraphicsView * self, QRectF * rect) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRectF *arg2 = 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QRectF **)&rect;
  (arg1)->invalidateScene((QRectF const &)*arg2);
}


SWIGEXPORT void QGraphicsView_invalidateScene2(QGraphicsView * self) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  (arg1)->invalidateScene();
}


SWIGEXPORT void QGraphicsView_updateSceneRect(QGraphicsView * self, QRectF * rect) {
  QGraphicsView *arg1 = (QGraphicsView *) 0 ;
  QRectF *arg2 = 0 ;
  
  arg1 = *(QGraphicsView **)&self; 
  arg2 = *(QRectF **)&rect;
  (arg1)->updateSceneRect((QRectF const &)*arg2);
}


SWIGEXPORT long Modula3_QGraphicsViewToQAbstractScrollArea(long objectRef) {
    long baseptr = 0;
    *(QAbstractScrollArea **)&baseptr = *(QGraphicsView **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

