/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qlayoutitem.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void Delete_QLayoutItem(QLayoutItem * self) {
  QLayoutItem *arg1 = (QLayoutItem *) 0 ;
  
  arg1 = *(QLayoutItem **)&self; 
  delete arg1;
}


SWIGEXPORT bool QLayoutItem_hasHeightForWidth(QLayoutItem const * self) {
  QLayoutItem *arg1 = (QLayoutItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QLayoutItem **)&self; 
  result = (bool)((QLayoutItem const *)arg1)->hasHeightForWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QLayoutItem_heightForWidth(QLayoutItem const * self, int m3arg2) {
  QLayoutItem *arg1 = (QLayoutItem *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QLayoutItem **)&self; 
  arg2 = (int)m3arg2; 
  result = (int)((QLayoutItem const *)arg1)->heightForWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QLayoutItem_minimumHeightForWidth(QLayoutItem const * self, int m3arg2) {
  QLayoutItem *arg1 = (QLayoutItem *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QLayoutItem **)&self; 
  arg2 = (int)m3arg2; 
  result = (int)((QLayoutItem const *)arg1)->minimumHeightForWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QLayoutItem_invalidate(QLayoutItem * self) {
  QLayoutItem *arg1 = (QLayoutItem *) 0 ;
  
  arg1 = *(QLayoutItem **)&self; 
  (arg1)->invalidate();
}


SWIGEXPORT QWidget * QLayoutItem_widget(QLayoutItem * self) {
  QLayoutItem *arg1 = (QLayoutItem *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QLayoutItem **)&self; 
  result = (QWidget *)(arg1)->widget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLayout * QLayoutItem_layout(QLayoutItem * self) {
  QLayoutItem *arg1 = (QLayoutItem *) 0 ;
  QLayout *result = 0 ;
  QLayout * cresult ;
  
  arg1 = *(QLayoutItem **)&self; 
  result = (QLayout *)(arg1)->layout();
  *(QLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSpacerItem * QLayoutItem_spacerItem(QLayoutItem * self) {
  QLayoutItem *arg1 = (QLayoutItem *) 0 ;
  QSpacerItem *result = 0 ;
  QSpacerItem * cresult ;
  
  arg1 = *(QLayoutItem **)&self; 
  result = (QSpacerItem *)(arg1)->spacerItem();
  *(QSpacerItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QLayoutItem_alignment(QLayoutItem const * self) {
  QLayoutItem *arg1 = (QLayoutItem *) 0 ;
  Qt::Alignment result;
  int cresult ;
  
  arg1 = *(QLayoutItem **)&self; 
  result = ((QLayoutItem const *)arg1)->alignment();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT void QLayoutItem_setAlignment(QLayoutItem * self, int a) {
  QLayoutItem *arg1 = (QLayoutItem *) 0 ;
  Qt::Alignment arg2 ;
  
  arg1 = *(QLayoutItem **)&self; 
  arg2 = (Qt::Alignment)a; 
  (arg1)->setAlignment(arg2);
}


SWIGEXPORT int QLayoutItem_controlTypes(QLayoutItem const * self) {
  QLayoutItem *arg1 = (QLayoutItem *) 0 ;
  QSizePolicy::ControlTypes result;
  int cresult ;
  
  arg1 = *(QLayoutItem **)&self; 
  result = ((QLayoutItem const *)arg1)->controlTypes();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT QSpacerItem * New_QSpacerItem0(int w, int h, QSizePolicy::Policy hData, QSizePolicy::Policy vData) {
  int arg1 ;
  int arg2 ;
  QSizePolicy::Policy arg3 ;
  QSizePolicy::Policy arg4 ;
  QSpacerItem *result = 0 ;
  QSpacerItem * cresult ;
  
  arg1 = (int)w; 
  arg2 = (int)h; 
  arg3 = (QSizePolicy::Policy)hData; 
  arg4 = (QSizePolicy::Policy)vData; 
  result = (QSpacerItem *)new QSpacerItem(arg1,arg2,arg3,arg4);
  *(QSpacerItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSpacerItem * New_QSpacerItem1(int w, int h, QSizePolicy::Policy hData) {
  int arg1 ;
  int arg2 ;
  QSizePolicy::Policy arg3 ;
  QSpacerItem *result = 0 ;
  QSpacerItem * cresult ;
  
  arg1 = (int)w; 
  arg2 = (int)h; 
  arg3 = (QSizePolicy::Policy)hData; 
  result = (QSpacerItem *)new QSpacerItem(arg1,arg2,arg3);
  *(QSpacerItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSpacerItem * New_QSpacerItem2(int w, int h) {
  int arg1 ;
  int arg2 ;
  QSpacerItem *result = 0 ;
  QSpacerItem * cresult ;
  
  arg1 = (int)w; 
  arg2 = (int)h; 
  result = (QSpacerItem *)new QSpacerItem(arg1,arg2);
  *(QSpacerItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QSpacerItem_changeSize(QSpacerItem * self, int w, int h, QSizePolicy::Policy hData, QSizePolicy::Policy vData) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  int arg2 ;
  int arg3 ;
  QSizePolicy::Policy arg4 ;
  QSizePolicy::Policy arg5 ;
  
  arg1 = *(QSpacerItem **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  arg4 = (QSizePolicy::Policy)hData; 
  arg5 = (QSizePolicy::Policy)vData; 
  (arg1)->changeSize(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QSpacerItem_changeSize1(QSpacerItem * self, int w, int h, QSizePolicy::Policy hData) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  int arg2 ;
  int arg3 ;
  QSizePolicy::Policy arg4 ;
  
  arg1 = *(QSpacerItem **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  arg4 = (QSizePolicy::Policy)hData; 
  (arg1)->changeSize(arg2,arg3,arg4);
}


SWIGEXPORT void QSpacerItem_changeSize2(QSpacerItem * self, int w, int h) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QSpacerItem **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  (arg1)->changeSize(arg2,arg3);
}


SWIGEXPORT QSize * QSpacerItem_sizeHint(QSpacerItem const * self) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QSpacerItem **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QSpacerItem const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QSize * QSpacerItem_minimumSize(QSpacerItem const * self) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QSpacerItem **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QSpacerItem const *)arg1)->minimumSize());
  return cresult;
}


SWIGEXPORT QSize * QSpacerItem_maximumSize(QSpacerItem const * self) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QSpacerItem **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QSpacerItem const *)arg1)->maximumSize());
  return cresult;
}


SWIGEXPORT int QSpacerItem_expandingDirections(QSpacerItem const * self) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  Qt::Orientations result;
  int cresult ;
  
  arg1 = *(QSpacerItem **)&self; 
  result = ((QSpacerItem const *)arg1)->expandingDirections();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT bool QSpacerItem_isEmpty(QSpacerItem const * self) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QSpacerItem **)&self; 
  result = (bool)((QSpacerItem const *)arg1)->isEmpty();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSpacerItem_setGeometry(QSpacerItem * self, QRect * m3arg2) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QSpacerItem **)&self; 
  arg2 = *(QRect **)&m3arg2;
  (arg1)->setGeometry((QRect const &)*arg2);
}


SWIGEXPORT QRect * QSpacerItem_geometry(QSpacerItem const * self) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QSpacerItem **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QSpacerItem const *)arg1)->geometry());
  return cresult;
}


SWIGEXPORT QSpacerItem * QSpacerItem_spacerItem(QSpacerItem * self) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  QSpacerItem *result = 0 ;
  QSpacerItem * cresult ;
  
  arg1 = *(QSpacerItem **)&self; 
  result = (QSpacerItem *)(arg1)->spacerItem();
  *(QSpacerItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QSpacerItem(QSpacerItem * self) {
  QSpacerItem *arg1 = (QSpacerItem *) 0 ;
  
  arg1 = *(QSpacerItem **)&self; 
  delete arg1;
}


SWIGEXPORT QWidgetItem * New_QWidgetItem0(QWidget * w) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidgetItem *result = 0 ;
  QWidgetItem * cresult ;
  
  arg1 = *(QWidget **)&w; 
  result = (QWidgetItem *)new QWidgetItem(arg1);
  *(QWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QWidgetItem_sizeHint(QWidgetItem const * self) {
  QWidgetItem *arg1 = (QWidgetItem *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidgetItem **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidgetItem const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QSize * QWidgetItem_minimumSize(QWidgetItem const * self) {
  QWidgetItem *arg1 = (QWidgetItem *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidgetItem **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidgetItem const *)arg1)->minimumSize());
  return cresult;
}


SWIGEXPORT QSize * QWidgetItem_maximumSize(QWidgetItem const * self) {
  QWidgetItem *arg1 = (QWidgetItem *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidgetItem **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidgetItem const *)arg1)->maximumSize());
  return cresult;
}


SWIGEXPORT int QWidgetItem_expandingDirections(QWidgetItem const * self) {
  QWidgetItem *arg1 = (QWidgetItem *) 0 ;
  Qt::Orientations result;
  int cresult ;
  
  arg1 = *(QWidgetItem **)&self; 
  result = ((QWidgetItem const *)arg1)->expandingDirections();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT bool QWidgetItem_isEmpty(QWidgetItem const * self) {
  QWidgetItem *arg1 = (QWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidgetItem **)&self; 
  result = (bool)((QWidgetItem const *)arg1)->isEmpty();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QWidgetItem_setGeometry(QWidgetItem * self, QRect * m3arg2) {
  QWidgetItem *arg1 = (QWidgetItem *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QWidgetItem **)&self; 
  arg2 = *(QRect **)&m3arg2;
  (arg1)->setGeometry((QRect const &)*arg2);
}


SWIGEXPORT QRect * QWidgetItem_geometry(QWidgetItem const * self) {
  QWidgetItem *arg1 = (QWidgetItem *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QWidgetItem **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QWidgetItem const *)arg1)->geometry());
  return cresult;
}


SWIGEXPORT QWidget * QWidgetItem_widget(QWidgetItem * self) {
  QWidgetItem *arg1 = (QWidgetItem *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QWidgetItem **)&self; 
  result = (QWidget *)(arg1)->widget();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QWidgetItem_hasHeightForWidth(QWidgetItem const * self) {
  QWidgetItem *arg1 = (QWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QWidgetItem **)&self; 
  result = (bool)((QWidgetItem const *)arg1)->hasHeightForWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QWidgetItem_heightForWidth(QWidgetItem const * self, int m3arg2) {
  QWidgetItem *arg1 = (QWidgetItem *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidgetItem **)&self; 
  arg2 = (int)m3arg2; 
  result = (int)((QWidgetItem const *)arg1)->heightForWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QWidgetItem(QWidgetItem * self) {
  QWidgetItem *arg1 = (QWidgetItem *) 0 ;
  
  arg1 = *(QWidgetItem **)&self; 
  delete arg1;
}


SWIGEXPORT QWidgetItemV2 * New_QWidgetItemV20(QWidget * widget) {
  QWidget *arg1 = (QWidget *) 0 ;
  QWidgetItemV2 *result = 0 ;
  QWidgetItemV2 * cresult ;
  
  arg1 = *(QWidget **)&widget; 
  result = (QWidgetItemV2 *)new QWidgetItemV2(arg1);
  *(QWidgetItemV2 **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QWidgetItemV2(QWidgetItemV2 * self) {
  QWidgetItemV2 *arg1 = (QWidgetItemV2 *) 0 ;
  
  arg1 = *(QWidgetItemV2 **)&self; 
  delete arg1;
}


SWIGEXPORT QSize * QWidgetItemV2_sizeHint(QWidgetItemV2 const * self) {
  QWidgetItemV2 *arg1 = (QWidgetItemV2 *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidgetItemV2 **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidgetItemV2 const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QSize * QWidgetItemV2_minimumSize(QWidgetItemV2 const * self) {
  QWidgetItemV2 *arg1 = (QWidgetItemV2 *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidgetItemV2 **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidgetItemV2 const *)arg1)->minimumSize());
  return cresult;
}


SWIGEXPORT QSize * QWidgetItemV2_maximumSize(QWidgetItemV2 const * self) {
  QWidgetItemV2 *arg1 = (QWidgetItemV2 *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QWidgetItemV2 **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QWidgetItemV2 const *)arg1)->maximumSize());
  return cresult;
}


SWIGEXPORT int QWidgetItemV2_heightForWidth(QWidgetItemV2 const * self, int width) {
  QWidgetItemV2 *arg1 = (QWidgetItemV2 *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QWidgetItemV2 **)&self; 
  arg2 = (int)width; 
  result = (int)((QWidgetItemV2 const *)arg1)->heightForWidth(arg2);
  cresult = result; 
  return cresult;
}


#ifdef __cplusplus
}
#endif

