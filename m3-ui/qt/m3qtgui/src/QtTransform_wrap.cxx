/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qtransform.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QTransform * New_QTransform0(Qt::Initialization m3arg1) {
  Qt::Initialization arg1 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = (Qt::Initialization)m3arg1; 
  result = (QTransform *)new QTransform(arg1);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * New_QTransform1() {
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  result = (QTransform *)new QTransform();
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * New_QTransform2(double h11, double h12, double h13, double h21, double h22, double h23, double h31, double h32, double h33) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = (double)h11; 
  arg2 = (double)h12; 
  arg3 = (double)h13; 
  arg4 = (double)h21; 
  arg5 = (double)h22; 
  arg6 = (double)h23; 
  arg7 = (double)h31; 
  arg8 = (double)h32; 
  arg9 = (double)h33; 
  result = (QTransform *)new QTransform(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * New_QTransform3(double h11, double h12, double h13, double h21, double h22, double h23, double h31, double h32) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = (double)h11; 
  arg2 = (double)h12; 
  arg3 = (double)h13; 
  arg4 = (double)h21; 
  arg5 = (double)h22; 
  arg6 = (double)h23; 
  arg7 = (double)h31; 
  arg8 = (double)h32; 
  result = (QTransform *)new QTransform(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * New_QTransform4(double h11, double h12, double h21, double h22, double dx, double dy) {
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = (double)h11; 
  arg2 = (double)h12; 
  arg3 = (double)h21; 
  arg4 = (double)h22; 
  arg5 = (double)dx; 
  arg6 = (double)dy; 
  result = (QTransform *)new QTransform(arg1,arg2,arg3,arg4,arg5,arg6);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * New_QTransform5(QMatrix * mtx) {
  QMatrix *arg1 = 0 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QMatrix **)&mtx;
  result = (QTransform *)new QTransform((QMatrix const &)*arg1);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTransform_isAffine(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (bool)((QTransform const *)arg1)->isAffine();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTransform_isIdentity(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (bool)((QTransform const *)arg1)->isIdentity();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTransform_isInvertible(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (bool)((QTransform const *)arg1)->isInvertible();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTransform_isScaling(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (bool)((QTransform const *)arg1)->isScaling();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTransform_isRotating(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (bool)((QTransform const *)arg1)->isRotating();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTransform_isTranslating(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (bool)((QTransform const *)arg1)->isTranslating();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform::TransformationType QTransform_type(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  QTransform::TransformationType result;
  QTransform::TransformationType cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (QTransform::TransformationType)((QTransform const *)arg1)->type();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_determinant(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->determinant();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_det(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->det();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_m11(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->m11();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_m12(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->m12();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_m13(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->m13();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_m21(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->m21();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_m22(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->m22();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_m23(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->m23();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_m31(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->m31();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_m32(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->m32();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_m33(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->m33();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_dx(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->dx();
  cresult = result; 
  return cresult;
}


SWIGEXPORT double QTransform_dy(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (double)((QTransform const *)arg1)->dy();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTransform_setMatrix(QTransform * self, double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)m11; 
  arg3 = (double)m12; 
  arg4 = (double)m13; 
  arg5 = (double)m21; 
  arg6 = (double)m22; 
  arg7 = (double)m23; 
  arg8 = (double)m31; 
  arg9 = (double)m32; 
  arg10 = (double)m33; 
  (arg1)->setMatrix(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT QTransform * QTransform_inverted(QTransform const * self, bool * invertible) {
  QTransform *arg1 = (QTransform *) 0 ;
  bool *arg2 = (bool *) 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(bool **)&invertible; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)((QTransform const *)arg1)->inverted(arg2));
  return cresult;
}


SWIGEXPORT QTransform * QTransform_inverted1(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)((QTransform const *)arg1)->inverted());
  return cresult;
}


SWIGEXPORT QTransform * QTransform_adjoint(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)((QTransform const *)arg1)->adjoint());
  return cresult;
}


SWIGEXPORT QTransform * QTransform_transposed(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)((QTransform const *)arg1)->transposed());
  return cresult;
}


SWIGEXPORT QTransform * QTransform_translate(QTransform * self, double dx, double dy) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  double arg3 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)dx; 
  arg3 = (double)dy; 
  result = (QTransform *) &(arg1)->translate(arg2,arg3);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_scale(QTransform * self, double sx, double sy) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  double arg3 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)sx; 
  arg3 = (double)sy; 
  result = (QTransform *) &(arg1)->scale(arg2,arg3);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_shear(QTransform * self, double sh, double sv) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  double arg3 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)sh; 
  arg3 = (double)sv; 
  result = (QTransform *) &(arg1)->shear(arg2,arg3);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_rotate(QTransform * self, double a, Qt::Axis axis) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  Qt::Axis arg3 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)a; 
  arg3 = (Qt::Axis)axis; 
  result = (QTransform *) &(arg1)->rotate(arg2,arg3);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_rotate1(QTransform * self, double a) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)a; 
  result = (QTransform *) &(arg1)->rotate(arg2);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_rotateRadians(QTransform * self, double a, Qt::Axis axis) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  Qt::Axis arg3 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)a; 
  arg3 = (Qt::Axis)axis; 
  result = (QTransform *) &(arg1)->rotateRadians(arg2,arg3);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_rotateRadians1(QTransform * self, double a) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)a; 
  result = (QTransform *) &(arg1)->rotateRadians(arg2);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT bool SquareToQuad(QPolygonF * square, QTransform * transformResult) {
  QPolygonF *arg1 = 0 ;
  QTransform *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPolygonF **)&square;
  arg2 = *(QTransform **)&transformResult;
  /*
  if(!arg2) {
     return 0;
    }
  */
  
  result = (bool)QTransform::squareToQuad((QPolygonF const &)*arg1,*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QuadToSquare(QPolygonF * quad, QTransform * transformResult) {
  QPolygonF *arg1 = 0 ;
  QTransform *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPolygonF **)&quad;
  arg2 = *(QTransform **)&transformResult;
  /*
  if(!arg2) {
     return 0;
    }
  */
  
  result = (bool)QTransform::quadToSquare((QPolygonF const &)*arg1,*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QuadToQuad(QPolygonF * one, QPolygonF * two, QTransform * transformResult) {
  QPolygonF *arg1 = 0 ;
  QPolygonF *arg2 = 0 ;
  QTransform *arg3 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPolygonF **)&one;
  arg2 = *(QPolygonF **)&two;
  arg3 = *(QTransform **)&transformResult;
  /*
  if(!arg3) {
     return 0;
    }
  */
  
  result = (bool)QTransform::quadToQuad((QPolygonF const &)*arg1,(QPolygonF const &)*arg2,*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTransform_Op_Equals(QTransform const * self, QTransform * m3arg2) {
  QTransform *arg1 = (QTransform *) 0 ;
  QTransform *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QTransform **)&m3arg2;
  result = (bool)((QTransform const *)arg1)->operator ==((QTransform const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTransform_Op_NotEquals(QTransform const * self, QTransform * m3arg2) {
  QTransform *arg1 = (QTransform *) 0 ;
  QTransform *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QTransform **)&m3arg2;
  result = (bool)((QTransform const *)arg1)->operator !=((QTransform const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_Op_TimesEquals(QTransform * self, QTransform * m3arg2) {
  QTransform *arg1 = (QTransform *) 0 ;
  QTransform *arg2 = 0 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QTransform **)&m3arg2;
  result = (QTransform *) &(arg1)->operator *=((QTransform const &)*arg2);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_Op_Assign(QTransform * self, QTransform * m3arg2) {
  QTransform *arg1 = (QTransform *) 0 ;
  QTransform *arg2 = 0 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QTransform **)&m3arg2;
  result = (QTransform *) &(arg1)->operator =((QTransform const &)*arg2);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTransform_reset(QTransform * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  
  arg1 = *(QTransform **)&self; 
  (arg1)->reset();
}


SWIGEXPORT QPoint * QTransform_map(QTransform const * self, QPoint * p) {
  QTransform *arg1 = (QTransform *) 0 ;
  QPoint *arg2 = 0 ;
  QPoint * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QPoint **)&p;
  *(QPoint **)&cresult = new QPoint((const QPoint &)((QTransform const *)arg1)->map((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT QPointF * QTransform_map1(QTransform const * self, QPointF * p) {
  QTransform *arg1 = (QTransform *) 0 ;
  QPointF *arg2 = 0 ;
  QPointF * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QPointF **)&p;
  *(QPointF **)&cresult = new QPointF((const QPointF &)((QTransform const *)arg1)->map((QPointF const &)*arg2));
  return cresult;
}


SWIGEXPORT QLine * QTransform_map2(QTransform const * self, QLine * l) {
  QTransform *arg1 = (QTransform *) 0 ;
  QLine *arg2 = 0 ;
  QLine * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QLine **)&l;
  *(QLine **)&cresult = new QLine((const QLine &)((QTransform const *)arg1)->map((QLine const &)*arg2));
  return cresult;
}


SWIGEXPORT QLineF * QTransform_map3(QTransform const * self, QLineF * l) {
  QTransform *arg1 = (QTransform *) 0 ;
  QLineF *arg2 = 0 ;
  QLineF * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QLineF **)&l;
  *(QLineF **)&cresult = new QLineF((const QLineF &)((QTransform const *)arg1)->map((QLineF const &)*arg2));
  return cresult;
}


SWIGEXPORT QPolygonF * QTransform_map4(QTransform const * self, QPolygonF * a) {
  QTransform *arg1 = (QTransform *) 0 ;
  QPolygonF *arg2 = 0 ;
  QPolygonF * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QPolygonF **)&a;
  *(QPolygonF **)&cresult = new QPolygonF((const QPolygonF &)((QTransform const *)arg1)->map((QPolygonF const &)*arg2));
  return cresult;
}


SWIGEXPORT QPolygon * QTransform_map5(QTransform const * self, QPolygon * a) {
  QTransform *arg1 = (QTransform *) 0 ;
  QPolygon *arg2 = 0 ;
  QPolygon * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QPolygon **)&a;
  *(QPolygon **)&cresult = new QPolygon((const QPolygon &)((QTransform const *)arg1)->map((QPolygon const &)*arg2));
  return cresult;
}


SWIGEXPORT QRegion * QTransform_map6(QTransform const * self, QRegion * r) {
  QTransform *arg1 = (QTransform *) 0 ;
  QRegion *arg2 = 0 ;
  QRegion * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QRegion **)&r;
  *(QRegion **)&cresult = new QRegion((const QRegion &)((QTransform const *)arg1)->map((QRegion const &)*arg2));
  return cresult;
}


SWIGEXPORT QPainterPath * QTransform_map7(QTransform const * self, QPainterPath * p) {
  QTransform *arg1 = (QTransform *) 0 ;
  QPainterPath *arg2 = 0 ;
  QPainterPath * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QPainterPath **)&p;
  *(QPainterPath **)&cresult = new QPainterPath((const QPainterPath &)((QTransform const *)arg1)->map((QPainterPath const &)*arg2));
  return cresult;
}


SWIGEXPORT QPolygon * QTransform_mapToPolygon(QTransform const * self, QRect * r) {
  QTransform *arg1 = (QTransform *) 0 ;
  QRect *arg2 = 0 ;
  QPolygon * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QRect **)&r;
  *(QPolygon **)&cresult = new QPolygon((const QPolygon &)((QTransform const *)arg1)->mapToPolygon((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QRect * QTransform_mapRect(QTransform const * self, QRect * m3arg2) {
  QTransform *arg1 = (QTransform *) 0 ;
  QRect *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QRect **)&m3arg2;
  *(QRect **)&cresult = new QRect((const QRect &)((QTransform const *)arg1)->mapRect((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QRectF * QTransform_mapRect1(QTransform const * self, QRectF * m3arg2) {
  QTransform *arg1 = (QTransform *) 0 ;
  QRectF *arg2 = 0 ;
  QRectF * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = *(QRectF **)&m3arg2;
  *(QRectF **)&cresult = new QRectF((const QRectF &)((QTransform const *)arg1)->mapRect((QRectF const &)*arg2));
  return cresult;
}


SWIGEXPORT void QTransform_map8(QTransform const * self, int x, int y, int * tx, int * ty) {
  QTransform *arg1 = (QTransform *) 0 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = *(int **)&tx; 
  arg5 = *(int **)&ty; 
  ((QTransform const *)arg1)->map(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void QTransform_map9(QTransform const * self, double x, double y, double * tx, double * ty) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)x; 
  arg3 = (double)y; 
  arg4 = *(double **)&tx; 
  arg5 = *(double **)&ty; 
  ((QTransform const *)arg1)->map(arg2,arg3,arg4,arg5);
}


SWIGEXPORT QMatrix * QTransform_toAffine(QTransform const * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  QMatrix *result = 0 ;
  QMatrix * cresult ;
  
  arg1 = *(QTransform **)&self; 
  result = (QMatrix *) &((QTransform const *)arg1)->toAffine();
  *(QMatrix **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_Op_TimesEquals1(QTransform * self, double div) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)div; 
  result = (QTransform *) &(arg1)->operator *=(arg2);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_Op_DivEquals(QTransform * self, double div) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)div; 
  result = (QTransform *) &(arg1)->operator /=(arg2);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_Op_PlusEquals(QTransform * self, double div) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)div; 
  result = (QTransform *) &(arg1)->operator +=(arg2);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * QTransform_Op_MinusEquals(QTransform * self, double div) {
  QTransform *arg1 = (QTransform *) 0 ;
  double arg2 ;
  QTransform *result = 0 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&self; 
  arg2 = (double)div; 
  result = (QTransform *) &(arg1)->operator -=(arg2);
  *(QTransform **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTransform * FromTranslate(double dx, double dy) {
  double arg1 ;
  double arg2 ;
  QTransform * cresult ;
  
  arg1 = (double)dx; 
  arg2 = (double)dy; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)QTransform::fromTranslate(arg1,arg2));
  return cresult;
}


SWIGEXPORT QTransform * FromScale(double dx, double dy) {
  double arg1 ;
  double arg2 ;
  QTransform * cresult ;
  
  arg1 = (double)dx; 
  arg2 = (double)dy; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)QTransform::fromScale(arg1,arg2));
  return cresult;
}


SWIGEXPORT void Delete_QTransform(QTransform * self) {
  QTransform *arg1 = (QTransform *) 0 ;
  
  arg1 = *(QTransform **)&self; 
  delete arg1;
}


#ifdef __cplusplus
}
#endif

