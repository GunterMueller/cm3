/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qdesktopwidget.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QDesktopWidget * New_QDesktopWidget0() {
  QDesktopWidget *result = 0 ;
  QDesktopWidget * cresult ;
  
  result = (QDesktopWidget *)new QDesktopWidget();
  *(QDesktopWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QDesktopWidget(QDesktopWidget * self) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  
  arg1 = *(QDesktopWidget **)&self; 
  delete arg1;
}


SWIGEXPORT bool QDesktopWidget_isVirtualDesktop(QDesktopWidget const * self) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  result = (bool)((QDesktopWidget const *)arg1)->isVirtualDesktop();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDesktopWidget_numScreens(QDesktopWidget const * self) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  result = (int)((QDesktopWidget const *)arg1)->numScreens();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDesktopWidget_screenCount(QDesktopWidget const * self) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  result = (int)((QDesktopWidget const *)arg1)->screenCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDesktopWidget_primaryScreen(QDesktopWidget const * self) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  result = (int)((QDesktopWidget const *)arg1)->primaryScreen();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDesktopWidget_screenNumber(QDesktopWidget const * self, QWidget * widget) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  arg2 = *(QWidget **)&widget; 
  result = (int)((QDesktopWidget const *)arg1)->screenNumber((QWidget const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDesktopWidget_screenNumber1(QDesktopWidget const * self) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  result = (int)((QDesktopWidget const *)arg1)->screenNumber();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QDesktopWidget_screenNumber2(QDesktopWidget const * self, QPoint * m3arg2) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  QPoint *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  arg2 = *(QPoint **)&m3arg2;
  result = (int)((QDesktopWidget const *)arg1)->screenNumber((QPoint const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QDesktopWidget_screen(QDesktopWidget * self, int screen) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  int arg2 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  arg2 = (int)screen; 
  result = (QWidget *)(arg1)->screen(arg2);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QDesktopWidget_screen1(QDesktopWidget * self) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  result = (QWidget *)(arg1)->screen();
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QDesktopWidget_screenGeometry(QDesktopWidget const * self, int screen) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  int arg2 ;
  QRect * cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  arg2 = (int)screen; 
  *(QRect **)&cresult = new QRect((const QRect &)((QDesktopWidget const *)arg1)->screenGeometry(arg2));
  return cresult;
}


SWIGEXPORT QRect * QDesktopWidget_screenGeometry1(QDesktopWidget const * self) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QDesktopWidget const *)arg1)->screenGeometry());
  return cresult;
}


SWIGEXPORT QRect * QDesktopWidget_screenGeometry2(QDesktopWidget const * self, QWidget * widget) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  arg2 = *(QWidget **)&widget; 
  *(QRect **)&cresult = new QRect((const QRect &)((QDesktopWidget const *)arg1)->screenGeometry((QWidget const *)arg2));
  return cresult;
}


SWIGEXPORT QRect * QDesktopWidget_screenGeometry3(QDesktopWidget const * self, QPoint * point) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  QPoint *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  arg2 = *(QPoint **)&point;
  *(QRect **)&cresult = new QRect((const QRect &)((QDesktopWidget const *)arg1)->screenGeometry((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT QRect * QDesktopWidget_availableGeometry(QDesktopWidget const * self, int screen) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  int arg2 ;
  QRect * cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  arg2 = (int)screen; 
  *(QRect **)&cresult = new QRect((const QRect &)((QDesktopWidget const *)arg1)->availableGeometry(arg2));
  return cresult;
}


SWIGEXPORT QRect * QDesktopWidget_availableGeometry1(QDesktopWidget const * self) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QDesktopWidget const *)arg1)->availableGeometry());
  return cresult;
}


SWIGEXPORT QRect * QDesktopWidget_availableGeometry2(QDesktopWidget const * self, QWidget * widget) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  arg2 = *(QWidget **)&widget; 
  *(QRect **)&cresult = new QRect((const QRect &)((QDesktopWidget const *)arg1)->availableGeometry((QWidget const *)arg2));
  return cresult;
}


SWIGEXPORT QRect * QDesktopWidget_availableGeometry3(QDesktopWidget const * self, QPoint * point) {
  QDesktopWidget *arg1 = (QDesktopWidget *) 0 ;
  QPoint *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QDesktopWidget **)&self; 
  arg2 = *(QPoint **)&point;
  *(QRect **)&cresult = new QRect((const QRect &)((QDesktopWidget const *)arg1)->availableGeometry((QPoint const &)*arg2));
  return cresult;
}


SWIGEXPORT long Modula3_QDesktopWidgetToQWidget(long objectRef) {
    long baseptr = 0;
    *(QWidget **)&baseptr = *(QDesktopWidget **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

