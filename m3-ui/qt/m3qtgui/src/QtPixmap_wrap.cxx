/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qpixmap.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QPixmap * New_QPixmap0() {
  QPixmap *result = 0 ;
  QPixmap * cresult ;
  
  result = (QPixmap *)new QPixmap();
  *(QPixmap **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPixmap * New_QPixmap1(int w, int h) {
  int arg1 ;
  int arg2 ;
  QPixmap *result = 0 ;
  QPixmap * cresult ;
  
  arg1 = (int)w; 
  arg2 = (int)h; 
  result = (QPixmap *)new QPixmap(arg1,arg2);
  *(QPixmap **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPixmap * New_QPixmap2(QSize * m3arg1) {
  QSize *arg1 = 0 ;
  QPixmap *result = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QSize **)&m3arg1;
  result = (QPixmap *)new QPixmap((QSize const &)*arg1);
  *(QPixmap **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPixmap * New_QPixmap3(QString * fileName, char * format, int flags) {
  QString *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  Qt::ImageConversionFlags arg3 ;
  QPixmap *result = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QString **)&fileName;
  {
    arg2 = format;
  }
  arg3 = (Qt::ImageConversionFlags)flags; 
  result = (QPixmap *)new QPixmap((QString const &)*arg1,(char const *)arg2,arg3);
  *(QPixmap **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPixmap * New_QPixmap4(QString * fileName, char * format) {
  QString *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  QPixmap *result = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QString **)&fileName;
  {
    arg2 = format;
  }
  result = (QPixmap *)new QPixmap((QString const &)*arg1,(char const *)arg2);
  *(QPixmap **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPixmap * New_QPixmap5(QString * fileName) {
  QString *arg1 = 0 ;
  QPixmap *result = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QString **)&fileName;
  result = (QPixmap *)new QPixmap((QString const &)*arg1);
  *(QPixmap **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPixmap * New_QPixmap6(QPixmap const & m3arg1) {
  QPixmap *arg1 = 0 ;
  QPixmap *result = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&m3arg1;
  result = (QPixmap *)new QPixmap((QPixmap const &)*arg1);
  *(QPixmap **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QPixmap(QPixmap * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  
  arg1 = *(QPixmap **)&self; 
  delete arg1;
}


SWIGEXPORT void QPixmap_swap(QPixmap * self, QPixmap & other) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QPixmap *arg2 = 0 ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QPixmap **)&other;
  /*
  if(!arg2) {
     return ;
    }
  */
  
  (arg1)->swap(*arg2);
}


SWIGEXPORT bool QPixmap_isNull(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (bool)((QPixmap const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QPixmap_devType(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (int)((QPixmap const *)arg1)->devType();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QPixmap_width(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (int)((QPixmap const *)arg1)->width();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QPixmap_height(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (int)((QPixmap const *)arg1)->height();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QPixmap_size(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QPixmap const *)arg1)->size());
  return cresult;
}


SWIGEXPORT QRect * QPixmap_rect(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QPixmap const *)arg1)->rect());
  return cresult;
}


SWIGEXPORT int QPixmap_depth(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (int)((QPixmap const *)arg1)->depth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int DefaultDepth() {
  int result;
  int cresult ;
  
  result = (int)QPixmap::defaultDepth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPixmap_fill(QPixmap * self, QColor * fillColor) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QColor *arg2 = 0 ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QColor **)&fillColor;
  (arg1)->fill((QColor const &)*arg2);
}


SWIGEXPORT void QPixmap_fill1(QPixmap * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  
  arg1 = *(QPixmap **)&self; 
  (arg1)->fill();
}


SWIGEXPORT void QPixmap_fill2(QPixmap * self, QWidget const * widget, QPoint * ofs) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QPoint *arg3 = 0 ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QWidget **)&widget; 
  arg3 = *(QPoint **)&ofs;
  (arg1)->fill((QWidget const *)arg2,(QPoint const &)*arg3);
}


SWIGEXPORT void QPixmap_fill3(QPixmap * self, QWidget const * widget, int xofs, int yofs) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QWidget **)&widget; 
  arg3 = (int)xofs; 
  arg4 = (int)yofs; 
  (arg1)->fill((QWidget const *)arg2,arg3,arg4);
}


SWIGEXPORT void QPixmap_setMask(QPixmap * self, QBitmap const & m3arg2) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QBitmap *arg2 = 0 ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QBitmap **)&m3arg2;
  (arg1)->setMask((QBitmap const &)*arg2);
}


SWIGEXPORT bool QPixmap_hasAlpha(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (bool)((QPixmap const *)arg1)->hasAlpha();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_hasAlphaChannel(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (bool)((QPixmap const *)arg1)->hasAlphaChannel();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPixmap * GrabWindow(int m3arg1, int x, int y, int w, int h) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QPixmap * cresult ;
  
  arg1 = (int)m3arg1; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::grabWindow(arg1,arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QPixmap * GrabWindow1(int m3arg1, int x, int y, int w) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QPixmap * cresult ;
  
  arg1 = (int)m3arg1; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::grabWindow(arg1,arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QPixmap * GrabWindow2(int m3arg1, int x, int y) {
  int arg1 ;
  int arg2 ;
  int arg3 ;
  QPixmap * cresult ;
  
  arg1 = (int)m3arg1; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::grabWindow(arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * GrabWindow3(int m3arg1, int x) {
  int arg1 ;
  int arg2 ;
  QPixmap * cresult ;
  
  arg1 = (int)m3arg1; 
  arg2 = (int)x; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::grabWindow(arg1,arg2));
  return cresult;
}


SWIGEXPORT QPixmap * GrabWindow4(int m3arg1) {
  int arg1 ;
  QPixmap * cresult ;
  
  arg1 = (int)m3arg1; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::grabWindow(arg1));
  return cresult;
}


SWIGEXPORT QPixmap * GrabWidget(QWidget * widget, QRect * rect) {
  QWidget *arg1 = (QWidget *) 0 ;
  QRect *arg2 = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QWidget **)&widget; 
  arg2 = *(QRect **)&rect;
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::grabWidget(arg1,(QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QPixmap * GrabWidget1(QWidget * widget, int x, int y, int w, int h) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QPixmap * cresult ;
  
  arg1 = *(QWidget **)&widget; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  arg5 = (int)h; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::grabWidget(arg1,arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QPixmap * GrabWidget2(QWidget * widget, int x, int y, int w) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  QPixmap * cresult ;
  
  arg1 = *(QWidget **)&widget; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)w; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::grabWidget(arg1,arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QPixmap * GrabWidget3(QWidget * widget, int x, int y) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QPixmap * cresult ;
  
  arg1 = *(QWidget **)&widget; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::grabWidget(arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * GrabWidget4(QWidget * widget, int x) {
  QWidget *arg1 = (QWidget *) 0 ;
  int arg2 ;
  QPixmap * cresult ;
  
  arg1 = *(QWidget **)&widget; 
  arg2 = (int)x; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::grabWidget(arg1,arg2));
  return cresult;
}


SWIGEXPORT QPixmap * GrabWidget5(QWidget * widget) {
  QWidget *arg1 = (QWidget *) 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QWidget **)&widget; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::grabWidget(arg1));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_scaled(QPixmap const * self, int w, int h, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  int arg3 ;
  Qt::AspectRatioMode arg4 ;
  Qt::TransformationMode arg5 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  arg4 = (Qt::AspectRatioMode)aspectMode; 
  arg5 = (Qt::TransformationMode)mode; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->scaled(arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_scaled1(QPixmap const * self, int w, int h, Qt::AspectRatioMode aspectMode) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  int arg3 ;
  Qt::AspectRatioMode arg4 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  arg4 = (Qt::AspectRatioMode)aspectMode; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->scaled(arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_scaled2(QPixmap const * self, int w, int h) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  int arg3 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->scaled(arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_scaled3(QPixmap const * self, QSize * s, Qt::AspectRatioMode aspectMode, Qt::TransformationMode mode) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QSize *arg2 = 0 ;
  Qt::AspectRatioMode arg3 ;
  Qt::TransformationMode arg4 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QSize **)&s;
  arg3 = (Qt::AspectRatioMode)aspectMode; 
  arg4 = (Qt::TransformationMode)mode; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->scaled((QSize const &)*arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_scaled4(QPixmap const * self, QSize * s, Qt::AspectRatioMode aspectMode) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QSize *arg2 = 0 ;
  Qt::AspectRatioMode arg3 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QSize **)&s;
  arg3 = (Qt::AspectRatioMode)aspectMode; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->scaled((QSize const &)*arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_scaled5(QPixmap const * self, QSize * s) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QSize *arg2 = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QSize **)&s;
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->scaled((QSize const &)*arg2));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_scaledToWidth(QPixmap const * self, int w, Qt::TransformationMode mode) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  Qt::TransformationMode arg3 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)w; 
  arg3 = (Qt::TransformationMode)mode; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->scaledToWidth(arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_scaledToWidth1(QPixmap const * self, int w) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)w; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->scaledToWidth(arg2));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_scaledToHeight(QPixmap const * self, int h, Qt::TransformationMode mode) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  Qt::TransformationMode arg3 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)h; 
  arg3 = (Qt::TransformationMode)mode; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->scaledToHeight(arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_scaledToHeight1(QPixmap const * self, int h) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)h; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->scaledToHeight(arg2));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_transformed(QPixmap const * self, QMatrix * m3arg2, Qt::TransformationMode mode) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QMatrix *arg2 = 0 ;
  Qt::TransformationMode arg3 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QMatrix **)&m3arg2;
  arg3 = (Qt::TransformationMode)mode; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->transformed((QMatrix const &)*arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_transformed1(QPixmap const * self, QMatrix * m3arg2) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QMatrix *arg2 = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QMatrix **)&m3arg2;
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->transformed((QMatrix const &)*arg2));
  return cresult;
}


SWIGEXPORT QMatrix * TrueMatrix(QMatrix * m, int w, int h) {
  QMatrix *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  QMatrix * cresult ;
  
  arg1 = *(QMatrix **)&m;
  arg2 = (int)w; 
  arg3 = (int)h; 
  *(QMatrix **)&cresult = new QMatrix((const QMatrix &)QPixmap::trueMatrix((QMatrix const &)*arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_transformed2(QPixmap const * self, QTransform * m3arg2, Qt::TransformationMode mode) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QTransform *arg2 = 0 ;
  Qt::TransformationMode arg3 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QTransform **)&m3arg2;
  arg3 = (Qt::TransformationMode)mode; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->transformed((QTransform const &)*arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_transformed3(QPixmap const * self, QTransform * m3arg2) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QTransform *arg2 = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QTransform **)&m3arg2;
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->transformed((QTransform const &)*arg2));
  return cresult;
}


SWIGEXPORT QTransform * TrueMatrix1(QTransform * m, int w, int h) {
  QTransform *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  QTransform * cresult ;
  
  arg1 = *(QTransform **)&m;
  arg2 = (int)w; 
  arg3 = (int)h; 
  *(QTransform **)&cresult = new QTransform((const QTransform &)QPixmap::trueMatrix((QTransform const &)*arg1,arg2,arg3));
  return cresult;
}


SWIGEXPORT QImage * QPixmap_toImage(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QImage * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  *(QImage **)&cresult = new QImage((const QImage &)((QPixmap const *)arg1)->toImage());
  return cresult;
}


SWIGEXPORT QPixmap * FromImage(QImage * image, int flags) {
  QImage *arg1 = 0 ;
  Qt::ImageConversionFlags arg2 ;
  QPixmap * cresult ;
  
  arg1 = *(QImage **)&image;
  arg2 = (Qt::ImageConversionFlags)flags; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::fromImage((QImage const &)*arg1,arg2));
  return cresult;
}


SWIGEXPORT QPixmap * FromImage1(QImage * image) {
  QImage *arg1 = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QImage **)&image;
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)QPixmap::fromImage((QImage const &)*arg1));
  return cresult;
}


SWIGEXPORT bool QPixmap_load(QPixmap * self, QString * fileName, char * format, int flags) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QString *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  Qt::ImageConversionFlags arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QString **)&fileName;
  {
    arg3 = format;
  }
  arg4 = (Qt::ImageConversionFlags)flags; 
  result = (bool)(arg1)->load((QString const &)*arg2,(char const *)arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_load1(QPixmap * self, QString * fileName, char * format) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QString *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QString **)&fileName;
  {
    arg3 = format;
  }
  result = (bool)(arg1)->load((QString const &)*arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_load2(QPixmap * self, QString * fileName) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QString *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QString **)&fileName;
  result = (bool)(arg1)->load((QString const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_loadFromData(QPixmap * self, uchar const * buf, unsigned int len, char * format, int flags) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  uchar *arg2 = (uchar *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  Qt::ImageConversionFlags arg5 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(uchar **)&buf; 
  arg3 = (unsigned int)len; 
  {
    arg4 = format;
  }
  arg5 = (Qt::ImageConversionFlags)flags; 
  result = (bool)(arg1)->loadFromData((uchar const *)arg2,arg3,(char const *)arg4,arg5);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_loadFromData1(QPixmap * self, uchar const * buf, unsigned int len, char * format) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  uchar *arg2 = (uchar *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(uchar **)&buf; 
  arg3 = (unsigned int)len; 
  {
    arg4 = format;
  }
  result = (bool)(arg1)->loadFromData((uchar const *)arg2,arg3,(char const *)arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_loadFromData2(QPixmap * self, uchar const * buf, unsigned int len) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  uchar *arg2 = (uchar *) 0 ;
  unsigned int arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(uchar **)&buf; 
  arg3 = (unsigned int)len; 
  result = (bool)(arg1)->loadFromData((uchar const *)arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_loadFromData3(QPixmap * self, QByteArray * data, char * format, int flags) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QByteArray *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  Qt::ImageConversionFlags arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QByteArray **)&data;
  {
    arg3 = format;
  }
  arg4 = (Qt::ImageConversionFlags)flags; 
  result = (bool)(arg1)->loadFromData((QByteArray const &)*arg2,(char const *)arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_loadFromData4(QPixmap * self, QByteArray * data, char * format) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QByteArray *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QByteArray **)&data;
  {
    arg3 = format;
  }
  result = (bool)(arg1)->loadFromData((QByteArray const &)*arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_loadFromData5(QPixmap * self, QByteArray * data) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QByteArray *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QByteArray **)&data;
  result = (bool)(arg1)->loadFromData((QByteArray const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_save(QPixmap const * self, QString * fileName, char * format, int quality) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QString *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QString **)&fileName;
  {
    arg3 = format;
  }
  arg4 = (int)quality; 
  result = (bool)((QPixmap const *)arg1)->save((QString const &)*arg2,(char const *)arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_save1(QPixmap const * self, QString * fileName, char * format) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QString *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QString **)&fileName;
  {
    arg3 = format;
  }
  result = (bool)((QPixmap const *)arg1)->save((QString const &)*arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_save2(QPixmap const * self, QString * fileName) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QString *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QString **)&fileName;
  result = (bool)((QPixmap const *)arg1)->save((QString const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_save3(QPixmap const * self, QIODevice * device, char * format, int quality) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QIODevice **)&device; 
  {
    arg3 = format;
  }
  arg4 = (int)quality; 
  result = (bool)((QPixmap const *)arg1)->save(arg2,(char const *)arg3,arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_save4(QPixmap const * self, QIODevice * device, char * format) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QIODevice **)&device; 
  {
    arg3 = format;
  }
  result = (bool)((QPixmap const *)arg1)->save(arg2,(char const *)arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_save5(QPixmap const * self, QIODevice * device) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QIODevice **)&device; 
  result = (bool)((QPixmap const *)arg1)->save(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_convertFromImage(QPixmap * self, QImage * img, int flags) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QImage *arg2 = 0 ;
  Qt::ImageConversionFlags arg3 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QImage **)&img;
  arg3 = (Qt::ImageConversionFlags)flags; 
  result = (bool)(arg1)->convertFromImage((QImage const &)*arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_convertFromImage1(QPixmap * self, QImage * img) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QImage *arg2 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QImage **)&img;
  result = (bool)(arg1)->convertFromImage((QImage const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_copy(QPixmap const * self, int x, int y, int width, int height) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  arg4 = (int)width; 
  arg5 = (int)height; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->copy(arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_copy1(QPixmap const * self, QRect * rect) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QRect *arg2 = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = *(QRect **)&rect;
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->copy((QRect const &)*arg2));
  return cresult;
}


SWIGEXPORT QPixmap * QPixmap_copy2(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QPixmap const *)arg1)->copy());
  return cresult;
}


SWIGEXPORT void QPixmap_scroll(QPixmap * self, int dx, int dy, int x, int y, int width, int height, QRegion * exposed) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  QRegion *arg8 = (QRegion *) 0 ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  arg4 = (int)x; 
  arg5 = (int)y; 
  arg6 = (int)width; 
  arg7 = (int)height; 
  arg8 = *(QRegion **)&exposed; 
  (arg1)->scroll(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void QPixmap_scroll1(QPixmap * self, int dx, int dy, int x, int y, int width, int height) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  arg4 = (int)x; 
  arg5 = (int)y; 
  arg6 = (int)width; 
  arg7 = (int)height; 
  (arg1)->scroll(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QPixmap_scroll2(QPixmap * self, int dx, int dy, QRect * rect, QRegion * exposed) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  int arg3 ;
  QRect *arg4 = 0 ;
  QRegion *arg5 = (QRegion *) 0 ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  arg4 = *(QRect **)&rect;
  arg5 = *(QRegion **)&exposed; 
  (arg1)->scroll(arg2,arg3,(QRect const &)*arg4,arg5);
}


SWIGEXPORT void QPixmap_scroll3(QPixmap * self, int dx, int dy, QRect * rect) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  int arg2 ;
  int arg3 ;
  QRect *arg4 = 0 ;
  
  arg1 = *(QPixmap **)&self; 
  arg2 = (int)dx; 
  arg3 = (int)dy; 
  arg4 = *(QRect **)&rect;
  (arg1)->scroll(arg2,arg3,(QRect const &)*arg4);
}


SWIGEXPORT unsigned long QPixmap_cacheKey(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  unsigned long result;
  unsigned long cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (unsigned long)((QPixmap const *)arg1)->cacheKey();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QPixmap_isDetached(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (bool)((QPixmap const *)arg1)->isDetached();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QPixmap_detach(QPixmap * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  
  arg1 = *(QPixmap **)&self; 
  (arg1)->detach();
}


SWIGEXPORT bool QPixmap_isQBitmap(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (bool)((QPixmap const *)arg1)->isQBitmap();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QPaintEngine * QPixmap_paintEngine(QPixmap const * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QPaintEngine *result = 0 ;
  QPaintEngine * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (QPaintEngine *)((QPixmap const *)arg1)->paintEngine();
  *(QPaintEngine **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QPixmap::DataPtr & QPixmap_data_ptr(QPixmap * self) {
  QPixmap *arg1 = (QPixmap *) 0 ;
  QPixmap::DataPtr *result = 0 ;
  QPixmap::DataPtr * cresult ;
  
  arg1 = *(QPixmap **)&self; 
  result = (QPixmap::DataPtr *) &(arg1)->data_ptr();
  *(QPixmap::DataPtr **)&cresult = result; 
  return *cresult;
}


#ifdef __cplusplus
}
#endif

