/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qicon.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QIcon * New_QIcon0() {
  QIcon *result = 0 ;
  QIcon * cresult ;
  
  result = (QIcon *)new QIcon();
  *(QIcon **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QIcon * New_QIcon1(QPixmap * pixmap) {
  QPixmap *arg1 = 0 ;
  QIcon *result = 0 ;
  QIcon * cresult ;
  
  arg1 = *(QPixmap **)&pixmap;
  result = (QIcon *)new QIcon((QPixmap const &)*arg1);
  *(QIcon **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QIcon * New_QIcon2(QIcon const & other) {
  QIcon *arg1 = 0 ;
  QIcon *result = 0 ;
  QIcon * cresult ;
  
  arg1 = *(QIcon **)&other;
  result = (QIcon *)new QIcon((QIcon const &)*arg1);
  *(QIcon **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QIcon * New_QIcon3(QString * fileName) {
  QString *arg1 = 0 ;
  QIcon *result = 0 ;
  QIcon * cresult ;
  
  arg1 = *(QString **)&fileName;
  result = (QIcon *)new QIcon((QString const &)*arg1);
  *(QIcon **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QIcon * New_QIcon4(QIconEngine * engine) {
  QIconEngine *arg1 = (QIconEngine *) 0 ;
  QIcon *result = 0 ;
  QIcon * cresult ;
  
  arg1 = *(QIconEngine **)&engine; 
  result = (QIcon *)new QIcon(arg1);
  *(QIcon **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QIcon * New_QIcon5(QIconEngineV2 * engine) {
  QIconEngineV2 *arg1 = (QIconEngineV2 *) 0 ;
  QIcon *result = 0 ;
  QIcon * cresult ;
  
  arg1 = *(QIconEngineV2 **)&engine; 
  result = (QIcon *)new QIcon(arg1);
  *(QIcon **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QIcon(QIcon * self) {
  QIcon *arg1 = (QIcon *) 0 ;
  
  arg1 = *(QIcon **)&self; 
  delete arg1;
}


SWIGEXPORT void QIcon_swap(QIcon * self, QIcon & other) {
  QIcon *arg1 = (QIcon *) 0 ;
  QIcon *arg2 = 0 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QIcon **)&other;
  /*
  if(!arg2) {
     return ;
    }
  */
  
  (arg1)->swap(*arg2);
}


SWIGEXPORT QPixmap * QIcon_pixmap(QIcon const * self, QSize * size, QIcon::Mode mode, QIcon::State state) {
  QIcon *arg1 = (QIcon *) 0 ;
  QSize *arg2 = 0 ;
  QIcon::Mode arg3 ;
  QIcon::State arg4 ;
  QPixmap * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QSize **)&size;
  arg3 = (QIcon::Mode)mode; 
  arg4 = (QIcon::State)state; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QIcon const *)arg1)->pixmap((QSize const &)*arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QPixmap * QIcon_pixmap1(QIcon const * self, QSize * size, QIcon::Mode mode) {
  QIcon *arg1 = (QIcon *) 0 ;
  QSize *arg2 = 0 ;
  QIcon::Mode arg3 ;
  QPixmap * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QSize **)&size;
  arg3 = (QIcon::Mode)mode; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QIcon const *)arg1)->pixmap((QSize const &)*arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * QIcon_pixmap2(QIcon const * self, QSize * size) {
  QIcon *arg1 = (QIcon *) 0 ;
  QSize *arg2 = 0 ;
  QPixmap * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QSize **)&size;
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QIcon const *)arg1)->pixmap((QSize const &)*arg2));
  return cresult;
}


SWIGEXPORT QPixmap * QIcon_pixmap3(QIcon const * self, int w, int h, QIcon::Mode mode, QIcon::State state) {
  QIcon *arg1 = (QIcon *) 0 ;
  int arg2 ;
  int arg3 ;
  QIcon::Mode arg4 ;
  QIcon::State arg5 ;
  QPixmap * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  arg4 = (QIcon::Mode)mode; 
  arg5 = (QIcon::State)state; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QIcon const *)arg1)->pixmap(arg2,arg3,arg4,arg5));
  return cresult;
}


SWIGEXPORT QPixmap * QIcon_pixmap4(QIcon const * self, int w, int h, QIcon::Mode mode) {
  QIcon *arg1 = (QIcon *) 0 ;
  int arg2 ;
  int arg3 ;
  QIcon::Mode arg4 ;
  QPixmap * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  arg4 = (QIcon::Mode)mode; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QIcon const *)arg1)->pixmap(arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QPixmap * QIcon_pixmap5(QIcon const * self, int w, int h) {
  QIcon *arg1 = (QIcon *) 0 ;
  int arg2 ;
  int arg3 ;
  QPixmap * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = (int)w; 
  arg3 = (int)h; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QIcon const *)arg1)->pixmap(arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * QIcon_pixmap6(QIcon const * self, int extent, QIcon::Mode mode, QIcon::State state) {
  QIcon *arg1 = (QIcon *) 0 ;
  int arg2 ;
  QIcon::Mode arg3 ;
  QIcon::State arg4 ;
  QPixmap * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = (int)extent; 
  arg3 = (QIcon::Mode)mode; 
  arg4 = (QIcon::State)state; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QIcon const *)arg1)->pixmap(arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QPixmap * QIcon_pixmap7(QIcon const * self, int extent, QIcon::Mode mode) {
  QIcon *arg1 = (QIcon *) 0 ;
  int arg2 ;
  QIcon::Mode arg3 ;
  QPixmap * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = (int)extent; 
  arg3 = (QIcon::Mode)mode; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QIcon const *)arg1)->pixmap(arg2,arg3));
  return cresult;
}


SWIGEXPORT QPixmap * QIcon_pixmap8(QIcon const * self, int extent) {
  QIcon *arg1 = (QIcon *) 0 ;
  int arg2 ;
  QPixmap * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = (int)extent; 
  *(QPixmap **)&cresult = new QPixmap((const QPixmap &)((QIcon const *)arg1)->pixmap(arg2));
  return cresult;
}


SWIGEXPORT QSize * QIcon_actualSize(QIcon const * self, QSize * size, QIcon::Mode mode, QIcon::State state) {
  QIcon *arg1 = (QIcon *) 0 ;
  QSize *arg2 = 0 ;
  QIcon::Mode arg3 ;
  QIcon::State arg4 ;
  QSize * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QSize **)&size;
  arg3 = (QIcon::Mode)mode; 
  arg4 = (QIcon::State)state; 
  *(QSize **)&cresult = new QSize((const QSize &)((QIcon const *)arg1)->actualSize((QSize const &)*arg2,arg3,arg4));
  return cresult;
}


SWIGEXPORT QSize * QIcon_actualSize1(QIcon const * self, QSize * size, QIcon::Mode mode) {
  QIcon *arg1 = (QIcon *) 0 ;
  QSize *arg2 = 0 ;
  QIcon::Mode arg3 ;
  QSize * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QSize **)&size;
  arg3 = (QIcon::Mode)mode; 
  *(QSize **)&cresult = new QSize((const QSize &)((QIcon const *)arg1)->actualSize((QSize const &)*arg2,arg3));
  return cresult;
}


SWIGEXPORT QSize * QIcon_actualSize2(QIcon const * self, QSize * size) {
  QIcon *arg1 = (QIcon *) 0 ;
  QSize *arg2 = 0 ;
  QSize * cresult ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QSize **)&size;
  *(QSize **)&cresult = new QSize((const QSize &)((QIcon const *)arg1)->actualSize((QSize const &)*arg2));
  return cresult;
}


SWIGEXPORT QString * QIcon_name(QIcon const * self) {
  QIcon *arg1 = (QIcon *) 0 ;
  QString * cresult ;
  
  arg1 = *(QIcon **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QIcon const *)arg1)->name());
  return cresult;
}


SWIGEXPORT void QIcon_paint(QIcon const * self, QPainter * painter, QRect * rect, int alignment, QIcon::Mode mode, QIcon::State state) {
  QIcon *arg1 = (QIcon *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  QRect *arg3 = 0 ;
  Qt::Alignment arg4 ;
  QIcon::Mode arg5 ;
  QIcon::State arg6 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QPainter **)&painter; 
  arg3 = *(QRect **)&rect;
  arg4 = (Qt::Alignment)alignment; 
  arg5 = (QIcon::Mode)mode; 
  arg6 = (QIcon::State)state; 
  ((QIcon const *)arg1)->paint(arg2,(QRect const &)*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void QIcon_paint1(QIcon const * self, QPainter * painter, QRect * rect, int alignment, QIcon::Mode mode) {
  QIcon *arg1 = (QIcon *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  QRect *arg3 = 0 ;
  Qt::Alignment arg4 ;
  QIcon::Mode arg5 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QPainter **)&painter; 
  arg3 = *(QRect **)&rect;
  arg4 = (Qt::Alignment)alignment; 
  arg5 = (QIcon::Mode)mode; 
  ((QIcon const *)arg1)->paint(arg2,(QRect const &)*arg3,arg4,arg5);
}


SWIGEXPORT void QIcon_paint2(QIcon const * self, QPainter * painter, QRect * rect, int alignment) {
  QIcon *arg1 = (QIcon *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  QRect *arg3 = 0 ;
  Qt::Alignment arg4 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QPainter **)&painter; 
  arg3 = *(QRect **)&rect;
  arg4 = (Qt::Alignment)alignment; 
  ((QIcon const *)arg1)->paint(arg2,(QRect const &)*arg3,arg4);
}


SWIGEXPORT void QIcon_paint3(QIcon const * self, QPainter * painter, QRect * rect) {
  QIcon *arg1 = (QIcon *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  QRect *arg3 = 0 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QPainter **)&painter; 
  arg3 = *(QRect **)&rect;
  ((QIcon const *)arg1)->paint(arg2,(QRect const &)*arg3);
}


SWIGEXPORT void QIcon_paint4(QIcon const * self, QPainter * painter, int x, int y, int w, int h, int alignment, QIcon::Mode mode, QIcon::State state) {
  QIcon *arg1 = (QIcon *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Qt::Alignment arg7 ;
  QIcon::Mode arg8 ;
  QIcon::State arg9 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QPainter **)&painter; 
  arg3 = (int)x; 
  arg4 = (int)y; 
  arg5 = (int)w; 
  arg6 = (int)h; 
  arg7 = (Qt::Alignment)alignment; 
  arg8 = (QIcon::Mode)mode; 
  arg9 = (QIcon::State)state; 
  ((QIcon const *)arg1)->paint(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void QIcon_paint5(QIcon const * self, QPainter * painter, int x, int y, int w, int h, int alignment, QIcon::Mode mode) {
  QIcon *arg1 = (QIcon *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Qt::Alignment arg7 ;
  QIcon::Mode arg8 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QPainter **)&painter; 
  arg3 = (int)x; 
  arg4 = (int)y; 
  arg5 = (int)w; 
  arg6 = (int)h; 
  arg7 = (Qt::Alignment)alignment; 
  arg8 = (QIcon::Mode)mode; 
  ((QIcon const *)arg1)->paint(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void QIcon_paint6(QIcon const * self, QPainter * painter, int x, int y, int w, int h, int alignment) {
  QIcon *arg1 = (QIcon *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  Qt::Alignment arg7 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QPainter **)&painter; 
  arg3 = (int)x; 
  arg4 = (int)y; 
  arg5 = (int)w; 
  arg6 = (int)h; 
  arg7 = (Qt::Alignment)alignment; 
  ((QIcon const *)arg1)->paint(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void QIcon_paint7(QIcon const * self, QPainter * painter, int x, int y, int w, int h) {
  QIcon *arg1 = (QIcon *) 0 ;
  QPainter *arg2 = (QPainter *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QPainter **)&painter; 
  arg3 = (int)x; 
  arg4 = (int)y; 
  arg5 = (int)w; 
  arg6 = (int)h; 
  ((QIcon const *)arg1)->paint(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT bool QIcon_isNull(QIcon const * self) {
  QIcon *arg1 = (QIcon *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QIcon **)&self; 
  result = (bool)((QIcon const *)arg1)->isNull();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QIcon_isDetached(QIcon const * self) {
  QIcon *arg1 = (QIcon *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QIcon **)&self; 
  result = (bool)((QIcon const *)arg1)->isDetached();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QIcon_detach(QIcon * self) {
  QIcon *arg1 = (QIcon *) 0 ;
  
  arg1 = *(QIcon **)&self; 
  (arg1)->detach();
}


SWIGEXPORT int QIcon_serialNumber(QIcon const * self) {
  QIcon *arg1 = (QIcon *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QIcon **)&self; 
  result = (int)((QIcon const *)arg1)->serialNumber();
  cresult = result; 
  return cresult;
}


SWIGEXPORT unsigned long QIcon_cacheKey(QIcon const * self) {
  QIcon *arg1 = (QIcon *) 0 ;
  unsigned long result;
  unsigned long cresult ;
  
  arg1 = *(QIcon **)&self; 
  result = (unsigned long)((QIcon const *)arg1)->cacheKey();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QIcon_addPixmap(QIcon * self, QPixmap * pixmap, QIcon::Mode mode, QIcon::State state) {
  QIcon *arg1 = (QIcon *) 0 ;
  QPixmap *arg2 = 0 ;
  QIcon::Mode arg3 ;
  QIcon::State arg4 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QPixmap **)&pixmap;
  arg3 = (QIcon::Mode)mode; 
  arg4 = (QIcon::State)state; 
  (arg1)->addPixmap((QPixmap const &)*arg2,arg3,arg4);
}


SWIGEXPORT void QIcon_addPixmap1(QIcon * self, QPixmap * pixmap, QIcon::Mode mode) {
  QIcon *arg1 = (QIcon *) 0 ;
  QPixmap *arg2 = 0 ;
  QIcon::Mode arg3 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QPixmap **)&pixmap;
  arg3 = (QIcon::Mode)mode; 
  (arg1)->addPixmap((QPixmap const &)*arg2,arg3);
}


SWIGEXPORT void QIcon_addPixmap2(QIcon * self, QPixmap * pixmap) {
  QIcon *arg1 = (QIcon *) 0 ;
  QPixmap *arg2 = 0 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QPixmap **)&pixmap;
  (arg1)->addPixmap((QPixmap const &)*arg2);
}


SWIGEXPORT void QIcon_addFile(QIcon * self, QString * fileName, QSize * size, QIcon::Mode mode, QIcon::State state) {
  QIcon *arg1 = (QIcon *) 0 ;
  QString *arg2 = 0 ;
  QSize *arg3 = 0 ;
  QIcon::Mode arg4 ;
  QIcon::State arg5 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QString **)&fileName;
  arg3 = *(QSize **)&size;
  arg4 = (QIcon::Mode)mode; 
  arg5 = (QIcon::State)state; 
  (arg1)->addFile((QString const &)*arg2,(QSize const &)*arg3,arg4,arg5);
}


SWIGEXPORT void QIcon_addFile1(QIcon * self, QString * fileName, QSize * size, QIcon::Mode mode) {
  QIcon *arg1 = (QIcon *) 0 ;
  QString *arg2 = 0 ;
  QSize *arg3 = 0 ;
  QIcon::Mode arg4 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QString **)&fileName;
  arg3 = *(QSize **)&size;
  arg4 = (QIcon::Mode)mode; 
  (arg1)->addFile((QString const &)*arg2,(QSize const &)*arg3,arg4);
}


SWIGEXPORT void QIcon_addFile2(QIcon * self, QString * fileName, QSize * size) {
  QIcon *arg1 = (QIcon *) 0 ;
  QString *arg2 = 0 ;
  QSize *arg3 = 0 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QString **)&fileName;
  arg3 = *(QSize **)&size;
  (arg1)->addFile((QString const &)*arg2,(QSize const &)*arg3);
}


SWIGEXPORT void QIcon_addFile3(QIcon * self, QString * fileName) {
  QIcon *arg1 = (QIcon *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QIcon **)&self; 
  arg2 = *(QString **)&fileName;
  (arg1)->addFile((QString const &)*arg2);
}


SWIGEXPORT QIcon * FromTheme(QString * name, QIcon const & fallback) {
  QString *arg1 = 0 ;
  QIcon *arg2 = 0 ;
  QIcon * cresult ;
  
  arg1 = *(QString **)&name;
  arg2 = *(QIcon **)&fallback;
  *(QIcon **)&cresult = new QIcon((const QIcon &)QIcon::fromTheme((QString const &)*arg1,(QIcon const &)*arg2));
  return cresult;
}


SWIGEXPORT QIcon * FromTheme1(QString * name) {
  QString *arg1 = 0 ;
  QIcon * cresult ;
  
  arg1 = *(QString **)&name;
  *(QIcon **)&cresult = new QIcon((const QIcon &)QIcon::fromTheme((QString const &)*arg1));
  return cresult;
}


SWIGEXPORT bool HasThemeIcon(QString * name) {
  QString *arg1 = 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QString **)&name;
  result = (bool)QIcon::hasThemeIcon((QString const &)*arg1);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QStringList * ThemeSearchPaths() {
  QStringList * cresult ;
  
  *(QStringList **)&cresult = new QStringList((const QStringList &)QIcon::themeSearchPaths());
  return cresult;
}


SWIGEXPORT void SetThemeSearchPaths(QStringList * searchpath) {
  QStringList *arg1 = 0 ;
  
  arg1 = *(QStringList **)&searchpath;
  QIcon::setThemeSearchPaths((QStringList const &)*arg1);
}


SWIGEXPORT QString * ThemeName() {
  QString * cresult ;
  
  *(QString **)&cresult = new QString((const QString &)QIcon::themeName());
  return cresult;
}


SWIGEXPORT void SetThemeName(QString * path) {
  QString *arg1 = 0 ;
  
  arg1 = *(QString **)&path;
  QIcon::setThemeName((QString const &)*arg1);
}


#ifdef __cplusplus
}
#endif

