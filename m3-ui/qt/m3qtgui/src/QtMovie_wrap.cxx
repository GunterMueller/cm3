/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qmovie.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QMovie * New_QMovie0(QObject * parent) {
  QObject *arg1 = (QObject *) 0 ;
  QMovie *result = 0 ;
  QMovie * cresult ;
  
  arg1 = *(QObject **)&parent; 
  result = (QMovie *)new QMovie(arg1);
  *(QMovie **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMovie * New_QMovie1() {
  QMovie *result = 0 ;
  QMovie * cresult ;
  
  result = (QMovie *)new QMovie();
  *(QMovie **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMovie * New_QMovie2(QIODevice * device, QByteArray * format, QObject * parent) {
  QIODevice *arg1 = (QIODevice *) 0 ;
  QByteArray *arg2 = 0 ;
  QObject *arg3 = (QObject *) 0 ;
  QMovie *result = 0 ;
  QMovie * cresult ;
  
  arg1 = *(QIODevice **)&device; 
  arg2 = *(QByteArray **)&format;
  arg3 = *(QObject **)&parent; 
  result = (QMovie *)new QMovie(arg1,(QByteArray const &)*arg2,arg3);
  *(QMovie **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMovie * New_QMovie3(QIODevice * device, QByteArray * format) {
  QIODevice *arg1 = (QIODevice *) 0 ;
  QByteArray *arg2 = 0 ;
  QMovie *result = 0 ;
  QMovie * cresult ;
  
  arg1 = *(QIODevice **)&device; 
  arg2 = *(QByteArray **)&format;
  result = (QMovie *)new QMovie(arg1,(QByteArray const &)*arg2);
  *(QMovie **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMovie * New_QMovie4(QIODevice * device) {
  QIODevice *arg1 = (QIODevice *) 0 ;
  QMovie *result = 0 ;
  QMovie * cresult ;
  
  arg1 = *(QIODevice **)&device; 
  result = (QMovie *)new QMovie(arg1);
  *(QMovie **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMovie * New_QMovie5(QString * fileName, QByteArray * format, QObject * parent) {
  QString *arg1 = 0 ;
  QByteArray *arg2 = 0 ;
  QObject *arg3 = (QObject *) 0 ;
  QMovie *result = 0 ;
  QMovie * cresult ;
  
  arg1 = *(QString **)&fileName;
  arg2 = *(QByteArray **)&format;
  arg3 = *(QObject **)&parent; 
  result = (QMovie *)new QMovie((QString const &)*arg1,(QByteArray const &)*arg2,arg3);
  *(QMovie **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMovie * New_QMovie6(QString * fileName, QByteArray * format) {
  QString *arg1 = 0 ;
  QByteArray *arg2 = 0 ;
  QMovie *result = 0 ;
  QMovie * cresult ;
  
  arg1 = *(QString **)&fileName;
  arg2 = *(QByteArray **)&format;
  result = (QMovie *)new QMovie((QString const &)*arg1,(QByteArray const &)*arg2);
  *(QMovie **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QMovie * New_QMovie7(QString * fileName) {
  QString *arg1 = 0 ;
  QMovie *result = 0 ;
  QMovie * cresult ;
  
  arg1 = *(QString **)&fileName;
  result = (QMovie *)new QMovie((QString const &)*arg1);
  *(QMovie **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QMovie(QMovie * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  
  arg1 = *(QMovie **)&self; 
  delete arg1;
}


SWIGEXPORT void QMovie_setDevice(QMovie * self, QIODevice * device) {
  QMovie *arg1 = (QMovie *) 0 ;
  QIODevice *arg2 = (QIODevice *) 0 ;
  
  arg1 = *(QMovie **)&self; 
  arg2 = *(QIODevice **)&device; 
  (arg1)->setDevice(arg2);
}


SWIGEXPORT QIODevice * QMovie_device(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  QIODevice *result = 0 ;
  QIODevice * cresult ;
  
  arg1 = *(QMovie **)&self; 
  result = (QIODevice *)((QMovie const *)arg1)->device();
  *(QIODevice **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QMovie_setFileName(QMovie * self, QString * fileName) {
  QMovie *arg1 = (QMovie *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QMovie **)&self; 
  arg2 = *(QString **)&fileName;
  (arg1)->setFileName((QString const &)*arg2);
}


SWIGEXPORT QString * QMovie_fileName(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  QString * cresult ;
  
  arg1 = *(QMovie **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QMovie const *)arg1)->fileName());
  return cresult;
}


SWIGEXPORT void QMovie_setFormat(QMovie * self, QByteArray * format) {
  QMovie *arg1 = (QMovie *) 0 ;
  QByteArray *arg2 = 0 ;
  
  arg1 = *(QMovie **)&self; 
  arg2 = *(QByteArray **)&format;
  (arg1)->setFormat((QByteArray const &)*arg2);
}


SWIGEXPORT QByteArray * QMovie_format(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  QByteArray * cresult ;
  
  arg1 = *(QMovie **)&self; 
  *(QByteArray **)&cresult = new QByteArray((const QByteArray &)((QMovie const *)arg1)->format());
  return cresult;
}


SWIGEXPORT void QMovie_setBackgroundColor(QMovie * self, QColor * color) {
  QMovie *arg1 = (QMovie *) 0 ;
  QColor *arg2 = 0 ;
  
  arg1 = *(QMovie **)&self; 
  arg2 = *(QColor **)&color;
  (arg1)->setBackgroundColor((QColor const &)*arg2);
}


SWIGEXPORT QMovie::MovieState QMovie_state(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  QMovie::MovieState result;
  QMovie::MovieState cresult ;
  
  arg1 = *(QMovie **)&self; 
  result = (QMovie::MovieState)((QMovie const *)arg1)->state();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QMovie_frameRect(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QMovie **)&self; 
  *(QRect **)&cresult = new QRect((const QRect &)((QMovie const *)arg1)->frameRect());
  return cresult;
}


SWIGEXPORT QImage * QMovie_currentImage(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  QImage * cresult ;
  
  arg1 = *(QMovie **)&self; 
  *(QImage **)&cresult = new QImage((const QImage &)((QMovie const *)arg1)->currentImage());
  return cresult;
}


SWIGEXPORT bool QMovie_isValid(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMovie **)&self; 
  result = (bool)((QMovie const *)arg1)->isValid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QMovie_jumpToFrame(QMovie * self, int frameNumber) {
  QMovie *arg1 = (QMovie *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMovie **)&self; 
  arg2 = (int)frameNumber; 
  result = (bool)(arg1)->jumpToFrame(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QMovie_loopCount(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QMovie **)&self; 
  result = (int)((QMovie const *)arg1)->loopCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QMovie_frameCount(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QMovie **)&self; 
  result = (int)((QMovie const *)arg1)->frameCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QMovie_nextFrameDelay(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QMovie **)&self; 
  result = (int)((QMovie const *)arg1)->nextFrameDelay();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QMovie_currentFrameNumber(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QMovie **)&self; 
  result = (int)((QMovie const *)arg1)->currentFrameNumber();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QMovie_speed(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QMovie **)&self; 
  result = (int)((QMovie const *)arg1)->speed();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QMovie_scaledSize(QMovie * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QMovie **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)(arg1)->scaledSize());
  return cresult;
}


SWIGEXPORT void QMovie_setScaledSize(QMovie * self, QSize * size) {
  QMovie *arg1 = (QMovie *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QMovie **)&self; 
  arg2 = *(QSize **)&size;
  (arg1)->setScaledSize((QSize const &)*arg2);
}


SWIGEXPORT QMovie::CacheMode QMovie_cacheMode(QMovie const * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  QMovie::CacheMode result;
  QMovie::CacheMode cresult ;
  
  arg1 = *(QMovie **)&self; 
  result = (QMovie::CacheMode)((QMovie const *)arg1)->cacheMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QMovie_setCacheMode(QMovie * self, QMovie::CacheMode mode) {
  QMovie *arg1 = (QMovie *) 0 ;
  QMovie::CacheMode arg2 ;
  
  arg1 = *(QMovie **)&self; 
  arg2 = (QMovie::CacheMode)mode; 
  (arg1)->setCacheMode(arg2);
}


SWIGEXPORT QMovie::CacheMode QMovie_cacheMode1(QMovie * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  QMovie::CacheMode result;
  QMovie::CacheMode cresult ;
  
  arg1 = *(QMovie **)&self; 
  result = (QMovie::CacheMode)(arg1)->cacheMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QMovie_start(QMovie * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  
  arg1 = *(QMovie **)&self; 
  (arg1)->start();
}


SWIGEXPORT bool QMovie_jumpToNextFrame(QMovie * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QMovie **)&self; 
  result = (bool)(arg1)->jumpToNextFrame();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QMovie_setPaused(QMovie * self, bool paused) {
  QMovie *arg1 = (QMovie *) 0 ;
  bool arg2 ;
  
  arg1 = *(QMovie **)&self; 
  arg2 = paused ? true : false; 
  (arg1)->setPaused(arg2);
}


SWIGEXPORT void QMovie_stop(QMovie * self) {
  QMovie *arg1 = (QMovie *) 0 ;
  
  arg1 = *(QMovie **)&self; 
  (arg1)->stop();
}


SWIGEXPORT void QMovie_setSpeed(QMovie * self, int percentSpeed) {
  QMovie *arg1 = (QMovie *) 0 ;
  int arg2 ;
  
  arg1 = *(QMovie **)&self; 
  arg2 = (int)percentSpeed; 
  (arg1)->setSpeed(arg2);
}


SWIGEXPORT long Modula3_QMovieToQObject(long objectRef) {
    long baseptr = 0;
    *(QObject **)&baseptr = *(QMovie **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

