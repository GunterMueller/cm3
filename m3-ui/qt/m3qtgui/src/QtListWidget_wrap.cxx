/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qlistwidget.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QListWidgetItem * New_QListWidgetItem0(QListWidget * view, int type) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  int arg2 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QListWidget **)&view; 
  arg2 = (int)type; 
  result = (QListWidgetItem *)new QListWidgetItem(arg1,arg2);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidgetItem * New_QListWidgetItem1(QListWidget * view) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QListWidget **)&view; 
  result = (QListWidgetItem *)new QListWidgetItem(arg1);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidgetItem * New_QListWidgetItem2() {
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  result = (QListWidgetItem *)new QListWidgetItem();
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidgetItem * New_QListWidgetItem3(QString * text, QListWidget * view, int type) {
  QString *arg1 = 0 ;
  QListWidget *arg2 = (QListWidget *) 0 ;
  int arg3 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QString **)&text;
  arg2 = *(QListWidget **)&view; 
  arg3 = (int)type; 
  result = (QListWidgetItem *)new QListWidgetItem((QString const &)*arg1,arg2,arg3);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidgetItem * New_QListWidgetItem4(QString * text, QListWidget * view) {
  QString *arg1 = 0 ;
  QListWidget *arg2 = (QListWidget *) 0 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QString **)&text;
  arg2 = *(QListWidget **)&view; 
  result = (QListWidgetItem *)new QListWidgetItem((QString const &)*arg1,arg2);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidgetItem * New_QListWidgetItem5(QString * text) {
  QString *arg1 = 0 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QString **)&text;
  result = (QListWidgetItem *)new QListWidgetItem((QString const &)*arg1);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidgetItem * New_QListWidgetItem6(QIcon * icon, QString * text, QListWidget * view, int type) {
  QIcon *arg1 = 0 ;
  QString *arg2 = 0 ;
  QListWidget *arg3 = (QListWidget *) 0 ;
  int arg4 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QIcon **)&icon;
  arg2 = *(QString **)&text;
  arg3 = *(QListWidget **)&view; 
  arg4 = (int)type; 
  result = (QListWidgetItem *)new QListWidgetItem((QIcon const &)*arg1,(QString const &)*arg2,arg3,arg4);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidgetItem * New_QListWidgetItem7(QIcon * icon, QString * text, QListWidget * view) {
  QIcon *arg1 = 0 ;
  QString *arg2 = 0 ;
  QListWidget *arg3 = (QListWidget *) 0 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QIcon **)&icon;
  arg2 = *(QString **)&text;
  arg3 = *(QListWidget **)&view; 
  result = (QListWidgetItem *)new QListWidgetItem((QIcon const &)*arg1,(QString const &)*arg2,arg3);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidgetItem * New_QListWidgetItem8(QIcon * icon, QString * text) {
  QIcon *arg1 = 0 ;
  QString *arg2 = 0 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QIcon **)&icon;
  arg2 = *(QString **)&text;
  result = (QListWidgetItem *)new QListWidgetItem((QIcon const &)*arg1,(QString const &)*arg2);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidgetItem * New_QListWidgetItem9(QListWidgetItem const & other) {
  QListWidgetItem *arg1 = 0 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QListWidgetItem **)&other;
  result = (QListWidgetItem *)new QListWidgetItem((QListWidgetItem const &)*arg1);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QListWidgetItem(QListWidgetItem * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  delete arg1;
}


SWIGEXPORT QListWidgetItem * QListWidgetItem_clone(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  result = (QListWidgetItem *)((QListWidgetItem const *)arg1)->clone();
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidget * QListWidgetItem_listWidget(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QListWidget *result = 0 ;
  QListWidget * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  result = (QListWidget *)((QListWidgetItem const *)arg1)->listWidget();
  *(QListWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setSelected(QListWidgetItem * self, bool select) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  bool arg2 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = select ? true : false; 
  (arg1)->setSelected(arg2);
}


SWIGEXPORT bool QListWidgetItem_isSelected(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  result = (bool)((QListWidgetItem const *)arg1)->isSelected();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setHidden(QListWidgetItem * self, bool hide) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  bool arg2 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = hide ? true : false; 
  (arg1)->setHidden(arg2);
}


SWIGEXPORT bool QListWidgetItem_isHidden(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  result = (bool)((QListWidgetItem const *)arg1)->isHidden();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QListWidgetItem_flags(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  Qt::ItemFlags result;
  int cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  result = ((QListWidgetItem const *)arg1)->flags();
  cresult = (int)result;
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setFlags(QListWidgetItem * self, int flags) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  Qt::ItemFlags arg2 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = (Qt::ItemFlags)flags; 
  (arg1)->setFlags(arg2);
}


SWIGEXPORT QString * QListWidgetItem_text(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QString * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QListWidgetItem const *)arg1)->text());
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setText(QListWidgetItem * self, QString * text) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = *(QString **)&text;
  (arg1)->setText((QString const &)*arg2);
}


SWIGEXPORT QIcon * QListWidgetItem_icon(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QIcon * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  *(QIcon **)&cresult = new QIcon((const QIcon &)((QListWidgetItem const *)arg1)->icon());
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setIcon(QListWidgetItem * self, QIcon * icon) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QIcon *arg2 = 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = *(QIcon **)&icon;
  (arg1)->setIcon((QIcon const &)*arg2);
}


SWIGEXPORT QString * QListWidgetItem_statusTip(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QString * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QListWidgetItem const *)arg1)->statusTip());
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setStatusTip(QListWidgetItem * self, QString * statusTip) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = *(QString **)&statusTip;
  (arg1)->setStatusTip((QString const &)*arg2);
}


SWIGEXPORT QString * QListWidgetItem_toolTip(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QString * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QListWidgetItem const *)arg1)->toolTip());
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setToolTip(QListWidgetItem * self, QString * toolTip) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = *(QString **)&toolTip;
  (arg1)->setToolTip((QString const &)*arg2);
}


SWIGEXPORT QString * QListWidgetItem_whatsThis(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QString * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QListWidgetItem const *)arg1)->whatsThis());
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setWhatsThis(QListWidgetItem * self, QString * whatsThis) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = *(QString **)&whatsThis;
  (arg1)->setWhatsThis((QString const &)*arg2);
}


SWIGEXPORT QFont * QListWidgetItem_font(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QFont * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  *(QFont **)&cresult = new QFont((const QFont &)((QListWidgetItem const *)arg1)->font());
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setFont(QListWidgetItem * self, QFont * font) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QFont *arg2 = 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = *(QFont **)&font;
  (arg1)->setFont((QFont const &)*arg2);
}


SWIGEXPORT int QListWidgetItem_textAlignment(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  result = (int)((QListWidgetItem const *)arg1)->textAlignment();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setTextAlignment(QListWidgetItem * self, int alignment) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  int arg2 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = (int)alignment; 
  (arg1)->setTextAlignment(arg2);
}


SWIGEXPORT QColor * QListWidgetItem_backgroundColor(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QListWidgetItem const *)arg1)->backgroundColor());
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setBackgroundColor(QListWidgetItem * self, QColor * color) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QColor *arg2 = 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = *(QColor **)&color;
  (arg1)->setBackgroundColor((QColor const &)*arg2);
}


SWIGEXPORT QBrush * QListWidgetItem_background(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QBrush * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QListWidgetItem const *)arg1)->background());
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setBackground(QListWidgetItem * self, QBrush * brush) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QBrush *arg2 = 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = *(QBrush **)&brush;
  (arg1)->setBackground((QBrush const &)*arg2);
}


SWIGEXPORT QColor * QListWidgetItem_textColor(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QColor * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  *(QColor **)&cresult = new QColor((const QColor &)((QListWidgetItem const *)arg1)->textColor());
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setTextColor(QListWidgetItem * self, QColor * color) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QColor *arg2 = 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = *(QColor **)&color;
  (arg1)->setTextColor((QColor const &)*arg2);
}


SWIGEXPORT QBrush * QListWidgetItem_foreground(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QBrush * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  *(QBrush **)&cresult = new QBrush((const QBrush &)((QListWidgetItem const *)arg1)->foreground());
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setForeground(QListWidgetItem * self, QBrush * brush) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QBrush *arg2 = 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = *(QBrush **)&brush;
  (arg1)->setForeground((QBrush const &)*arg2);
}


SWIGEXPORT Qt::CheckState QListWidgetItem_checkState(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  Qt::CheckState result;
  Qt::CheckState cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  result = (Qt::CheckState)((QListWidgetItem const *)arg1)->checkState();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setCheckState(QListWidgetItem * self, Qt::CheckState state) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  Qt::CheckState arg2 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = (Qt::CheckState)state; 
  (arg1)->setCheckState(arg2);
}


SWIGEXPORT QSize * QListWidgetItem_sizeHint(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QListWidgetItem const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT void QListWidgetItem_setSizeHint(QListWidgetItem * self, QSize * size) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QListWidgetItem **)&self; 
  arg2 = *(QSize **)&size;
  (arg1)->setSizeHint((QSize const &)*arg2);
}


SWIGEXPORT int QListWidgetItem_type(QListWidgetItem const * self) {
  QListWidgetItem *arg1 = (QListWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QListWidgetItem **)&self; 
  result = (int)((QListWidgetItem const *)arg1)->type();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidget * New_QListWidget0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QListWidget *result = 0 ;
  QListWidget * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QListWidget *)new QListWidget(arg1);
  *(QListWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidget * New_QListWidget1() {
  QListWidget *result = 0 ;
  QListWidget * cresult ;
  
  result = (QListWidget *)new QListWidget();
  *(QListWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QListWidget(QListWidget * self) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  
  arg1 = *(QListWidget **)&self; 
  delete arg1;
}


SWIGEXPORT QListWidgetItem * QListWidget_item(QListWidget const * self, int row) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  int arg2 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = (int)row; 
  result = (QListWidgetItem *)((QListWidget const *)arg1)->item(arg2);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QListWidget_row(QListWidget const * self, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  result = (int)((QListWidget const *)arg1)->row((QListWidgetItem const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QListWidget_insertItem(QListWidget * self, int row, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  int arg2 ;
  QListWidgetItem *arg3 = (QListWidgetItem *) 0 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = (int)row; 
  arg3 = *(QListWidgetItem **)&item; 
  (arg1)->insertItem(arg2,arg3);
}


SWIGEXPORT void QListWidget_insertItem1(QListWidget * self, int row, QString * label) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = (int)row; 
  arg3 = *(QString **)&label;
  (arg1)->insertItem(arg2,(QString const &)*arg3);
}


SWIGEXPORT void QListWidget_addItem(QListWidget * self, QString * label) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QString **)&label;
  (arg1)->addItem((QString const &)*arg2);
}


SWIGEXPORT void QListWidget_addItem1(QListWidget * self, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  (arg1)->addItem(arg2);
}


SWIGEXPORT QListWidgetItem * QListWidget_takeItem(QListWidget * self, int row) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  int arg2 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = (int)row; 
  result = (QListWidgetItem *)(arg1)->takeItem(arg2);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QListWidget_count(QListWidget const * self) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QListWidget **)&self; 
  result = (int)((QListWidget const *)arg1)->count();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidgetItem * QListWidget_currentItem(QListWidget const * self) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QListWidget **)&self; 
  result = (QListWidgetItem *)((QListWidget const *)arg1)->currentItem();
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QListWidget_currentRow(QListWidget const * self) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QListWidget **)&self; 
  result = (int)((QListWidget const *)arg1)->currentRow();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QListWidget_setCurrentRow(QListWidget * self, int row) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  int arg2 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = (int)row; 
  (arg1)->setCurrentRow(arg2);
}


SWIGEXPORT QListWidgetItem * QListWidget_itemAt(QListWidget const * self, QPoint * p) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QPoint *arg2 = 0 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QPoint **)&p;
  result = (QListWidgetItem *)((QListWidget const *)arg1)->itemAt((QPoint const &)*arg2);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QListWidgetItem * QListWidget_itemAt1(QListWidget const * self, int x, int y) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  int arg2 ;
  int arg3 ;
  QListWidgetItem *result = 0 ;
  QListWidgetItem * cresult ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  result = (QListWidgetItem *)((QListWidget const *)arg1)->itemAt(arg2,arg3);
  *(QListWidgetItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QListWidget_visualItemRect(QListWidget const * self, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  QRect * cresult ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  *(QRect **)&cresult = new QRect((const QRect &)((QListWidget const *)arg1)->visualItemRect((QListWidgetItem const *)arg2));
  return cresult;
}


SWIGEXPORT void QListWidget_sortItems(QListWidget * self, Qt::SortOrder order) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  Qt::SortOrder arg2 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = (Qt::SortOrder)order; 
  (arg1)->sortItems(arg2);
}


SWIGEXPORT void QListWidget_sortItems1(QListWidget * self) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  
  arg1 = *(QListWidget **)&self; 
  (arg1)->sortItems();
}


SWIGEXPORT void QListWidget_setSortingEnabled(QListWidget * self, bool enable) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  bool arg2 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setSortingEnabled(arg2);
}


SWIGEXPORT bool QListWidget_isSortingEnabled(QListWidget const * self) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QListWidget **)&self; 
  result = (bool)((QListWidget const *)arg1)->isSortingEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QListWidget_editItem(QListWidget * self, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  (arg1)->editItem(arg2);
}


SWIGEXPORT void QListWidget_openPersistentEditor(QListWidget * self, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  (arg1)->openPersistentEditor(arg2);
}


SWIGEXPORT void QListWidget_closePersistentEditor(QListWidget * self, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  (arg1)->closePersistentEditor(arg2);
}


SWIGEXPORT QWidget * QListWidget_itemWidget(QListWidget const * self, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  result = (QWidget *)((QListWidget const *)arg1)->itemWidget(arg2);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QListWidget_setItemWidget(QListWidget * self, QListWidgetItem * item, QWidget * widget) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  QWidget *arg3 = (QWidget *) 0 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  arg3 = *(QWidget **)&widget; 
  (arg1)->setItemWidget(arg2,arg3);
}


SWIGEXPORT void QListWidget_removeItemWidget(QListWidget * self, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  (arg1)->removeItemWidget(arg2);
}


SWIGEXPORT bool QListWidget_isItemSelected(QListWidget const * self, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  result = (bool)((QListWidget const *)arg1)->isItemSelected((QListWidgetItem const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QListWidget_setItemSelected(QListWidget * self, QListWidgetItem * item, bool select) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  bool arg3 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  arg3 = select ? true : false; 
  (arg1)->setItemSelected((QListWidgetItem const *)arg2,arg3);
}


SWIGEXPORT bool QListWidget_isItemHidden(QListWidget const * self, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  result = (bool)((QListWidget const *)arg1)->isItemHidden((QListWidgetItem const *)arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QListWidget_setItemHidden(QListWidget * self, QListWidgetItem * item, bool hide) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  bool arg3 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  arg3 = hide ? true : false; 
  (arg1)->setItemHidden((QListWidgetItem const *)arg2,arg3);
}


SWIGEXPORT void QListWidget_scrollToItem(QListWidget * self, QListWidgetItem * item, QAbstractItemView::ScrollHint hint) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  QAbstractItemView::ScrollHint arg3 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  arg3 = (QAbstractItemView::ScrollHint)hint; 
  (arg1)->scrollToItem((QListWidgetItem const *)arg2,arg3);
}


SWIGEXPORT void QListWidget_scrollToItem1(QListWidget * self, QListWidgetItem * item) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  QListWidgetItem *arg2 = (QListWidgetItem *) 0 ;
  
  arg1 = *(QListWidget **)&self; 
  arg2 = *(QListWidgetItem **)&item; 
  (arg1)->scrollToItem((QListWidgetItem const *)arg2);
}


SWIGEXPORT void QListWidget_clear(QListWidget * self) {
  QListWidget *arg1 = (QListWidget *) 0 ;
  
  arg1 = *(QListWidget **)&self; 
  (arg1)->clear();
}


#ifdef __cplusplus
}
#endif

