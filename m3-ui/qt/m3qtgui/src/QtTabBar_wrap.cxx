/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qtabbar.h>
#include <QtGui/qicon.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QTabBar * New_QTabBar0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QTabBar *result = 0 ;
  QTabBar * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QTabBar *)new QTabBar(arg1);
  *(QTabBar **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTabBar * New_QTabBar1() {
  QTabBar *result = 0 ;
  QTabBar * cresult ;
  
  result = (QTabBar *)new QTabBar();
  *(QTabBar **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTabBar(QTabBar * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  
  arg1 = *(QTabBar **)&self; 
  delete arg1;
}


SWIGEXPORT QTabBar::Shape QTabBar_shape(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  QTabBar::Shape result;
  QTabBar::Shape cresult ;
  
  arg1 = *(QTabBar **)&self; 
  result = (QTabBar::Shape)((QTabBar const *)arg1)->shape();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTabBar_setShape(QTabBar * self, QTabBar::Shape shape) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  QTabBar::Shape arg2 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (QTabBar::Shape)shape; 
  (arg1)->setShape(arg2);
}


SWIGEXPORT int QTabBar_addTab(QTabBar * self, QString * text) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  QString *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = *(QString **)&text;
  result = (int)(arg1)->addTab((QString const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTabBar_addTab1(QTabBar * self, QIcon * icon, QString * text) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  QIcon *arg2 = 0 ;
  QString *arg3 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = *(QIcon **)&icon;
  arg3 = *(QString **)&text;
  result = (int)(arg1)->addTab((QIcon const &)*arg2,(QString const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTabBar_insertTab(QTabBar * self, int index, QString * text) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  arg3 = *(QString **)&text;
  result = (int)(arg1)->insertTab(arg2,(QString const &)*arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTabBar_insertTab1(QTabBar * self, int index, QIcon * icon, QString * text) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QIcon *arg3 = 0 ;
  QString *arg4 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  arg3 = *(QIcon **)&icon;
  arg4 = *(QString **)&text;
  result = (int)(arg1)->insertTab(arg2,(QIcon const &)*arg3,(QString const &)*arg4);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTabBar_removeTab(QTabBar * self, int index) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  (arg1)->removeTab(arg2);
}


SWIGEXPORT void QTabBar_moveTab(QTabBar * self, int from, int to) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)from; 
  arg3 = (int)to; 
  (arg1)->moveTab(arg2,arg3);
}


SWIGEXPORT bool QTabBar_isTabEnabled(QTabBar const * self, int index) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  result = (bool)((QTabBar const *)arg1)->isTabEnabled(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTabBar_setTabEnabled(QTabBar * self, int index, bool m3arg3) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  arg3 = m3arg3 ? true : false; 
  (arg1)->setTabEnabled(arg2,arg3);
}


SWIGEXPORT QString *  QTabBar_tabText(QTabBar const * self, int index) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QString *  cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  *(QString **)&cresult = new QString((const QString &)((QTabBar const *)arg1)->tabText(arg2));
  return cresult;
}


SWIGEXPORT void QTabBar_setTabText(QTabBar * self, int index, QString * text) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  arg3 = *(QString **)&text;
  (arg1)->setTabText(arg2,(QString const &)*arg3);
}


SWIGEXPORT QColor * QTabBar_tabTextColor(QTabBar const * self, int index) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QColor * cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  *(QColor **)&cresult = new QColor((const QColor &)((QTabBar const *)arg1)->tabTextColor(arg2));
  return cresult;
}


SWIGEXPORT void QTabBar_setTabTextColor(QTabBar * self, int index, QColor * color) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QColor *arg3 = 0 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  arg3 = *(QColor **)&color;
  (arg1)->setTabTextColor(arg2,(QColor const &)*arg3);
}


SWIGEXPORT QIcon * QTabBar_tabIcon(QTabBar const * self, int index) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QIcon * cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  *(QIcon **)&cresult = new QIcon((const QIcon &)((QTabBar const *)arg1)->tabIcon(arg2));
  return cresult;
}


SWIGEXPORT void QTabBar_setTabIcon(QTabBar * self, int index, QIcon * icon) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QIcon *arg3 = 0 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  arg3 = *(QIcon **)&icon;
  (arg1)->setTabIcon(arg2,(QIcon const &)*arg3);
}


SWIGEXPORT Qt::TextElideMode QTabBar_elideMode(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  Qt::TextElideMode result;
  Qt::TextElideMode cresult ;
  
  arg1 = *(QTabBar **)&self; 
  result = (Qt::TextElideMode)((QTabBar const *)arg1)->elideMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTabBar_setElideMode(QTabBar * self, Qt::TextElideMode m3arg2) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  Qt::TextElideMode arg2 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (Qt::TextElideMode)m3arg2; 
  (arg1)->setElideMode(arg2);
}


SWIGEXPORT void QTabBar_setTabToolTip(QTabBar * self, int index, QString * tip) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  arg3 = *(QString **)&tip;
  (arg1)->setTabToolTip(arg2,(QString const &)*arg3);
}


SWIGEXPORT QString *  QTabBar_tabToolTip(QTabBar const * self, int index) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QString *  cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  *(QString **)&cresult = new QString((const QString &)((QTabBar const *)arg1)->tabToolTip(arg2));
  return cresult;
}


SWIGEXPORT void QTabBar_setTabWhatsThis(QTabBar * self, int index, QString * text) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  arg3 = *(QString **)&text;
  (arg1)->setTabWhatsThis(arg2,(QString const &)*arg3);
}


SWIGEXPORT QString *  QTabBar_tabWhatsThis(QTabBar const * self, int index) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QString *  cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  *(QString **)&cresult = new QString((const QString &)((QTabBar const *)arg1)->tabWhatsThis(arg2));
  return cresult;
}


SWIGEXPORT QRect * QTabBar_tabRect(QTabBar const * self, int index) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QRect * cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  *(QRect **)&cresult = new QRect((const QRect &)((QTabBar const *)arg1)->tabRect(arg2));
  return cresult;
}


SWIGEXPORT int QTabBar_tabAt(QTabBar const * self, QPoint * pos) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  QPoint *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = *(QPoint **)&pos;
  result = (int)((QTabBar const *)arg1)->tabAt((QPoint const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTabBar_currentIndex(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTabBar **)&self; 
  result = (int)((QTabBar const *)arg1)->currentIndex();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTabBar_count(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QTabBar **)&self; 
  result = (int)((QTabBar const *)arg1)->count();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QTabBar_sizeHint(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QTabBar **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QTabBar const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT QSize * QTabBar_minimumSizeHint(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QTabBar **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QTabBar const *)arg1)->minimumSizeHint());
  return cresult;
}


SWIGEXPORT void QTabBar_setDrawBase(QTabBar * self, bool drawTheBase) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = drawTheBase ? true : false; 
  (arg1)->setDrawBase(arg2);
}


SWIGEXPORT bool QTabBar_drawBase(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTabBar **)&self; 
  result = (bool)((QTabBar const *)arg1)->drawBase();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QTabBar_iconSize(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QTabBar **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QTabBar const *)arg1)->iconSize());
  return cresult;
}


SWIGEXPORT void QTabBar_setIconSize(QTabBar * self, QSize * size) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  QSize *arg2 = 0 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = *(QSize **)&size;
  (arg1)->setIconSize((QSize const &)*arg2);
}


SWIGEXPORT bool QTabBar_usesScrollButtons(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTabBar **)&self; 
  result = (bool)((QTabBar const *)arg1)->usesScrollButtons();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTabBar_setUsesScrollButtons(QTabBar * self, bool useButtons) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = useButtons ? true : false; 
  (arg1)->setUsesScrollButtons(arg2);
}


SWIGEXPORT bool QTabBar_tabsClosable(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTabBar **)&self; 
  result = (bool)((QTabBar const *)arg1)->tabsClosable();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTabBar_setTabsClosable(QTabBar * self, bool closable) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = closable ? true : false; 
  (arg1)->setTabsClosable(arg2);
}


SWIGEXPORT void QTabBar_setTabButton(QTabBar * self, int index, QTabBar::ButtonPosition position, QWidget * widget) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QTabBar::ButtonPosition arg3 ;
  QWidget *arg4 = (QWidget *) 0 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  arg3 = (QTabBar::ButtonPosition)position; 
  arg4 = *(QWidget **)&widget; 
  (arg1)->setTabButton(arg2,arg3,arg4);
}


SWIGEXPORT QWidget * QTabBar_tabButton(QTabBar const * self, int index, QTabBar::ButtonPosition position) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  QTabBar::ButtonPosition arg3 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  arg3 = (QTabBar::ButtonPosition)position; 
  result = (QWidget *)((QTabBar const *)arg1)->tabButton(arg2,arg3);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTabBar::SelectionBehavior QTabBar_selectionBehaviorOnRemove(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  QTabBar::SelectionBehavior result;
  QTabBar::SelectionBehavior cresult ;
  
  arg1 = *(QTabBar **)&self; 
  result = (QTabBar::SelectionBehavior)((QTabBar const *)arg1)->selectionBehaviorOnRemove();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTabBar_setSelectionBehaviorOnRemove(QTabBar * self, QTabBar::SelectionBehavior behavior) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  QTabBar::SelectionBehavior arg2 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (QTabBar::SelectionBehavior)behavior; 
  (arg1)->setSelectionBehaviorOnRemove(arg2);
}


SWIGEXPORT bool QTabBar_expanding(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTabBar **)&self; 
  result = (bool)((QTabBar const *)arg1)->expanding();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTabBar_setExpanding(QTabBar * self, bool enabled) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = enabled ? true : false; 
  (arg1)->setExpanding(arg2);
}


SWIGEXPORT bool QTabBar_isMovable(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTabBar **)&self; 
  result = (bool)((QTabBar const *)arg1)->isMovable();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTabBar_setMovable(QTabBar * self, bool movable) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = movable ? true : false; 
  (arg1)->setMovable(arg2);
}


SWIGEXPORT bool QTabBar_documentMode(QTabBar const * self) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTabBar **)&self; 
  result = (bool)((QTabBar const *)arg1)->documentMode();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTabBar_setDocumentMode(QTabBar * self, bool set) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = set ? true : false; 
  (arg1)->setDocumentMode(arg2);
}


SWIGEXPORT void QTabBar_setCurrentIndex(QTabBar * self, int index) {
  QTabBar *arg1 = (QTabBar *) 0 ;
  int arg2 ;
  
  arg1 = *(QTabBar **)&self; 
  arg2 = (int)index; 
  (arg1)->setCurrentIndex(arg2);
}


SWIGEXPORT long Modula3_QTabBarToQWidget(long objectRef) {
    long baseptr = 0;
    *(QWidget **)&baseptr = *(QTabBar **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

