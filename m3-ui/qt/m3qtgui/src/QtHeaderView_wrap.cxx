/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qheaderview.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void Delete_QHeaderView(QHeaderView * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  
  arg1 = *(QHeaderView **)&self; 
  delete arg1;
}


SWIGEXPORT void QHeaderView_setModel(QHeaderView * self, QAbstractItemModel * model) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  QAbstractItemModel *arg2 = (QAbstractItemModel *) 0 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = *(QAbstractItemModel **)&model; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT Qt::Orientation QHeaderView_orientation(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  Qt::Orientation result;
  Qt::Orientation cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (Qt::Orientation)((QHeaderView const *)arg1)->orientation();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_offset(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (int)((QHeaderView const *)arg1)->offset();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_length(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (int)((QHeaderView const *)arg1)->length();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QSize * QHeaderView_sizeHint(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QHeaderView const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT int QHeaderView_sectionSizeHint(QHeaderView const * self, int logicalIndex) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  result = (int)((QHeaderView const *)arg1)->sectionSizeHint(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_visualIndexAt(QHeaderView const * self, int position) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)position; 
  result = (int)((QHeaderView const *)arg1)->visualIndexAt(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_logicalIndexAt(QHeaderView const * self, int position) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)position; 
  result = (int)((QHeaderView const *)arg1)->logicalIndexAt(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_logicalIndexAt1(QHeaderView const * self, int x, int y) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)x; 
  arg3 = (int)y; 
  result = (int)((QHeaderView const *)arg1)->logicalIndexAt(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_logicalIndexAt2(QHeaderView const * self, QPoint * pos) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  QPoint *arg2 = 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = *(QPoint **)&pos;
  result = (int)((QHeaderView const *)arg1)->logicalIndexAt((QPoint const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_sectionSize(QHeaderView const * self, int logicalIndex) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  result = (int)((QHeaderView const *)arg1)->sectionSize(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_sectionPosition(QHeaderView const * self, int logicalIndex) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  result = (int)((QHeaderView const *)arg1)->sectionPosition(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_sectionViewportPosition(QHeaderView const * self, int logicalIndex) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  result = (int)((QHeaderView const *)arg1)->sectionViewportPosition(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_moveSection(QHeaderView * self, int from, int to) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)from; 
  arg3 = (int)to; 
  (arg1)->moveSection(arg2,arg3);
}


SWIGEXPORT void QHeaderView_swapSections(QHeaderView * self, int first, int second) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)first; 
  arg3 = (int)second; 
  (arg1)->swapSections(arg2,arg3);
}


SWIGEXPORT void QHeaderView_resizeSection(QHeaderView * self, int logicalIndex, int size) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  arg3 = (int)size; 
  (arg1)->resizeSection(arg2,arg3);
}


SWIGEXPORT void QHeaderView_resizeSections(QHeaderView * self, QHeaderView::ResizeMode mode) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  QHeaderView::ResizeMode arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (QHeaderView::ResizeMode)mode; 
  (arg1)->resizeSections(arg2);
}


SWIGEXPORT bool QHeaderView_isSectionHidden(QHeaderView const * self, int logicalIndex) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  result = (bool)((QHeaderView const *)arg1)->isSectionHidden(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_setSectionHidden(QHeaderView * self, int logicalIndex, bool hide) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  arg3 = hide ? true : false; 
  (arg1)->setSectionHidden(arg2,arg3);
}


SWIGEXPORT int QHeaderView_hiddenSectionCount(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (int)((QHeaderView const *)arg1)->hiddenSectionCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_hideSection(QHeaderView * self, int logicalIndex) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  (arg1)->hideSection(arg2);
}


SWIGEXPORT void QHeaderView_showSection(QHeaderView * self, int logicalIndex) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  (arg1)->showSection(arg2);
}


SWIGEXPORT int QHeaderView_count(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (int)((QHeaderView const *)arg1)->count();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_visualIndex(QHeaderView const * self, int logicalIndex) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  result = (int)((QHeaderView const *)arg1)->visualIndex(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_logicalIndex(QHeaderView const * self, int visualIndex) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)visualIndex; 
  result = (int)((QHeaderView const *)arg1)->logicalIndex(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_setMovable(QHeaderView * self, bool movable) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = movable ? true : false; 
  (arg1)->setMovable(arg2);
}


SWIGEXPORT bool QHeaderView_isMovable(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (bool)((QHeaderView const *)arg1)->isMovable();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_setClickable(QHeaderView * self, bool clickable) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = clickable ? true : false; 
  (arg1)->setClickable(arg2);
}


SWIGEXPORT bool QHeaderView_isClickable(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (bool)((QHeaderView const *)arg1)->isClickable();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_setHighlightSections(QHeaderView * self, bool highlight) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = highlight ? true : false; 
  (arg1)->setHighlightSections(arg2);
}


SWIGEXPORT bool QHeaderView_highlightSections(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (bool)((QHeaderView const *)arg1)->highlightSections();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_setResizeMode(QHeaderView * self, QHeaderView::ResizeMode mode) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  QHeaderView::ResizeMode arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (QHeaderView::ResizeMode)mode; 
  (arg1)->setResizeMode(arg2);
}


SWIGEXPORT void QHeaderView_setResizeMode1(QHeaderView * self, int logicalIndex, QHeaderView::ResizeMode mode) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  QHeaderView::ResizeMode arg3 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  arg3 = (QHeaderView::ResizeMode)mode; 
  (arg1)->setResizeMode(arg2,arg3);
}


SWIGEXPORT QHeaderView::ResizeMode QHeaderView_resizeMode(QHeaderView const * self, int logicalIndex) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  QHeaderView::ResizeMode result;
  QHeaderView::ResizeMode cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  result = (QHeaderView::ResizeMode)((QHeaderView const *)arg1)->resizeMode(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QHeaderView_stretchSectionCount(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (int)((QHeaderView const *)arg1)->stretchSectionCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_setSortIndicatorShown(QHeaderView * self, bool show) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = show ? true : false; 
  (arg1)->setSortIndicatorShown(arg2);
}


SWIGEXPORT bool QHeaderView_isSortIndicatorShown(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (bool)((QHeaderView const *)arg1)->isSortIndicatorShown();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_setSortIndicator(QHeaderView * self, int logicalIndex, Qt::SortOrder order) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  Qt::SortOrder arg3 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)logicalIndex; 
  arg3 = (Qt::SortOrder)order; 
  (arg1)->setSortIndicator(arg2,arg3);
}


SWIGEXPORT int QHeaderView_sortIndicatorSection(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (int)((QHeaderView const *)arg1)->sortIndicatorSection();
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::SortOrder QHeaderView_sortIndicatorOrder(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  Qt::SortOrder result;
  Qt::SortOrder cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (Qt::SortOrder)((QHeaderView const *)arg1)->sortIndicatorOrder();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QHeaderView_stretchLastSection(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (bool)((QHeaderView const *)arg1)->stretchLastSection();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_setStretchLastSection(QHeaderView * self, bool stretch) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = stretch ? true : false; 
  (arg1)->setStretchLastSection(arg2);
}


SWIGEXPORT bool QHeaderView_cascadingSectionResizes(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (bool)((QHeaderView const *)arg1)->cascadingSectionResizes();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_setCascadingSectionResizes(QHeaderView * self, bool enable) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setCascadingSectionResizes(arg2);
}


SWIGEXPORT int QHeaderView_defaultSectionSize(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (int)((QHeaderView const *)arg1)->defaultSectionSize();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_setDefaultSectionSize(QHeaderView * self, int size) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)size; 
  (arg1)->setDefaultSectionSize(arg2);
}


SWIGEXPORT int QHeaderView_minimumSectionSize(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (int)((QHeaderView const *)arg1)->minimumSectionSize();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_setMinimumSectionSize(QHeaderView * self, int size) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)size; 
  (arg1)->setMinimumSectionSize(arg2);
}


SWIGEXPORT Qt::Alignment QHeaderView_defaultAlignment(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  Qt::Alignment cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  *(Qt::Alignment **)&cresult = new Qt::Alignment((const Qt::Alignment &)((QHeaderView const *)arg1)->defaultAlignment());
  return cresult;
}


SWIGEXPORT void QHeaderView_setDefaultAlignment(QHeaderView * self, Qt::Alignment alignment) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  Qt::Alignment arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (Qt::Alignment)alignment; 
  (arg1)->setDefaultAlignment(arg2);
}


SWIGEXPORT void QHeaderView_doItemsLayout(QHeaderView * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  
  arg1 = *(QHeaderView **)&self; 
  (arg1)->doItemsLayout();
}


SWIGEXPORT bool QHeaderView_sectionsMoved(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (bool)((QHeaderView const *)arg1)->sectionsMoved();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QHeaderView_sectionsHidden(QHeaderView const * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QHeaderView **)&self; 
  result = (bool)((QHeaderView const *)arg1)->sectionsHidden();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QHeaderView_reset(QHeaderView * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  
  arg1 = *(QHeaderView **)&self; 
  (arg1)->reset();
}


SWIGEXPORT void QHeaderView_setOffset(QHeaderView * self, int offset) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)offset; 
  (arg1)->setOffset(arg2);
}


SWIGEXPORT void QHeaderView_setOffsetToSectionPosition(QHeaderView * self, int visualIndex) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  int arg2 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (int)visualIndex; 
  (arg1)->setOffsetToSectionPosition(arg2);
}


SWIGEXPORT void QHeaderView_setOffsetToLastSection(QHeaderView * self) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  
  arg1 = *(QHeaderView **)&self; 
  (arg1)->setOffsetToLastSection();
}


SWIGEXPORT void QHeaderView_headerDataChanged(QHeaderView * self, Qt::Orientation orientation, int logicalFirst, int logicalLast) {
  QHeaderView *arg1 = (QHeaderView *) 0 ;
  Qt::Orientation arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = *(QHeaderView **)&self; 
  arg2 = (Qt::Orientation)orientation; 
  arg3 = (int)logicalFirst; 
  arg4 = (int)logicalLast; 
  (arg1)->headerDataChanged(arg2,arg3,arg4);
}


SWIGEXPORT long Modula3_QHeaderViewToQAbstractItemView(long objectRef) {
    long baseptr = 0;
    *(QAbstractItemView **)&baseptr = *(QHeaderView **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

