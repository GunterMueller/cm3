(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtKeySequence;


IMPORT QtKeySequenceRaw;


IMPORT WeakRef;
FROM QtString IMPORT QString;
FROM QtByteArray IMPORT QByteArray;

PROCEDURE New_QKeySequence0 (self: QKeySequence; ): QKeySequence =
  VAR result: ADDRESS;
  BEGIN
    result := QtKeySequenceRaw.New_QKeySequence0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QKeySequence);

    RETURN self;
  END New_QKeySequence0;

PROCEDURE New_QKeySequence1 (self: QKeySequence; key: TEXT; ):
  QKeySequence =
  VAR
    result  : ADDRESS;
    qstr_key          := NEW(QString).initQString(key);
    arg1tmp           := LOOPHOLE(qstr_key.cxxObj, ADDRESS);
  BEGIN
    result := QtKeySequenceRaw.New_QKeySequence1(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QKeySequence);

    RETURN self;
  END New_QKeySequence1;

PROCEDURE New_QKeySequence2
  (self: QKeySequence; k1, k2, k3, k4: INTEGER; ): QKeySequence =
  VAR result: ADDRESS;
  BEGIN
    result := QtKeySequenceRaw.New_QKeySequence2(k1, k2, k3, k4);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QKeySequence);

    RETURN self;
  END New_QKeySequence2;

PROCEDURE New_QKeySequence3 (self: QKeySequence; k1, k2, k3: INTEGER; ):
  QKeySequence =
  VAR result: ADDRESS;
  BEGIN
    result := QtKeySequenceRaw.New_QKeySequence3(k1, k2, k3);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QKeySequence);

    RETURN self;
  END New_QKeySequence3;

PROCEDURE New_QKeySequence4 (self: QKeySequence; k1, k2: INTEGER; ):
  QKeySequence =
  VAR result: ADDRESS;
  BEGIN
    result := QtKeySequenceRaw.New_QKeySequence4(k1, k2);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QKeySequence);

    RETURN self;
  END New_QKeySequence4;

PROCEDURE New_QKeySequence5 (self: QKeySequence; k1: INTEGER; ):
  QKeySequence =
  VAR result: ADDRESS;
  BEGIN
    result := QtKeySequenceRaw.New_QKeySequence5(k1);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QKeySequence);

    RETURN self;
  END New_QKeySequence5;

PROCEDURE New_QKeySequence6 (self: QKeySequence; ks: QKeySequence; ):
  QKeySequence =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(ks.cxxObj, ADDRESS);
  BEGIN
    result := QtKeySequenceRaw.New_QKeySequence6(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QKeySequence);

    RETURN self;
  END New_QKeySequence6;

PROCEDURE New_QKeySequence7 (self: QKeySequence; key: StandardKey; ):
  QKeySequence =
  VAR result: ADDRESS;
  BEGIN
    result := QtKeySequenceRaw.New_QKeySequence7(ORD(key));

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QKeySequence);

    RETURN self;
  END New_QKeySequence7;

PROCEDURE Delete_QKeySequence (self: QKeySequence; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtKeySequenceRaw.Delete_QKeySequence(selfAdr);
  END Delete_QKeySequence;

PROCEDURE QKeySequence_count (self: QKeySequence; ): CARDINAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtKeySequenceRaw.QKeySequence_count(selfAdr);
  END QKeySequence_count;

PROCEDURE QKeySequence_isEmpty (self: QKeySequence; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtKeySequenceRaw.QKeySequence_isEmpty(selfAdr);
  END QKeySequence_isEmpty;

PROCEDURE QKeySequence_toString
  (self: QKeySequence; format: SequenceFormat; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtKeySequenceRaw.QKeySequence_toString(selfAdr, ORD(format));

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QKeySequence_toString;

PROCEDURE QKeySequence_toString1 (self: QKeySequence; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtKeySequenceRaw.QKeySequence_toString1(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QKeySequence_toString1;

PROCEDURE FromString (str: TEXT; format: SequenceFormat; ): QKeySequence =
  VAR
    ret     : ADDRESS;
    result  : QKeySequence;
    qstr_str               := NEW(QString).initQString(str);
    arg1tmp                := LOOPHOLE(qstr_str.cxxObj, ADDRESS);
  BEGIN
    ret := QtKeySequenceRaw.FromString(arg1tmp, ORD(format));

    result := NEW(QKeySequence);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END FromString;

PROCEDURE FromString1 (str: TEXT; ): QKeySequence =
  VAR
    ret     : ADDRESS;
    result  : QKeySequence;
    qstr_str               := NEW(QString).initQString(str);
    arg1tmp                := LOOPHOLE(qstr_str.cxxObj, ADDRESS);
  BEGIN
    ret := QtKeySequenceRaw.FromString1(arg1tmp);

    result := NEW(QKeySequence);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END FromString1;

PROCEDURE QKeySequence_matches (self, seq: QKeySequence; ): SequenceMatch =
  VAR
    ret    : INTEGER;
    result : SequenceMatch;
    selfAdr: ADDRESS       := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp                := LOOPHOLE(seq.cxxObj, ADDRESS);
  BEGIN
    ret := QtKeySequenceRaw.QKeySequence_matches(selfAdr, arg2tmp);
    result := VAL(ret, SequenceMatch);
    RETURN result;
  END QKeySequence_matches;

PROCEDURE Mnemonic (text: TEXT; ): QKeySequence =
  VAR
    ret      : ADDRESS;
    result   : QKeySequence;
    qstr_text               := NEW(QString).initQString(text);
    arg1tmp                 := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    ret := QtKeySequenceRaw.Mnemonic(arg1tmp);

    result := NEW(QKeySequence);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END Mnemonic;

PROCEDURE QKeySequence_isDetached (self: QKeySequence; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtKeySequenceRaw.QKeySequence_isDetached(selfAdr);
  END QKeySequence_isDetached;

PROCEDURE Cleanup_QKeySequence
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QKeySequence := ref;
  BEGIN
    Delete_QKeySequence(obj);
  END Cleanup_QKeySequence;

PROCEDURE Destroy_QKeySequence (self: QKeySequence) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QKeySequence);
  END Destroy_QKeySequence;

REVEAL
  QKeySequence = QKeySequencePublic BRANDED OBJECT
                 OVERRIDES
                   init_0     := New_QKeySequence0;
                   init_1     := New_QKeySequence1;
                   init_2     := New_QKeySequence2;
                   init_3     := New_QKeySequence3;
                   init_4     := New_QKeySequence4;
                   init_5     := New_QKeySequence5;
                   init_6     := New_QKeySequence6;
                   init_7     := New_QKeySequence7;
                   count      := QKeySequence_count;
                   isEmpty    := QKeySequence_isEmpty;
                   toString   := QKeySequence_toString;
                   toString1  := QKeySequence_toString1;
                   matches    := QKeySequence_matches;
                   isDetached := QKeySequence_isDetached;
                   destroyCxx := Destroy_QKeySequence;
                 END;


BEGIN
END QtKeySequence.
