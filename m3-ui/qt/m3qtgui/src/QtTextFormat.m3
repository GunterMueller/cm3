(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtTextFormat;


FROM QtStringList IMPORT QStringList;
FROM QtPen IMPORT QPen;
FROM QtFont IMPORT StyleStrategy, QFont, Capitalization, HintingPreference,
                   StyleHint;
FROM QtColor IMPORT QColor;
IMPORT QtTextFormatRaw;
FROM QtBrush IMPORT QBrush;
FROM QtNamespace IMPORT AlignmentFlag, LayoutDirection;


IMPORT WeakRef;
FROM QtByteArray IMPORT QByteArray;
FROM QtString IMPORT QString;

PROCEDURE New_QTextLength0 (self: QTextLength; ): QTextLength =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextFormatRaw.New_QTextLength0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextLength);

    RETURN self;
  END New_QTextLength0;

PROCEDURE New_QTextLength1
  (self: QTextLength; type: Type; value: LONGREAL; ): QTextLength =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextFormatRaw.New_QTextLength1(ORD(type), value);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextLength);

    RETURN self;
  END New_QTextLength1;

PROCEDURE QTextLength_type (self: QTextLength; ): Type =
  VAR
    ret    : INTEGER;
    result : Type;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextLength_type(selfAdr);
    result := VAL(ret, Type);
    RETURN result;
  END QTextLength_type;

PROCEDURE QTextLength_value (self: QTextLength; maximumLength: LONGREAL; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextLength_value(selfAdr, maximumLength);
  END QTextLength_value;

PROCEDURE QTextLength_rawValue (self: QTextLength; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextLength_rawValue(selfAdr);
  END QTextLength_rawValue;

PROCEDURE Delete_QTextLength (self: QTextLength; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.Delete_QTextLength(selfAdr);
  END Delete_QTextLength;

PROCEDURE Cleanup_QTextLength
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTextLength := ref;
  BEGIN
    Delete_QTextLength(obj);
  END Cleanup_QTextLength;

PROCEDURE Destroy_QTextLength (self: QTextLength) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTextLength);
  END Destroy_QTextLength;

REVEAL
  QTextLength = QTextLengthPublic BRANDED OBJECT
                OVERRIDES
                  init_0     := New_QTextLength0;
                  init_1     := New_QTextLength1;
                  type       := QTextLength_type;
                  value      := QTextLength_value;
                  rawValue   := QTextLength_rawValue;
                  destroyCxx := Destroy_QTextLength;
                END;

PROCEDURE New_QTextFormat0 (self: QTextFormat; ): QTextFormat =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextFormatRaw.New_QTextFormat0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextFormat);

    RETURN self;
  END New_QTextFormat0;

PROCEDURE New_QTextFormat1 (self: QTextFormat; type: INTEGER; ):
  QTextFormat =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextFormatRaw.New_QTextFormat1(type);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextFormat);

    RETURN self;
  END New_QTextFormat1;

PROCEDURE New_QTextFormat2 (self: QTextFormat; rhs: QTextFormat; ):
  QTextFormat =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(rhs.cxxObj, ADDRESS);
  BEGIN
    result := QtTextFormatRaw.New_QTextFormat2(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextFormat);

    RETURN self;
  END New_QTextFormat2;

PROCEDURE Delete_QTextFormat (self: QTextFormat; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.Delete_QTextFormat(selfAdr);
  END Delete_QTextFormat;

PROCEDURE QTextFormat_merge (self, other: QTextFormat; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(other.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFormat_merge(selfAdr, arg2tmp);
  END QTextFormat_merge;

PROCEDURE QTextFormat_isValid (self: QTextFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_isValid(selfAdr);
  END QTextFormat_isValid;

PROCEDURE QTextFormat_type (self: QTextFormat; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_type(selfAdr);
  END QTextFormat_type;

PROCEDURE QTextFormat_objectIndex (self: QTextFormat; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_objectIndex(selfAdr);
  END QTextFormat_objectIndex;

PROCEDURE QTextFormat_setObjectIndex
  (self: QTextFormat; object: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFormat_setObjectIndex(selfAdr, object);
  END QTextFormat_setObjectIndex;

PROCEDURE QTextFormat_clearProperty
  (self: QTextFormat; propertyId: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFormat_clearProperty(selfAdr, propertyId);
  END QTextFormat_clearProperty;

PROCEDURE QTextFormat_hasProperty
  (self: QTextFormat; propertyId: INTEGER; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_hasProperty(selfAdr, propertyId);
  END QTextFormat_hasProperty;

PROCEDURE QTextFormat_boolProperty
  (self: QTextFormat; propertyId: INTEGER; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_boolProperty(selfAdr, propertyId);
  END QTextFormat_boolProperty;

PROCEDURE QTextFormat_intProperty
  (self: QTextFormat; propertyId: INTEGER; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_intProperty(selfAdr, propertyId);
  END QTextFormat_intProperty;

PROCEDURE QTextFormat_doubleProperty
  (self: QTextFormat; propertyId: INTEGER; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_doubleProperty(selfAdr, propertyId);
  END QTextFormat_doubleProperty;

PROCEDURE QTextFormat_stringProperty
  (self: QTextFormat; propertyId: INTEGER; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_stringProperty(selfAdr, propertyId);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextFormat_stringProperty;

PROCEDURE QTextFormat_colorProperty
  (self: QTextFormat; propertyId: INTEGER; ): QColor =
  VAR
    ret    : ADDRESS;
    result : QColor;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_colorProperty(selfAdr, propertyId);

    result := NEW(QColor);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_colorProperty;

PROCEDURE QTextFormat_penProperty
  (self: QTextFormat; propertyId: INTEGER; ): QPen =
  VAR
    ret    : ADDRESS;
    result : QPen;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_penProperty(selfAdr, propertyId);

    result := NEW(QPen);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_penProperty;

PROCEDURE QTextFormat_brushProperty
  (self: QTextFormat; propertyId: INTEGER; ): QBrush =
  VAR
    ret    : ADDRESS;
    result : QBrush;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_brushProperty(selfAdr, propertyId);

    result := NEW(QBrush);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_brushProperty;

PROCEDURE QTextFormat_lengthProperty
  (self: QTextFormat; propertyId: INTEGER; ): QTextLength =
  VAR
    ret    : ADDRESS;
    result : QTextLength;
    selfAdr: ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_lengthProperty(selfAdr, propertyId);

    result := NEW(QTextLength);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_lengthProperty;

PROCEDURE QTextFormat_propertyCount (self: QTextFormat; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_propertyCount(selfAdr);
  END QTextFormat_propertyCount;

PROCEDURE QTextFormat_setObjectType (self: QTextFormat; type: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFormat_setObjectType(selfAdr, type);
  END QTextFormat_setObjectType;

PROCEDURE QTextFormat_objectType (self: QTextFormat; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_objectType(selfAdr);
  END QTextFormat_objectType;

PROCEDURE QTextFormat_isCharFormat (self: QTextFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_isCharFormat(selfAdr);
  END QTextFormat_isCharFormat;

PROCEDURE QTextFormat_isBlockFormat (self: QTextFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_isBlockFormat(selfAdr);
  END QTextFormat_isBlockFormat;

PROCEDURE QTextFormat_isListFormat (self: QTextFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_isListFormat(selfAdr);
  END QTextFormat_isListFormat;

PROCEDURE QTextFormat_isFrameFormat (self: QTextFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_isFrameFormat(selfAdr);
  END QTextFormat_isFrameFormat;

PROCEDURE QTextFormat_isImageFormat (self: QTextFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_isImageFormat(selfAdr);
  END QTextFormat_isImageFormat;

PROCEDURE QTextFormat_isTableFormat (self: QTextFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_isTableFormat(selfAdr);
  END QTextFormat_isTableFormat;

PROCEDURE QTextFormat_isTableCellFormat (self: QTextFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFormat_isTableCellFormat(selfAdr);
  END QTextFormat_isTableCellFormat;

PROCEDURE QTextFormat_toBlockFormat (self: QTextFormat; ):
  QTextBlockFormat =
  VAR
    ret    : ADDRESS;
    result : QTextBlockFormat;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_toBlockFormat(selfAdr);

    result := NEW(QTextBlockFormat);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_toBlockFormat;

PROCEDURE QTextFormat_toCharFormat (self: QTextFormat; ): QTextCharFormat =
  VAR
    ret    : ADDRESS;
    result : QTextCharFormat;
    selfAdr: ADDRESS         := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_toCharFormat(selfAdr);

    result := NEW(QTextCharFormat);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_toCharFormat;

PROCEDURE QTextFormat_toListFormat (self: QTextFormat; ): QTextListFormat =
  VAR
    ret    : ADDRESS;
    result : QTextListFormat;
    selfAdr: ADDRESS         := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_toListFormat(selfAdr);

    result := NEW(QTextListFormat);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_toListFormat;

PROCEDURE QTextFormat_toTableFormat (self: QTextFormat; ):
  QTextTableFormat =
  VAR
    ret    : ADDRESS;
    result : QTextTableFormat;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_toTableFormat(selfAdr);

    result := NEW(QTextTableFormat);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_toTableFormat;

PROCEDURE QTextFormat_toFrameFormat (self: QTextFormat; ):
  QTextFrameFormat =
  VAR
    ret    : ADDRESS;
    result : QTextFrameFormat;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_toFrameFormat(selfAdr);

    result := NEW(QTextFrameFormat);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_toFrameFormat;

PROCEDURE QTextFormat_toImageFormat (self: QTextFormat; ):
  QTextImageFormat =
  VAR
    ret    : ADDRESS;
    result : QTextImageFormat;
    selfAdr: ADDRESS          := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_toImageFormat(selfAdr);

    result := NEW(QTextImageFormat);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_toImageFormat;

PROCEDURE QTextFormat_toTableCellFormat (self: QTextFormat; ):
  QTextTableCellFormat =
  VAR
    ret    : ADDRESS;
    result : QTextTableCellFormat;
    selfAdr: ADDRESS              := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_toTableCellFormat(selfAdr);

    result := NEW(QTextTableCellFormat);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_toTableCellFormat;

PROCEDURE QTextFormat_setLayoutDirection
  (self: QTextFormat; direction: LayoutDirection; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFormat_setLayoutDirection(selfAdr, ORD(direction));
  END QTextFormat_setLayoutDirection;

PROCEDURE QTextFormat_layoutDirection (self: QTextFormat; ):
  LayoutDirection =
  VAR
    ret    : INTEGER;
    result : LayoutDirection;
    selfAdr: ADDRESS         := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_layoutDirection(selfAdr);
    result := VAL(ret, LayoutDirection);
    RETURN result;
  END QTextFormat_layoutDirection;

PROCEDURE QTextFormat_setBackground (self: QTextFormat; brush: QBrush; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(brush.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFormat_setBackground(selfAdr, arg2tmp);
  END QTextFormat_setBackground;

PROCEDURE QTextFormat_background (self: QTextFormat; ): QBrush =
  VAR
    ret    : ADDRESS;
    result : QBrush;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_background(selfAdr);

    result := NEW(QBrush);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_background;

PROCEDURE QTextFormat_clearBackground (self: QTextFormat; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFormat_clearBackground(selfAdr);
  END QTextFormat_clearBackground;

PROCEDURE QTextFormat_setForeground (self: QTextFormat; brush: QBrush; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(brush.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFormat_setForeground(selfAdr, arg2tmp);
  END QTextFormat_setForeground;

PROCEDURE QTextFormat_foreground (self: QTextFormat; ): QBrush =
  VAR
    ret    : ADDRESS;
    result : QBrush;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFormat_foreground(selfAdr);

    result := NEW(QBrush);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFormat_foreground;

PROCEDURE QTextFormat_clearForeground (self: QTextFormat; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFormat_clearForeground(selfAdr);
  END QTextFormat_clearForeground;

PROCEDURE Cleanup_QTextFormat
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTextFormat := ref;
  BEGIN
    Delete_QTextFormat(obj);
  END Cleanup_QTextFormat;

PROCEDURE Destroy_QTextFormat (self: QTextFormat) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTextFormat);
  END Destroy_QTextFormat;

REVEAL
  QTextFormat = QTextFormatPublic BRANDED OBJECT
                OVERRIDES
                  init_0             := New_QTextFormat0;
                  init_1             := New_QTextFormat1;
                  init_2             := New_QTextFormat2;
                  merge              := QTextFormat_merge;
                  isValid            := QTextFormat_isValid;
                  type               := QTextFormat_type;
                  objectIndex        := QTextFormat_objectIndex;
                  setObjectIndex     := QTextFormat_setObjectIndex;
                  clearProperty      := QTextFormat_clearProperty;
                  hasProperty        := QTextFormat_hasProperty;
                  boolProperty       := QTextFormat_boolProperty;
                  intProperty        := QTextFormat_intProperty;
                  doubleProperty     := QTextFormat_doubleProperty;
                  stringProperty     := QTextFormat_stringProperty;
                  colorProperty      := QTextFormat_colorProperty;
                  penProperty        := QTextFormat_penProperty;
                  brushProperty      := QTextFormat_brushProperty;
                  lengthProperty     := QTextFormat_lengthProperty;
                  propertyCount      := QTextFormat_propertyCount;
                  setObjectType      := QTextFormat_setObjectType;
                  objectType         := QTextFormat_objectType;
                  isCharFormat       := QTextFormat_isCharFormat;
                  isBlockFormat      := QTextFormat_isBlockFormat;
                  isListFormat       := QTextFormat_isListFormat;
                  isFrameFormat      := QTextFormat_isFrameFormat;
                  isImageFormat      := QTextFormat_isImageFormat;
                  isTableFormat      := QTextFormat_isTableFormat;
                  isTableCellFormat  := QTextFormat_isTableCellFormat;
                  toBlockFormat      := QTextFormat_toBlockFormat;
                  toCharFormat       := QTextFormat_toCharFormat;
                  toListFormat       := QTextFormat_toListFormat;
                  toTableFormat      := QTextFormat_toTableFormat;
                  toFrameFormat      := QTextFormat_toFrameFormat;
                  toImageFormat      := QTextFormat_toImageFormat;
                  toTableCellFormat  := QTextFormat_toTableCellFormat;
                  setLayoutDirection := QTextFormat_setLayoutDirection;
                  layoutDirection    := QTextFormat_layoutDirection;
                  setBackground      := QTextFormat_setBackground;
                  background         := QTextFormat_background;
                  clearBackground    := QTextFormat_clearBackground;
                  setForeground      := QTextFormat_setForeground;
                  foreground         := QTextFormat_foreground;
                  clearForeground    := QTextFormat_clearForeground;
                  destroyCxx         := Destroy_QTextFormat;
                END;

PROCEDURE New_QTextCharFormat0 (self: QTextCharFormat; ): QTextCharFormat =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextFormatRaw.New_QTextCharFormat0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextCharFormat);

    RETURN self;
  END New_QTextCharFormat0;

PROCEDURE QTextCharFormat_isValid (self: QTextCharFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_isValid(selfAdr);
  END QTextCharFormat_isValid;

PROCEDURE QTextCharFormat_setFont (self: QTextCharFormat; font: QFont; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(font.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFont(selfAdr, arg2tmp);
  END QTextCharFormat_setFont;

PROCEDURE QTextCharFormat_font (self: QTextCharFormat; ): QFont =
  VAR
    ret    : ADDRESS;
    result : QFont;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_font(selfAdr);

    result := NEW(QFont);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextCharFormat_font;

PROCEDURE QTextCharFormat_setFontFamily
  (self: QTextCharFormat; family: TEXT; ) =
  VAR
    selfAdr    : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_family          := NEW(QString).initQString(family);
    arg2tmp              := LOOPHOLE(qstr_family.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontFamily(selfAdr, arg2tmp);
  END QTextCharFormat_setFontFamily;

PROCEDURE QTextCharFormat_fontFamily (self: QTextCharFormat; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_fontFamily(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextCharFormat_fontFamily;

PROCEDURE QTextCharFormat_setFontPointSize
  (self: QTextCharFormat; size: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontPointSize(selfAdr, size);
  END QTextCharFormat_setFontPointSize;

PROCEDURE QTextCharFormat_fontPointSize (self: QTextCharFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_fontPointSize(selfAdr);
  END QTextCharFormat_fontPointSize;

PROCEDURE QTextCharFormat_setFontWeight
  (self: QTextCharFormat; weight: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontWeight(selfAdr, weight);
  END QTextCharFormat_setFontWeight;

PROCEDURE QTextCharFormat_fontWeight (self: QTextCharFormat; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_fontWeight(selfAdr);
  END QTextCharFormat_fontWeight;

PROCEDURE QTextCharFormat_setFontItalic
  (self: QTextCharFormat; italic: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontItalic(selfAdr, italic);
  END QTextCharFormat_setFontItalic;

PROCEDURE QTextCharFormat_fontItalic (self: QTextCharFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_fontItalic(selfAdr);
  END QTextCharFormat_fontItalic;

PROCEDURE QTextCharFormat_setFontCapitalization
  (self: QTextCharFormat; capitalization: Capitalization; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontCapitalization(
      selfAdr, ORD(capitalization));
  END QTextCharFormat_setFontCapitalization;

PROCEDURE QTextCharFormat_fontCapitalization (self: QTextCharFormat; ):
  Capitalization =
  VAR
    ret    : INTEGER;
    result : Capitalization;
    selfAdr: ADDRESS        := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_fontCapitalization(selfAdr);
    result := VAL(ret, Capitalization);
    RETURN result;
  END QTextCharFormat_fontCapitalization;

PROCEDURE QTextCharFormat_setFontLetterSpacing
  (self: QTextCharFormat; spacing: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontLetterSpacing(selfAdr, spacing);
  END QTextCharFormat_setFontLetterSpacing;

PROCEDURE QTextCharFormat_fontLetterSpacing (self: QTextCharFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_fontLetterSpacing(selfAdr);
  END QTextCharFormat_fontLetterSpacing;

PROCEDURE QTextCharFormat_setFontWordSpacing
  (self: QTextCharFormat; spacing: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontWordSpacing(selfAdr, spacing);
  END QTextCharFormat_setFontWordSpacing;

PROCEDURE QTextCharFormat_fontWordSpacing (self: QTextCharFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_fontWordSpacing(selfAdr);
  END QTextCharFormat_fontWordSpacing;

PROCEDURE QTextCharFormat_setFontUnderline
  (self: QTextCharFormat; underline: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontUnderline(selfAdr, underline);
  END QTextCharFormat_setFontUnderline;

PROCEDURE QTextCharFormat_fontUnderline (self: QTextCharFormat; ):
  BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_fontUnderline(selfAdr);
  END QTextCharFormat_fontUnderline;

PROCEDURE QTextCharFormat_setFontOverline
  (self: QTextCharFormat; overline: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontOverline(selfAdr, overline);
  END QTextCharFormat_setFontOverline;

PROCEDURE QTextCharFormat_fontOverline (self: QTextCharFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_fontOverline(selfAdr);
  END QTextCharFormat_fontOverline;

PROCEDURE QTextCharFormat_setFontStrikeOut
  (self: QTextCharFormat; strikeOut: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontStrikeOut(selfAdr, strikeOut);
  END QTextCharFormat_setFontStrikeOut;

PROCEDURE QTextCharFormat_fontStrikeOut (self: QTextCharFormat; ):
  BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_fontStrikeOut(selfAdr);
  END QTextCharFormat_fontStrikeOut;

PROCEDURE QTextCharFormat_setUnderlineColor
  (self: QTextCharFormat; color: QColor; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(color.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setUnderlineColor(selfAdr, arg2tmp);
  END QTextCharFormat_setUnderlineColor;

PROCEDURE QTextCharFormat_underlineColor (self: QTextCharFormat; ):
  QColor =
  VAR
    ret    : ADDRESS;
    result : QColor;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_underlineColor(selfAdr);

    result := NEW(QColor);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextCharFormat_underlineColor;

PROCEDURE QTextCharFormat_setFontFixedPitch
  (self: QTextCharFormat; fixedPitch: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontFixedPitch(selfAdr, fixedPitch);
  END QTextCharFormat_setFontFixedPitch;

PROCEDURE QTextCharFormat_fontFixedPitch (self: QTextCharFormat; ):
  BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_fontFixedPitch(selfAdr);
  END QTextCharFormat_fontFixedPitch;

PROCEDURE QTextCharFormat_setFontStyleHint
  (self: QTextCharFormat; hint: StyleHint; strategy: StyleStrategy; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontStyleHint(
      selfAdr, ORD(hint), ORD(strategy));
  END QTextCharFormat_setFontStyleHint;

PROCEDURE QTextCharFormat_setFontStyleHint1
  (self: QTextCharFormat; hint: StyleHint; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontStyleHint1(selfAdr, ORD(hint));
  END QTextCharFormat_setFontStyleHint1;

PROCEDURE QTextCharFormat_setFontStyleStrategy
  (self: QTextCharFormat; strategy: StyleStrategy; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontStyleStrategy(
      selfAdr, ORD(strategy));
  END QTextCharFormat_setFontStyleStrategy;

PROCEDURE QTextCharFormat_fontStyleHint (self: QTextCharFormat; ):
  StyleHint =
  VAR
    ret    : INTEGER;
    result : StyleHint;
    selfAdr: ADDRESS   := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_fontStyleHint(selfAdr);
    result := VAL(ret, StyleHint);
    RETURN result;
  END QTextCharFormat_fontStyleHint;

PROCEDURE QTextCharFormat_fontStyleStrategy (self: QTextCharFormat; ):
  StyleStrategy =
  VAR
    ret    : INTEGER;
    result : StyleStrategy;
    selfAdr: ADDRESS       := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_fontStyleStrategy(selfAdr);
    result := VAL(ret, StyleStrategy);
    RETURN result;
  END QTextCharFormat_fontStyleStrategy;

PROCEDURE QTextCharFormat_setFontHintingPreference
  (self: QTextCharFormat; hintingPreference: HintingPreference; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontHintingPreference(
      selfAdr, ORD(hintingPreference));
  END QTextCharFormat_setFontHintingPreference;

PROCEDURE QTextCharFormat_fontHintingPreference (self: QTextCharFormat; ):
  HintingPreference =
  VAR
    ret    : INTEGER;
    result : HintingPreference;
    selfAdr: ADDRESS           := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_fontHintingPreference(selfAdr);
    result := VAL(ret, HintingPreference);
    RETURN result;
  END QTextCharFormat_fontHintingPreference;

PROCEDURE QTextCharFormat_setFontKerning
  (self: QTextCharFormat; enable: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setFontKerning(selfAdr, enable);
  END QTextCharFormat_setFontKerning;

PROCEDURE QTextCharFormat_fontKerning (self: QTextCharFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_fontKerning(selfAdr);
  END QTextCharFormat_fontKerning;

PROCEDURE QTextCharFormat_setUnderlineStyle
  (self: QTextCharFormat; style: UnderlineStyle; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setUnderlineStyle(selfAdr, ORD(style));
  END QTextCharFormat_setUnderlineStyle;

PROCEDURE QTextCharFormat_underlineStyle (self: QTextCharFormat; ):
  UnderlineStyle =
  VAR
    ret    : INTEGER;
    result : UnderlineStyle;
    selfAdr: ADDRESS        := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_underlineStyle(selfAdr);
    result := VAL(ret, UnderlineStyle);
    RETURN result;
  END QTextCharFormat_underlineStyle;

PROCEDURE QTextCharFormat_setVerticalAlignment
  (self: QTextCharFormat; alignment: VerticalAlignment; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setVerticalAlignment(
      selfAdr, ORD(alignment));
  END QTextCharFormat_setVerticalAlignment;

PROCEDURE QTextCharFormat_verticalAlignment (self: QTextCharFormat; ):
  VerticalAlignment =
  VAR
    ret    : INTEGER;
    result : VerticalAlignment;
    selfAdr: ADDRESS           := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_verticalAlignment(selfAdr);
    result := VAL(ret, VerticalAlignment);
    RETURN result;
  END QTextCharFormat_verticalAlignment;

PROCEDURE QTextCharFormat_setTextOutline
  (self: QTextCharFormat; pen: QPen; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(pen.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setTextOutline(selfAdr, arg2tmp);
  END QTextCharFormat_setTextOutline;

PROCEDURE QTextCharFormat_textOutline (self: QTextCharFormat; ): QPen =
  VAR
    ret    : ADDRESS;
    result : QPen;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_textOutline(selfAdr);

    result := NEW(QPen);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextCharFormat_textOutline;

PROCEDURE QTextCharFormat_setToolTip (self: QTextCharFormat; tip: TEXT; ) =
  VAR
    selfAdr : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_tip          := NEW(QString).initQString(tip);
    arg2tmp           := LOOPHOLE(qstr_tip.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setToolTip(selfAdr, arg2tmp);
  END QTextCharFormat_setToolTip;

PROCEDURE QTextCharFormat_toolTip (self: QTextCharFormat; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_toolTip(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextCharFormat_toolTip;

PROCEDURE QTextCharFormat_setAnchor
  (self: QTextCharFormat; anchor: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setAnchor(selfAdr, anchor);
  END QTextCharFormat_setAnchor;

PROCEDURE QTextCharFormat_isAnchor (self: QTextCharFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_isAnchor(selfAdr);
  END QTextCharFormat_isAnchor;

PROCEDURE QTextCharFormat_setAnchorHref
  (self: QTextCharFormat; value: TEXT; ) =
  VAR
    selfAdr   : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_value          := NEW(QString).initQString(value);
    arg2tmp             := LOOPHOLE(qstr_value.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setAnchorHref(selfAdr, arg2tmp);
  END QTextCharFormat_setAnchorHref;

PROCEDURE QTextCharFormat_anchorHref (self: QTextCharFormat; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_anchorHref(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextCharFormat_anchorHref;

PROCEDURE QTextCharFormat_setAnchorName
  (self: QTextCharFormat; name: TEXT; ) =
  VAR
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_name          := NEW(QString).initQString(name);
    arg2tmp            := LOOPHOLE(qstr_name.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setAnchorName(selfAdr, arg2tmp);
  END QTextCharFormat_setAnchorName;

PROCEDURE QTextCharFormat_anchorName (self: QTextCharFormat; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_anchorName(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextCharFormat_anchorName;

PROCEDURE QTextCharFormat_setAnchorNames
  (self: QTextCharFormat; names: QStringList; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(names.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setAnchorNames(selfAdr, arg2tmp);
  END QTextCharFormat_setAnchorNames;

PROCEDURE QTextCharFormat_anchorNames (self: QTextCharFormat; ):
  QStringList =
  VAR
    ret    : ADDRESS;
    result : QStringList;
    selfAdr: ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextCharFormat_anchorNames(selfAdr);

    result := NEW(QStringList);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextCharFormat_anchorNames;

PROCEDURE QTextCharFormat_setTableCellRowSpan
  (self: QTextCharFormat; tableCellRowSpan: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setTableCellRowSpan(
      selfAdr, tableCellRowSpan);
  END QTextCharFormat_setTableCellRowSpan;

PROCEDURE QTextCharFormat_tableCellRowSpan (self: QTextCharFormat; ):
  INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_tableCellRowSpan(selfAdr);
  END QTextCharFormat_tableCellRowSpan;

PROCEDURE QTextCharFormat_setTableCellColumnSpan
  (self: QTextCharFormat; tableCellColumnSpan: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextCharFormat_setTableCellColumnSpan(
      selfAdr, tableCellColumnSpan);
  END QTextCharFormat_setTableCellColumnSpan;

PROCEDURE QTextCharFormat_tableCellColumnSpan (self: QTextCharFormat; ):
  INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextCharFormat_tableCellColumnSpan(selfAdr);
  END QTextCharFormat_tableCellColumnSpan;

PROCEDURE Delete_QTextCharFormat (self: QTextCharFormat; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.Delete_QTextCharFormat(selfAdr);
  END Delete_QTextCharFormat;

PROCEDURE Cleanup_QTextCharFormat
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTextCharFormat := ref;
  BEGIN
    Delete_QTextCharFormat(obj);
  END Cleanup_QTextCharFormat;

PROCEDURE Destroy_QTextCharFormat (self: QTextCharFormat) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTextCharFormat);
  END Destroy_QTextCharFormat;

REVEAL
  QTextCharFormat =
    QTextCharFormatPublic BRANDED OBJECT
    OVERRIDES
      init_0                   := New_QTextCharFormat0;
      isValid                  := QTextCharFormat_isValid;
      setFont                  := QTextCharFormat_setFont;
      font                     := QTextCharFormat_font;
      setFontFamily            := QTextCharFormat_setFontFamily;
      fontFamily               := QTextCharFormat_fontFamily;
      setFontPointSize         := QTextCharFormat_setFontPointSize;
      fontPointSize            := QTextCharFormat_fontPointSize;
      setFontWeight            := QTextCharFormat_setFontWeight;
      fontWeight               := QTextCharFormat_fontWeight;
      setFontItalic            := QTextCharFormat_setFontItalic;
      fontItalic               := QTextCharFormat_fontItalic;
      setFontCapitalization    := QTextCharFormat_setFontCapitalization;
      fontCapitalization       := QTextCharFormat_fontCapitalization;
      setFontLetterSpacing     := QTextCharFormat_setFontLetterSpacing;
      fontLetterSpacing        := QTextCharFormat_fontLetterSpacing;
      setFontWordSpacing       := QTextCharFormat_setFontWordSpacing;
      fontWordSpacing          := QTextCharFormat_fontWordSpacing;
      setFontUnderline         := QTextCharFormat_setFontUnderline;
      fontUnderline            := QTextCharFormat_fontUnderline;
      setFontOverline          := QTextCharFormat_setFontOverline;
      fontOverline             := QTextCharFormat_fontOverline;
      setFontStrikeOut         := QTextCharFormat_setFontStrikeOut;
      fontStrikeOut            := QTextCharFormat_fontStrikeOut;
      setUnderlineColor        := QTextCharFormat_setUnderlineColor;
      underlineColor           := QTextCharFormat_underlineColor;
      setFontFixedPitch        := QTextCharFormat_setFontFixedPitch;
      fontFixedPitch           := QTextCharFormat_fontFixedPitch;
      setFontStyleHint         := QTextCharFormat_setFontStyleHint;
      setFontStyleHint1        := QTextCharFormat_setFontStyleHint1;
      setFontStyleStrategy     := QTextCharFormat_setFontStyleStrategy;
      fontStyleHint            := QTextCharFormat_fontStyleHint;
      fontStyleStrategy        := QTextCharFormat_fontStyleStrategy;
      setFontHintingPreference := QTextCharFormat_setFontHintingPreference;
      fontHintingPreference    := QTextCharFormat_fontHintingPreference;
      setFontKerning           := QTextCharFormat_setFontKerning;
      fontKerning              := QTextCharFormat_fontKerning;
      setUnderlineStyle        := QTextCharFormat_setUnderlineStyle;
      underlineStyle           := QTextCharFormat_underlineStyle;
      setVerticalAlignment     := QTextCharFormat_setVerticalAlignment;
      verticalAlignment        := QTextCharFormat_verticalAlignment;
      setTextOutline           := QTextCharFormat_setTextOutline;
      textOutline              := QTextCharFormat_textOutline;
      setToolTip               := QTextCharFormat_setToolTip;
      toolTip                  := QTextCharFormat_toolTip;
      setAnchor                := QTextCharFormat_setAnchor;
      isAnchor                 := QTextCharFormat_isAnchor;
      setAnchorHref            := QTextCharFormat_setAnchorHref;
      anchorHref               := QTextCharFormat_anchorHref;
      setAnchorName            := QTextCharFormat_setAnchorName;
      anchorName               := QTextCharFormat_anchorName;
      setAnchorNames           := QTextCharFormat_setAnchorNames;
      anchorNames              := QTextCharFormat_anchorNames;
      setTableCellRowSpan      := QTextCharFormat_setTableCellRowSpan;
      tableCellRowSpan         := QTextCharFormat_tableCellRowSpan;
      setTableCellColumnSpan   := QTextCharFormat_setTableCellColumnSpan;
      tableCellColumnSpan      := QTextCharFormat_tableCellColumnSpan;
      destroyCxx               := Destroy_QTextCharFormat;
    END;

PROCEDURE New_QTextBlockFormat0 (self: QTextBlockFormat; ):
  QTextBlockFormat =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextFormatRaw.New_QTextBlockFormat0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextBlockFormat);

    RETURN self;
  END New_QTextBlockFormat0;

PROCEDURE QTextBlockFormat_isValid (self: QTextBlockFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextBlockFormat_isValid(selfAdr);
  END QTextBlockFormat_isValid;

PROCEDURE QTextBlockFormat_setAlignment
  (self: QTextBlockFormat; alignment: AlignmentFlag; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextBlockFormat_setAlignment(selfAdr, ORD(alignment));
  END QTextBlockFormat_setAlignment;

PROCEDURE QTextBlockFormat_alignment (self: QTextBlockFormat; ):
  AlignmentFlag =
  VAR
    ret    : INTEGER;
    result : AlignmentFlag;
    selfAdr: ADDRESS       := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextBlockFormat_alignment(selfAdr);
    result := VAL(ret, AlignmentFlag);
    RETURN result;
  END QTextBlockFormat_alignment;

PROCEDURE QTextBlockFormat_setTopMargin
  (self: QTextBlockFormat; margin: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextBlockFormat_setTopMargin(selfAdr, margin);
  END QTextBlockFormat_setTopMargin;

PROCEDURE QTextBlockFormat_topMargin (self: QTextBlockFormat; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextBlockFormat_topMargin(selfAdr);
  END QTextBlockFormat_topMargin;

PROCEDURE QTextBlockFormat_setBottomMargin
  (self: QTextBlockFormat; margin: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextBlockFormat_setBottomMargin(selfAdr, margin);
  END QTextBlockFormat_setBottomMargin;

PROCEDURE QTextBlockFormat_bottomMargin (self: QTextBlockFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextBlockFormat_bottomMargin(selfAdr);
  END QTextBlockFormat_bottomMargin;

PROCEDURE QTextBlockFormat_setLeftMargin
  (self: QTextBlockFormat; margin: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextBlockFormat_setLeftMargin(selfAdr, margin);
  END QTextBlockFormat_setLeftMargin;

PROCEDURE QTextBlockFormat_leftMargin (self: QTextBlockFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextBlockFormat_leftMargin(selfAdr);
  END QTextBlockFormat_leftMargin;

PROCEDURE QTextBlockFormat_setRightMargin
  (self: QTextBlockFormat; margin: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextBlockFormat_setRightMargin(selfAdr, margin);
  END QTextBlockFormat_setRightMargin;

PROCEDURE QTextBlockFormat_rightMargin (self: QTextBlockFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextBlockFormat_rightMargin(selfAdr);
  END QTextBlockFormat_rightMargin;

PROCEDURE QTextBlockFormat_setTextIndent
  (self: QTextBlockFormat; aindent: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextBlockFormat_setTextIndent(selfAdr, aindent);
  END QTextBlockFormat_setTextIndent;

PROCEDURE QTextBlockFormat_textIndent (self: QTextBlockFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextBlockFormat_textIndent(selfAdr);
  END QTextBlockFormat_textIndent;

PROCEDURE QTextBlockFormat_setIndent
  (self: QTextBlockFormat; indent: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextBlockFormat_setIndent(selfAdr, indent);
  END QTextBlockFormat_setIndent;

PROCEDURE QTextBlockFormat_indent (self: QTextBlockFormat; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextBlockFormat_indent(selfAdr);
  END QTextBlockFormat_indent;

PROCEDURE QTextBlockFormat_setLineHeight
  (self: QTextBlockFormat; height: LONGREAL; heightType: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextBlockFormat_setLineHeight(
      selfAdr, height, heightType);
  END QTextBlockFormat_setLineHeight;

PROCEDURE QTextBlockFormat_lineHeight
  (self: QTextBlockFormat; scriptLineHeight, scaling: LONGREAL; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextBlockFormat_lineHeight(
             selfAdr, scriptLineHeight, scaling);
  END QTextBlockFormat_lineHeight;

PROCEDURE QTextBlockFormat_lineHeight1 (self: QTextBlockFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextBlockFormat_lineHeight1(selfAdr);
  END QTextBlockFormat_lineHeight1;

PROCEDURE QTextBlockFormat_lineHeightType (self: QTextBlockFormat; ):
  INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextBlockFormat_lineHeightType(selfAdr);
  END QTextBlockFormat_lineHeightType;

PROCEDURE QTextBlockFormat_setNonBreakableLines
  (self: QTextBlockFormat; b: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextBlockFormat_setNonBreakableLines(selfAdr, b);
  END QTextBlockFormat_setNonBreakableLines;

PROCEDURE QTextBlockFormat_nonBreakableLines (self: QTextBlockFormat; ):
  BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextBlockFormat_nonBreakableLines(selfAdr);
  END QTextBlockFormat_nonBreakableLines;

PROCEDURE QTextBlockFormat_setPageBreakPolicy
  (self: QTextBlockFormat; flags: PageBreakFlags; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextBlockFormat_setPageBreakPolicy(
      selfAdr, ORD(flags));
  END QTextBlockFormat_setPageBreakPolicy;

PROCEDURE QTextBlockFormat_pageBreakPolicy (self: QTextBlockFormat; ):
  PageBreakFlags =
  VAR
    ret    : INTEGER;
    result : PageBreakFlags;
    selfAdr: ADDRESS        := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextBlockFormat_pageBreakPolicy(selfAdr);
    result := VAL(ret, PageBreakFlags);
    RETURN result;
  END QTextBlockFormat_pageBreakPolicy;

PROCEDURE Delete_QTextBlockFormat (self: QTextBlockFormat; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.Delete_QTextBlockFormat(selfAdr);
  END Delete_QTextBlockFormat;

PROCEDURE Cleanup_QTextBlockFormat
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTextBlockFormat := ref;
  BEGIN
    Delete_QTextBlockFormat(obj);
  END Cleanup_QTextBlockFormat;

PROCEDURE Destroy_QTextBlockFormat (self: QTextBlockFormat) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTextBlockFormat);
  END Destroy_QTextBlockFormat;

REVEAL
  QTextBlockFormat =
    QTextBlockFormatPublic BRANDED OBJECT
    OVERRIDES
      init_0               := New_QTextBlockFormat0;
      isValid              := QTextBlockFormat_isValid;
      setAlignment         := QTextBlockFormat_setAlignment;
      alignment            := QTextBlockFormat_alignment;
      setTopMargin         := QTextBlockFormat_setTopMargin;
      topMargin            := QTextBlockFormat_topMargin;
      setBottomMargin      := QTextBlockFormat_setBottomMargin;
      bottomMargin         := QTextBlockFormat_bottomMargin;
      setLeftMargin        := QTextBlockFormat_setLeftMargin;
      leftMargin           := QTextBlockFormat_leftMargin;
      setRightMargin       := QTextBlockFormat_setRightMargin;
      rightMargin          := QTextBlockFormat_rightMargin;
      setTextIndent        := QTextBlockFormat_setTextIndent;
      textIndent           := QTextBlockFormat_textIndent;
      setIndent            := QTextBlockFormat_setIndent;
      indent               := QTextBlockFormat_indent;
      setLineHeight        := QTextBlockFormat_setLineHeight;
      lineHeight           := QTextBlockFormat_lineHeight;
      lineHeight1          := QTextBlockFormat_lineHeight1;
      lineHeightType       := QTextBlockFormat_lineHeightType;
      setNonBreakableLines := QTextBlockFormat_setNonBreakableLines;
      nonBreakableLines    := QTextBlockFormat_nonBreakableLines;
      setPageBreakPolicy   := QTextBlockFormat_setPageBreakPolicy;
      pageBreakPolicy      := QTextBlockFormat_pageBreakPolicy;
      destroyCxx           := Destroy_QTextBlockFormat;
    END;

PROCEDURE New_QTextListFormat0 (self: QTextListFormat; ): QTextListFormat =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextFormatRaw.New_QTextListFormat0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextListFormat);

    RETURN self;
  END New_QTextListFormat0;

PROCEDURE QTextListFormat_isValid (self: QTextListFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextListFormat_isValid(selfAdr);
  END QTextListFormat_isValid;

PROCEDURE QTextListFormat_setStyle
  (self: QTextListFormat; style: Style; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextListFormat_setStyle(selfAdr, ORD(style));
  END QTextListFormat_setStyle;

PROCEDURE QTextListFormat_style (self: QTextListFormat; ): Style =
  VAR
    ret    : INTEGER;
    result : Style;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextListFormat_style(selfAdr);
    result := VAL(ret, Style);
    RETURN result;
  END QTextListFormat_style;

PROCEDURE QTextListFormat_setIndent
  (self: QTextListFormat; indent: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextListFormat_setIndent(selfAdr, indent);
  END QTextListFormat_setIndent;

PROCEDURE QTextListFormat_indent (self: QTextListFormat; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextListFormat_indent(selfAdr);
  END QTextListFormat_indent;

PROCEDURE QTextListFormat_setNumberPrefix
  (self: QTextListFormat; numberPrefix: TEXT; ) =
  VAR
    selfAdr          : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_numberPrefix          := NEW(QString).initQString(numberPrefix);
    arg2tmp := LOOPHOLE(qstr_numberPrefix.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextListFormat_setNumberPrefix(selfAdr, arg2tmp);
  END QTextListFormat_setNumberPrefix;

PROCEDURE QTextListFormat_numberPrefix (self: QTextListFormat; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextListFormat_numberPrefix(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextListFormat_numberPrefix;

PROCEDURE QTextListFormat_setNumberSuffix
  (self: QTextListFormat; numberSuffix: TEXT; ) =
  VAR
    selfAdr          : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_numberSuffix          := NEW(QString).initQString(numberSuffix);
    arg2tmp := LOOPHOLE(qstr_numberSuffix.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextListFormat_setNumberSuffix(selfAdr, arg2tmp);
  END QTextListFormat_setNumberSuffix;

PROCEDURE QTextListFormat_numberSuffix (self: QTextListFormat; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextListFormat_numberSuffix(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextListFormat_numberSuffix;

PROCEDURE Delete_QTextListFormat (self: QTextListFormat; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.Delete_QTextListFormat(selfAdr);
  END Delete_QTextListFormat;

PROCEDURE Cleanup_QTextListFormat
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTextListFormat := ref;
  BEGIN
    Delete_QTextListFormat(obj);
  END Cleanup_QTextListFormat;

PROCEDURE Destroy_QTextListFormat (self: QTextListFormat) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTextListFormat);
  END Destroy_QTextListFormat;

REVEAL
  QTextListFormat = QTextListFormatPublic BRANDED OBJECT
                    OVERRIDES
                      init_0          := New_QTextListFormat0;
                      isValid         := QTextListFormat_isValid;
                      setStyle        := QTextListFormat_setStyle;
                      style           := QTextListFormat_style;
                      setIndent       := QTextListFormat_setIndent;
                      indent          := QTextListFormat_indent;
                      setNumberPrefix := QTextListFormat_setNumberPrefix;
                      numberPrefix    := QTextListFormat_numberPrefix;
                      setNumberSuffix := QTextListFormat_setNumberSuffix;
                      numberSuffix    := QTextListFormat_numberSuffix;
                      destroyCxx      := Destroy_QTextListFormat;
                    END;

PROCEDURE New_QTextImageFormat0 (self: QTextImageFormat; ):
  QTextImageFormat =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextFormatRaw.New_QTextImageFormat0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextImageFormat);

    RETURN self;
  END New_QTextImageFormat0;

PROCEDURE QTextImageFormat_isValid (self: QTextImageFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextImageFormat_isValid(selfAdr);
  END QTextImageFormat_isValid;

PROCEDURE QTextImageFormat_setName (self: QTextImageFormat; name: TEXT; ) =
  VAR
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_name          := NEW(QString).initQString(name);
    arg2tmp            := LOOPHOLE(qstr_name.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextImageFormat_setName(selfAdr, arg2tmp);
  END QTextImageFormat_setName;

PROCEDURE QTextImageFormat_name (self: QTextImageFormat; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextImageFormat_name(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QTextImageFormat_name;

PROCEDURE QTextImageFormat_setWidth
  (self: QTextImageFormat; width: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextImageFormat_setWidth(selfAdr, width);
  END QTextImageFormat_setWidth;

PROCEDURE QTextImageFormat_width (self: QTextImageFormat; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextImageFormat_width(selfAdr);
  END QTextImageFormat_width;

PROCEDURE QTextImageFormat_setHeight
  (self: QTextImageFormat; height: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextImageFormat_setHeight(selfAdr, height);
  END QTextImageFormat_setHeight;

PROCEDURE QTextImageFormat_height (self: QTextImageFormat; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextImageFormat_height(selfAdr);
  END QTextImageFormat_height;

PROCEDURE Delete_QTextImageFormat (self: QTextImageFormat; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.Delete_QTextImageFormat(selfAdr);
  END Delete_QTextImageFormat;

PROCEDURE Cleanup_QTextImageFormat
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTextImageFormat := ref;
  BEGIN
    Delete_QTextImageFormat(obj);
  END Cleanup_QTextImageFormat;

PROCEDURE Destroy_QTextImageFormat (self: QTextImageFormat) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTextImageFormat);
  END Destroy_QTextImageFormat;

REVEAL
  QTextImageFormat = QTextImageFormatPublic BRANDED OBJECT
                     OVERRIDES
                       init_0     := New_QTextImageFormat0;
                       isValid    := QTextImageFormat_isValid;
                       setName    := QTextImageFormat_setName;
                       name       := QTextImageFormat_name;
                       setWidth   := QTextImageFormat_setWidth;
                       width      := QTextImageFormat_width;
                       setHeight  := QTextImageFormat_setHeight;
                       height     := QTextImageFormat_height;
                       destroyCxx := Destroy_QTextImageFormat;
                     END;

PROCEDURE New_QTextFrameFormat0 (self: QTextFrameFormat; ):
  QTextFrameFormat =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextFormatRaw.New_QTextFrameFormat0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextFrameFormat);

    RETURN self;
  END New_QTextFrameFormat0;

PROCEDURE QTextFrameFormat_isValid (self: QTextFrameFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFrameFormat_isValid(selfAdr);
  END QTextFrameFormat_isValid;

PROCEDURE QTextFrameFormat_setPosition
  (self: QTextFrameFormat; f: Position; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setPosition(selfAdr, ORD(f));
  END QTextFrameFormat_setPosition;

PROCEDURE QTextFrameFormat_position (self: QTextFrameFormat; ): Position =
  VAR
    ret    : INTEGER;
    result : Position;
    selfAdr: ADDRESS  := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFrameFormat_position(selfAdr);
    result := VAL(ret, Position);
    RETURN result;
  END QTextFrameFormat_position;

PROCEDURE QTextFrameFormat_setBorder
  (self: QTextFrameFormat; border: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setBorder(selfAdr, border);
  END QTextFrameFormat_setBorder;

PROCEDURE QTextFrameFormat_border (self: QTextFrameFormat; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFrameFormat_border(selfAdr);
  END QTextFrameFormat_border;

PROCEDURE QTextFrameFormat_setBorderBrush
  (self: QTextFrameFormat; brush: QBrush; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(brush.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setBorderBrush(selfAdr, arg2tmp);
  END QTextFrameFormat_setBorderBrush;

PROCEDURE QTextFrameFormat_borderBrush (self: QTextFrameFormat; ): QBrush =
  VAR
    ret    : ADDRESS;
    result : QBrush;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFrameFormat_borderBrush(selfAdr);

    result := NEW(QBrush);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFrameFormat_borderBrush;

PROCEDURE QTextFrameFormat_setBorderStyle
  (self: QTextFrameFormat; style: BorderStyle; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setBorderStyle(selfAdr, ORD(style));
  END QTextFrameFormat_setBorderStyle;

PROCEDURE QTextFrameFormat_borderStyle (self: QTextFrameFormat; ):
  BorderStyle =
  VAR
    ret    : INTEGER;
    result : BorderStyle;
    selfAdr: ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFrameFormat_borderStyle(selfAdr);
    result := VAL(ret, BorderStyle);
    RETURN result;
  END QTextFrameFormat_borderStyle;

PROCEDURE QTextFrameFormat_setMargin
  (self: QTextFrameFormat; margin: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setMargin(selfAdr, margin);
  END QTextFrameFormat_setMargin;

PROCEDURE QTextFrameFormat_margin (self: QTextFrameFormat; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFrameFormat_margin(selfAdr);
  END QTextFrameFormat_margin;

PROCEDURE QTextFrameFormat_setTopMargin
  (self: QTextFrameFormat; margin: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setTopMargin(selfAdr, margin);
  END QTextFrameFormat_setTopMargin;

PROCEDURE QTextFrameFormat_topMargin (self: QTextFrameFormat; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFrameFormat_topMargin(selfAdr);
  END QTextFrameFormat_topMargin;

PROCEDURE QTextFrameFormat_setBottomMargin
  (self: QTextFrameFormat; margin: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setBottomMargin(selfAdr, margin);
  END QTextFrameFormat_setBottomMargin;

PROCEDURE QTextFrameFormat_bottomMargin (self: QTextFrameFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFrameFormat_bottomMargin(selfAdr);
  END QTextFrameFormat_bottomMargin;

PROCEDURE QTextFrameFormat_setLeftMargin
  (self: QTextFrameFormat; margin: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setLeftMargin(selfAdr, margin);
  END QTextFrameFormat_setLeftMargin;

PROCEDURE QTextFrameFormat_leftMargin (self: QTextFrameFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFrameFormat_leftMargin(selfAdr);
  END QTextFrameFormat_leftMargin;

PROCEDURE QTextFrameFormat_setRightMargin
  (self: QTextFrameFormat; margin: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setRightMargin(selfAdr, margin);
  END QTextFrameFormat_setRightMargin;

PROCEDURE QTextFrameFormat_rightMargin (self: QTextFrameFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFrameFormat_rightMargin(selfAdr);
  END QTextFrameFormat_rightMargin;

PROCEDURE QTextFrameFormat_setPadding
  (self: QTextFrameFormat; padding: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setPadding(selfAdr, padding);
  END QTextFrameFormat_setPadding;

PROCEDURE QTextFrameFormat_padding (self: QTextFrameFormat; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextFrameFormat_padding(selfAdr);
  END QTextFrameFormat_padding;

PROCEDURE QTextFrameFormat_setWidth
  (self: QTextFrameFormat; width: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setWidth(selfAdr, width);
  END QTextFrameFormat_setWidth;

PROCEDURE QTextFrameFormat_setWidth1
  (self: QTextFrameFormat; length: QTextLength; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(length.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setWidth1(selfAdr, arg2tmp);
  END QTextFrameFormat_setWidth1;

PROCEDURE QTextFrameFormat_width (self: QTextFrameFormat; ): QTextLength =
  VAR
    ret    : ADDRESS;
    result : QTextLength;
    selfAdr: ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFrameFormat_width(selfAdr);

    result := NEW(QTextLength);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFrameFormat_width;

PROCEDURE QTextFrameFormat_setHeight
  (self: QTextFrameFormat; height: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setHeight(selfAdr, height);
  END QTextFrameFormat_setHeight;

PROCEDURE QTextFrameFormat_setHeight1
  (self: QTextFrameFormat; height: QTextLength; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(height.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setHeight1(selfAdr, arg2tmp);
  END QTextFrameFormat_setHeight1;

PROCEDURE QTextFrameFormat_height (self: QTextFrameFormat; ): QTextLength =
  VAR
    ret    : ADDRESS;
    result : QTextLength;
    selfAdr: ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFrameFormat_height(selfAdr);

    result := NEW(QTextLength);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QTextFrameFormat_height;

PROCEDURE QTextFrameFormat_setPageBreakPolicy
  (self: QTextFrameFormat; flags: PageBreakFlags; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextFrameFormat_setPageBreakPolicy(
      selfAdr, ORD(flags));
  END QTextFrameFormat_setPageBreakPolicy;

PROCEDURE QTextFrameFormat_pageBreakPolicy (self: QTextFrameFormat; ):
  PageBreakFlags =
  VAR
    ret    : INTEGER;
    result : PageBreakFlags;
    selfAdr: ADDRESS        := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextFrameFormat_pageBreakPolicy(selfAdr);
    result := VAL(ret, PageBreakFlags);
    RETURN result;
  END QTextFrameFormat_pageBreakPolicy;

PROCEDURE Delete_QTextFrameFormat (self: QTextFrameFormat; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.Delete_QTextFrameFormat(selfAdr);
  END Delete_QTextFrameFormat;

PROCEDURE Cleanup_QTextFrameFormat
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTextFrameFormat := ref;
  BEGIN
    Delete_QTextFrameFormat(obj);
  END Cleanup_QTextFrameFormat;

PROCEDURE Destroy_QTextFrameFormat (self: QTextFrameFormat) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTextFrameFormat);
  END Destroy_QTextFrameFormat;

REVEAL
  QTextFrameFormat =
    QTextFrameFormatPublic BRANDED OBJECT
    OVERRIDES
      init_0             := New_QTextFrameFormat0;
      isValid            := QTextFrameFormat_isValid;
      setPosition        := QTextFrameFormat_setPosition;
      position           := QTextFrameFormat_position;
      setBorder          := QTextFrameFormat_setBorder;
      border             := QTextFrameFormat_border;
      setBorderBrush     := QTextFrameFormat_setBorderBrush;
      borderBrush        := QTextFrameFormat_borderBrush;
      setBorderStyle     := QTextFrameFormat_setBorderStyle;
      borderStyle        := QTextFrameFormat_borderStyle;
      setMargin          := QTextFrameFormat_setMargin;
      margin             := QTextFrameFormat_margin;
      setTopMargin       := QTextFrameFormat_setTopMargin;
      topMargin          := QTextFrameFormat_topMargin;
      setBottomMargin    := QTextFrameFormat_setBottomMargin;
      bottomMargin       := QTextFrameFormat_bottomMargin;
      setLeftMargin      := QTextFrameFormat_setLeftMargin;
      leftMargin         := QTextFrameFormat_leftMargin;
      setRightMargin     := QTextFrameFormat_setRightMargin;
      rightMargin        := QTextFrameFormat_rightMargin;
      setPadding         := QTextFrameFormat_setPadding;
      padding            := QTextFrameFormat_padding;
      setWidth           := QTextFrameFormat_setWidth;
      setWidth1          := QTextFrameFormat_setWidth1;
      width              := QTextFrameFormat_width;
      setHeight          := QTextFrameFormat_setHeight;
      setHeight1         := QTextFrameFormat_setHeight1;
      height             := QTextFrameFormat_height;
      setPageBreakPolicy := QTextFrameFormat_setPageBreakPolicy;
      pageBreakPolicy    := QTextFrameFormat_pageBreakPolicy;
      destroyCxx         := Destroy_QTextFrameFormat;
    END;

PROCEDURE New_QTextTableFormat0 (self: QTextTableFormat; ):
  QTextTableFormat =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextFormatRaw.New_QTextTableFormat0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextTableFormat);

    RETURN self;
  END New_QTextTableFormat0;

PROCEDURE QTextTableFormat_isValid (self: QTextTableFormat; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextTableFormat_isValid(selfAdr);
  END QTextTableFormat_isValid;

PROCEDURE QTextTableFormat_columns (self: QTextTableFormat; ): INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextTableFormat_columns(selfAdr);
  END QTextTableFormat_columns;

PROCEDURE QTextTableFormat_setColumns
  (self: QTextTableFormat; columns: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextTableFormat_setColumns(selfAdr, columns);
  END QTextTableFormat_setColumns;

PROCEDURE QTextTableFormat_clearColumnWidthConstraints
  (self: QTextTableFormat; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextTableFormat_clearColumnWidthConstraints(selfAdr);
  END QTextTableFormat_clearColumnWidthConstraints;

PROCEDURE QTextTableFormat_cellSpacing (self: QTextTableFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextTableFormat_cellSpacing(selfAdr);
  END QTextTableFormat_cellSpacing;

PROCEDURE QTextTableFormat_setCellSpacing
  (self: QTextTableFormat; spacing: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextTableFormat_setCellSpacing(selfAdr, spacing);
  END QTextTableFormat_setCellSpacing;

PROCEDURE QTextTableFormat_cellPadding (self: QTextTableFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextTableFormat_cellPadding(selfAdr);
  END QTextTableFormat_cellPadding;

PROCEDURE QTextTableFormat_setCellPadding
  (self: QTextTableFormat; padding: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextTableFormat_setCellPadding(selfAdr, padding);
  END QTextTableFormat_setCellPadding;

PROCEDURE QTextTableFormat_setAlignment
  (self: QTextTableFormat; alignment: AlignmentFlag; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextTableFormat_setAlignment(selfAdr, ORD(alignment));
  END QTextTableFormat_setAlignment;

PROCEDURE QTextTableFormat_alignment (self: QTextTableFormat; ):
  AlignmentFlag =
  VAR
    ret    : INTEGER;
    result : AlignmentFlag;
    selfAdr: ADDRESS       := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtTextFormatRaw.QTextTableFormat_alignment(selfAdr);
    result := VAL(ret, AlignmentFlag);
    RETURN result;
  END QTextTableFormat_alignment;

PROCEDURE QTextTableFormat_setHeaderRowCount
  (self: QTextTableFormat; count: INTEGER; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextTableFormat_setHeaderRowCount(selfAdr, count);
  END QTextTableFormat_setHeaderRowCount;

PROCEDURE QTextTableFormat_headerRowCount (self: QTextTableFormat; ):
  INTEGER =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextTableFormat_headerRowCount(selfAdr);
  END QTextTableFormat_headerRowCount;

PROCEDURE Delete_QTextTableFormat (self: QTextTableFormat; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.Delete_QTextTableFormat(selfAdr);
  END Delete_QTextTableFormat;

PROCEDURE Cleanup_QTextTableFormat
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTextTableFormat := ref;
  BEGIN
    Delete_QTextTableFormat(obj);
  END Cleanup_QTextTableFormat;

PROCEDURE Destroy_QTextTableFormat (self: QTextTableFormat) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTextTableFormat);
  END Destroy_QTextTableFormat;

REVEAL
  QTextTableFormat =
    QTextTableFormatPublic BRANDED OBJECT
    OVERRIDES
      init_0     := New_QTextTableFormat0;
      isValid    := QTextTableFormat_isValid;
      columns    := QTextTableFormat_columns;
      setColumns := QTextTableFormat_setColumns;
      clearColumnWidthConstraints := QTextTableFormat_clearColumnWidthConstraints;
      cellSpacing       := QTextTableFormat_cellSpacing;
      setCellSpacing    := QTextTableFormat_setCellSpacing;
      cellPadding       := QTextTableFormat_cellPadding;
      setCellPadding    := QTextTableFormat_setCellPadding;
      setAlignment      := QTextTableFormat_setAlignment;
      alignment         := QTextTableFormat_alignment;
      setHeaderRowCount := QTextTableFormat_setHeaderRowCount;
      headerRowCount    := QTextTableFormat_headerRowCount;
      destroyCxx        := Destroy_QTextTableFormat;
    END;

PROCEDURE New_QTextTableCellFormat0 (self: QTextTableCellFormat; ):
  QTextTableCellFormat =
  VAR result: ADDRESS;
  BEGIN
    result := QtTextFormatRaw.New_QTextTableCellFormat0();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QTextTableCellFormat);

    RETURN self;
  END New_QTextTableCellFormat0;

PROCEDURE QTextTableCellFormat_isValid (self: QTextTableCellFormat; ):
  BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextTableCellFormat_isValid(selfAdr);
  END QTextTableCellFormat_isValid;

PROCEDURE QTextTableCellFormat_setTopPadding
  (self: QTextTableCellFormat; padding: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextTableCellFormat_setTopPadding(selfAdr, padding);
  END QTextTableCellFormat_setTopPadding;

PROCEDURE QTextTableCellFormat_topPadding (self: QTextTableCellFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextTableCellFormat_topPadding(selfAdr);
  END QTextTableCellFormat_topPadding;

PROCEDURE QTextTableCellFormat_setBottomPadding
  (self: QTextTableCellFormat; padding: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextTableCellFormat_setBottomPadding(selfAdr, padding);
  END QTextTableCellFormat_setBottomPadding;

PROCEDURE QTextTableCellFormat_bottomPadding
  (self: QTextTableCellFormat; ): LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextTableCellFormat_bottomPadding(selfAdr);
  END QTextTableCellFormat_bottomPadding;

PROCEDURE QTextTableCellFormat_setLeftPadding
  (self: QTextTableCellFormat; padding: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextTableCellFormat_setLeftPadding(selfAdr, padding);
  END QTextTableCellFormat_setLeftPadding;

PROCEDURE QTextTableCellFormat_leftPadding (self: QTextTableCellFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextTableCellFormat_leftPadding(selfAdr);
  END QTextTableCellFormat_leftPadding;

PROCEDURE QTextTableCellFormat_setRightPadding
  (self: QTextTableCellFormat; padding: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextTableCellFormat_setRightPadding(selfAdr, padding);
  END QTextTableCellFormat_setRightPadding;

PROCEDURE QTextTableCellFormat_rightPadding (self: QTextTableCellFormat; ):
  LONGREAL =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtTextFormatRaw.QTextTableCellFormat_rightPadding(selfAdr);
  END QTextTableCellFormat_rightPadding;

PROCEDURE QTextTableCellFormat_setPadding
  (self: QTextTableCellFormat; padding: LONGREAL; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.QTextTableCellFormat_setPadding(selfAdr, padding);
  END QTextTableCellFormat_setPadding;

PROCEDURE Delete_QTextTableCellFormat (self: QTextTableCellFormat; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtTextFormatRaw.Delete_QTextTableCellFormat(selfAdr);
  END Delete_QTextTableCellFormat;

PROCEDURE Cleanup_QTextTableCellFormat
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QTextTableCellFormat := ref;
  BEGIN
    Delete_QTextTableCellFormat(obj);
  END Cleanup_QTextTableCellFormat;

PROCEDURE Destroy_QTextTableCellFormat (self: QTextTableCellFormat) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QTextTableCellFormat);
  END Destroy_QTextTableCellFormat;

REVEAL
  QTextTableCellFormat =
    QTextTableCellFormatPublic BRANDED OBJECT
    OVERRIDES
      init_0           := New_QTextTableCellFormat0;
      isValid          := QTextTableCellFormat_isValid;
      setTopPadding    := QTextTableCellFormat_setTopPadding;
      topPadding       := QTextTableCellFormat_topPadding;
      setBottomPadding := QTextTableCellFormat_setBottomPadding;
      bottomPadding    := QTextTableCellFormat_bottomPadding;
      setLeftPadding   := QTextTableCellFormat_setLeftPadding;
      leftPadding      := QTextTableCellFormat_leftPadding;
      setRightPadding  := QTextTableCellFormat_setRightPadding;
      rightPadding     := QTextTableCellFormat_rightPadding;
      setPadding       := QTextTableCellFormat_setPadding;
      destroyCxx       := Destroy_QTextTableCellFormat;
    END;


BEGIN
END QtTextFormat.
