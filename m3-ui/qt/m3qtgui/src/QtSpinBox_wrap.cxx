/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qspinbox.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QSpinBox * New_QSpinBox0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QSpinBox *result = 0 ;
  QSpinBox * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QSpinBox *)new QSpinBox(arg1);
  *(QSpinBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QSpinBox * New_QSpinBox1() {
  QSpinBox *result = 0 ;
  QSpinBox * cresult ;
  
  result = (QSpinBox *)new QSpinBox();
  *(QSpinBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT int QSpinBox_value(QSpinBox const * self) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QSpinBox **)&self; 
  result = (int)((QSpinBox const *)arg1)->value();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * QSpinBox_prefix(QSpinBox const * self) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  QString * cresult ;
  
  arg1 = *(QSpinBox **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QSpinBox const *)arg1)->prefix());
  return cresult;
}


SWIGEXPORT void QSpinBox_setPrefix(QSpinBox * self, QString * prefix) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QSpinBox **)&self; 
  arg2 = *(QString **)&prefix;
  (arg1)->setPrefix((QString const &)*arg2);
}


SWIGEXPORT QString * QSpinBox_suffix(QSpinBox const * self) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  QString * cresult ;
  
  arg1 = *(QSpinBox **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QSpinBox const *)arg1)->suffix());
  return cresult;
}


SWIGEXPORT void QSpinBox_setSuffix(QSpinBox * self, QString * suffix) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QSpinBox **)&self; 
  arg2 = *(QString **)&suffix;
  (arg1)->setSuffix((QString const &)*arg2);
}


SWIGEXPORT QString * QSpinBox_cleanText(QSpinBox const * self) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  QString * cresult ;
  
  arg1 = *(QSpinBox **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QSpinBox const *)arg1)->cleanText());
  return cresult;
}


SWIGEXPORT int QSpinBox_singleStep(QSpinBox const * self) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QSpinBox **)&self; 
  result = (int)((QSpinBox const *)arg1)->singleStep();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSpinBox_setSingleStep(QSpinBox * self, int val) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  int arg2 ;
  
  arg1 = *(QSpinBox **)&self; 
  arg2 = (int)val; 
  (arg1)->setSingleStep(arg2);
}


SWIGEXPORT int QSpinBox_minimum(QSpinBox const * self) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QSpinBox **)&self; 
  result = (int)((QSpinBox const *)arg1)->minimum();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSpinBox_setMinimum(QSpinBox * self, int min) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  int arg2 ;
  
  arg1 = *(QSpinBox **)&self; 
  arg2 = (int)min; 
  (arg1)->setMinimum(arg2);
}


SWIGEXPORT int QSpinBox_maximum(QSpinBox const * self) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QSpinBox **)&self; 
  result = (int)((QSpinBox const *)arg1)->maximum();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QSpinBox_setMaximum(QSpinBox * self, int max) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  int arg2 ;
  
  arg1 = *(QSpinBox **)&self; 
  arg2 = (int)max; 
  (arg1)->setMaximum(arg2);
}


SWIGEXPORT void QSpinBox_setRange(QSpinBox * self, int min, int max) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QSpinBox **)&self; 
  arg2 = (int)min; 
  arg3 = (int)max; 
  (arg1)->setRange(arg2,arg3);
}


SWIGEXPORT void QSpinBox_setValue(QSpinBox * self, int val) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  int arg2 ;
  
  arg1 = *(QSpinBox **)&self; 
  arg2 = (int)val; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT void Delete_QSpinBox(QSpinBox * self) {
  QSpinBox *arg1 = (QSpinBox *) 0 ;
  
  arg1 = *(QSpinBox **)&self; 
  delete arg1;
}


SWIGEXPORT QDoubleSpinBox * New_QDoubleSpinBox0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QDoubleSpinBox *result = 0 ;
  QDoubleSpinBox * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QDoubleSpinBox *)new QDoubleSpinBox(arg1);
  *(QDoubleSpinBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QDoubleSpinBox * New_QDoubleSpinBox1() {
  QDoubleSpinBox *result = 0 ;
  QDoubleSpinBox * cresult ;
  
  result = (QDoubleSpinBox *)new QDoubleSpinBox();
  *(QDoubleSpinBox **)&cresult = result; 
  return cresult;
}


SWIGEXPORT double QDoubleSpinBox_value(QDoubleSpinBox const * self) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  result = (double)((QDoubleSpinBox const *)arg1)->value();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * QDoubleSpinBox_prefix(QDoubleSpinBox const * self) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  QString * cresult ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QDoubleSpinBox const *)arg1)->prefix());
  return cresult;
}


SWIGEXPORT void QDoubleSpinBox_setPrefix(QDoubleSpinBox * self, QString * prefix) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  arg2 = *(QString **)&prefix;
  (arg1)->setPrefix((QString const &)*arg2);
}


SWIGEXPORT QString * QDoubleSpinBox_suffix(QDoubleSpinBox const * self) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  QString * cresult ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QDoubleSpinBox const *)arg1)->suffix());
  return cresult;
}


SWIGEXPORT void QDoubleSpinBox_setSuffix(QDoubleSpinBox * self, QString * suffix) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  arg2 = *(QString **)&suffix;
  (arg1)->setSuffix((QString const &)*arg2);
}


SWIGEXPORT QString * QDoubleSpinBox_cleanText(QDoubleSpinBox const * self) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  QString * cresult ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  *(QString **)&cresult = new QString((const QString &)((QDoubleSpinBox const *)arg1)->cleanText());
  return cresult;
}


SWIGEXPORT double QDoubleSpinBox_singleStep(QDoubleSpinBox const * self) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  result = (double)((QDoubleSpinBox const *)arg1)->singleStep();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDoubleSpinBox_setSingleStep(QDoubleSpinBox * self, double val) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  double arg2 ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  arg2 = (double)val; 
  (arg1)->setSingleStep(arg2);
}


SWIGEXPORT double QDoubleSpinBox_minimum(QDoubleSpinBox const * self) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  result = (double)((QDoubleSpinBox const *)arg1)->minimum();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDoubleSpinBox_setMinimum(QDoubleSpinBox * self, double min) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  double arg2 ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  arg2 = (double)min; 
  (arg1)->setMinimum(arg2);
}


SWIGEXPORT double QDoubleSpinBox_maximum(QDoubleSpinBox const * self) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  result = (double)((QDoubleSpinBox const *)arg1)->maximum();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDoubleSpinBox_setMaximum(QDoubleSpinBox * self, double max) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  double arg2 ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  arg2 = (double)max; 
  (arg1)->setMaximum(arg2);
}


SWIGEXPORT void QDoubleSpinBox_setRange(QDoubleSpinBox * self, double min, double max) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  double arg2 ;
  double arg3 ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  arg2 = (double)min; 
  arg3 = (double)max; 
  (arg1)->setRange(arg2,arg3);
}


SWIGEXPORT int QDoubleSpinBox_decimals(QDoubleSpinBox const * self) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  result = (int)((QDoubleSpinBox const *)arg1)->decimals();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QDoubleSpinBox_setDecimals(QDoubleSpinBox * self, int prec) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  int arg2 ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  arg2 = (int)prec; 
  (arg1)->setDecimals(arg2);
}


SWIGEXPORT double QDoubleSpinBox_valueFromText(QDoubleSpinBox const * self, QString * text) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  QString *arg2 = 0 ;
  double result;
  double cresult ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  arg2 = *(QString **)&text;
  result = (double)((QDoubleSpinBox const *)arg1)->valueFromText((QString const &)*arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT QString * QDoubleSpinBox_textFromValue(QDoubleSpinBox const * self, double val) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  double arg2 ;
  QString * cresult ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  arg2 = (double)val; 
  *(QString **)&cresult = new QString((const QString &)((QDoubleSpinBox const *)arg1)->textFromValue(arg2));
  return cresult;
}


SWIGEXPORT void QDoubleSpinBox_fixup(QDoubleSpinBox const * self, QString * str) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  QString *arg2 = 0 ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  arg2 = *(QString **)&str;
  /*
  if(!arg2) {
      //SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "QString & reference is null");
      //RETURN ;
      return ;
    }
  */
  
  ((QDoubleSpinBox const *)arg1)->fixup(*arg2);
}


SWIGEXPORT void QDoubleSpinBox_setValue(QDoubleSpinBox * self, double val) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  double arg2 ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  arg2 = (double)val; 
  (arg1)->setValue(arg2);
}


SWIGEXPORT void Delete_QDoubleSpinBox(QDoubleSpinBox * self) {
  QDoubleSpinBox *arg1 = (QDoubleSpinBox *) 0 ;
  
  arg1 = *(QDoubleSpinBox **)&self; 
  delete arg1;
}


SWIGEXPORT long Modula3_QSpinBoxToQAbstractSpinBox(long objectRef) {
    long baseptr = 0;
    *(QAbstractSpinBox **)&baseptr = *(QSpinBox **)&objectRef;
    return baseptr;
}

SWIGEXPORT long Modula3_QDoubleSpinBoxToQAbstractSpinBox(long objectRef) {
    long baseptr = 0;
    *(QAbstractSpinBox **)&baseptr = *(QDoubleSpinBox **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

