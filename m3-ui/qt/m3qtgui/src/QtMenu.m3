(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

UNSAFE MODULE QtMenu;


FROM QtIcon IMPORT QIcon;
FROM QtSize IMPORT QSize;
FROM QtObject IMPORT QObject;
IMPORT M3toC;
FROM QtWidget IMPORT QWidget;
FROM QtString IMPORT QString;
FROM QtAction IMPORT QAction;
FROM QtKeySequence IMPORT QKeySequence;
IMPORT Ctypes AS C;
FROM QtPoint IMPORT QPoint;
IMPORT QtMenuRaw;
FROM QtRect IMPORT QRect;


IMPORT WeakRef;
FROM QtByteArray IMPORT QByteArray;

PROCEDURE New_QMenu0 (self: QMenu; parent: QWidget; ): QMenu =
  VAR
    result : ADDRESS;
    arg1tmp          := LOOPHOLE(parent.cxxObj, ADDRESS);
  BEGIN
    result := QtMenuRaw.New_QMenu0(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QMenu);

    RETURN self;
  END New_QMenu0;

PROCEDURE New_QMenu1 (self: QMenu; ): QMenu =
  VAR result: ADDRESS;
  BEGIN
    result := QtMenuRaw.New_QMenu1();

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QMenu);

    RETURN self;
  END New_QMenu1;

PROCEDURE New_QMenu2 (self: QMenu; title: TEXT; parent: QWidget; ): QMenu =
  VAR
    result    : ADDRESS;
    qstr_title          := NEW(QString).initQString(title);
    arg1tmp             := LOOPHOLE(qstr_title.cxxObj, ADDRESS);
    arg2tmp             := LOOPHOLE(parent.cxxObj, ADDRESS);
  BEGIN
    result := QtMenuRaw.New_QMenu2(arg1tmp, arg2tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QMenu);

    RETURN self;
  END New_QMenu2;

PROCEDURE New_QMenu3 (self: QMenu; title: TEXT; ): QMenu =
  VAR
    result    : ADDRESS;
    qstr_title          := NEW(QString).initQString(title);
    arg1tmp             := LOOPHOLE(qstr_title.cxxObj, ADDRESS);
  BEGIN
    result := QtMenuRaw.New_QMenu3(arg1tmp);

    self.cxxObj := result;
    EVAL WeakRef.FromRef(self, Cleanup_QMenu);

    RETURN self;
  END New_QMenu3;

PROCEDURE Delete_QMenu (self: QMenu; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.Delete_QMenu(selfAdr);
  END Delete_QMenu;

PROCEDURE QMenu_addAction0_0 (self: QMenu; action: QAction; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(action.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_addAction0_0(selfAdr, arg2tmp);
  END QMenu_addAction0_0;

PROCEDURE QMenu_addAction1 (self: QMenu; text: TEXT; ): QAction =
  VAR
    ret      : ADDRESS;
    result   : QAction;
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_text          := NEW(QString).initQString(text);
    arg2tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_addAction1(selfAdr, arg2tmp);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_addAction1;

PROCEDURE QMenu_addAction2 (self: QMenu; icon: QIcon; text: TEXT; ):
  QAction =
  VAR
    ret      : ADDRESS;
    result   : QAction;
    selfAdr  : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp            := LOOPHOLE(icon.cxxObj, ADDRESS);
    qstr_text          := NEW(QString).initQString(text);
    arg3tmp            := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_addAction2(selfAdr, arg2tmp, arg3tmp);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_addAction2;

PROCEDURE QMenu_addAction3 (self    : QMenu;
                            text    : TEXT;
                            receiver: QObject;
                            member  : TEXT;
                            shortcut: QKeySequence; ): QAction =
  VAR
    ret      : ADDRESS;
    result   : QAction;
    selfAdr  : ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_text              := NEW(QString).initQString(text);
    arg2tmp                := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
    arg3tmp                := LOOPHOLE(receiver.cxxObj, ADDRESS);
    arg4tmp  : C.char_star;
    arg5tmp                := LOOPHOLE(shortcut.cxxObj, ADDRESS);
  BEGIN
    arg4tmp := M3toC.CopyTtoS(member);
    ret := QtMenuRaw.QMenu_addAction3(
             selfAdr, arg2tmp, arg3tmp, arg4tmp, arg5tmp);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();



    RETURN result;
  END QMenu_addAction3;

PROCEDURE QMenu_addAction4
  (self: QMenu; text: TEXT; receiver: QObject; member: TEXT; ): QAction =
  VAR
    ret      : ADDRESS;
    result   : QAction;
    selfAdr  : ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_text              := NEW(QString).initQString(text);
    arg2tmp                := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
    arg3tmp                := LOOPHOLE(receiver.cxxObj, ADDRESS);
    arg4tmp  : C.char_star;
  BEGIN
    arg4tmp := M3toC.CopyTtoS(member);
    ret := QtMenuRaw.QMenu_addAction4(selfAdr, arg2tmp, arg3tmp, arg4tmp);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();



    RETURN result;
  END QMenu_addAction4;

PROCEDURE QMenu_addAction5 (self    : QMenu;
                            icon    : QIcon;
                            text    : TEXT;
                            receiver: QObject;
                            member  : TEXT;
                            shortcut: QKeySequence; ): QAction =
  VAR
    ret      : ADDRESS;
    result   : QAction;
    selfAdr  : ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp                := LOOPHOLE(icon.cxxObj, ADDRESS);
    qstr_text              := NEW(QString).initQString(text);
    arg3tmp                := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
    arg4tmp                := LOOPHOLE(receiver.cxxObj, ADDRESS);
    arg5tmp  : C.char_star;
    arg6tmp                := LOOPHOLE(shortcut.cxxObj, ADDRESS);
  BEGIN
    arg5tmp := M3toC.CopyTtoS(member);
    ret := QtMenuRaw.QMenu_addAction5(
             selfAdr, arg2tmp, arg3tmp, arg4tmp, arg5tmp, arg6tmp);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();



    RETURN result;
  END QMenu_addAction5;

PROCEDURE QMenu_addAction6 (self    : QMenu;
                            icon    : QIcon;
                            text    : TEXT;
                            receiver: QObject;
                            member  : TEXT;    ): QAction =
  VAR
    ret      : ADDRESS;
    result   : QAction;
    selfAdr  : ADDRESS     := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp                := LOOPHOLE(icon.cxxObj, ADDRESS);
    qstr_text              := NEW(QString).initQString(text);
    arg3tmp                := LOOPHOLE(qstr_text.cxxObj, ADDRESS);
    arg4tmp                := LOOPHOLE(receiver.cxxObj, ADDRESS);
    arg5tmp  : C.char_star;
  BEGIN
    arg5tmp := M3toC.CopyTtoS(member);
    ret := QtMenuRaw.QMenu_addAction6(
             selfAdr, arg2tmp, arg3tmp, arg4tmp, arg5tmp);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();



    RETURN result;
  END QMenu_addAction6;

PROCEDURE QMenu_addMenu (self, menu: QMenu; ): QAction =
  VAR
    ret    : ADDRESS;
    result : QAction;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(menu.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_addMenu(selfAdr, arg2tmp);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_addMenu;

PROCEDURE QMenu_addMenu1 (self: QMenu; title: TEXT; ): QMenu =
  VAR
    ret       : ADDRESS;
    result    : QMenu;
    selfAdr   : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_title          := NEW(QString).initQString(title);
    arg2tmp             := LOOPHOLE(qstr_title.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_addMenu1(selfAdr, arg2tmp);

    IF ISTYPE(result, QMenu) AND ret = selfAdr THEN
      result := LOOPHOLE(self, QMenu);
    ELSE
      result := NEW(QMenu);
      result.cxxObj := ret;
      result.destroyCxx();
    END;

    RETURN result;
  END QMenu_addMenu1;

PROCEDURE QMenu_addMenu2 (self: QMenu; icon: QIcon; title: TEXT; ): QMenu =
  VAR
    ret       : ADDRESS;
    result    : QMenu;
    selfAdr   : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp             := LOOPHOLE(icon.cxxObj, ADDRESS);
    qstr_title          := NEW(QString).initQString(title);
    arg3tmp             := LOOPHOLE(qstr_title.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_addMenu2(selfAdr, arg2tmp, arg3tmp);

    IF ISTYPE(result, QMenu) AND ret = selfAdr THEN
      result := LOOPHOLE(self, QMenu);
    ELSE
      result := NEW(QMenu);
      result.cxxObj := ret;
      result.destroyCxx();
    END;

    RETURN result;
  END QMenu_addMenu2;

PROCEDURE QMenu_addSeparator (self: QMenu; ): QAction =
  VAR
    ret    : ADDRESS;
    result : QAction;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_addSeparator(selfAdr);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_addSeparator;

PROCEDURE QMenu_insertMenu (self: QMenu; before: QAction; menu: QMenu; ):
  QAction =
  VAR
    ret    : ADDRESS;
    result : QAction;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(before.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(menu.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_insertMenu(selfAdr, arg2tmp, arg3tmp);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_insertMenu;

PROCEDURE QMenu_insertSeparator (self: QMenu; before: QAction; ): QAction =
  VAR
    ret    : ADDRESS;
    result : QAction;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(before.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_insertSeparator(selfAdr, arg2tmp);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_insertSeparator;

PROCEDURE QMenu_isEmpty (self: QMenu; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtMenuRaw.QMenu_isEmpty(selfAdr);
  END QMenu_isEmpty;

PROCEDURE QMenu_clear (self: QMenu; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_clear(selfAdr);
  END QMenu_clear;

PROCEDURE QMenu_setTearOffEnabled (self: QMenu; arg2: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_setTearOffEnabled(selfAdr, arg2);
  END QMenu_setTearOffEnabled;

PROCEDURE QMenu_isTearOffEnabled (self: QMenu; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtMenuRaw.QMenu_isTearOffEnabled(selfAdr);
  END QMenu_isTearOffEnabled;

PROCEDURE QMenu_isTearOffMenuVisible (self: QMenu; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtMenuRaw.QMenu_isTearOffMenuVisible(selfAdr);
  END QMenu_isTearOffMenuVisible;

PROCEDURE QMenu_hideTearOffMenu (self: QMenu; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_hideTearOffMenu(selfAdr);
  END QMenu_hideTearOffMenu;

PROCEDURE QMenu_setDefaultAction (self: QMenu; arg2: QAction; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_setDefaultAction(selfAdr, arg2tmp);
  END QMenu_setDefaultAction;

PROCEDURE QMenu_defaultAction (self: QMenu; ): QAction =
  VAR
    ret    : ADDRESS;
    result : QAction;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_defaultAction(selfAdr);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_defaultAction;

PROCEDURE QMenu_setActiveAction (self: QMenu; act: QAction; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(act.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_setActiveAction(selfAdr, arg2tmp);
  END QMenu_setActiveAction;

PROCEDURE QMenu_activeAction (self: QMenu; ): QAction =
  VAR
    ret    : ADDRESS;
    result : QAction;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_activeAction(selfAdr);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_activeAction;

PROCEDURE QMenu_popup (self: QMenu; pos: QPoint; at: QAction; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(pos.cxxObj, ADDRESS);
    arg3tmp          := LOOPHOLE(at.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_popup(selfAdr, arg2tmp, arg3tmp);
  END QMenu_popup;

PROCEDURE QMenu_popup1 (self: QMenu; pos: QPoint; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(pos.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_popup1(selfAdr, arg2tmp);
  END QMenu_popup1;

PROCEDURE QMenu_sizeHint (self: QMenu; ): QSize =
  VAR
    ret    : ADDRESS;
    result : QSize;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_sizeHint(selfAdr);

    result := NEW(QSize);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_sizeHint;

PROCEDURE QMenu_actionGeometry (self: QMenu; arg2: QAction; ): QRect =
  VAR
    ret    : ADDRESS;
    result : QRect;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_actionGeometry(selfAdr, arg2tmp);

    result := NEW(QRect);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_actionGeometry;

PROCEDURE QMenu_actionAt (self: QMenu; arg2: QPoint; ): QAction =
  VAR
    ret    : ADDRESS;
    result : QAction;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(arg2.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_actionAt(selfAdr, arg2tmp);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_actionAt;

PROCEDURE QMenu_menuAction (self: QMenu; ): QAction =
  VAR
    ret    : ADDRESS;
    result : QAction;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_menuAction(selfAdr);

    result := NEW(QAction);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_menuAction;

PROCEDURE QMenu_title (self: QMenu; ): TEXT =
  VAR
    ret    : ADDRESS;
    qstr                := NEW(QString);
    ba     : QByteArray;
    result : TEXT;
    selfAdr: ADDRESS    := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_title(selfAdr);

    qstr.cxxObj := ret;
    ba := qstr.toLocal8Bit();
    result := ba.data();

    RETURN result;
  END QMenu_title;

PROCEDURE QMenu_setTitle (self: QMenu; title: TEXT; ) =
  VAR
    selfAdr   : ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    qstr_title          := NEW(QString).initQString(title);
    arg2tmp             := LOOPHOLE(qstr_title.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_setTitle(selfAdr, arg2tmp);
  END QMenu_setTitle;

PROCEDURE QMenu_icon (self: QMenu; ): QIcon =
  VAR
    ret    : ADDRESS;
    result : QIcon;
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    ret := QtMenuRaw.QMenu_icon(selfAdr);

    result := NEW(QIcon);
    result.cxxObj := ret;
    result.destroyCxx();

    RETURN result;
  END QMenu_icon;

PROCEDURE QMenu_setIcon (self: QMenu; icon: QIcon; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(icon.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_setIcon(selfAdr, arg2tmp);
  END QMenu_setIcon;

PROCEDURE QMenu_setNoReplayFor (self: QMenu; widget: QWidget; ) =
  VAR
    selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
    arg2tmp          := LOOPHOLE(widget.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_setNoReplayFor(selfAdr, arg2tmp);
  END QMenu_setNoReplayFor;

PROCEDURE QMenu_separatorsCollapsible (self: QMenu; ): BOOLEAN =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    RETURN QtMenuRaw.QMenu_separatorsCollapsible(selfAdr);
  END QMenu_separatorsCollapsible;

PROCEDURE QMenu_setSeparatorsCollapsible
  (self: QMenu; collapse: BOOLEAN; ) =
  VAR selfAdr: ADDRESS := LOOPHOLE(self.cxxObj, ADDRESS);
  BEGIN
    QtMenuRaw.QMenu_setSeparatorsCollapsible(selfAdr, collapse);
  END QMenu_setSeparatorsCollapsible;

PROCEDURE Cleanup_QMenu
  (<* UNUSED *> READONLY self: WeakRef.T; ref: REFANY) =
  VAR obj: QMenu := ref;
  BEGIN
    Delete_QMenu(obj);
  END Cleanup_QMenu;

PROCEDURE Destroy_QMenu (self: QMenu) =
  BEGIN
    EVAL WeakRef.FromRef(self, Cleanup_QMenu);
  END Destroy_QMenu;

REVEAL
  QMenu = QMenuPublic BRANDED OBJECT
          OVERRIDES
            init_0                   := New_QMenu0;
            init_1                   := New_QMenu1;
            init_2                   := New_QMenu2;
            init_3                   := New_QMenu3;
            addAction0_0             := QMenu_addAction0_0;
            addAction1               := QMenu_addAction1;
            addAction2               := QMenu_addAction2;
            addAction3               := QMenu_addAction3;
            addAction4               := QMenu_addAction4;
            addAction5               := QMenu_addAction5;
            addAction6               := QMenu_addAction6;
            addMenu                  := QMenu_addMenu;
            addMenu1                 := QMenu_addMenu1;
            addMenu2                 := QMenu_addMenu2;
            addSeparator             := QMenu_addSeparator;
            insertMenu               := QMenu_insertMenu;
            insertSeparator          := QMenu_insertSeparator;
            isEmpty                  := QMenu_isEmpty;
            clear                    := QMenu_clear;
            setTearOffEnabled        := QMenu_setTearOffEnabled;
            isTearOffEnabled         := QMenu_isTearOffEnabled;
            isTearOffMenuVisible     := QMenu_isTearOffMenuVisible;
            hideTearOffMenu          := QMenu_hideTearOffMenu;
            setDefaultAction         := QMenu_setDefaultAction;
            defaultAction            := QMenu_defaultAction;
            setActiveAction          := QMenu_setActiveAction;
            activeAction             := QMenu_activeAction;
            popup                    := QMenu_popup;
            popup1                   := QMenu_popup1;
            sizeHint                 := QMenu_sizeHint;
            actionGeometry           := QMenu_actionGeometry;
            actionAt                 := QMenu_actionAt;
            menuAction               := QMenu_menuAction;
            title                    := QMenu_title;
            setTitle                 := QMenu_setTitle;
            icon                     := QMenu_icon;
            setIcon                  := QMenu_setIcon;
            setNoReplayFor           := QMenu_setNoReplayFor;
            separatorsCollapsible    := QMenu_separatorsCollapsible;
            setSeparatorsCollapsible := QMenu_setSeparatorsCollapsible;
            destroyCxx               := Destroy_QMenu;
          END;


BEGIN
END QtMenu.
