/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qtableview.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QTableView * New_QTableView0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QTableView *result = 0 ;
  QTableView * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QTableView *)new QTableView(arg1);
  *(QTableView **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QTableView * New_QTableView1() {
  QTableView *result = 0 ;
  QTableView * cresult ;
  
  result = (QTableView *)new QTableView();
  *(QTableView **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QTableView(QTableView * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  
  arg1 = *(QTableView **)&self; 
  delete arg1;
}


SWIGEXPORT void QTableView_setModel(QTableView * self, QAbstractItemModel * model) {
  QTableView *arg1 = (QTableView *) 0 ;
  QAbstractItemModel *arg2 = (QAbstractItemModel *) 0 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = *(QAbstractItemModel **)&model; 
  (arg1)->setModel(arg2);
}


SWIGEXPORT void QTableView_setRootIndex(QTableView * self, QModelIndex * index) {
  QTableView *arg1 = (QTableView *) 0 ;
  QModelIndex *arg2 = 0 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = *(QModelIndex **)&index;
  (arg1)->setRootIndex((QModelIndex const &)*arg2);
}


SWIGEXPORT void QTableView_setSelectionModel(QTableView * self, QItemSelectionModel * selectionModel) {
  QTableView *arg1 = (QTableView *) 0 ;
  QItemSelectionModel *arg2 = (QItemSelectionModel *) 0 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = *(QItemSelectionModel **)&selectionModel; 
  (arg1)->setSelectionModel(arg2);
}


SWIGEXPORT void QTableView_doItemsLayout(QTableView * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  
  arg1 = *(QTableView **)&self; 
  (arg1)->doItemsLayout();
}


SWIGEXPORT QHeaderView * QTableView_horizontalHeader(QTableView const * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  QHeaderView *result = 0 ;
  QHeaderView * cresult ;
  
  arg1 = *(QTableView **)&self; 
  result = (QHeaderView *)((QTableView const *)arg1)->horizontalHeader();
  *(QHeaderView **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QHeaderView * QTableView_verticalHeader(QTableView const * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  QHeaderView *result = 0 ;
  QHeaderView * cresult ;
  
  arg1 = *(QTableView **)&self; 
  result = (QHeaderView *)((QTableView const *)arg1)->verticalHeader();
  *(QHeaderView **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableView_setHorizontalHeader(QTableView * self, QHeaderView * header) {
  QTableView *arg1 = (QTableView *) 0 ;
  QHeaderView *arg2 = (QHeaderView *) 0 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = *(QHeaderView **)&header; 
  (arg1)->setHorizontalHeader(arg2);
}


SWIGEXPORT void QTableView_setVerticalHeader(QTableView * self, QHeaderView * header) {
  QTableView *arg1 = (QTableView *) 0 ;
  QHeaderView *arg2 = (QHeaderView *) 0 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = *(QHeaderView **)&header; 
  (arg1)->setVerticalHeader(arg2);
}


SWIGEXPORT int QTableView_rowViewportPosition(QTableView const * self, int row) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  result = (int)((QTableView const *)arg1)->rowViewportPosition(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableView_rowAt(QTableView const * self, int y) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)y; 
  result = (int)((QTableView const *)arg1)->rowAt(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableView_setRowHeight(QTableView * self, int row, int height) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  arg3 = (int)height; 
  (arg1)->setRowHeight(arg2,arg3);
}


SWIGEXPORT int QTableView_rowHeight(QTableView const * self, int row) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  result = (int)((QTableView const *)arg1)->rowHeight(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableView_columnViewportPosition(QTableView const * self, int column) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)column; 
  result = (int)((QTableView const *)arg1)->columnViewportPosition(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableView_columnAt(QTableView const * self, int x) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)x; 
  result = (int)((QTableView const *)arg1)->columnAt(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableView_setColumnWidth(QTableView * self, int column, int width) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)column; 
  arg3 = (int)width; 
  (arg1)->setColumnWidth(arg2,arg3);
}


SWIGEXPORT int QTableView_columnWidth(QTableView const * self, int column) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)column; 
  result = (int)((QTableView const *)arg1)->columnWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTableView_isRowHidden(QTableView const * self, int row) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  result = (bool)((QTableView const *)arg1)->isRowHidden(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableView_setRowHidden(QTableView * self, int row, bool hide) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  arg3 = hide ? true : false; 
  (arg1)->setRowHidden(arg2,arg3);
}


SWIGEXPORT bool QTableView_isColumnHidden(QTableView const * self, int column) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)column; 
  result = (bool)((QTableView const *)arg1)->isColumnHidden(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableView_setColumnHidden(QTableView * self, int column, bool hide) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)column; 
  arg3 = hide ? true : false; 
  (arg1)->setColumnHidden(arg2,arg3);
}


SWIGEXPORT void QTableView_setSortingEnabled(QTableView * self, bool enable) {
  QTableView *arg1 = (QTableView *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setSortingEnabled(arg2);
}


SWIGEXPORT bool QTableView_isSortingEnabled(QTableView const * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTableView **)&self; 
  result = (bool)((QTableView const *)arg1)->isSortingEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT bool QTableView_showGrid(QTableView const * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTableView **)&self; 
  result = (bool)((QTableView const *)arg1)->showGrid();
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::PenStyle QTableView_gridStyle(QTableView const * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  Qt::PenStyle result;
  Qt::PenStyle cresult ;
  
  arg1 = *(QTableView **)&self; 
  result = (Qt::PenStyle)((QTableView const *)arg1)->gridStyle();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableView_setGridStyle(QTableView * self, Qt::PenStyle style) {
  QTableView *arg1 = (QTableView *) 0 ;
  Qt::PenStyle arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (Qt::PenStyle)style; 
  (arg1)->setGridStyle(arg2);
}


SWIGEXPORT void QTableView_setWordWrap(QTableView * self, bool on) {
  QTableView *arg1 = (QTableView *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = on ? true : false; 
  (arg1)->setWordWrap(arg2);
}


SWIGEXPORT bool QTableView_wordWrap(QTableView const * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTableView **)&self; 
  result = (bool)((QTableView const *)arg1)->wordWrap();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableView_setCornerButtonEnabled(QTableView * self, bool enable) {
  QTableView *arg1 = (QTableView *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = enable ? true : false; 
  (arg1)->setCornerButtonEnabled(arg2);
}


SWIGEXPORT bool QTableView_isCornerButtonEnabled(QTableView const * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QTableView **)&self; 
  result = (bool)((QTableView const *)arg1)->isCornerButtonEnabled();
  cresult = result; 
  return cresult;
}


SWIGEXPORT QRect * QTableView_visualRect(QTableView const * self, QModelIndex * index) {
  QTableView *arg1 = (QTableView *) 0 ;
  QModelIndex *arg2 = 0 ;
  QRect * cresult ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = *(QModelIndex **)&index;
  *(QRect **)&cresult = new QRect((const QRect &)((QTableView const *)arg1)->visualRect((QModelIndex const &)*arg2));
  return cresult;
}


SWIGEXPORT void QTableView_scrollTo(QTableView * self, QModelIndex * index, QAbstractItemView::ScrollHint hint) {
  QTableView *arg1 = (QTableView *) 0 ;
  QModelIndex *arg2 = 0 ;
  QAbstractItemView::ScrollHint arg3 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = *(QModelIndex **)&index;
  arg3 = (QAbstractItemView::ScrollHint)hint; 
  (arg1)->scrollTo((QModelIndex const &)*arg2,arg3);
}


SWIGEXPORT void QTableView_scrollTo1(QTableView * self, QModelIndex * index) {
  QTableView *arg1 = (QTableView *) 0 ;
  QModelIndex *arg2 = 0 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = *(QModelIndex **)&index;
  (arg1)->scrollTo((QModelIndex const &)*arg2);
}


SWIGEXPORT void QTableView_setSpan(QTableView * self, int row, int column, int rowSpan, int columnSpan) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  arg4 = (int)rowSpan; 
  arg5 = (int)columnSpan; 
  (arg1)->setSpan(arg2,arg3,arg4,arg5);
}


SWIGEXPORT int QTableView_rowSpan(QTableView const * self, int row, int column) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  result = (int)((QTableView const *)arg1)->rowSpan(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QTableView_columnSpan(QTableView const * self, int row, int column) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  int cresult ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  arg3 = (int)column; 
  result = (int)((QTableView const *)arg1)->columnSpan(arg2,arg3);
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QTableView_clearSpans(QTableView * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  
  arg1 = *(QTableView **)&self; 
  (arg1)->clearSpans();
}


SWIGEXPORT void QTableView_sortByColumn(QTableView * self, int column, Qt::SortOrder order) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  Qt::SortOrder arg3 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)column; 
  arg3 = (Qt::SortOrder)order; 
  (arg1)->sortByColumn(arg2,arg3);
}


SWIGEXPORT void QTableView_selectRow(QTableView * self, int row) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  (arg1)->selectRow(arg2);
}


SWIGEXPORT void QTableView_selectColumn(QTableView * self, int column) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)column; 
  (arg1)->selectColumn(arg2);
}


SWIGEXPORT void QTableView_hideRow(QTableView * self, int row) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  (arg1)->hideRow(arg2);
}


SWIGEXPORT void QTableView_hideColumn(QTableView * self, int column) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)column; 
  (arg1)->hideColumn(arg2);
}


SWIGEXPORT void QTableView_showRow(QTableView * self, int row) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  (arg1)->showRow(arg2);
}


SWIGEXPORT void QTableView_showColumn(QTableView * self, int column) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)column; 
  (arg1)->showColumn(arg2);
}


SWIGEXPORT void QTableView_resizeRowToContents(QTableView * self, int row) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)row; 
  (arg1)->resizeRowToContents(arg2);
}


SWIGEXPORT void QTableView_resizeRowsToContents(QTableView * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  
  arg1 = *(QTableView **)&self; 
  (arg1)->resizeRowsToContents();
}


SWIGEXPORT void QTableView_resizeColumnToContents(QTableView * self, int column) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)column; 
  (arg1)->resizeColumnToContents(arg2);
}


SWIGEXPORT void QTableView_resizeColumnsToContents(QTableView * self) {
  QTableView *arg1 = (QTableView *) 0 ;
  
  arg1 = *(QTableView **)&self; 
  (arg1)->resizeColumnsToContents();
}


SWIGEXPORT void QTableView_sortByColumn1(QTableView * self, int column) {
  QTableView *arg1 = (QTableView *) 0 ;
  int arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = (int)column; 
  (arg1)->sortByColumn(arg2);
}


SWIGEXPORT void QTableView_setShowGrid(QTableView * self, bool show) {
  QTableView *arg1 = (QTableView *) 0 ;
  bool arg2 ;
  
  arg1 = *(QTableView **)&self; 
  arg2 = show ? true : false; 
  (arg1)->setShowGrid(arg2);
}


SWIGEXPORT long Modula3_QTableViewToQAbstractItemView(long objectRef) {
    long baseptr = 0;
    *(QAbstractItemView **)&baseptr = *(QTableView **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

