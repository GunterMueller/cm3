/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGMODULA3


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif




#include <stdlib.h>
#include <string.h>
#include <stdio.h>


#include <QtGui/qformlayout.h>


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT QFormLayout * New_QFormLayout0(QWidget * parent) {
  QWidget *arg1 = (QWidget *) 0 ;
  QFormLayout *result = 0 ;
  QFormLayout * cresult ;
  
  arg1 = *(QWidget **)&parent; 
  result = (QFormLayout *)new QFormLayout(arg1);
  *(QFormLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QFormLayout * New_QFormLayout1() {
  QFormLayout *result = 0 ;
  QFormLayout * cresult ;
  
  result = (QFormLayout *)new QFormLayout();
  *(QFormLayout **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void Delete_QFormLayout(QFormLayout * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  delete arg1;
}


SWIGEXPORT void QFormLayout_setFieldGrowthPolicy(QFormLayout * self, QFormLayout::FieldGrowthPolicy policy) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QFormLayout::FieldGrowthPolicy arg2 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (QFormLayout::FieldGrowthPolicy)policy; 
  (arg1)->setFieldGrowthPolicy(arg2);
}


SWIGEXPORT QFormLayout::FieldGrowthPolicy QFormLayout_fieldGrowthPolicy(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QFormLayout::FieldGrowthPolicy result;
  QFormLayout::FieldGrowthPolicy cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  result = (QFormLayout::FieldGrowthPolicy)((QFormLayout const *)arg1)->fieldGrowthPolicy();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFormLayout_setRowWrapPolicy(QFormLayout * self, QFormLayout::RowWrapPolicy policy) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QFormLayout::RowWrapPolicy arg2 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (QFormLayout::RowWrapPolicy)policy; 
  (arg1)->setRowWrapPolicy(arg2);
}


SWIGEXPORT QFormLayout::RowWrapPolicy QFormLayout_rowWrapPolicy(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QFormLayout::RowWrapPolicy result;
  QFormLayout::RowWrapPolicy cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  result = (QFormLayout::RowWrapPolicy)((QFormLayout const *)arg1)->rowWrapPolicy();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFormLayout_setLabelAlignment(QFormLayout * self, Qt::Alignment alignment) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  Qt::Alignment arg2 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (Qt::Alignment)alignment; 
  (arg1)->setLabelAlignment(arg2);
}


SWIGEXPORT Qt::Alignment QFormLayout_labelAlignment(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  Qt::Alignment cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  *(Qt::Alignment **)&cresult = new Qt::Alignment((const Qt::Alignment &)((QFormLayout const *)arg1)->labelAlignment());
  return cresult;
}


SWIGEXPORT void QFormLayout_setFormAlignment(QFormLayout * self, Qt::Alignment alignment) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  Qt::Alignment arg2 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (Qt::Alignment)alignment; 
  (arg1)->setFormAlignment(arg2);
}


SWIGEXPORT Qt::Alignment QFormLayout_formAlignment(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  Qt::Alignment cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  *(Qt::Alignment **)&cresult = new Qt::Alignment((const Qt::Alignment &)((QFormLayout const *)arg1)->formAlignment());
  return cresult;
}


SWIGEXPORT void QFormLayout_setHorizontalSpacing(QFormLayout * self, int spacing) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)spacing; 
  (arg1)->setHorizontalSpacing(arg2);
}


SWIGEXPORT int QFormLayout_horizontalSpacing(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  result = (int)((QFormLayout const *)arg1)->horizontalSpacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFormLayout_setVerticalSpacing(QFormLayout * self, int spacing) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)spacing; 
  (arg1)->setVerticalSpacing(arg2);
}


SWIGEXPORT int QFormLayout_verticalSpacing(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  result = (int)((QFormLayout const *)arg1)->verticalSpacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFormLayout_spacing(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  result = (int)((QFormLayout const *)arg1)->spacing();
  cresult = result; 
  return cresult;
}


SWIGEXPORT void QFormLayout_setSpacing(QFormLayout * self, int m3arg2) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)m3arg2; 
  (arg1)->setSpacing(arg2);
}


SWIGEXPORT void QFormLayout_addRow(QFormLayout * self, QWidget * label, QWidget * field) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QWidget *arg3 = (QWidget *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QWidget **)&label; 
  arg3 = *(QWidget **)&field; 
  (arg1)->addRow(arg2,arg3);
}


SWIGEXPORT void QFormLayout_addRow1(QFormLayout * self, QWidget * label, QLayout * field) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QLayout *arg3 = (QLayout *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QWidget **)&label; 
  arg3 = *(QLayout **)&field; 
  (arg1)->addRow(arg2,arg3);
}


SWIGEXPORT void QFormLayout_addRow2(QFormLayout * self, QString * labelText, QWidget * field) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QString *arg2 = 0 ;
  QWidget *arg3 = (QWidget *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QString **)&labelText;
  arg3 = *(QWidget **)&field; 
  (arg1)->addRow((QString const &)*arg2,arg3);
}


SWIGEXPORT void QFormLayout_addRow3(QFormLayout * self, QString * labelText, QLayout * field) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QString *arg2 = 0 ;
  QLayout *arg3 = (QLayout *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QString **)&labelText;
  arg3 = *(QLayout **)&field; 
  (arg1)->addRow((QString const &)*arg2,arg3);
}


SWIGEXPORT void QFormLayout_addRow4(QFormLayout * self, QWidget * widget) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QWidget **)&widget; 
  (arg1)->addRow(arg2);
}


SWIGEXPORT void QFormLayout_addRow5(QFormLayout * self, QLayout * layout) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QLayout **)&layout; 
  (arg1)->addRow(arg2);
}


SWIGEXPORT void QFormLayout_insertRow(QFormLayout * self, int row, QWidget * label, QWidget * field) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QWidget *arg3 = (QWidget *) 0 ;
  QWidget *arg4 = (QWidget *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)row; 
  arg3 = *(QWidget **)&label; 
  arg4 = *(QWidget **)&field; 
  (arg1)->insertRow(arg2,arg3,arg4);
}


SWIGEXPORT void QFormLayout_insertRow1(QFormLayout * self, int row, QWidget * label, QLayout * field) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QWidget *arg3 = (QWidget *) 0 ;
  QLayout *arg4 = (QLayout *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)row; 
  arg3 = *(QWidget **)&label; 
  arg4 = *(QLayout **)&field; 
  (arg1)->insertRow(arg2,arg3,arg4);
}


SWIGEXPORT void QFormLayout_insertRow2(QFormLayout * self, int row, QString * labelText, QWidget * field) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QWidget *arg4 = (QWidget *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)row; 
  arg3 = *(QString **)&labelText;
  arg4 = *(QWidget **)&field; 
  (arg1)->insertRow(arg2,(QString const &)*arg3,arg4);
}


SWIGEXPORT void QFormLayout_insertRow3(QFormLayout * self, int row, QString * labelText, QLayout * field) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QString *arg3 = 0 ;
  QLayout *arg4 = (QLayout *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)row; 
  arg3 = *(QString **)&labelText;
  arg4 = *(QLayout **)&field; 
  (arg1)->insertRow(arg2,(QString const &)*arg3,arg4);
}


SWIGEXPORT void QFormLayout_insertRow4(QFormLayout * self, int row, QWidget * widget) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QWidget *arg3 = (QWidget *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)row; 
  arg3 = *(QWidget **)&widget; 
  (arg1)->insertRow(arg2,arg3);
}


SWIGEXPORT void QFormLayout_insertRow5(QFormLayout * self, int row, QLayout * layout) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QLayout *arg3 = (QLayout *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)row; 
  arg3 = *(QLayout **)&layout; 
  (arg1)->insertRow(arg2,arg3);
}


SWIGEXPORT void QFormLayout_setItem(QFormLayout * self, int row, QFormLayout::ItemRole role, QLayoutItem * item) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QFormLayout::ItemRole arg3 ;
  QLayoutItem *arg4 = (QLayoutItem *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)row; 
  arg3 = (QFormLayout::ItemRole)role; 
  arg4 = *(QLayoutItem **)&item; 
  (arg1)->setItem(arg2,arg3,arg4);
}


SWIGEXPORT void QFormLayout_setWidget(QFormLayout * self, int row, QFormLayout::ItemRole role, QWidget * widget) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QFormLayout::ItemRole arg3 ;
  QWidget *arg4 = (QWidget *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)row; 
  arg3 = (QFormLayout::ItemRole)role; 
  arg4 = *(QWidget **)&widget; 
  (arg1)->setWidget(arg2,arg3,arg4);
}


SWIGEXPORT void QFormLayout_setLayout(QFormLayout * self, int row, QFormLayout::ItemRole role, QLayout * layout) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QFormLayout::ItemRole arg3 ;
  QLayout *arg4 = (QLayout *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)row; 
  arg3 = (QFormLayout::ItemRole)role; 
  arg4 = *(QLayout **)&layout; 
  (arg1)->setLayout(arg2,arg3,arg4);
}


SWIGEXPORT QLayoutItem * QFormLayout_itemAt(QFormLayout const * self, int row, QFormLayout::ItemRole role) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QFormLayout::ItemRole arg3 ;
  QLayoutItem *result = 0 ;
  QLayoutItem * cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)row; 
  arg3 = (QFormLayout::ItemRole)role; 
  result = (QLayoutItem *)((QFormLayout const *)arg1)->itemAt(arg2,arg3);
  *(QLayoutItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QFormLayout_getItemPosition(QFormLayout const * self, int index, int * rowPtr, QFormLayout::ItemRole * rolePtr) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  QFormLayout::ItemRole *arg4 = (QFormLayout::ItemRole *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)index; 
  arg3 = *(int **)&rowPtr; 
  arg4 = *(QFormLayout::ItemRole **)&rolePtr; 
  ((QFormLayout const *)arg1)->getItemPosition(arg2,arg3,arg4);
}


SWIGEXPORT void QFormLayout_getWidgetPosition(QFormLayout const * self, QWidget * widget, int * rowPtr, QFormLayout::ItemRole * rolePtr) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  int *arg3 = (int *) 0 ;
  QFormLayout::ItemRole *arg4 = (QFormLayout::ItemRole *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QWidget **)&widget; 
  arg3 = *(int **)&rowPtr; 
  arg4 = *(QFormLayout::ItemRole **)&rolePtr; 
  ((QFormLayout const *)arg1)->getWidgetPosition(arg2,arg3,arg4);
}


SWIGEXPORT void QFormLayout_getLayoutPosition(QFormLayout const * self, QLayout * layout, int * rowPtr, QFormLayout::ItemRole * rolePtr) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  int *arg3 = (int *) 0 ;
  QFormLayout::ItemRole *arg4 = (QFormLayout::ItemRole *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QLayout **)&layout; 
  arg3 = *(int **)&rowPtr; 
  arg4 = *(QFormLayout::ItemRole **)&rolePtr; 
  ((QFormLayout const *)arg1)->getLayoutPosition(arg2,arg3,arg4);
}


SWIGEXPORT QWidget * QFormLayout_labelForField(QFormLayout const * self, QWidget * field) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QWidget *arg2 = (QWidget *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QWidget **)&field; 
  result = (QWidget *)((QFormLayout const *)arg1)->labelForField(arg2);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QWidget * QFormLayout_labelForField1(QFormLayout const * self, QLayout * field) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QLayout *arg2 = (QLayout *) 0 ;
  QWidget *result = 0 ;
  QWidget * cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QLayout **)&field; 
  result = (QWidget *)((QFormLayout const *)arg1)->labelForField(arg2);
  *(QWidget **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QFormLayout_addItem(QFormLayout * self, QLayoutItem * item) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QLayoutItem *arg2 = (QLayoutItem *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QLayoutItem **)&item; 
  (arg1)->addItem(arg2);
}


SWIGEXPORT QLayoutItem * QFormLayout_itemAt1(QFormLayout const * self, int index) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QLayoutItem *result = 0 ;
  QLayoutItem * cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)index; 
  result = (QLayoutItem *)((QFormLayout const *)arg1)->itemAt(arg2);
  *(QLayoutItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT QLayoutItem * QFormLayout_takeAt(QFormLayout * self, int index) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  QLayoutItem *result = 0 ;
  QLayoutItem * cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)index; 
  result = (QLayoutItem *)(arg1)->takeAt(arg2);
  *(QLayoutItem **)&cresult = result; 
  return cresult;
}


SWIGEXPORT void QFormLayout_setGeometry(QFormLayout * self, QRect * rect) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QRect *arg2 = 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = *(QRect **)&rect;
  (arg1)->setGeometry((QRect const &)*arg2);
}


SWIGEXPORT QSize * QFormLayout_minimumSize(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QFormLayout const *)arg1)->minimumSize());
  return cresult;
}


SWIGEXPORT QSize * QFormLayout_sizeHint(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  QSize * cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  *(QSize **)&cresult = new QSize((const QSize &)((QFormLayout const *)arg1)->sizeHint());
  return cresult;
}


SWIGEXPORT void QFormLayout_invalidate(QFormLayout * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  
  arg1 = *(QFormLayout **)&self; 
  (arg1)->invalidate();
}


SWIGEXPORT bool QFormLayout_hasHeightForWidth(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  bool result;
  bool cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  result = (bool)((QFormLayout const *)arg1)->hasHeightForWidth();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFormLayout_heightForWidth(QFormLayout const * self, int width) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int arg2 ;
  int result;
  int cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  arg2 = (int)width; 
  result = (int)((QFormLayout const *)arg1)->heightForWidth(arg2);
  cresult = result; 
  return cresult;
}


SWIGEXPORT Qt::Orientations QFormLayout_expandingDirections(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  Qt::Orientations cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  *(Qt::Orientations **)&cresult = new Qt::Orientations((const Qt::Orientations &)((QFormLayout const *)arg1)->expandingDirections());
  return cresult;
}


SWIGEXPORT int QFormLayout_count(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  result = (int)((QFormLayout const *)arg1)->count();
  cresult = result; 
  return cresult;
}


SWIGEXPORT int QFormLayout_rowCount(QFormLayout const * self) {
  QFormLayout *arg1 = (QFormLayout *) 0 ;
  int result;
  int cresult ;
  
  arg1 = *(QFormLayout **)&self; 
  result = (int)((QFormLayout const *)arg1)->rowCount();
  cresult = result; 
  return cresult;
}


SWIGEXPORT long Modula3_QFormLayoutToQLayout(long objectRef) {
    long baseptr = 0;
    *(QLayout **)&baseptr = *(QFormLayout **)&objectRef;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

