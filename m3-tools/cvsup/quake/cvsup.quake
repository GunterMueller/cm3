% Copyright 1999-2003 John D. Polstra.
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions
% are met:
% 1. Redistributions of source code must retain the above copyright
%    notice, this list of conditions and the following disclaimer.
% 2. Redistributions in binary form must reproduce the above copyright
%    notice, this list of conditions and the following disclaimer in the
%    documentation and/or other materials provided with the distribution.
% 3. All advertising materials mentioning features or use of this software
%    must display the following acknowledgment:
%      This product includes software developed by John D. Polstra.
% 4. The name of the author may not be used to endorse or promote products
%    derived from this software without specific prior written permission.
%
% THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
% IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
% OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
% IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
% INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
% NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
% DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
% THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
% (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
% THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

% This chunk of quake code is included into the m3makefiles for the
% various components.

% Determine which compiler variant we have.
if defined("INITIAL_REACTOR_EDITOR") or defined("CM3_VERSION")
  M3_VARIANT = "CM3"
else
  if not defined("build_standalone")
    M3_VARIANT = "PM3"
  else
    M3_VARIANT = "SRC"
  end
end

% just alwys use CM3
M3_VARIANT = "CM3"


% Generate the "Version.m3" implementation file.  It contains the release
% name, if any, else the compilation date and time.
proc version_impl(name) is
  local filename = name & ".m3"
  local tempname = filename & ".temp"
  if defined("_all")
    > tempname in
      write("MODULE Version;", CR, CR, "BEGIN", CR, "  Name := \"")
      local up = ".." & SL
      include(up & up & up & up & "scripts" & SL & "branch.quake")
      if equal(Branch, "")
        write(datetime())
      else
        write(Branch)
      end
      write("\";", CR)
      write("  Target := \"", TARGET, "\";", CR)
      write("END Version.", CR)
    end
    cp_if(tempname, filename)
    derived_implementation(name)
  end
end

% Suppress generating a shared library.
proc no_shared_lib() is
  if equal(M3_VARIANT, "PM3")
    option("shared_lib", "")
  else
    % XXX is this right for CM3? Highly unlikely.
    proc after_library_hooks(x) is
    end
  end
end

% Link statically.
if equal(M3_VARIANT, "PM3")
  proc build_standalone() is
    option("standalone", "T")
  end
end


% If the quake symbol "STATIC" is defined, we statically link everything.
if defined("STATIC")
  build_standalone()
end

proc exists(fn) is
  return not stale(fn, fn)
end

proc findpath(paths, fn) is
  foreach p in paths
    if exists(p & "/" & fn)
      return p
    end
  end
  error("file " & fn & " not found in " & paths)
end

proc findlib(fn) is
  paths = ["/usr/lib", "/usr/local/lib", "/lib", "/usr/contrib/lib",
           "/opt/lib", "/opt/csw/lib"]
  return findpath(paths, fn)
end

%
% workaround
%
%if IsDarwin() or IsSolaris()
  SYSTEM_LIBS{"LIBC"} += "-lz"
%end
