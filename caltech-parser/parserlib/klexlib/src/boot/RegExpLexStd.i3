INTERFACE RegExpLexStd;
(* generated by kext *)
(* extended lexer definition *)
IMPORT RegExpLex;
IMPORT RegExpTok;
IMPORT Interval;
IMPORT CharRange;
TYPE
  COUNT = RegExpTok.COUNT BRANDED "RegExpLexStd.COUNT" OBJECT
    val: Interval.T
  END;
  IDENTIFIER = RegExpTok.IDENTIFIER BRANDED "RegExpLexStd.IDENTIFIER" OBJECT
    val: TEXT
  END;
  CHAR_RANGE = RegExpTok.CHAR_RANGE BRANDED "RegExpLexStd.CHAR_RANGE" OBJECT
    val: CharRange.T
  END;
  STRING = RegExpTok.STRING BRANDED "RegExpLexStd.STRING" OBJECT
    val: TEXT
  END;

  T <: Public;
  Public = RegExpLex.T OBJECT
  END;

  (* Make this interface as good as any token interface *)
  Token = RegExpTok.Token;
  ConstToken = RegExpTok.ConstToken;
  ParseType = RegExpTok.ParseType;
  Allocator = RegExpTok.Allocator;
  Lexer = RegExpTok.Lexer;
  RdLexer = RegExpTok.RdLexer;
CONST
  NewPT = RegExpTok.NewPT;
  Purge = RegExpTok.Purge;
  NewConstToken = RegExpTok.NewConstToken;
END RegExpLexStd.
