(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org/).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing --
 * modify the SWIG interface file instead.
 *******************************************************************************)

INTERFACE MySQLRaw;

IMPORT Ctypes AS C;


TYPE
  my_ulonglong = C.unsigned_long_long;
  my_bool = C.char;
  gptr = C.char_star;


TYPE

  DYNAMIC_ARRAY = RECORD
                    buffer               : C.char_star;
                    elements, max_element: C.unsigned_int;
                    alloc_imcrement      : C.unsigned_int;
                    size_of_element      : C.unsigned_int;
                  END;
  RefDynamicArrayT = UNTRACED BRANDED REF DYNAMIC_ARRAY;


TYPE

  USED_MEM = RECORD
               next: RefUsedMemT;
               left: C.unsigned_int;
               size: C.unsigned_int;
             END;
  RefUsedMemT = UNTRACED BRANDED REF USED_MEM;

  MEM_ROOT = RECORD
               free             : RefUsedMemT;
               used             : RefUsedMemT;
               pre_alloc        : RefUsedMemT;
               min_malloc       : C.unsigned_int;
               block_size       : C.unsigned_int;
               block_num        : C.unsigned_int;
               first_block_usage: C.unsigned_int;
               error_handler    : PROCEDURE ();
             END;
  RefMemRootT = UNTRACED BRANDED REF MEM_ROOT;


TYPE

  LIST = RECORD
           next, prev: RefListT;
           data      : ADDRESS;
         END;
  RefListT = UNTRACED BRANDED REF LIST;


TYPE

  NET = RECORD
          vio: ADDRESS;          (* 'Vio*' *)
          buff, buff_end, write_pos, read_pos: C.unsigned_char_star;
          fd: C.int;             (* 'my_socket' *)
          max_packet, max_packet_size               : C.unsigned_long;
          pkt_nr, compress_pkt_nr                   : C.unsigned_int;
          write_timeout, read_timeout, retry_count  : C.unsigned_int;
          fcntl                                     : C.int;
          compress                                  : my_bool;
          remain_in_buf, length, buf_length, where_b: C.unsigned_long;
          return_status                             : C.unsigned_int_star;
          reading_or_writing                        : C.unsigned_char;
          save_char                                 : C.char;
          no_send_ok                                : my_bool;
          no_send_eof                               : my_bool;
          no_send_error                             : my_bool;
          last_error: C.char_star;      (* 'char[MYSQL_ERRMSG_SIZE]' *)
          last_errno: C.unsigned_int;
          error     : C.unsigned_char;
          query_cache_ptr           : gptr;
          report_error, return_errno: my_bool;
        END;
  RefNetT = UNTRACED BRANDED REF NET;


TYPE

  MYSQL_FIELD = RECORD
                  name            : C.char_star;
                  org_name        : C.char_star;
                  table           : C.char_star;
                  org_table       : C.char_star;
                  db              : C.char_star;
                  catalog         : C.char_star;
                  def             : C.char_star;
                  length          : C.unsigned_long;
                  max_length      : C.unsigned_long;
                  name_length     : C.unsigned_int;
                  org_name_length : C.unsigned_int;
                  table_length    : C.unsigned_int;
                  org_table_length: C.unsigned_int;
                  db_length       : C.unsigned_int;
                  catalog_length  : C.unsigned_int;
                  def_length      : C.unsigned_int;
                  flags           : C.unsigned_int;
                  decimals        : C.unsigned_int;
                  charsetnr       : C.unsigned_int;
                  type: C.unsigned_int;  (* should be enumeration but
                                            difficult to map *)

                END;
  RefMysqlFieldT = UNTRACED BRANDED REF MYSQL_FIELD;



TYPE
  MYSQL_ROW = C.char_star_star;
  MYSQL_FIELD_OFFSET = C.unsigned_int;


TYPE

  MYSQL_ROWS = RECORD
                 next  : RefMysqlRowsT;
                 data  : MYSQL_ROW;
                 length: C.unsigned_long;
               END;
  RefMysqlRowsT = UNTRACED BRANDED REF MYSQL_ROWS;

  MYSQL_ROW_OFFSET = RefMysqlRowsT;


TYPE

  MYSQL_DATA = RECORD
                 rows         : my_ulonglong;
                 fields       : C.unsigned_int;
                 data         : RefMysqlRowsT;
                 alloc        : MEM_ROOT;
                 embedded_info: ADDRESS;
                 (*
                 fixme with proper type
                   // extra info for embedded library
                   struct embedded_query_result *embedded_info;
                 *)
               END;
  RefMysqlDataT = UNTRACED BRANDED REF MYSQL_DATA;


TYPE
  mysql_option =
    {MYSQL_OPT_CONNECT_TIMEOUT, MYSQL_OPT_COMPRESS, MYSQL_OPT_NAMED_PIPE,
     MYSQL_INIT_COMMAND, MYSQL_READ_DEFAULT_FILE, MYSQL_READ_DEFAULT_GROUP,
     MYSQL_SET_CHARSET_DIR, MYSQL_SET_CHARSET_NAME, MYSQL_OPT_LOCAL_INFILE,
     MYSQL_OPT_PROTOCOL, MYSQL_SHARED_MEMORY_BASE_NAME,
     MYSQL_OPT_READ_TIMEOUT, MYSQL_OPT_WRITE_TIMEOUT, MYSQL_OPT_USE_RESULT,
     MYSQL_OPT_USE_REMOTE_CONNECTION, MYSQL_OPT_USE_EMBEDDED_CONNECTION,
     MYSQL_OPT_GUESS_CONNECTION, MYSQL_SET_CLIENT_IP, MYSQL_SECURE_AUTH,
     MYSQL_REPORT_DATA_TRUNCATION, MYSQL_OPT_RECONNECT};


TYPE
  InitRawCBT =
    PROCEDURE (p1: REF C.void_star; p2: C.char_star; p3: C.void_star):
      C.int;
  ReadRawCBT = PROCEDURE
                 (p1: C.void_star; p2: C.char_star; p3: C.unsigned_int):
                 C.int;
  ErrorRawCBT = PROCEDURE
                  (p1: C.void_star; p2: C.char_star; p3: C.unsigned_int):
                  C.int;
  EndRawCBT = PROCEDURE (p1: C.void_star);

  ExtendRawCBT =
    PROCEDURE (p1: C.void_star; p2: C.char_star; p3: REF C.unsigned_long):
      C.char_star;

  MYSQL_OPTIONS =
    RECORD
      connect_timeout, read_timeout, write_timeout, port, protocol: C.unsigned_int;
      client_flag                          : C.unsigned_long;
      host, user, password, unix_socket, db: C.char_star;
      init_commands                        : RefDynamicArrayT;
      my_cnf_file, my_cnf_group, charset_dir, charset_name: C.char_star;
      ssl_key, ssl_cert, ssl_ca                           : C.char_star;
      ssl_capath, ssl_cipher, shared_memory_base_name     : C.char_star;
      max_allowed_packet  : C.unsigned_long;
      use_ssl             : my_bool;
      compress, named_pipe: my_bool;
      rpl_probe           : my_bool;
      rpl_parse           : my_bool;
      no_master_reads     : my_bool;

      separate_thread: my_bool;

      methods_to_use        : mysql_option;
      client_ip             : C.char_star;
      secure_auth           : my_bool;
      report_data_truncation: my_bool;

      (* function pointers for local infile support *)

      local_infile_init : InitRawCBT;
      local_infile_read : ReadRawCBT;
      local_infile_end  : EndRawCBT;
      local_infile_error: ErrorRawCBT;

      local_infile_userdata: ADDRESS;
    END;
  RefMysqlOptionsT = UNTRACED BRANDED REF MYSQL_OPTIONS;


TYPE
  mysql_status =
    {MYSQL_STATUS_READY, MYSQL_STATUS_GET_RESULT, MYSQL_STATUS_USE_RESULT};

  mysql_protocol_type =
    {MYSQL_PROTOCOL_DEFAULT, MYSQL_PROTOCOL_TCP, MYSQL_PROTOCOL_SOCKET,
     MYSQL_PROTOCOL_PIPE, MYSQL_PROTOCOL_MEMORY};

  mysql_rpl_type = {MYSQL_RPL_MASTER, MYSQL_RPL_SLAVE, MYSQL_RPL_ADMIN};


TYPE

  MYSQL_CHARSET_INFO = RECORD
                         number  : C.unsigned_int;
                         state   : C.unsigned_int;
                         csname  : C.char_star;
                         name    : C.char_star;
                         comment : C.char_star;
                         dir     : C.char_star;
                         mbminlen: C.unsigned_int;
                         mbmaxlen: C.unsigned_int;
                       END;
  RefMysqlCharsT = UNTRACED BRANDED REF MYSQL_CHARSET_INFO;


(* mysql_stmt_state *)
CONST
  MYSQL_STMT_INIT_DONE    = 1;
  MYSQL_STMT_PREPARE_DONE = 2;
  MYSQL_STMT_EXECUTE_DONE = 3;
  MYSQL_STMT_FETCH_DONE   = 4;



CONST SCRAMBLE_LENGTH = 20;      (* check these from com.h *)

TYPE

  MYSQL = RECORD
            net         : RefNetT;
            connector_fd: gptr;
            host, user, passwd, unix_socket, server_version, host_info,
              info: C.char_star;
            db                 : C.char_star;
            charset            : RefMysqlCharsT;
            fields             : RefMysqlFieldT;
            field_alloc        : MEM_ROOT;
            affected_rows      : my_ulonglong;
            insert_id          : my_ulonglong;
            extra_info         : my_ulonglong;
            thread_id          : C.unsigned_long;
            packet_length      : C.unsigned_long;
            port               : C.unsigned_int;
            client_flag        : C.unsigned_long;
            server_capabilities: C.unsigned_long;
            protocol_version   : C.unsigned_int;
            field_count        : C.unsigned_int;
            server_status      : C.unsigned_int;
            server_language    : C.unsigned_int;
            warning_count      : C.unsigned_int;

            options: MYSQL_OPTIONS;
            status : mysql_status;

            free_me           : my_bool;
            reconnect         : my_bool;
            scramble          : ARRAY [0 .. SCRAMBLE_LENGTH + 1] OF CHAR;
            rpl_pivot         : my_bool;
            master, next_slave: RefMysqlT;
            last_used_slave   : RefMysqlT;
            last_used_con     : RefMysqlT;
            stmts             : RefListT;
            methods           : RefMysqlMethodsT;
            thd               : ADDRESS;
            unbuffered_fetch_owner: UNTRACED REF my_bool;
            info_buffer           : C.char_star;
          END;
  RefMysqlT = UNTRACED BRANDED REF MYSQL;


  MYSQL_RES = RECORD
                row_count                 : my_ulonglong;
                fields                    : RefMysqlFieldT;
                data                      : RefMysqlDataT;
                data_cursor               : RefMysqlRowsT;
                lengths                   : C.unsigned_long_star;
                handle                    : RefMysqlT;
                field_alloc               : MEM_ROOT;
                field_count               : C.unsigned_int;
                current_field             : C.unsigned_int;
                row                       : MYSQL_ROW;
                current_row               : MYSQL_ROW;
                eof                       : my_bool;
                unbuffered_fetch_cancelled: my_bool;
                methods                   : RefMysqlMethodsT;
              END;
  RefMysqlResT = UNTRACED BRANDED REF MYSQL_RES;



CONST MAX_MYSQL_MANAGER_ERR = 256;

TYPE

  MYSQL_MANAGER =
    RECORD
      net               : RefNetT;
      host, user, passwd: C.char_star;
      port              : C.unsigned_int;
      free_me           : my_bool;
      eof               : my_bool;
      md_status         : C.int;
      last_errno        : C.int;
      net_buf           : C.char_star;
      net_buf_pos       : C.char_star;
      net_data_end      : C.char_star;
      net_buf_size      : C.int;
      last_error        : ARRAY [0 .. MAX_MYSQL_MANAGER_ERR + 1] OF CHAR;
    END;
  RefMysqlManagerT = UNTRACED BRANDED REF MYSQL_MANAGER;



TYPE

  MYSQL_PARAMETERS = RECORD
                       max_allowed_packet: C.unsigned_long;
                       net_buffer_length : C.unsigned_long;
                     END;
  RefMysqlParametersT = UNTRACED BRANDED REF MYSQL_PARAMETERS;



TYPE

  MYSQL_BIND =
    RECORD
      length          : UNTRACED REF C.unsigned_long;
      is_null         : UNTRACED REF my_bool;
      buffer          : ADDRESS;
      error           : UNTRACED REF my_bool;
      buffer_type     : CARDINAL;
      buffer_length   : C.unsigned_long;
      row_ptr         : UNTRACED REF C.unsigned_char;
      offset          : C.unsigned_long;
      length_value    : C.unsigned_long;
      param_number    : C.unsigned_int;
      pack_length     : C.unsigned_int;
      error_value     : my_bool;
      is_unsigned     : my_bool;
      long_data_used  : my_bool;
      is_null_value   : my_bool;
      store_param_func: PROCEDURE (net: RefNetT; param: RefMysqlBindT);
      fetch_result: PROCEDURE (param : RefMysqlBindT;
                               param2: RefMysqlFieldT;
                               row   : C.unsigned_char_star_star);
      skip_result: PROCEDURE (param : RefMysqlBindT;
                              param2: RefMysqlFieldT;
                              row   : C.unsigned_char_star_star);
    END;
  RefMysqlBindT = UNTRACED BRANDED REF MYSQL_BIND;



TYPE

  MYSQL_STMT =
    RECORD
      mem_root     : MEM_ROOT;
      list         : LIST;
      mysql        : RefMysqlT;
      params       : RefMysqlBindT;
      bind         : RefMysqlBindT;
      fields       : RefMysqlFieldT;
      result       : MYSQL_DATA;
      data_cursor  : RefMysqlRowsT;
      affected_rows: my_ulonglong;
      insert_id    : my_ulonglong;
      read_row_func: PROCEDURE
                       (stmt: MYSQL_STMT; row: C.unsigned_char_star_star):
                       C.int;
      stmt_id      : C.unsigned_long;
      flags        : C.unsigned_long;
      prefetch_rows: C.unsigned_long;
      server_status: C.unsigned_int;
      last_errno   : C.unsigned_int;
      param_count  : C.unsigned_int;
      field_count  : C.unsigned_int;
      state        : C.int;
      last_error: C.char_star;   (*ARRAY[0..MYSQL_ERRMSG_SIZE-1] OF
                                    C.char;*)
      sqlstate: C.char_star;     (* ARRAY [0..SQLSTATE_LENGTH] OF
                                    C.char; *)
      send_types_to_server      : my_bool;
      bind_param_done           : my_bool;
      bind_result_done          : C.unsigned_char;
      unbuffered_fetch_cancelled: my_bool;
      update_max_length         : my_bool;
    END;
  RefMysqlStmtT = UNTRACED BRANDED REF MYSQL_STMT;



TYPE

  enum_stmt_attr_type = {STMT_ATTR_UPDATE_MAX_LENGTH,
                         STMT_ATTR_CURSOR_TYPE, STMT_ATTR_PREFETCH_ROWS};



TYPE

  MYSQL_METHODS =
    RECORD
      read_query_result: PROCEDURE (mysql: RefMysqlT): my_bool;
      advanced_command: PROCEDURE (mysql        : RefMysqlT;
                                   command      : CARDINAL;
                                   header       : C.char_star;
                                   header_length: C.unsigned_long;
                                   arg          : C.char_star;
                                   arg_length   : C.unsigned_long;
                                   skip_check   : my_bool          ):
                          my_bool;
      read_rows: PROCEDURE (mysql       : RefMysqlT;
                            mysql_fields: RefMysqlFieldT;
                            fields      : C.unsigned_int  ): RefMysqlDataT;
      use_result: PROCEDURE (mysql: RefMysqlT): RefMysqlResT;

      fetch_lengths: PROCEDURE (to         : REF C.unsigned_long;
                                column     : MYSQL_ROW;
                                field_count: C.unsigned_int       );
      flush_use_result: PROCEDURE (mysql: RefMysqlT);
      (* fixme add embedded library fields *)
    END;
  RefMysqlMethodsT = UNTRACED BRANDED REF MYSQL_METHODS;


<* EXTERNAL mysql_server_init *>
PROCEDURE ServerInit
  (argc: C.int; READONLY argv, groups: (*ARRAY OF*) C.char_star; ): C.int;

<* EXTERNAL mysql_server_end *>
PROCEDURE ServerEnd ();

<* EXTERNAL mysql_get_parameters *>
PROCEDURE GetParameters (): RefMysqlParametersT;

<* EXTERNAL mysql_thread_init *>
PROCEDURE ThreadInit (): my_bool;

<* EXTERNAL mysql_thread_end *>
PROCEDURE ThreadEnd ();

<* EXTERNAL mysql_num_rows *>
PROCEDURE NumRows (res: RefMysqlResT; ): C.unsigned_long_long;

<* EXTERNAL mysql_num_fields *>
PROCEDURE NumFields (res: RefMysqlResT; ): C.unsigned_int;

<* EXTERNAL mysql_eof *>
PROCEDURE Eof (res: RefMysqlResT; ): my_bool;

<* EXTERNAL mysql_fetch_field_direct *>
PROCEDURE FetchFieldDirect (res: RefMysqlResT; fieldnr: C.unsigned_int; ):
  RefMysqlFieldT;

<* EXTERNAL mysql_fetch_fields *>
PROCEDURE FetchFields (res: RefMysqlResT; ): RefMysqlFieldT;

<* EXTERNAL mysql_row_tell *>
PROCEDURE RowTell (res: RefMysqlResT; ): RefMysqlRowsT;

<* EXTERNAL mysql_field_tell *>
PROCEDURE FieldTell (res: RefMysqlResT; ): C.unsigned_int;

<* EXTERNAL mysql_field_count *>
PROCEDURE FieldCount (mysql: RefMysqlT; ): C.unsigned_int;

<* EXTERNAL mysql_affected_rows *>
PROCEDURE AffectedRows (mysql: RefMysqlT; ): C.unsigned_long_long;

<* EXTERNAL mysql_insert_id *>
PROCEDURE InsertId (mysql: RefMysqlT; ): C.unsigned_long_long;

<* EXTERNAL mysql_errno *>
PROCEDURE Errno (mysql: RefMysqlT; ): C.unsigned_int;

<* EXTERNAL mysql_error *>
PROCEDURE Error (mysql: RefMysqlT; ): C.char_star;

<* EXTERNAL mysql_sqlstate *>
PROCEDURE Sqlstate (mysql: RefMysqlT; ): C.char_star;

<* EXTERNAL mysql_warning_count *>
PROCEDURE WarningCount (mysql: RefMysqlT; ): C.unsigned_int;

<* EXTERNAL mysql_info *>
PROCEDURE Info (mysql: RefMysqlT; ): C.char_star;

<* EXTERNAL mysql_thread_id *>
PROCEDURE ThreadId (mysql: RefMysqlT; ): C.unsigned_long;

<* EXTERNAL mysql_character_set_name *>
PROCEDURE CharacterSetName (mysql: RefMysqlT; ): C.char_star;

<* EXTERNAL mysql_set_character_set *>
PROCEDURE SetCharacterSet (mysql: RefMysqlT; csname: C.const_char_star; ):
  C.int;

<* EXTERNAL mysql_init *>
PROCEDURE Init (mysql: RefMysqlT; ): RefMysqlT;

<* EXTERNAL mysql_ssl_set *>
PROCEDURE SslSet
  (mysql: RefMysqlT; key, cert, ca, capath, cipher: C.const_char_star; ):
  my_bool;

<* EXTERNAL mysql_change_user *>
PROCEDURE ChangeUser
  (mysql: RefMysqlT; user, passwd, db: C.const_char_star; ): my_bool;

<* EXTERNAL mysql_real_connect *>
PROCEDURE RealConnect (mysql                 : RefMysqlT;
                       host, user, passwd, db: C.const_char_star;
                       port                  : C.unsigned_int;
                       unix_socket           : C.const_char_star;
                       clientflag            : C.unsigned_long;   ):
  RefMysqlT;

<* EXTERNAL mysql_select_db *>
PROCEDURE SelectDb (mysql: RefMysqlT; db: C.const_char_star; ): C.int;

<* EXTERNAL mysql_query *>
PROCEDURE Query (mysql: RefMysqlT; q: C.const_char_star; ): C.int;

<* EXTERNAL mysql_send_query *>
PROCEDURE SendQuery
  (mysql: RefMysqlT; q: C.const_char_star; length: C.unsigned_long; ):
  C.int;

<* EXTERNAL mysql_real_query *>
PROCEDURE RealQuery
  (mysql: RefMysqlT; q: C.const_char_star; length: C.unsigned_long; ):
  C.int;

<* EXTERNAL mysql_store_result *>
PROCEDURE StoreResult (mysql: RefMysqlT; ): RefMysqlResT;

<* EXTERNAL mysql_use_result *>
PROCEDURE UseResult (mysql: RefMysqlT; ): RefMysqlResT;

<* EXTERNAL mysql_master_query *>
PROCEDURE MasterQuery
  (mysql: RefMysqlT; q: C.const_char_star; length: C.unsigned_long; ):
  my_bool;

<* EXTERNAL mysql_master_send_query *>
PROCEDURE MasterSendQuery
  (mysql: RefMysqlT; q: C.const_char_star; length: C.unsigned_long; ):
  my_bool;

<* EXTERNAL mysql_slave_query *>
PROCEDURE SlaveQuery
  (mysql: RefMysqlT; q: C.const_char_star; length: C.unsigned_long; ):
  my_bool;

<* EXTERNAL mysql_slave_send_query *>
PROCEDURE SlaveSendQuery
  (mysql: RefMysqlT; q: C.const_char_star; length: C.unsigned_long; ):
  my_bool;

<* EXTERNAL mysql_get_character_set_info *>
PROCEDURE GetCharSetInfo (mysql: RefMysqlT; charset: RefMysqlCharsT; );

<* EXTERNAL mysql_set_local_infile_handler *>
PROCEDURE SetLocalInfileHandler (mysql             : RefMysqlT;
                                 local_infile_init : InitRawCBT;
                                 local_infile_read : ReadRawCBT;
                                 local_infile_end  : EndRawCBT;
                                 local_infile_error: ErrorRawCBT;
                                 userdata          : ADDRESS;     );

<* EXTERNAL mysql_set_local_infile_default *>
PROCEDURE SetLocalInfileDefault (mysql: RefMysqlT; );

<* EXTERNAL mysql_enable_rpl_parse *>
PROCEDURE EnableRplParse (mysql: RefMysqlT; );

<* EXTERNAL mysql_disable_rpl_parse *>
PROCEDURE DisableRplParse (mysql: RefMysqlT; );

<* EXTERNAL mysql_rpl_parse_enabled *>
PROCEDURE RplParseEnabled (mysql: RefMysqlT; ): C.int;

<* EXTERNAL mysql_enable_reads_from_master *>
PROCEDURE EnableReadsFromMaster (mysql: RefMysqlT; );

<* EXTERNAL mysql_disable_reads_from_master *>
PROCEDURE DisableReadsFromMaster (mysql: RefMysqlT; );

<* EXTERNAL mysql_reads_from_master_enabled *>
PROCEDURE ReadsFromMasterEnabled (mysql: RefMysqlT; ): my_bool;

<* EXTERNAL mysql_rpl_query_type *>
PROCEDURE RplQueryType (q: C.const_char_star; len: C.int; ):
  mysql_rpl_type;

<* EXTERNAL mysql_rpl_probe *>
PROCEDURE RplProbe (mysql: RefMysqlT; ): my_bool;

<* EXTERNAL mysql_set_master *>
PROCEDURE SetMaster (mysql       : RefMysqlT;
                     host        : C.const_char_star;
                     port        : C.unsigned_int;
                     user, passwd: C.const_char_star; ): C.int;

<* EXTERNAL mysql_add_slave *>
PROCEDURE AddSlave (mysql       : RefMysqlT;
                    host        : C.const_char_star;
                    port        : C.unsigned_int;
                    user, passwd: C.const_char_star; ): C.int;

<* EXTERNAL mysql_shutdown *>
PROCEDURE Shutdown
  (mysql         : RefMysqlT;
   shutdown_level: C.int (* enum mysql_enum_shutdown_level *); ): C.int;

<* EXTERNAL mysql_dump_debug_info *>
PROCEDURE DumpDebugInfo (mysql: RefMysqlT; ): C.int;

<* EXTERNAL mysql_refresh *>
PROCEDURE Refresh (mysql: RefMysqlT; refresh_options: C.unsigned_int; ):
  C.int;

<* EXTERNAL mysql_kill *>
PROCEDURE Kill (mysql: RefMysqlT; pid: C.unsigned_long; ): C.int;

<* EXTERNAL mysql_set_server_option *>
PROCEDURE SetServerOption
  (mysql: RefMysqlT; option: C.int (* enum enum_mysql_set_option *); ):
  C.int;

<* EXTERNAL mysql_ping *>
PROCEDURE Ping (mysql: RefMysqlT; ): C.int;

<* EXTERNAL mysql_stat *>
PROCEDURE Stat (mysql: RefMysqlT; ): C.char_star;

<* EXTERNAL mysql_get_server_info *>
PROCEDURE GetServerInfo (mysql: RefMysqlT; ): C.char_star;

<* EXTERNAL mysql_get_client_info *>
PROCEDURE GetClientInfo (): C.char_star;

<* EXTERNAL mysql_get_client_version *>
PROCEDURE GetClientVersion (): C.unsigned_long;

<* EXTERNAL mysql_get_host_info *>
PROCEDURE GetHostInfo (mysql: RefMysqlT; ): C.char_star;

<* EXTERNAL mysql_get_server_version *>
PROCEDURE GetServerVersion (mysql: RefMysqlT; ): C.unsigned_long;

<* EXTERNAL mysql_get_proto_info *>
PROCEDURE GetProtoInfo (mysql: RefMysqlT; ): C.unsigned_int;

<* EXTERNAL mysql_list_dbs *>
PROCEDURE ListDbs (mysql: RefMysqlT; wild: C.const_char_star; ):
  RefMysqlResT;

<* EXTERNAL mysql_list_tables *>
PROCEDURE ListTables (mysql: RefMysqlT; wild: C.const_char_star; ):
  RefMysqlResT;

<* EXTERNAL mysql_list_processes *>
PROCEDURE ListProcesses (mysql: RefMysqlT; ): RefMysqlResT;

<* EXTERNAL mysql_options *>
PROCEDURE Options (mysql : RefMysqlT;
                   option: C.int (* enum mysql_option *);
                   arg   : C.const_char_star;             ): C.int;

<* EXTERNAL mysql_free_result *>
PROCEDURE FreeResult (res: RefMysqlResT; );

<* EXTERNAL mysql_data_seek *>
PROCEDURE DataSeek (res: RefMysqlResT; offset: C.unsigned_long_long; );

<* EXTERNAL mysql_row_seek *>
PROCEDURE RowSeek (res: RefMysqlResT; offset: RefMysqlRowsT; ):
  RefMysqlRowsT;

<* EXTERNAL mysql_field_seek *>
PROCEDURE FieldSeek (res: RefMysqlResT; offset: C.unsigned_int; ):
  C.unsigned_int;

<* EXTERNAL mysql_fetch_row *>
PROCEDURE FetchRow (res: RefMysqlResT; ): C.char_star_star;

<* EXTERNAL mysql_fetch_lengths *>
PROCEDURE FetchLengths (res: RefMysqlResT; ): C.unsigned_long_star;

<* EXTERNAL mysql_fetch_field *>
PROCEDURE FetchField (res: RefMysqlResT; ): RefMysqlFieldT;

<* EXTERNAL mysql_list_fields *>
PROCEDURE ListFields (mysql: RefMysqlT; table, wild: C.const_char_star; ):
  RefMysqlResT;

<* EXTERNAL mysql_escape_string *>
PROCEDURE EscapeString (to         : C.char_star;
                        from       : C.const_char_star;
                        from_length: C.unsigned_long;   ): C.unsigned_long;

<* EXTERNAL mysql_hex_string *>
PROCEDURE HexString (to         : C.char_star;
                     from       : C.const_char_star;
                     from_length: C.unsigned_long;   ): C.unsigned_long;

<* EXTERNAL mysql_real_escape_string *>
PROCEDURE RealEscapeString (mysql : RefMysqlT;
                            to    : C.char_star;
                            from  : C.const_char_star;
                            length: C.unsigned_long;   ): C.unsigned_long;

<* EXTERNAL mysql_debug *>
PROCEDURE Debug (debug: C.const_char_star; );

<* EXTERNAL mysql_odbc_escape_string *>
PROCEDURE OdbcEscapeString (mysql        : RefMysqlT;
                            to           : C.char_star;
                            to_length    : C.unsigned_long;
                            from         : C.const_char_star;
                            from_length  : C.unsigned_long;
                            param        : ADDRESS;
                            extend_buffer: ExtendRawCBT;      ):
  C.char_star;

<* EXTERNAL myodbc_remove_escape *>
PROCEDURE RemoveEscape (mysql: RefMysqlT; name: C.char_star; );

<* EXTERNAL mysql_thread_safe *>
PROCEDURE ThreadSafe (): C.unsigned_int;

<* EXTERNAL mysql_embedded *>
PROCEDURE Embedded (): my_bool;

<* EXTERNAL mysql_manager_init *>
PROCEDURE ManagerInit (con: RefMysqlManagerT; ): RefMysqlManagerT;

<* EXTERNAL mysql_manager_connect *>
PROCEDURE ManagerConnect (con               : RefMysqlManagerT;
                          host, user, passwd: C.const_char_star;
                          port              : C.unsigned_int;    ):
  RefMysqlManagerT;

<* EXTERNAL mysql_manager_close *>
PROCEDURE ManagerClose (con: RefMysqlManagerT; );

<* EXTERNAL mysql_manager_command *>
PROCEDURE ManagerCommand
  (con: RefMysqlManagerT; cmd: C.const_char_star; cmd_len: C.int; ): C.int;

<* EXTERNAL mysql_manager_fetch_line *>
PROCEDURE ManagerFetchLine
  (con: RefMysqlManagerT; res_buf: C.char_star; res_buf_size: C.int; ):
  C.int;

<* EXTERNAL mysql_read_query_result *>
PROCEDURE ReadQueryResult (mysql: RefMysqlT; ): my_bool;

<* EXTERNAL mysql_stmt_init *>
PROCEDURE StmtInit (mysql: RefMysqlT; ): RefMysqlStmtT;

<* EXTERNAL mysql_stmt_prepare *>
PROCEDURE StmtPrepare (stmt  : RefMysqlStmtT;
                       query : C.const_char_star;
                       length: C.unsigned_long;   ): C.int;

<* EXTERNAL mysql_stmt_execute *>
PROCEDURE StmtExecute (stmt: RefMysqlStmtT; ): C.int;

<* EXTERNAL mysql_stmt_fetch *>
PROCEDURE StmtFetch (stmt: RefMysqlStmtT; ): C.int;

<* EXTERNAL mysql_stmt_fetch_column *>
PROCEDURE StmtFetchColumn (stmt  : RefMysqlStmtT;
                           bind  : RefMysqlBindT;
                           column: C.unsigned_int;
                           offset: C.unsigned_long; ): C.int;

<* EXTERNAL mysql_stmt_store_result *>
PROCEDURE StmtStoreResult (stmt: RefMysqlStmtT; ): C.int;

<* EXTERNAL mysql_stmt_param_count *>
PROCEDURE StmtParamCount (stmt: RefMysqlStmtT; ): C.unsigned_long;

<* EXTERNAL mysql_stmt_attr_set *>
PROCEDURE StmtAttrSet (stmt     : RefMysqlStmtT;
                       attr_type: C.int (* enum enum_stmt_attr_type *);
                       attr     : ADDRESS;                              ):
  my_bool;

<* EXTERNAL mysql_stmt_attr_get *>
PROCEDURE StmtAttrGet (stmt     : RefMysqlStmtT;
                       attr_type: C.int (* enum enum_stmt_attr_type *);
                       attr     : ADDRESS;                              ):
  my_bool;

<* EXTERNAL mysql_stmt_bind_param *>
PROCEDURE StmtBindParam (stmt: RefMysqlStmtT; bnd: RefMysqlBindT; ):
  my_bool;

<* EXTERNAL mysql_stmt_bind_result *>
PROCEDURE StmtBindResult (stmt: RefMysqlStmtT; bnd: RefMysqlBindT; ):
  my_bool;

<* EXTERNAL mysql_stmt_close *>
PROCEDURE StmtClose (stmt: RefMysqlStmtT; ): my_bool;

<* EXTERNAL mysql_stmt_reset *>
PROCEDURE StmtReset (stmt: RefMysqlStmtT; ): my_bool;

<* EXTERNAL mysql_stmt_free_result *>
PROCEDURE StmtFreeResult (stmt: RefMysqlStmtT; ): my_bool;

<* EXTERNAL mysql_stmt_send_long_data *>
PROCEDURE StmtSendLongData (stmt        : RefMysqlStmtT;
                            param_number: C.unsigned_int;
                            data        : C.const_char_star;
                            length      : C.unsigned_long;   ): my_bool;

<* EXTERNAL mysql_stmt_result_metadata *>
PROCEDURE StmtResultMetadata (stmt: RefMysqlStmtT; ): RefMysqlResT;

<* EXTERNAL mysql_stmt_param_metadata *>
PROCEDURE StmtParamMetadata (stmt: RefMysqlStmtT; ): RefMysqlResT;

<* EXTERNAL mysql_stmt_errno *>
PROCEDURE StmtErrno (stmt: RefMysqlStmtT; ): C.unsigned_int;

<* EXTERNAL mysql_stmt_error *>
PROCEDURE StmtError (stmt: RefMysqlStmtT; ): C.char_star;

<* EXTERNAL mysql_stmt_sqlstate *>
PROCEDURE StmtSqlstate (stmt: RefMysqlStmtT; ): C.char_star;

<* EXTERNAL mysql_stmt_row_seek *>
PROCEDURE StmtRowSeek (stmt: RefMysqlStmtT; offset: RefMysqlRowsT; ):
  RefMysqlRowsT;

<* EXTERNAL mysql_stmt_row_tell *>
PROCEDURE StmtRowTell (stmt: RefMysqlStmtT; ): RefMysqlRowsT;

<* EXTERNAL mysql_stmt_data_seek *>
PROCEDURE StmtDataSeek
  (stmt: RefMysqlStmtT; offset: C.unsigned_long_long; );

<* EXTERNAL mysql_stmt_num_rows *>
PROCEDURE StmtNumRows (stmt: RefMysqlStmtT; ): C.unsigned_long_long;

<* EXTERNAL mysql_stmt_affected_rows *>
PROCEDURE StmtAffectedRows (stmt: RefMysqlStmtT; ): C.unsigned_long_long;

<* EXTERNAL mysql_stmt_insert_id *>
PROCEDURE StmtInsertId (stmt: RefMysqlStmtT; ): C.unsigned_long_long;

<* EXTERNAL mysql_stmt_field_count *>
PROCEDURE StmtFieldCount (stmt: RefMysqlStmtT; ): C.unsigned_int;

<* EXTERNAL mysql_commit *>
PROCEDURE Commit (mysql: RefMysqlT; ): my_bool;

<* EXTERNAL mysql_rollback *>
PROCEDURE Rollback (mysql: RefMysqlT; ): my_bool;

<* EXTERNAL mysql_autocommit *>
PROCEDURE Autocommit (mysql: RefMysqlT; auto_mode: my_bool; ): my_bool;

<* EXTERNAL mysql_more_results *>
PROCEDURE MoreResults (mysql: RefMysqlT; ): my_bool;

<* EXTERNAL mysql_next_result *>
PROCEDURE NextResult (mysql: RefMysqlT; ): C.int;

<* EXTERNAL mysql_close *>
PROCEDURE Close (sock: RefMysqlT; );

END MySQLRaw.
