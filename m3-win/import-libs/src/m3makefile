%
% Jay Krell
% jaykrell@cornell.edu
% October 18, 2006 in Windows cmd
% ported to Quake December 31, 2006 so it might be run at the right time in a build (ie: the first package, before m3core)
% Possibly also for a hypothetical Windows targeted non-Windows hosted build.
% 
% This is the second stage in producing Windows import .libs.
% Given Quake code snippets output by make-lib-1.cmd, produce
% .c and .def files and compile and link them. The .c files just
% contain empty functions with the right names and the Signatures --
% Signatures just being the right number of bytes of parameters, the
% right types are not needed.
%

%
%
% The .libs that come with CM3 5.2.6 do not work with Visual C++ prior to 5.0, nor with 8.0.
% The Visual C++ 7.1 and 8.0 Express Editions are missing many .libs.
% We are stuck with no /really simple/ solution, but several not too difficult solutions.
%
% We could detect the linker version and accept the 5.2.6 .libs.
%   We presently do no toolset version checking, though this isn't a bad option.
%   Toolset version checking in Quake, cmd, and nmake has been shown to be easy enough.
%
% We could delete the .libs if using Visual C++ 2.0 or 4.0.
%    Again, we don't do toolset version checking.
%
% We could delete the .libs unconditionally and users of Express Editions must
% install the free download Platform SDK.
%    This is not a bad option.
%
% We could detect the linker version and have like \cm3\lib\vc20, \cm3\lib\vc40, \cm3\lib\vc50, etc.
% Some of these directories would be copies of \cm3\lib, others would be generated by make-lib-2.
%
% We could require users (esp. of older toolsets) to run scripts\win\lib\make-lib-2.
%   This is ok. This is almost what we do.
%
% We could run make-lib-2 for folks automatically.
%   That is what we do. This is good.
%
% Future binary distributions should perhaps contain .libs built with the oldest supported toolset (perhaps
%  that is already the case). But this automatic way should be good.
%
%

%
% The kernel32.lib installed by CM3 5.2.6 is missing InterlockedCompareExchange
% that is needed by msvcrt.lib 8.0.
%
% The user32.lib installed by 5.2.6 causes the Visual C++ 4.0 linker to
% have an "internal error".
%
% The wsock32.lib installed by 5.2.6 causes the Visual C++ 4.0 linker to
% error regarding corrupt debugging information.
%
% There are more link errors, make everything.
%

%
% It would be nice if we could turn off linking to all .libs, but we cannot. This does nothing.
% This is only part of the commented out attempt to use Quake more and exec("cl...") less.
% It does nothing either way.
%
SYSTEM_LIBS = { }
SYSTEM_LIBORDER = { }

local Files = {
    "advapi32",
    "comctl32",
    "comdlg32",
    "gdi32",
    "glu32",
    "kernel32",
    "netapi32",
    "odbc32",
    "odbccp32",
    "opengl32",
    "user32",
    "winspool",
    "wsock32",
}

foreach File in Files
    deriveds(File, [ ".obj", ".c", ".cpp", ".def", ".lib", ".dll", ".drv", ".exp", ".m3x" ])
end
deriveds("", [".M3WEB"])
% Older Modula-3 toolsets, such as 5.1.3 from 2001, don't set M3_MODE.
% That is ok, don't /really/ care about it, it just let's us
% implement "clean" correctly.
if not defined("M3_MODE")
    M3_MODE = ""
end
if equal(M3_MODE, "clean") or not equal(TARGET, "NT386")
    % neuter the data rather than indent the whole rest of the file
    Files = { }
end

%
% Quake can't do math. We simulate it badly with hash tables and arrays.
%

local readonly Integers = [
"0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20"
]

local ReverseIntegers = [ ]

local UpTo = {"0": []}
local DownFrom = {"0": []}

local readonly Times4 = {
 "0": "0", "1": "4", "2": "8", "3":"12", "4":"16", "5":"20", "6":"24", "7":"28", "8":"32", "9":"36",
"10":"40","11":"44","12":"48","13":"52","14":"56","15":"60","16":"64","17":"68","18":"72","19":"76",
}

local Plus1 = { }
local Minus1 = { }
local Divide4 = { }

proc InitMath() is
    local i = ""
    local j = ""
    foreach j in Integers
        %local TempReverse = [ i ]
        %TempReverse += ReverseIntegers
        %ReverseIntegers = TempReverse
        if i
            Plus1{i} = j
            Minus1{j} = i

            u = []
            foreach k in UpTo{i}
                u += k
            end
            u  += i
            UpTo{j} = u

            d = [ i ]
            foreach k in DownFrom{i}
                d += k
            end
            DownFrom{j} = d
        end
        i = j
    end
    foreach i in Times4
        Divide4{Times4{i}} = i
    end
end

InitMath()

proc SourceFilePath(a) is
    return ".." & SL & "src" & SL & a
end

%
% This should be built-in.
%
proc file_exists(a) is
  return not stale (a, a)
end

foreach File in Files

    local readonly QuakeFileName = File & ".quake"
    local readonly CppFilePath = File & ".c"
    local readonly ObjFilePath = File & ".obj"
    local readonly DefFilePath = File & ".def"
    local readonly LibFilePath = File & ".lib"

    if stale(LibFilePath, [SourceFilePath(QuakeFileName),
        %SourceFilePath("m3makefile")
        ])

        include(QuakeFileName)

        local Extension = "dll"
        local CppFileContents = [ ]
        local DefFileContents = [ ]
%
% These should be large strings and we'd say
% CppFileContents = CppFileContents & ...
% but that overflows buffers in the Modula-3 code, so use arrays instead.
% This nets us some extra whitespace, but that is ok.
%
        CppFileContents += ["#if defined(__cplusplus)" & CR]
        CppFileContents += ["extern \"C\" {" & CR]
        CppFileContents += ["#endif" & CR]
        CppFileContents += ["#pragma warning(disable:4100) /* unused parameter */" & CR]
        CppFileContents += ["typedef unsigned u;" & CR]

        DefFileContents += [DefFileContents & "EXPORTS" & CR]

        foreach FunctionName in Files{File}
            if equal(FunctionName, "Extension")
                Extension = Files{File}{"Extension"}
            else
                local s = ""
                Signature = Files{File}{FunctionName}
                DefFileContents += [" " & FunctionName & CR]
                if equal(Signature, "__cdecl")
                    s = "void __cdecl " & FunctionName & "("
                else
                    s = "void __stdcall " & FunctionName & "("
                    foreach i in UpTo{Divide4{Signature}}
                        if not equal(i, "0")
                            s = s & ","
                        end
                        s = s & "u a" & i
                    end
                end
                CppFileContents += s & ") { }" & CR
            end
        end
        CppFileContents += ["#if defined(__cplusplus)" & CR]
        CppFileContents += ["} /* extern \"C\" */" & CR]
        CppFileContents += ["#endif" & CR]
        > CppFilePath in
            write(CppFileContents)
        end
        > DefFilePath in
            write(DefFileContents)
        end
        %
        % This almost works but does a lot of extra stuff and installs a lot of extra files including
        % bogus .dlls to \cm3\bin. We want the .libs but not the .dlls.
        % It also takes away our hack below to use Visual C++ 2.0.
        %
        %derived_c(File)
        %library(File)

        %
        % This needs work.
        % In order for folks using older toolsets to be able to use the .libs in the distribution,
        % try to use an older toolset. Or just don't support anything prior to 5.0sp?.
        %
        %local msvc50 = "\\msdev\\50\\vc\\bin"
        %local msvc20 = "\\msdev\\20\\bin"
    % make this more visible
    local CommandPrefix = ""
        %if file_exists(msvc50)
        %    CommandPrefix = msvc20 & SL
        %else
        %    if file_exists(msvc20)
        %        CommandPrefix = msvc20 & SL
        %    end
        %end
        %exec(CommandPrefix & "cl /c /X /nologo /W4 /WX /Tp" & CppFilePath)
        %exec(CommandPrefix & "link /nologo /dll /nodefaultlib /noentry /def:" & DefFilePath & " /out:" & File & "." & Extension & " " & ObjFilePath)
        exec(CommandPrefix & "cl /LD /Zl /X /nologo /W4 /WX /Tp" & CppFilePath & " /link /nodefaultlib /noentry /def:" & DefFilePath & " /out:" & File & "." & Extension)

        %
        % .m3x files needed but not otherwise produced.
        %
        > File & ".m3x" in 
          write("")
        end
    end
    LibdExport(File & ".lib")
end

if not equal(M3_MODE, "clean")
    %
    % .M3WEB needed but not otherwise produced.
    %
    > ".M3WEB" in 
      write("")
    end
end
