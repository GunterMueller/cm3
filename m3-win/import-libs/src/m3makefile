% $Id$
%
% Jay Krell
% jaykrell@cornell.edu
% October 18, 2006 in Windows cmd
% ported to Quake December 31, 2006 so it might be run at the right time in a build (ie: the first package, before m3core)
% Possibly also for a hypothetical Windows targeted non-Windows hosted build.
% 
% This is the second stage in producing Windows import .libs.
% Given Quake code snippets output by make-lib-1.cmd, produce
% .c and .def files and compile and link them. The .c files just
% contain empty functions with the right names and the Signatures --
% Signatures just being the right number of bytes of parameters, the
% right types are not needed.
%

%
%
% The .libs that come with CM3 5.2.6 do not work with Visual C++ prior to 5.0, nor with 8.0.
% The Visual C++ 7.1 and 8.0 Express Editions are missing many .libs.
% We are stuck with no /really simple/ solution, but several not too difficult solutions.
%
% We could detect the linker version and accept the 5.2.6 .libs.
%   We presently do no toolset version checking, though this isn't a bad option.
%   Toolset version checking in Quake, cmd, and nmake has been shown to be easy enough.
%
% We could delete the .libs if using Visual C++ 2.0 or 4.0.
%    Again, we don't do toolset version checking.
%
% We could delete the .libs unconditionally and users of Express Editions must
% install the free download Platform SDK.
%    This is not a bad option.
%
% We could detect the linker version and have like \cm3\lib\vc20, \cm3\lib\vc40, \cm3\lib\vc50, etc.
% Some of these directories would be copies of \cm3\lib, others would be generated by make-lib-2.
%
% We could require users (esp. of older toolsets) to run scripts\win\lib\make-lib-2.
%   This is ok. This is almost what we do.
%
% We could run make-lib-2 for folks automatically.
%   That is what we do. This is good.
%
% Future binary distributions should perhaps contain .libs built with the oldest supported toolset (perhaps
%  that is already the case). But this automatic way should be good.
%
%

%
% The kernel32.lib installed by CM3 5.2.6 is missing InterlockedCompareExchange
% that is needed by msvcrt.lib 8.0.
%
% The user32.lib installed by 5.2.6 causes the Visual C++ 4.0 linker to
% have an "internal error".
%
% The wsock32.lib installed by 5.2.6 causes the Visual C++ 4.0 linker to
% error regarding corrupt debugging information.
%
% There are more link errors, make everything.
%

local Files = {
    "advapi32",
    "comctl32",
    "comdlg32",
    "gdi32",
    "glu32",
    "kernel32",
    "netapi32",
    "odbc32",
    "opengl32",
    "user32",
    "winspool",
    "wsock32",
}

local M3_WIN_IMPORT_LIBS_CC = ""
M3_WIN_IMPORT_LIBS_CC = "gcc"
M3_WIN_IMPORT_LIBS_CC = "cl"
if defined("SYSTEM_CC")
    M3_WIN_IMPORT_LIBS_CC = SYSTEM_CC
end

local Stale = [ ]
local AnyStale = FALSE

foreach File in Files
    deriveds(File, [ ".def", ".lib", ".dll", ".drv", ".exp", ".m3x" ])
end
deriveds("a", [ ".c", ".o", ".obj" ])
deriveds("", [".M3WEB"])
delete_file(INSTALL_ROOT & SL & "lib" & SL & "odbccp32.lib")

%
% Older Modula-3 toolsets, such as 5.1.3 from 2001, don't set M3_MODE.
% That is ok, we don't /really/ care about it, it just let's us
% implement "clean" correctly.
%
if not defined("M3_MODE")
    M3_MODE = ""
end
%
% neuter the data rather than indent the whole rest of the file
%
if equal(M3_MODE, "clean")
    Files = { }
end
if not equal(TARGET, "NT386")
    Files = { }
end
if defined("C_COMPILER")
  if not equal(C_COMPILER, "MS")
    Files = { }
  end
end
if defined("LINKER")
  if not equal(LINKER, "MS")
    Files = { }
  end
end

%
% Quake can't do math. We simulate it badly.
%

%
% These don't actually have be numbers. Using letters nets us valid C identifiers.
%
local readonly Integers = [
"A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S"
]

% map an integer to an array of integers from 0 to that integer mins 1
% (Or at least that many unique values.)
local UpTo = { }

%
% The values here really do have to be increasing multiples of 4.
%
local readonly Times4 = {
"A":"0","B":"4","C":"8","D":"12","E":"16","F":"20","G":"24","H":"28","I":"32", "J":"36",
"K":"40","L":"44","M":"48","N":"52","O":"56","P":"60","Q":"64","R":"68","S":"72",
}
local Divide4 = { }

local proc InitMath() is
    local u = [ ]
    foreach i in Integers
        %
        % Arrays have reference semantics. We must manually copy elements.
        %
        UpTo{i} = [ ]
        foreach j in u
            UpTo{i} += j
        end
        u += i
        Divide4{Times4{i}} = i
    end
end

InitMath()

local proc SourceFilePath(a) is
    return ".." & SL & "src" & SL & a
end

%
% This should be built-in.
%
local proc FileExists(a) is
  return not stale (a, a)
end

local proc PickExists(a, b) is
    if FileExists(a)
        return a
    end
    return b
end

local proc ObjFile(a) is
    return PickExists(a & ".obj", a & ".o")
end

foreach File in Files

    local readonly QuakeFileName = File & ".quake"
    local readonly LibFilePath = File & ".lib"

    if stale(LibFilePath, SourceFilePath(QuakeFileName))

        AnyStale = TRUE
        Stale += File
        LibdExport(LibFilePath)
        local readonly DefFilePath = File & ".def"
        local Extension = "dll"

        include(QuakeFileName)

        > DefFilePath in

            write("EXPORTS" & CR)

            foreach FunctionName in Files{File}
                if equal(FunctionName, "Extension")
                    Extension = Files{File}{"Extension"}
                else
                    local Signature = Files{File}{FunctionName}
                    if equal(Signature, "__cdecl")
                        write(" " & FunctionName & " = Z" & CR)
                    else
                        write(" " & FunctionName & " = " & Divide4{Signature} & CR)
                    end
                end
            end

            if not equal(Extension, "dll")
                write("LIBRARY " & File & "." & Extension & CR)
            end
        end

        %
        % .m3x files needed but not otherwise produced.
        %
        > File & ".m3x" in 
          write("")
        end
    end
end

if AnyStale

    local readonly CFilePath = "a.c"

    > CFilePath in
        write("typedef unsigned U;" & CR)
        write("void __cdecl Z(void) { }" & CR)

        foreach NumberOfParameters in Integers
            local ArgsIn = ""
            if equal(NumberOfParameters, "0")
                ArgsIn = "void"
            else
                foreach Parameter in UpTo{NumberOfParameters}
                    if not equal(Parameter, Integers[0])
                        ArgsIn = ArgsIn & ","
                    end
                    ArgsIn = ArgsIn & "U " & Parameter
                end
            end
            %
            % This is unavoidably confusing.
            % We end up with the symbols F0@0, F4@4, F8@8, etc.
            %
            write("void __stdcall " & NumberOfParameters & "(" & ArgsIn & ") { }" & CR)
        end
    end

    exec(M3_WIN_IMPORT_LIBS_CC, "-c", CFilePath)

    foreach File in Stale
        %
        % dlltool produces import .libs that don't quite work, at least with link.
        % ld produces import .libs that really don't work.
        % link produces import .libs that don't quite work with ld.
        %
        % Specifically ld does not seem to support the usage where
        % the symbols are __stdcall but the exports are plain.
        % Thus you either fail to link or fail to load.
        % Perhaps I couldn't find the right switches.
        %
        % Specifically with dlltool produced .libs, imports often
        % get dropped, leading to crashes.
        %
        % Specifically with ld consuming link .libs, same thing, imports are dropped.
        %
        % The problem is being seen with winspool.drv, so maybe it is about the non-.dll extension?
        %

        %
        % The .obj file is needed to match plain function names up with stdcall signatures.
        % Thus the import .lib has two strings, Foo, and _Foo@4 (and possibly __imp__Foo@4).
        % The compiler generates referenes to _Foo@4 (or __imp__Foo@4), which resolve to
        % import .lib entries that cause just "Foo" to be written in the .dll or .exe.
        %
        % Achieving this requires "source code", barely, and a .def file.
        % "Source code" is merely __stdcall functions with the right signatures --
        %  the right number of parameters, the functions can all be empty.
        %
        exec(
            "link",
            "-lib",
            "-nologo",
            "-nodefaultlib",
            "-def:" & File & ".def",
            ObjFile("a"),
            )
    end
end

if not equal(M3_MODE, "clean")
    %
    % .M3WEB needed but not otherwise produced.
    %
    > ".M3WEB" in 
      write("")
    end
end
