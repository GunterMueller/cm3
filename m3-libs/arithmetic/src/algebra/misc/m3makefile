import("libm3")

template("gcd")
template("integerpower")
template("combinatoric")


generic_module("IntegerPower")
IntegerPower("Integer32",            "Integer32",            "Basic")
IntegerPower("Cardinal32",           "Cardinal32",           "Basic")
IntegerPower("BigInteger",           "BigInteger",           "")
IntegerPower("BigIntegerComplex",    "BigIntegerComplex",    "Basic")
IntegerPower("BigIntegerPolynomial", "BigIntegerPolynomial", "")
IntegerPower("BigIntegerMatrix",     "BigIntegerMatrix",     "")
IntegerPower("LongReal",             "LongReal",             "Basic")
IntegerPower("LongRealComplex",      "LongRealComplex",      "Fast")
IntegerPower("LongRealPolynomial",   "LongRealPolynomial",   "")
IntegerPower("LongRealMatrix",       "LongRealMatrix",       "")

generic_module("GCD")
GCD("Cardinal32",                   "Cardinal32",                   "Basic")
GCD("Integer32",                    "Integer32",                    "Basic")
GCD("Integer32Complex",             "Integer32Complex",             "Basic")
GCD("BigInteger",                   "BigInteger",                   "")
GCD("BigIntegerComplex",            "BigIntegerComplex",            "Basic")
GCD("BigIntegerFractionPolynomial", "BigIntegerFractionPolynomial", "")
% GCD will not work with floating point numbers,
% because values that should be zero, aren't zero most often

generic_module("Combinatoric")
Combinatoric("Cardinal32",          "Cardinal32", "Basic")
Combinatoric("BigInteger",          "BigInteger", "")


module("NumberTheory")
implementation("PrimeNumber")
