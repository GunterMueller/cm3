%
%  Quake functions to instantiate operations on generic matrices.
%

readonly proc MatrixBasic (nm, field, rimpl, vimpl) is
  local basic  = nm & "MatrixBasic"
  local rfield = field & rimpl
  local vfield = field & "Vector" & vimpl
  build_generic_intf (basic, "MatrixBasic", [rfield, vfield], VISIBLE)
  build_generic_impl (basic, "MatrixBasic", [rfield, vfield])
end

readonly proc MatrixFast (nm, field, rimpl, vimpl) is
  local basic  = nm & "MatrixBasic"
  local fast   = nm & "MatrixFast"
  local rfield = field & rimpl
  local vfield = field & "Vector" & vimpl
  build_generic_intf (basic, "MatrixBasic", [rfield, vfield], VISIBLE)
  build_generic_impl (basic, "MatrixBasic", [rfield, vfield])
  build_generic_intf (fast,  "MatrixFast",  [rfield, vfield, basic], VISIBLE)
  build_generic_impl (fast,  "MatrixFast",  [rfield, vfield])
end

readonly proc MatrixTrans (nm, real, rimpl, complex, cimpl, mimpl) is
  local basic = nm & "MatrixTrans"
  local rfield = real & rimpl
  local rtrans = real & "Trans"
  local ctrans = real & complex & "Trans"
  local eigen  = nm & "EigenSystem"
  local mfield = nm & "Matrix" & mimpl
  build_generic_intf (basic, "MatrixTrans", [rfield,                        mfield], VISIBLE)
  build_generic_impl (basic, "MatrixTrans", [rfield, rtrans, ctrans, eigen, mfield])
end

readonly proc MatrixDecomposition (nm, impl) is
  local basic = nm & "MatrixDecomposition"
  local rfield  = nm & "Basic"
  local rtrans  = nm & "Trans"
  local vfield  = nm & "Vector" & impl
  local mfield  = nm & "Matrix" & impl
  build_generic_intf (basic, "MatrixDecomposition", [rfield,         vfield, mfield], VISIBLE)
  build_generic_impl (basic, "MatrixDecomposition", [rfield, rtrans, vfield, mfield])
end

readonly proc EigenSystem (nm, impl) is
  local basic = nm & "EigenSystem"
  local rfield  = nm & "Basic"
  local rtrans  = nm & "Trans"
  local cfield  = nm & "Complex" & impl
  local vfield  = nm & "Vector" & impl
  local cvfield = nm & "ComplexVectorBasic"
  local mfield  = nm & "Matrix" & impl
  local mlap    = nm & "MatrixLapack"
  build_generic_intf (basic, "EigenSystem", [        rtrans,         vfield, cvfield, mfield], VISIBLE)
  build_generic_impl (basic, "EigenSystem", [rfield, rtrans, cfield, vfield, cvfield, mfield, mlap])
end

readonly proc CharPolynomial (nm, mimpl, rimpl) is
  local basic   = nm & "CharPolynomial"
  local rfield  = nm & rimpl
  local rtfield = nm & "RootBasic"
  local mfield  = nm & "Matrix" & mimpl
  build_generic_intf (basic, "CharPolynomial", [        rtfield, mfield], VISIBLE)
  build_generic_impl (basic, "CharPolynomial", [rfield, rtfield, mfield])
end

readonly proc MatrixFmtLex (nm, mimpl) is
  local mfield = nm & "Matrix" & mimpl
  local mfmt   = nm & "MatrixFmtLex"
  local rfmt   = nm & "FmtLex"
  build_generic_intf (mfmt, "MatrixFmtLex", [rfmt, mfield], VISIBLE)
  build_generic_impl (mfmt, "MatrixFmtLex", [rfmt])
end

readonly proc InstantiateFortranPart (nm, src, ext, type, prefix) is
  local floatsrc = "Float" & src & ext
  local target   = nm      & src & ext
  local fullsrc  = path()&"/"&floatsrc
  source(floatsrc)
  if stale(target,fullsrc)
    exec("perl -p -e \"s/Float/"&type&"/;s/EXTERNAL x/EXTERNAL "&prefix&"/\"", fullsrc, ">" & target)
  end
end

readonly proc InstantiateFortran (nm, src, type, prefix) is
  InstantiateFortranPart (nm, src, ".i3", type, prefix)
  InstantiateFortranPart (nm, src, ".m3", type, prefix)
  derived_interface      (nm & src,VISIBLE)
  derived_implementation (nm & src)
end
