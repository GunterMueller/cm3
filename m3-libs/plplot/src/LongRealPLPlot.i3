(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org/).
 * Version 1.3.23
 *
 * Do not make changes to this file unless you know what you are doing --
 * modify the SWIG interface file instead.
 *******************************************************************************)

INTERFACE LongRealPLPlot;
IMPORT LongRealPLPlotRaw;
IMPORT Cstdio;

TYPE

  Option = {enabled, arg, nodelete, invisible, disabled, dummy5, dummy6,
            dummy7, func, bool, int, float, string};

  Window = {dummy0, device, world};

  Parse =
    {full, quiet, nodelete, showall, override, noprogram, nodash, skip};

  Escape = {setRgb, allocNcol, expose, graph, xormod};

  Buffering = {dummy0, enable, disable, query};

  DrawMode = {linex, liney, magColor, baseCont, topCont, surfCont, sides,
              faceted, mesh};

(* * * * Precaution:

   This conversion from the C headers is not well tested and may contain
   bugs, irritating function names or improper types.  We should use
   enumerations, sets, subranges whereever possible to increase safety for
   parameter passing.  We should use EXCEPTIONs to indicate non-predictable
   errors.  We should use ASSERTs to indicate obviously invalid parameter
   values, such as arrays of mismatching sizes.  * * * *)

TYPE
  Float = LONGREAL;
  FloatVector = ARRAY OF Float;
  FloatMatrix = ARRAY OF ARRAY OF Float;

  DefinedFunc = PROCEDURE (x, y: Float; ): BOOLEAN;
  FillFunc = PROCEDURE (READONLY x, y: ARRAY OF Float; );
  Point = RECORD x, y: Float;  END;
  PlotterFunc = PROCEDURE (x, y: Float; data: REFANY; ): Point;


TYPE
  DrawModeSet = SET OF DrawMode;
  OptionSet = SET OF Option;
  ParseSet = SET OF Parse;
TYPE
  AxesScaling = {none, independent, equal, square};
  Tile = {box, ticks, axes, gridMajor, gridMinor, xTicksLog, yTicksLog};
  TileSet = SET OF Tile;

TYPE
  DirTile = {axis, lowerBorder, upperBorder, fixedPointLabel, gridMajor,
             gridMinor, ticksOutward, logarithmic, labelMajorUnconv,
             labelMajorConv, ticksMajor, ticksMinor};
  DirTileSet = SET OF DirTile;


TYPE
  LineStyle = {none, continuous, shortDash, longDash, longDashShortGap,
               dotDash, complex0, complex1, complex2};


CONST
  drawLinex                = DrawModeSet{DrawMode.linex};
  drawLiney                = DrawModeSet{DrawMode.liney};
  drawLinexy               = DrawModeSet{DrawMode.linex, DrawMode.liney};
  drawMagColor             = DrawModeSet{DrawMode.magColor};
  drawBaseCont             = DrawModeSet{DrawMode.baseCont};
  drawTopCont              = DrawModeSet{DrawMode.topCont};
  drawSurfCont             = DrawModeSet{DrawMode.surfCont};
  drawSides                = DrawModeSet{DrawMode.sides};
  drawFaceted              = DrawModeSet{DrawMode.faceted};
  drawMesh                 = DrawModeSet{DrawMode.mesh};
  optEnabled               = OptionSet{Option.enabled};
  optArg                   = OptionSet{Option.arg};
  optNodelete              = OptionSet{Option.nodelete};
  optInvisible             = OptionSet{Option.invisible};
  optDisabled              = OptionSet{Option.disabled};
  optFunc                  = OptionSet{Option.func};
  optBool                  = OptionSet{Option.bool};
  optInt                   = OptionSet{Option.int};
  optFloat                 = OptionSet{Option.float};
  optString                = OptionSet{Option.string};
  parsePartial             = ParseSet{};
  parseFull                = ParseSet{Parse.full};
  parseQuiet               = ParseSet{Parse.quiet};
  parseNodelete            = ParseSet{Parse.nodelete};
  parseShowall             = ParseSet{Parse.showall};
  parseOverride            = ParseSet{Parse.override};
  parseNoprogram           = ParseSet{Parse.noprogram};
  parseNodash              = ParseSet{Parse.nodash};
  parseSkip                = ParseSet{Parse.skip};
  maxKey        : CARDINAL = 16;
  maxWindows    : CARDINAL = 64;
(* c_pl_setcontlabelformat: "Set the format of the contour labels." *)
PROCEDURE SetContLabelFormat (lexp, sigdig: INTEGER; );

(* c_pl_setcontlabelparam: "Set offset and spacing of contour labels." *)
PROCEDURE SetContLabelParam (offset, size, spacing: Float; active: INTEGER; );

(* c_pladv: "Advance to subpage \"page\", or to the next one if \"page\" =
   0." *)
PROCEDURE Advance (page: INTEGER; );

(* c_plaxes: "This functions similarly to plbox() except that the origin of
   the axes is placed at the user-specified point (x0, y0)." *)
PROCEDURE DrawAxes (x0, y0: Float;
                    xopt  : DirTileSet;
                    xtick : Float;
                    nxsub : INTEGER;
                    yopt  : DirTileSet;
                    ytick : Float;
                    nysub : INTEGER;    );

(* c_plbin: "Plot a histogram using x to store data values and y to store
   frequencies." *)
PROCEDURE PlotBins (READONLY x, y: FloatVector; center: INTEGER; );

(* c_plbop: "Start new page.  Should only be used with pleop()." *)
PROCEDURE StartPage ();

(* c_plbox: "Draw a box around the current viewport." *)
PROCEDURE DrawBox (xopt : DirTileSet;
                   xtick: Float;
                   nxsub: CARDINAL;
                   yopt : DirTileSet;
                   ytick: Float;
                   nysub: CARDINAL;   );

(* c_plbox3: "This is the 3-d analogue of plbox()." *)
PROCEDURE DrawBox3D (xopt  : DirTileSet;
                     xlabel: TEXT;
                     xtick : Float;
                     nsubx : CARDINAL;
                     yopt  : DirTileSet;
                     ylabel: TEXT;
                     ytick : Float;
                     nsuby : CARDINAL;
                     zopt  : DirTileSet;
                     zlabel: TEXT;
                     ztick : Float;
                     nsubz : CARDINAL;   );

(* plPLFLTMatrix: "Calculate world coordinates and subpage from relative
   device coordinates." *)

TYPE
  CalcWorldResult = RECORD
                      wx, wy: Float;
                      window: INTEGER;
                    END;
PROCEDURE CalcWorld (rx, ry: Float; ): CalcWorldResult;

(* c_plclear: "Clear current subpage." *)
PROCEDURE Clear ();

(* c_plcol0: "Set color, map 0.  Argument is integer between 0 and 15." *)
PROCEDURE SetFGColorDiscr (icol0: INTEGER; );

(* c_plcol1: "Set color, map 1.  Argument is a float between 0.  and 1." *)
PROCEDURE SetFGColorCont (col1: Float; );

(* c_plcont: "Draw a contour plot." *)
PROCEDURE PlotContour (READONLY z             : FloatMatrix;
                                kx, lx, ky, ly: INTEGER;
                       READONLY x             : FloatVector;
                                plotter       : PlotterFunc;
                                plotterData   : REFANY;      );

(* c_plcpstrm: "Copy state parameters from the reference stream to the
   current stream." *)
PROCEDURE CopyStateFrom (iplsr, flags: INTEGER; );

(* c_plend: "End a plotting session for all open streams." *)
PROCEDURE ExitAll ();

(* c_plend1: "End a plotting session for the current stream only." *)
PROCEDURE Exit ();

(* c_plenv: "Simple interface for defining viewport and window." *)
PROCEDURE SetEnvironment (xmin, xmax, ymin, ymax: Float;
                          just: AxesScaling := AxesScaling.independent;
                          axis: TileSet := TileSet{Tile.box, Tile.ticks}; );

(* c_pleop: "End current page.  Should only be used with plbop()." *)
PROCEDURE StopPage ();

(* c_plerrx: "Plot horizontal error bars (xmin(i),y(i)) to
   (xmax(i),y(i))." *)
PROCEDURE PlotErrorX (READONLY xmin, xmax, y: FloatVector; );

(* c_plerry: "Plot vertical error bars (x,ymin(i)) to (x(i),ymax(i))." *)
PROCEDURE PlotErrorY (READONLY x, ymin, ymax: FloatVector; );

(* c_plfamadv: "Advance to the next family file on the next new page." *)
PROCEDURE AdvanceFamily ();

(* c_plfill: "Pattern fills the polygon bounded by the input points." *)
PROCEDURE FillPolygon (READONLY x, y: FloatVector; );

(* c_plfill3: "Pattern fills the 3d polygon bounded by the input
   points." *)
PROCEDURE FillPolygon3D (READONLY x, y, z: FloatVector; );

(* c_plflush: "Flush the output stream.  Use sparingly, if at all." *)
PROCEDURE Flush ();

(* c_plfont: "Set the global font flag to 'ifont'." *)
PROCEDURE SetFont (ifont: INTEGER; );

(* c_plfontld: "Load specified font set." *)
PROCEDURE LoadFont (fnt: INTEGER; );

(* c_plgchr: "Get character default height and current (scaled) height." *)

TYPE GetCharacterHeightResult = RECORD def, ht: Float;  END;
PROCEDURE GetCharacterHeight (): GetCharacterHeightResult;

(* c_plgcol0: "Get 8 bit RGB values for given color from color map 0." *)

TYPE GetFGColorDiscrRGBResult = RECORD r, g, b: INTEGER;  END;
PROCEDURE GetFGColorDiscrRGB (icol0: INTEGER; ): GetFGColorDiscrRGBResult;

(* c_plgcolbg: "Get 8-bit RGB background color." *)

TYPE GetBGColorDiscrRGBResult = RECORD r, g, b: INTEGER;  END;
PROCEDURE GetBGColorDiscrRGB (): GetBGColorDiscrRGBResult;

(* c_plgcompression: "Get the current compression setting." *)
PROCEDURE GetCompression (): INTEGER;

(* c_plgdev: "Get the current device (keyword) name." *)
(* c_plgdidev: "Retrieve current window into device space." *)

TYPE GetWindowDeviceResult = RECORD mar, aspect, jx, jy: Float;  END;
PROCEDURE GetWindowDevice (): GetWindowDeviceResult;

(* c_plgdiori: "Get plot orientation." *)
PROCEDURE GetOrientation (): Float;

(* c_plgdiplt: "Retrieve current window into plot space." *)

TYPE GetWindowPlotResult = RECORD xmin, ymin, xmax, ymax: Float;  END;
PROCEDURE GetWindowPlot (): GetWindowPlotResult;

(* c_plgfam: "Get family file parameters." *)

TYPE GetFamilyFileResult = RECORD fam, num, bmax: INTEGER;  END;
PROCEDURE GetFamilyFile (): GetFamilyFileResult;

(* c_plgfnam: "Get the (current) output file name." *)
(* c_plglevel: "Get the (current) run level." *)
PROCEDURE GetRunLevel (): INTEGER;

(* c_plgpage: "Get output device parameters." *)

TYPE
  GetOutputDeviceParamResult = RECORD
                                 xp, yp                  : Float;
                                 xleng, yleng, xoff, yoff: INTEGER;
                               END;
PROCEDURE GetOutputDeviceParam (): GetOutputDeviceParamResult;

(* c_plgra: "Switch to graphics screen." *)
PROCEDURE ShowGraphicScreen ();

(* c_plgspa: "Get subpage boundaries in absolute coordinates." *)

TYPE GetBoundariesResult = RECORD xmin, xmax, ymin, ymax: Float;  END;
PROCEDURE GetBoundaries (): GetBoundariesResult;

(* c_plgstrm: "Get current stream number." *)
PROCEDURE GetStream (): INTEGER;

(* c_plgver: "Get current library version number." *)
(* c_plgvpd: "Get viewport boundaries in normalized device coordinates." *)

TYPE GetVPBoundDevResult = RECORD xmin, xmax, ymin, ymax: Float;  END;
PROCEDURE GetVPBoundDev (): GetVPBoundDevResult;

(* c_plgvpw: "Get viewport boundaries in world coordinates." *)

TYPE GetVPBoundWorldResult = RECORD xmin, xmax, ymin, ymax: Float;  END;
PROCEDURE GetVPBoundWorld (): GetVPBoundWorldResult;

(* c_plgxax: "Get x axis labeling parameters." *)

TYPE GetXLabelParamResult = RECORD digmax, digits: INTEGER;  END;
PROCEDURE GetXLabelParam (): GetXLabelParamResult;

(* c_plgyax: "Get y axis labeling parameters." *)

TYPE GetYLabelParamResult = RECORD digmax, digits: INTEGER;  END;
PROCEDURE GetYLabelParam (): GetYLabelParamResult;

(* c_plgzax: "Get z axis labeling parameters." *)

TYPE GetZLabelParamResult = RECORD digmax, digits: INTEGER;  END;
PROCEDURE GetZLabelParam (): GetZLabelParamResult;

(* c_plhist: "Draw histogram." *)
PROCEDURE PlotHistogram (READONLY x             : FloatVector;
                                  datmin, datmax: Float;
                                  nbin          : INTEGER;
                                  oldwin        : INTEGER       := 0; );

(* c_plhls: "Set current color (map 0) by hue, lightness, and
   saturation." *)
PROCEDURE SetColorHLS (h, l, s: Float; );

(* c_plinit: "Initialize PLplot, using preset or default options." *)
PROCEDURE Init ();

(* c_pljoin: "Draw a line segment from (x1, y1) to (x2, y2)." *)
PROCEDURE PlotLineSegment (x1, y1, x2, y2: Float; );

(* c_pllab: "Label graphs." *)
PROCEDURE SetLabels (xlabel, ylabel, tlabel: TEXT; );

(* c_pllightsource: "Set position of the light source." *)
PROCEDURE SetLightPos (x, y, z: Float; );

(* c_plline: "Draw line segments connecting a series of points." *)
PROCEDURE PlotLines (READONLY x, y: FloatVector; );

(* c_plline3: "Draw a line in 3 space." *)
PROCEDURE PlotLines3D (READONLY x, y, z: FloatVector; );

(* c_pllsty: "Set line style." *)
PROCEDURE SetLineStyle (lin: [LineStyle.continuous .. LAST(LineStyle)]; );

(* c_plmesh: "Plot a 3-d mesh representation of z[x][y]." *)
PROCEDURE PlotMesh (READONLY x, y: FloatVector;
                    READONLY z   : FloatMatrix;
                             opt : INTEGER;     );

(* c_plmeshc: "Plot a 3-d contoured mesh representation of the function
   z[x][y]." *)
PROCEDURE PlotMeshColored (READONLY x, y  : FloatVector;
                           READONLY z     : FloatMatrix;
                                    opt   : INTEGER;
                           READONLY clevel: FloatVector; );

(* c_plmkstrm: "Create a new stream and makes it the default." *)
PROCEDURE CreateStream (): INTEGER;

(* c_plmtex: "Print \"text\" at specified position relative to
   viewport." *)
PROCEDURE PrintTextVP (side: TEXT; disp, pos, just: Float; text: TEXT; );

(* c_plot3d: "Plot a 3-d representation of the function z[x][y]." *)
PROCEDURE Plot3D (READONLY x, y     : FloatVector;
                  READONLY z        : FloatMatrix;
                           opt, side: INTEGER;     );

(* c_plot3dc: "Plot a 3-d contoured representation of the function
   z[x][y]." *)
PROCEDURE Plot3DC (READONLY x, y  : FloatVector;
                   READONLY z     : FloatMatrix;
                            opt   : INTEGER;
                   READONLY clevel: FloatVector; );

(* c_plsurf3d: "Plot a 3-d contoured surface representation of the function
   z[x][y]." *)
PROCEDURE Surface3D (READONLY x, y  : FloatVector;
                     READONLY z     : FloatMatrix;
                              opt   : INTEGER;
                     READONLY clevel: FloatVector; );

(* c_plpat: "Set fill pattern directly." *)
PROCEDURE SetFillPattern (READONLY inc, del: ARRAY OF INTEGER; );

(* c_plpoin: "Plot array y against x for n points using ASCII code
   \"code\"." *)
PROCEDURE PlotPoints (READONLY x, y: FloatVector; code: INTEGER; );

(* c_plpoin3: "Draw a series of points in 3 space." *)
PROCEDURE PlotPoints3D (READONLY x, y, z: FloatVector; code: INTEGER; );

(* c_plpoly3: "Draw a polygon in 3 space.  " *)
PROCEDURE PlotPolygon3D (READONLY x, y, z: FloatVector;
                         READONLY draw   : ARRAY OF INTEGER;
                                  flag   : INTEGER;          );

(* c_plprec: "Set the floating point precision (in number of places) in
   numeric labels." *)
PROCEDURE SetLabelPrecision (setp, prec: INTEGER; );

(* c_plpsty: "Set fill pattern, using one of the predefined patterns." *)
PROCEDURE SetFillStyle (patt: INTEGER; );

(* c_plptex: "Print \"text\" at world coordinate (x,y)." *)
PROCEDURE PrintTextWorld (x, y, dx, dy, just: Float; text: TEXT; );

(* c_plreplot: "Replay contents of plot buffer to current device/file." *)
PROCEDURE Replot ();

(* c_plschr: "Set character height." *)
PROCEDURE SetCharacterHeight (def, scale: Float; );

(* c_plscmap0: "Set color map 0 colors by 8 bit RGB values." *)
PROCEDURE SetColorMapDiscr (READONLY r, g, b: ARRAY OF INTEGER; );

(* c_plscmap0n: "Set number of colors in cmap 0." *)
PROCEDURE SetColorMapDiscrSize (ncol0: INTEGER; );

(* c_plscmap1: "Set color map 1 colors by 8 bit RGB values." *)
PROCEDURE SetColorMapCont (READONLY r, g, b: ARRAY OF INTEGER; );

(* c_plscmap1l: "Set color map 1 colors using a piece-wise linear
   relationship between intensity [0,1] (cmap 1 index) and position in HLS
   or RGB color space." *)
PROCEDURE SetColorCont (         itype                      : INTEGER;
                        READONLY pos, coord1, coord2, coord3: FloatVector;
                        READONLY rev: ARRAY OF INTEGER; );

(* c_plscmap1n: "Set number of colors in cmap 1." *)
PROCEDURE SetColorMapContSize (ncol1: INTEGER; );

(* c_plscol0: "Set 8-bit RGB value in cmap 0." *)
PROCEDURE SetColorRGB (icol0, r, g, b: INTEGER; );

(* c_plscolbg: "Set the background color using 8-bit RGB value." *)
PROCEDURE SetBGColor (r, g, b: INTEGER; );

(* c_plscolor: "Globally turn color output on/off." *)
PROCEDURE ToggleColor (color: BOOLEAN; );

(* c_plscompression: "Set the compression level." *)
PROCEDURE SetCompression (compression: INTEGER; );

(* c_plsdev: "Set the device (keyword) name." *)
PROCEDURE SetDevice (devname: TEXT; );

(* c_plsdidev: "Set window into device space using margin, aspect ratio,
   and justification." *)
PROCEDURE SetWindowDevice (mar, aspect, jx, jy: Float; );

(* c_plsdimap: "Set up transformation from metafile coordinates." *)
PROCEDURE LoadTransformation (dimxmin, dimxmax, dimymin, dimymax: INTEGER;
                              dimxpmm, dimypmm                  : Float;   );

(* c_plsdiori: "Set plot orientation, specifying rotation in units of
   pi/2." *)
PROCEDURE SetOrientation (rot: Float; );

(* c_plsdiplt: "Set window into plot space." *)
PROCEDURE SetWindowPlot (xmin, ymin, xmax, ymax: Float; );

(* c_plsdiplz: "Set window into plot space incrementally (zoom)." *)
PROCEDURE ZoomWindow (xmin, ymin, xmax, ymax: Float; );

(* c_plsesc: "Set the escape character for text strings." *)
PROCEDURE SetEscapeChar (esc: CHAR; );

(* c_plsetopt: "Process input strings, treating them as an option and
   argument pair.  The first is for the external API, the second the work
   routine declared here for backward compatibilty." *)
PROCEDURE SetOption (opt, optarg: TEXT; ): INTEGER;

(* c_plsfam: "Set family file parameters." *)
PROCEDURE SetFamilyFile (fam, num, bmax: INTEGER; );

(* c_plsfnam: "Set the output file name." *)
PROCEDURE SetFileName (fnam: TEXT; );

(* c_plshades: "Shade regions with continuous range of colours." *)
PROCEDURE PlotShades (READONLY a : FloatMatrix;
                               df: LongRealPLPlotRaw.DefinedFunc;
                               xmin, xmax, ymin, ymax: Float;
                      READONLY x                     : FloatVector;
                      fill_width, cont_color, cont_width: INTEGER;
                      ff         : LongRealPLPlotRaw.FillFunc;
                      rectangular: BOOLEAN;
                      plotter    : PlotterFunc;
                      plotterData: REFANY;                     );

(* c_plshade: "Shade region with discrete colour, pattern fill." *)
PROCEDURE PlotShade (READONLY a : FloatMatrix;
                              df: LongRealPLPlotRaw.DefinedFunc;
                     left, right, bottom, top, shade_min, shade_max: Float;
                     sh_cmap : INTEGER;
                     sh_color: Float;
                     sh_width, min_color, min_width, max_color, max_width: INTEGER;
                     ff         : LongRealPLPlotRaw.FillFunc;
                     rectangular: BOOLEAN;
                     plotter    : PlotterFunc;
                     plotterData: REFANY;                     );

(* c_plsmaj: "Set up lengths of major tick marks." *)
PROCEDURE SetMajorTickSize (def, scale: Float; );

(* c_plsmin: "Set up lengths of minor tick marks." *)
PROCEDURE SetMinorTickSize (def, scale: Float; );

(* c_plsori: "Set orientation.  Must be done before calling plinit." *)
PROCEDURE SetGlobalOrientation (ori: INTEGER; );

(* c_plspage: "Set output device parameters.  Usually ignored by the
   driver." *)
PROCEDURE SetOutputDeviceParam (xp, yp                  : Float;
                                xleng, yleng, xoff, yoff: INTEGER; );

(* c_plspause: "Set the pause (on end-of-page) status." *)
PROCEDURE SetPause (pause: INTEGER; );

(* c_plsstrm: "Set stream number." *)
PROCEDURE SetStream (strm: INTEGER; );

(* c_plssub: "Set the number of subwindows in x and y." *)
PROCEDURE SetSubWindows (nx, ny: INTEGER; );

(* c_plssym: "Set symbol height." *)
PROCEDURE SetSymbolHeight (def, scale: Float; );

(* c_plstar: "Initialize PLplot, passing in the windows/page settings." *)
PROCEDURE Start (nx, ny: INTEGER; );

(* c_plstart: "Initialize PLplot, passing the device name and windows/page
   settings." *)
PROCEDURE StartDev (devname: TEXT; nx, ny: INTEGER; );

(* c_plstripa: "Add a point to a stripchart.  " *)
PROCEDURE AddStripchartPoint (id, pen: INTEGER; x, y: Float; );

(* c_plstripc: "Create 1d stripchart." *)
PROCEDURE CreateStripchart (xspec, yspec: TEXT;
                            xmin, xmax, xjump, ymin, ymax, xlpos, ylpos: Float;
                            y_ascl, acc, colbox, collab: INTEGER;
                            READONLY colline, styline: ARRAY OF INTEGER;
                            VAR legline: ARRAY [0 .. 3] OF TEXT;
                            labx, laby, labtop: TEXT; ): INTEGER;

(* c_plstripd: "Deletes and releases memory used by a stripchart.  " *)
PROCEDURE DeleteStripchart (id: INTEGER; );

(* c_plstyl: "Set up a new line style." *)
PROCEDURE SetNewLineStyle (READONLY mark, space: ARRAY OF INTEGER; );

(* c_plsvpa: "Set the edges of the viewport to the specified absolute
   coordinates." *)
PROCEDURE SetVPAbsolute (xmin, xmax, ymin, ymax: Float; );

(* c_plsxax: "Set x axis labeling parameters." *)
PROCEDURE SetXLabelParam (digmax, digits: INTEGER; );

(* c_plsyax: "Set y axis labeling parameters." *)
PROCEDURE SetYLabelParam (digmax, digits: INTEGER; );

(* c_plsym: "Plot array y against x for n points using Hershey symbol
   \"code\"" *)
PROCEDURE PlotSymbols (READONLY x, y: FloatVector; code: INTEGER; );

(* c_plszax: "Set z axis labeling parameters" *)
PROCEDURE SetZLabelParam (digmax, digits: INTEGER; );

(* c_pltext: "Switch to text screen." *)
PROCEDURE ShowTextScreen ();

(* c_plvasp: "Sets the edges of the viewport with the given aspect ratio,
   leaving room for labels." *)
PROCEDURE SetVPAspect (aspect: Float; );

(* c_plvpas: "Create the largest viewport of the specified aspect ratio
   that fits within the specified normalized subpage coordinates." *)
PROCEDURE CreateVPAspect (xmin, xmax, ymin, ymax, aspect: Float; );

(* c_plvpor: "Create a viewport with the specified normalized subpage
   coordinates." *)
PROCEDURE CreateVP (xmin, xmax, ymin, ymax: Float; );

(* c_plvsta: "Define a \"standard\" viewport with seven character heights
   for the left margin and four character heights everywhere else." *)
PROCEDURE SetStandardVP ();

(* c_plw3d: "Set up a window for three-dimensional plotting." *)
PROCEDURE Init3DWindow (basex, basey, height, xmin0, xmax0, ymin0, ymax0,
                          zmin0, zmax0, alt, az: Float; );

(* c_plwid: "Set pen width." *)
PROCEDURE SetPenWidth (width: INTEGER; );

(* c_plwind: "Set up world coordinates of the viewport boundaries (2d
   plots)." *)
PROCEDURE SetWindow (xmin, xmax, ymin, ymax: Float; );

(* c_plxormod: "Set xor mode; mode = 1-enter, 0-leave, status = 0 if not
   interactive device." *)
PROCEDURE SetXORMode (mode: BOOLEAN; ): BOOLEAN;

PROCEDURE PlotImage (READONLY z: FloatMatrix;
                     xmin, xmax, ymin, ymax, zmin, zmax, dxmin, dxmax,
                       dymin, dymax: Float; );


TYPE Plotter0Result = RECORD x, y: Float;  END;
PROCEDURE Plotter0 (x, y: Float; pltr_data: REFANY; ): Plotter0Result;


TYPE Plotter1Result = RECORD x, y: Float;  END;
PROCEDURE Plotter1 (x, y: Float; pltr_data: REFANY; ): Plotter1Result;


TYPE Plotter2Result = RECORD x, y: Float;  END;
PROCEDURE Plotter2 (x, y: Float; pltr_data: REFANY; ): Plotter2Result;


TYPE Plotter2PResult = RECORD x, y: Float;  END;
PROCEDURE Plotter2P (x, y: Float; pltr_data: REFANY; ): Plotter2PResult;

PROCEDURE F2Eval2 (ix, iy: INTEGER; plf2eval_data: REFANY; ): LONGREAL;

PROCEDURE F2Eval (ix, iy: INTEGER; plf2eval_data: REFANY; ): LONGREAL;

PROCEDURE F2EvalR (ix, iy: INTEGER; plf2eval_data: REFANY; ): LONGREAL;

PROCEDURE ClearOpts ();

PROCEDURE ResetOpts ();

PROCEDURE SetUsage (program_string, usage_string: TEXT; );

PROCEDURE OptUsage ();

PROCEDURE SetFile (file: Cstdio.FILE_star; );


TYPE HLS_RGBResult = RECORD r, g, b: Float;  END;
PROCEDURE HLS_RGB (h, l, s: Float; ): HLS_RGBResult;


TYPE RGB_HLSResult = RECORD h, l, s: Float;  END;
PROCEDURE RGB_HLS (r, g, b: Float; ): RGB_HLSResult;


END LongRealPLPlot.
