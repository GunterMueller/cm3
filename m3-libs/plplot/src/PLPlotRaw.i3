(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org/).
 * Version 1.3.23
 *
 * Do not make changes to this file unless you know what you are doing --
 * modify the SWIG interface file instead.
 *******************************************************************************)

INTERFACE PLPlotRaw;

IMPORT Ctypes AS C;


TYPE
  PlotterFunc = PROCEDURE ();
  PLINT = C.int;
  PLFLT = C.double;


<* EXTERNAL c_pl_setcontlabelformat *>
PROCEDURE SetContLabelFormat (lexp, sigdig: C.int; );

<* EXTERNAL c_pl_setcontlabelparam *>
PROCEDURE SetContLabelParam (offset, size, spacing: C.double;
                             active               : C.int;    );

<* EXTERNAL c_pladv *>
PROCEDURE Advance (page: C.int; );

<* EXTERNAL c_plaxes *>
PROCEDURE DrawAxes (         x0, y0: C.double;
                    READONLY xopt  : (*ARRAY OF*) CHAR;
                             xtick : C.double;
                             nxsub : C.int;
                    READONLY yopt  : (*ARRAY OF*) CHAR;
                             ytick : C.double;
                             nysub : C.int;             );

<* EXTERNAL c_plbin *>
PROCEDURE PlotBins (         n     : C.int;
                    READONLY x, y  : (*ARRAY OF*) C.double;
                             center: C.int;                 );

<* EXTERNAL c_plbop *>
PROCEDURE StartPage ();

<* EXTERNAL c_plbox *>
PROCEDURE DrawBox (READONLY xopt : (*ARRAY OF*) CHAR;
                            xtick: C.double;
                            nxsub: C.int;
                   READONLY yopt : (*ARRAY OF*) CHAR;
                            ytick: C.double;
                            nysub: C.int;             );

<* EXTERNAL c_plbox3 *>
PROCEDURE DrawBox3D (READONLY xopt  : (*ARRAY OF*) CHAR;
                              xlabel: C.char_star;
                              xtick : C.double;
                              nsubx : C.int;
                     READONLY yopt  : (*ARRAY OF*) CHAR;
                              ylabel: C.char_star;
                              ytick : C.double;
                              nsuby : C.int;
                     READONLY zopt  : (*ARRAY OF*) CHAR;
                              zlabel: C.char_star;
                              ztick : C.double;
                              nsubz : C.int;             );

<* EXTERNAL c_plcalc_world *>
PROCEDURE CalcWorld (    rx, ry: C.double;
                     VAR wx, wy: C.double;
                     VAR window: C.int;    );

<* EXTERNAL c_plclear *>
PROCEDURE Clear ();

<* EXTERNAL c_plcol0 *>
PROCEDURE SetFGColorDiscr (icol0: C.int; );

<* EXTERNAL c_plcol1 *>
PROCEDURE SetFGColorCont (col1: C.double; );

<* EXTERNAL c_plcont *>
PROCEDURE PlotContour (READONLY z: (*ARRAY OF*) ADDRESS (*REF ARRAY OF
                                                           R.T*);
                       nx, ny, kx, lx, ky, ly: C.int;
                       READONLY x          : (*ARRAY OF*) C.double;
                                n          : C.int;
                                pltr       : PlotterFunc;
                                OBJECT_DATA: REFANY;                );

<* EXTERNAL c_plcpstrm *>
PROCEDURE CopyStateFrom (iplsr, flags: C.int; );

<* EXTERNAL c_plend *>
PROCEDURE ExitAll ();

<* EXTERNAL c_plend1 *>
PROCEDURE Exit ();

<* EXTERNAL c_plenv *>
PROCEDURE SetEnvironment (xmin, xmax, ymin, ymax: C.double;
                          just, axis            : C.int;    );

<* EXTERNAL c_pleop *>
PROCEDURE StopPage ();

<* EXTERNAL c_plerrx *>
PROCEDURE PlotErrorX (         n            : C.int;
                      READONLY xmin, xmax, y: (*ARRAY OF*) C.double; );

<* EXTERNAL c_plerry *>
PROCEDURE PlotErrorY (         n            : C.int;
                      READONLY x, ymin, ymax: (*ARRAY OF*) C.double; );

<* EXTERNAL c_plfamadv *>
PROCEDURE AdvanceFamily ();

<* EXTERNAL c_plfill *>
PROCEDURE FillPolygon (n: C.int; READONLY x, y: (*ARRAY OF*) C.double; );

<* EXTERNAL c_plfill3 *>
PROCEDURE FillPolygon3D (n: C.int; READONLY x, y, z: (*ARRAY OF*) C.double; );

<* EXTERNAL c_plflush *>
PROCEDURE Flush ();

<* EXTERNAL c_plfont *>
PROCEDURE SetFont (ifont: C.int; );

<* EXTERNAL c_plfontld *>
PROCEDURE LoadFont (fnt: C.int; );

<* EXTERNAL c_plgchr *>
PROCEDURE GetCharacterHeight (VAR def, ht: C.double; );

<* EXTERNAL c_plgcol0 *>
PROCEDURE GetFGColorDiscrRGB (icol0: C.int; VAR r, g, b: C.int; );

<* EXTERNAL c_plgcolbg *>
PROCEDURE GetBGColorDiscrRGB (VAR r, g, b: C.int; );

<* EXTERNAL c_plgcompression *>
PROCEDURE GetCompression (VAR compression: C.int; );

<* EXTERNAL c_plgdidev *>
PROCEDURE GetWindowDevice (VAR mar, aspect, jx, jy: C.double; );

<* EXTERNAL c_plgdiori *>
PROCEDURE GetOrientation (VAR rot: C.double; );

<* EXTERNAL c_plgdiplt *>
PROCEDURE GetWindowPlot (VAR xmin, ymin, xmax, ymax: C.double; );

<* EXTERNAL c_plgfam *>
PROCEDURE GetFamilyFile (VAR fam, num, bmax: C.int; );

<* EXTERNAL c_plglevel *>
PROCEDURE GetRunLevel (VAR level: C.int; );

<* EXTERNAL c_plgpage *>
PROCEDURE GetOutputDeviceParam (VAR xp, yp                  : C.double;
                                VAR xleng, yleng, xoff, yoff: C.int;    );

<* EXTERNAL c_plgra *>
PROCEDURE ShowGraphicScreen ();

<* EXTERNAL c_plgspa *>
PROCEDURE GetBoundaries (VAR xmin, xmax, ymin, ymax: C.double; );

<* EXTERNAL c_plgstrm *>
PROCEDURE GetStream (VAR strm: C.int; );

<* EXTERNAL c_plgvpd *>
PROCEDURE GetVPBoundDev (VAR xmin, xmax, ymin, ymax: C.double; );

<* EXTERNAL c_plgvpw *>
PROCEDURE GetVPBoundWorld (VAR xmin, xmax, ymin, ymax: C.double; );

<* EXTERNAL c_plgxax *>
PROCEDURE GetXLabelParam (VAR digmax, digits: C.int; );

<* EXTERNAL c_plgyax *>
PROCEDURE GetYLabelParam (VAR digmax, digits: C.int; );

<* EXTERNAL c_plgzax *>
PROCEDURE GetZLabelParam (VAR digmax, digits: C.int; );

<* EXTERNAL c_plhist *>
PROCEDURE PlotHistogram (         n             : C.int;
                         READONLY x             : (*ARRAY OF*) C.double;
                                  datmin, datmax: C.double;
                                  nbin, oldwin  : C.int;                 );

<* EXTERNAL c_plhls *>
PROCEDURE SetColorHLS (h, l, s: C.double; );

<* EXTERNAL c_plinit *>
PROCEDURE Init ();

<* EXTERNAL c_pljoin *>
PROCEDURE PlotLineSegment (x1, y1, x2, y2: C.double; );

<* EXTERNAL c_pllab *>
PROCEDURE SetLabels (xlabel, ylabel, tlabel: C.char_star; );

<* EXTERNAL c_pllightsource *>
PROCEDURE SetLightPos (x, y, z: C.double; );

<* EXTERNAL c_plline *>
PROCEDURE PlotLines (n: C.int; READONLY x, y: (*ARRAY OF*) C.double; );

<* EXTERNAL c_plline3 *>
PROCEDURE PlotLines3D (n: C.int; READONLY x, y, z: (*ARRAY OF*) C.double; );

<* EXTERNAL c_pllsty *>
PROCEDURE SetLineStyle (lin: C.int; );

<* EXTERNAL c_plmesh *>
PROCEDURE PlotMesh (READONLY x, y: (*ARRAY OF*) C.double;
                    READONLY z: (*ARRAY OF*) ADDRESS (*REF ARRAY OF R.T*);
                    nx, ny, opt: C.int; );

<* EXTERNAL c_plmeshc *>
PROCEDURE PlotMeshColored (READONLY x, y: (*ARRAY OF*) C.double;
                           READONLY z: (*ARRAY OF*) ADDRESS (*REF ARRAY OF
                                                               R.T*);
                                    nx, ny, opt: C.int;
                           READONLY clevel     : (*ARRAY OF*) C.double;
                                    n          : C.int;                 );

<* EXTERNAL c_plmkstrm *>
PROCEDURE CreateStream (VAR strm: C.int; );

<* EXTERNAL c_plmtex *>
PROCEDURE PrintTextVP (side           : C.char_star;
                       disp, pos, just: C.double;
                       text           : C.char_star; );

<* EXTERNAL c_plot3d *>
PROCEDURE Plot3D (READONLY x, y: (*ARRAY OF*) C.double;
                  READONLY z: (*ARRAY OF*) ADDRESS (*REF ARRAY OF R.T*);
                  nx, ny, opt, side: C.int; );

<* EXTERNAL c_plot3dc *>
PROCEDURE Plot3DC (READONLY x, y: (*ARRAY OF*) C.double;
                   READONLY z: (*ARRAY OF*) ADDRESS (*REF ARRAY OF R.T*);
                            nx, ny, opt: C.int;
                   READONLY clevel     : (*ARRAY OF*) C.double;
                            n          : C.int;                 );

<* EXTERNAL c_plsurf3d *>
PROCEDURE Surface3D (READONLY x, y: (*ARRAY OF*) C.double;
                     READONLY z: (*ARRAY OF*) ADDRESS (*REF ARRAY OF R.T*);
                              nx, ny, opt: C.int;
                     READONLY clevel     : (*ARRAY OF*) C.double;
                              n          : C.int;                 );

<* EXTERNAL c_plpat *>
PROCEDURE SetFillPattern (n: C.int; READONLY inc, del: C.int; );

<* EXTERNAL c_plpoin *>
PROCEDURE PlotPoints (         n   : C.int;
                      READONLY x, y: (*ARRAY OF*) C.double;
                               code: C.int;                 );

<* EXTERNAL c_plpoin3 *>
PROCEDURE PlotPoints3D (         n      : C.int;
                        READONLY x, y, z: (*ARRAY OF*) C.double;
                                 code   : C.int;                 );

<* EXTERNAL c_plpoly3 *>
PROCEDURE PlotPolygon3D (         n      : C.int;
                         READONLY x, y, z: (*ARRAY OF*) C.double;
                         READONLY draw   : C.int;
                                  flag   : C.int;                 );

<* EXTERNAL c_plprec *>
PROCEDURE SetLabelPrecision (setp, prec: C.int; );

<* EXTERNAL c_plpsty *>
PROCEDURE SetFillStyle (patt: C.int; );

<* EXTERNAL c_plptex *>
PROCEDURE PrintTextWorld (x, y, dx, dy, just: C.double; text: C.char_star; );

<* EXTERNAL c_plreplot *>
PROCEDURE Replot ();

<* EXTERNAL c_plschr *>
PROCEDURE SetCharacterHeight (def, scale: C.double; );

<* EXTERNAL c_plscmap0 *>
PROCEDURE SetColorMapDiscr (READONLY r, g, b: C.int; n: C.int; );

<* EXTERNAL c_plscmap0n *>
PROCEDURE SetColorMapDiscrSize (ncol0: C.int; );

<* EXTERNAL c_plscmap1 *>
PROCEDURE SetColorMapCont (READONLY r, g, b: C.int; n: C.int; );

<* EXTERNAL c_plscmap1l *>
PROCEDURE SetColorCont (itype, n: C.int;
                        READONLY pos, coord1, coord2, coord3: (*ARRAY OF*) C.double;
                        READONLY rev: C.int; );

<* EXTERNAL c_plscmap1n *>
PROCEDURE SetColorMapContSize (ncol1: C.int; );

<* EXTERNAL c_plscol0 *>
PROCEDURE SetColorRGB (icol0, r, g, b: C.int; );

<* EXTERNAL c_plscolbg *>
PROCEDURE SetBGColor (r, g, b: C.int; );

<* EXTERNAL c_plscolor *>
PROCEDURE ToggleColor (color: C.int; );

<* EXTERNAL c_plscompression *>
PROCEDURE SetCompression (compression: C.int; );

<* EXTERNAL c_plsdev *>
PROCEDURE SetDevice (devname: C.char_star; );

<* EXTERNAL c_plsdidev *>
PROCEDURE SetWindowDevice (mar, aspect, jx, jy: C.double; );

<* EXTERNAL c_plsdimap *>
PROCEDURE LoadTransformation (dimxmin, dimxmax, dimymin, dimymax: C.int;
                              dimxpmm, dimypmm: C.double; );

<* EXTERNAL c_plsdiori *>
PROCEDURE SetOrientation (rot: C.double; );

<* EXTERNAL c_plsdiplt *>
PROCEDURE SetWindowPlot (xmin, ymin, xmax, ymax: C.double; );

<* EXTERNAL c_plsdiplz *>
PROCEDURE ZoomWindow (xmin, ymin, xmax, ymax: C.double; );

<* EXTERNAL c_plsesc *>
PROCEDURE SetEscapeChar (esc: C.char; );

<* EXTERNAL c_plsetopt *>
PROCEDURE SetOption (opt, optarg: C.char_star; ): C.int;

<* EXTERNAL c_plsfam *>
PROCEDURE SetFamilyFile (fam, num, bmax: C.int; );

<* EXTERNAL c_plsfnam *>
PROCEDURE SetFileName (fnam: C.char_star; );

<* EXTERNAL c_plshades *>
PROCEDURE ShadeRegions (READONLY a: (*ARRAY OF*) ADDRESS (*REF ARRAY OF
                                                            R.T*);
                        nx, ny                : C.int;
                        df                    : PlotterFunc;
                        xmin, xmax, ymin, ymax: C.double;
                        READONLY x: (*ARRAY OF*) C.double;
                        n, fill_width, cont_color, cont_width: C.int;
                        ff         : PlotterFunc;
                        rectangular: C.int;
                        pltr       : PlotterFunc;
                        OBJECT_DATA: REFANY;      );

<* EXTERNAL c_plshade *>
PROCEDURE ShadeRegion (READONLY a: (*ARRAY OF*) ADDRESS (*REF ARRAY OF
                                                           R.T*);
                       nx, ny: C.int;
                       df    : PlotterFunc;
                       left, right, bottom, top, shade_min, shade_max: C.double;
                       sh_cmap : C.int;
                       sh_color: C.double;
                       sh_width, min_color, min_width, max_color, max_width: C.int;
                       ff         : PlotterFunc;
                       rectangular: C.int;
                       pltr       : PlotterFunc;
                       OBJECT_DATA: REFANY;      );

<* EXTERNAL c_plsmaj *>
PROCEDURE SetMajorTickSize (def, scale: C.double; );

<* EXTERNAL c_plsmin *>
PROCEDURE SetMinorTickSize (def, scale: C.double; );

<* EXTERNAL c_plsori *>
PROCEDURE SetGlobalOrientation (ori: C.int; );

<* EXTERNAL c_plspage *>
PROCEDURE SetOutputDeviceParam (xp, yp                  : C.double;
                                xleng, yleng, xoff, yoff: C.int;    );

<* EXTERNAL c_plspause *>
PROCEDURE SetPause (pause: C.int; );

<* EXTERNAL c_plsstrm *>
PROCEDURE SetStream (strm: C.int; );

<* EXTERNAL c_plssub *>
PROCEDURE SetSubWindows (nx, ny: C.int; );

<* EXTERNAL c_plssym *>
PROCEDURE SetSymbolHeight (def, scale: C.double; );

<* EXTERNAL c_plstar *>
PROCEDURE Start (nx, ny: C.int; );

<* EXTERNAL c_plstart *>
PROCEDURE StartDev (devname: C.char_star; nx, ny: C.int; );

<* EXTERNAL c_plstripa *>
PROCEDURE AddStripchartPoint (id, pen: C.int; x, y: C.double; );

<* EXTERNAL c_plstripc *>
PROCEDURE CreateStripchart (VAR id          : C.int;
                                xspec, yspec: C.char_star;
                            xmin, xmax, xjump, ymin, ymax, xlpos, ylpos: C.double;
                                     y_ascl, acc, colbox, collab: C.int;
                            READONLY colline, styline           : C.int;
                            VAR legline: ARRAY [0 .. 3] OF C.char_star;
                            labx, laby, labtop: C.char_star; );

<* EXTERNAL c_plstripd *>
PROCEDURE DeleteStripchart (id: C.int; );

<* EXTERNAL c_plstyl *>
PROCEDURE SetNewLineStyle (n: C.int; READONLY mark, space: C.int; );

<* EXTERNAL c_plsvpa *>
PROCEDURE SetVPAbsolute (xmin, xmax, ymin, ymax: C.double; );

<* EXTERNAL c_plsxax *>
PROCEDURE SetXLabelParam (digmax, digits: C.int; );

<* EXTERNAL c_plsyax *>
PROCEDURE SetYLabelParam (digmax, digits: C.int; );

<* EXTERNAL c_plsym *>
PROCEDURE PlotSymbols (         n   : C.int;
                       READONLY x, y: (*ARRAY OF*) C.double;
                                code: C.int;                 );

<* EXTERNAL c_plszax *>
PROCEDURE SetZLabelParam (digmax, digits: C.int; );

<* EXTERNAL c_pltext *>
PROCEDURE ShowTextScreen ();

<* EXTERNAL c_plvasp *>
PROCEDURE SetVPAspect (aspect: C.double; );

<* EXTERNAL c_plvpas *>
PROCEDURE CreateVPAspect (xmin, xmax, ymin, ymax, aspect: C.double; );

<* EXTERNAL c_plvpor *>
PROCEDURE CreateVP (xmin, xmax, ymin, ymax: C.double; );

<* EXTERNAL c_plvsta *>
PROCEDURE SetStandardVP ();

<* EXTERNAL c_plw3d *>
PROCEDURE Init3DWindow (basex, basey, height, xmin0, xmax0, ymin0, ymax0,
                          zmin0, zmax0, alt, az: C.double; );

<* EXTERNAL c_plwid *>
PROCEDURE SetPenWidth (width: C.int; );

<* EXTERNAL c_plwind *>
PROCEDURE SetWindow (xmin, xmax, ymin, ymax: C.double; );

<* EXTERNAL c_plxormod *>
PROCEDURE SetXORMode (mode: C.int; VAR status: C.int; );

<* EXTERNAL plClearOpts *>
PROCEDURE ClearOpts ();

<* EXTERNAL plResetOpts *>
PROCEDURE ResetOpts ();

<* EXTERNAL plSetUsage *>
PROCEDURE SetUsage (program_string, usage_string: C.char_star; );

<* EXTERNAL plOptUsage *>
PROCEDURE OptUsage ();

END PLPlotRaw.
